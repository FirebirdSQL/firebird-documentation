import org.firebirdsql.documentation.docbook.DocbookFoPdf
import org.firebirdsql.documentation.docbook.DocbookHtml

plugins {
    id 'org.firebirdsql.documentation'
}

documentation {
    docRoot = file('src/docs')
    styleDir = file('src/docs/xsl')
    outputRoot = layout.buildDirectory.dir('docs')
}

task docbookHtml(type: DocbookHtml) {
    description = 'Generates multi-page docbook html output.'
    xdir = 'html'
    sourceFileName ='firebirddocs.xml'
    outputFilename = 'index.html'
    stylesheet = 'html.xsl'
    // TODO: Do this in the task instead?
    doFirst {
        copy {
            // TODO Common definition
            from imageSource.get()
            exclude '*.txt',
                    'firebird_logo_400x400.png'
            duplicatesStrategy = 'exclude'
            into docsOutput.get().dir('images')
        }
        copy {
            from docRoot.file('firebirddocs.css')
            into docsOutput.get()
        }
    }
}

task docbookMonoHtml(type: DocbookHtml) {
    description = 'Generates single-document docbook html output'
    xdir = 'monohtml'
    sourceFileName ='firebirddocs.xml'
    stylesheet = 'monohtml.xsl'
    // TODO: Do this in the task instead?
    doFirst {
        copy {
            // TODO Common definition
            from imageSource.get()
            exclude '*.txt',
                    'firebird_logo_400x400.png'
            duplicatesStrategy = 'exclude'
            into docsOutput.get().dir('images')
        }
        copy {
            from docRoot.file('firebirddocs.css')
            into docsOutput.get()
        }
    }
}

task docbookPdf(type: DocbookFoPdf) {
    setDescription('Generates PDF docbook output.')
    extension = 'fo'
    xdir = 'pdf'
    sourceFileName ='firebirddocs.xml'
    stylesheet = 'fo.xsl'
    // TODO: Do this in the task instead?
    doFirst {
        copy {
            // TODO Common definition
            from imageSource.get()
            exclude '*.txt',
                    'titleblackgill.gif',
                    'firebirdlogo.png',
                    'toc-*.png',
                    'top-*.png',
                    'prev-*.png',
                    'next-*.png'
            duplicatesStrategy = 'exclude'
            into docsOutput.get().dir('images')
        }
    }
    // TODO: Do this in the task instead?
//    doLast {
//        delete docsOutput.get().dir('images')
//    }
}
