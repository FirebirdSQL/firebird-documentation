import org.asciidoctor.gradle.jvm.AsciidoctorJExtension
import org.asciidoctor.gradle.jvm.pdf.AsciidoctorPdfThemesExtension
import org.firebirdsql.documentation.asciidoc.AsciidocToDocbook
import org.firebirdsql.documentation.asciidoc.FbAsciidocHtmlTask
import org.firebirdsql.documentation.asciidoc.FbAsciidocPdfTask
import org.firebirdsql.documentation.docbook.DocbookFo
import org.firebirdsql.documentation.docbook.DocbookHtml
import org.firebirdsql.documentation.fop.FoTask
import org.firebirdsql.documentation.generic.XsltTask

plugins {
    id 'org.firebirdsql.documentation'
    // Version controlled through buildSrc/build.gradle
    id 'org.asciidoctor.jvm.base'
    id 'org.asciidoctor.jvm.pdf' apply false
}

repositories {
    mavenCentral()
    jcenter()
}

extensions.create(AsciidoctorPdfThemesExtension.NAME, AsciidoctorPdfThemesExtension, project)
extensions.getByType(AsciidoctorJExtension).modules.pdf.use()

pdfThemes {
    local 'firebird', {
        themeDir = file('src/theme/firebird-pdf')
        themeName = 'firebird'
    }
}

docConfig {
    configRootDir.set(file('config'))
    docRoot.set(file('src/docs'))
    styleDir.set(file('src/docs/xsl'))
    outputRoot.set(layout.buildDirectory.dir('docs'))
    defaultBaseName.set('firebirddocs')
}

def asciidocHtml = tasks.register('asciidocHtml', FbAsciidocHtmlTask) {
    group 'Documentation'
    description 'Generate HTML documentation from asciidoc'
    baseDirFollowsSourceFile()
    attributes 'stylesdir': stylesDir, 'stylesheet': 'firebird.css',
            'docinfo': 'shared', 'docinfodir': stylesDir.file('docinfo')
    // TODO move definitions of images to copy to the task
    resources {
        from(stylesDir.file('docinfo')) {
            include 'images/**/*'
        }
    }
    doFirst {
        languages.each { lang ->
            resources lang, {
                from(sourceDirProperty.file(lang)) {
                    include 'images/**/*'
                }
            }
        }
    }
}

def asciidocPdf = tasks.register('asciidocPdf', FbAsciidocPdfTask) {
    group 'Documentation'
    description 'Generate PDF documentation from asciidoc'
    baseDirFollowsSourceFile()
    attributes 'revnumber': null, 'source-highlighter': 'rouge', 'media': 'screen', 'toc': 'macro', 'compress': '',
            'icon-set': 'fas', 'pdf-fontsdir': "${file('src/theme/fonts')},GEM_FONTS_DIR"
    theme 'firebird'
    asciidoctorj {
        modules {
            pdf {
                version '1.5.4'
            }
        }
    }
}

def copyXsltNgCustomizations = tasks.register('copyXsltNgCustomizations', Copy) {
    from 'src/docs/xsltng'
    into layout.buildDirectory.dir('docs/asciidoc/docbook')

}

def copyDocbook5Css = tasks.register('copyDocbook5Css', Copy) {
    from 'src/theme/docbook5-css'
    into layout.buildDirectory.dir('docs/chunk/css')
}

def asciidocDocbook = tasks.register('asciidocDocbook', AsciidocToDocbook) {
    dependsOn copyXsltNgCustomizations, copyDocbook5Css
    group 'Documentation'
    description 'Generate Docbook from asciidoc'

    baseDirFollowsSourceFile()

    // TODO move definitions of images to copy to the task
//    resources {
//        from(stylesDir.file('docinfo')) {
//            include 'images/**/*'
//        }
//    }
    doFirst {
        languages.each { lang ->
            resources lang, {
                from(sourceDirProperty.file(lang)) {
                    include 'images/**/*'
                    duplicatesStrategy DuplicatesStrategy.EXCLUDE
                }
            }
        }
    }
}

task docbookHtml(type: DocbookHtml, group: 'documentation') {
    description 'Generate chunked HTML documentation'
    stylesheetBaseName.set('html')
    outputTypeName.set('html')
    imageExcludes.addAll(
            '*.txt',
            'firebird_logo_400x400.png')
    extraFilesToOutput.set(files('src/docs/firebirddocs.css'))
}

task docbookMonohtml(type: DocbookHtml, group: 'documentation') {
    description 'Generate single file HTML documentation'
    stylesheetBaseName.set('monohtml')
    outputTypeName.set('monohtml')
    imageExcludes.addAll(
            '*.txt',
            'firebird_logo_400x400.png')
    extraFilesToOutput.set(files('src/docs/firebirddocs.css'))
}

def docbookFoTask = tasks.register('docbookFo', DocbookFo)
def docbookPdfTask = tasks.register('docbookPdf', FoTask)
docbookPdfTask.configure { fo2pdf ->
    fo2pdf.group 'documentation'
    fo2pdf.description 'Generate PDF documentation from FO file'
    fo2pdf.inputFoFile.set(docbookFoTask.get().mainOutputFile)
    fo2pdf.dependsOn docbookFoTask
}
docbookFoTask.configure { docbookFo ->
    docbookFo.group 'documentation'
    docbookFo.description 'Generate FO documentation'
    docbookFo.stylesheetBaseName.set('fo')
    docbookFo.outputTypeName.set('fo')
    docbookFo.imageExcludes.addAll(
            '*.txt',
            'titleblackgill.gif',
            'firebirdlogo.png',
            'toc-*.png',
            'top-*.png',
            'prev-*.png',
            'next-*.png')
    docbookFo.configureWith(docbookPdfTask.get())
}

task "tt-fo"(type: XsltTask, group: "tools") {
    description 'Generates fo/titlepage.templates.xsl from fo/titlepage.templates.xml'
    inputFile.set(docConfig.styleDir.file('fo/titlepage.templates.xml'))
    styleSheetUri.set('template/titlepage.xsl')
    stylesheetBase.set('http://docbook.sourceforge.net/release/xsl/current/')
    outputFile.set(docConfig.styleDir.file('fo/titlepage.templates.xsl'))
}

task "tt-html"(type: XsltTask, group: "tools") {
    description 'Generates html/titlepage.templates.xsl from html/titlepage.templates.xml'
    inputFile.set(docConfig.styleDir.file('html/titlepage.templates.xml'))
    styleSheetUri.set('template/titlepage.xsl')
    stylesheetBase.set('http://docbook.sourceforge.net/release/xsl/current/')
    outputFile.set(docConfig.styleDir.file('html/titlepage.templates.xsl'))
}
