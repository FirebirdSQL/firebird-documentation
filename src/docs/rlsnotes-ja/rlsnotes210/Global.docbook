<?xml version="1.0" encoding="UTF-8"?>
<chapter id="rnfb210-global">
  <chapterinfo>
    <title>Firebird 2.1の全般的な改善点</title>
  </chapterinfo>

  <para>Firebird 3で計画されているアーキテクチャの変更に向けて、Firebird 2.1 には全般的にいくつかの改善や変更が実装されました。</para>

  <note>
    <para>特に指定のない限り、この改善はVer2.1以降に適用されます。</para>
  </note>

  <!-- FORCED WRITES ON LINUX -->

  <section id="rnfb210-global-fwrites"
           xreflabel="Forced Writes on Linux Now Works!">
    <!-- sect1 -->

    <sectioninfo>
      <title>LinuxでForced Writeが機能するようになりました!</title>

      <author>
        <firstname>A.</firstname>

        <surname>Peshkov</surname>
      </author>
    </sectioninfo>

    <para>データベースを最大限安全に利用する為に、同期書込みを設定します。すなわち、<emphasis>Forced Writeをオンにすることです。</emphasis>通常利用時に強く推奨されるこのモードにすると、<command>write()</command>システムコールはディスクへの物理的書込みが完了した場合のみ戻ります。言い換えると、トランザクションを利用して更新したデータはコミット後物理的にハードディスクに存在することを保証します。(データは)オペレーティングシステムのキャッシュにあるわけではありません。</para>

    <para>Linuxでの実装は極めて簡単です。<command>fcntl(dbFile, F_SETFL, O_SYNC)</command>を実行することです。</para>

    <para>(訳注：これは間違っています。次項 "フォレンジック" 参照)</para>


    <para>
      <emphasis>とにかくLinux上のデータベースは時々破損していました。</emphasis>
    </para>

    <section id="rnfb210-global-fwrites-frnscs">
      <!-- sect2 -->

      <title>フォレンジック(調査分析)</title>

      <para>Linux上のスピードテストはファイルにO_SYNCを設定してもパフォーマンス上何も効果がないことを表しています。これはLinuxカーネルの既知のバグです。</para>

      <para>Linuxのマニュアルによると<quote>Linuxではfcntl(fd,F_SETFL,flags)のようなコマンドはO_APPEND,O_ASYNC,O_DIRECT,O_NOATIME,O_NONBLOCKフラグのみ変更できます</quote>。このことはどこにも記述されていませんが、例えばO_SYNCのようにマニュアルに記載されているもの以外のフラグを設定しても機能しなかっただけでなく、fcntl()はエラーを返しませんでした。</para>

      <para>当初からFirebirdやInterbase版は、Forced Writesは全く動かなかったということです。Windowsでは確かに動きました。保障はできませんが、他のOSへの影響はないように思えます。念の為、あなたのOSにおいて<command>fcntl()</command>の実装により、O_SYNCフラグの設定が可能であるかどうかを確認してみて下さい。</para>

      <para>Firebird 2.1Beta第2版で紹介されており現在使用されているこの技術とは、ファイルを再度開くということです。あらゆるオペレーションシステム上で正しい操作を保障するべきであり、この点において<command>open()</command>システムコールは正しく動作しています。前述のような問題は報告されていないようです。</para>

      <para>Firebirdの開発者はなぜこのようなバグが、<ulink url="http://bugzilla.kernel.org/show_bug.cgi?id=5994">Linuxカーネルのバグトラッカー</ulink>に加わった後もほぼ2年間修正されずにいたのか分かりません。どうやらLinuxでは文書化されたバグはいつのまにか仕様ということになってしまうようです・・・。</para>
    </section>

    <section id="rnfb210-global-fwrites-fixold">
      <!-- sect2 -->

      <title>過去のFirebirdの為の簡単な修正方法</title>

      <para>過去のバージョンのFirebirdにおいて、この問題を簡単に修正する方法があります。それはFirebirdデータベースがあるパーティションをマウントする時に、<quote>sync</quote>オプションを使うことです。/etc/fstabにおける一例を挙げます。</para>

      <literallayout>/dev/sda9 /usr/database ext3 noatime,sync 1 2</literallayout>
    </section>
  </section>

  <!-- RAW DEVICES -->

  <section id="rnfb210-global-rawdevice" xreflabel="Databases on Raw Devices">
    <!-- Level 1 section -->

    <sectioninfo>
      <title>RAWデバイス上のデータベース</title>

      <author>
        <firstname>A.</firstname>

        <surname>Peshkov</surname>
      </author>
    </sectioninfo>

    <para>Forced Writesモードになっているデータベースが急速に増大している時は、ファイルシステムのI/Oの性能は大幅に低下します。Linuxにはデータベースを効率良く増大させる為の適切なシステムコールがないので、Forced Writesの性能は非同期書込みより3倍遅いかもしれません。</para>

    <para>このような状態に陥った場合、ファイルシステムを完全にバイパスしたり、データベースをRAWデバイスに直接リストアする事によって、性能が著しく改善するかもしれません。Firebirdデータベースはどんなタイプのブロックデバイスにも作り直すことができます。</para>

    <section id="rnfb210-global-rawdevice-moveit">
      <!-- Level 2 section -->

      <title>RAWデバイスへのデータベースの移動</title>

      <para>RAWデバイスにデータベースを移動することはとても簡単です。例えば、未フォーマット・パーティションに直接バックアップをリストアするには、以下のようにします。</para>

      <programlisting>gbak -c my.fbk /dev/sda7</programlisting>

      <para>はSCSI又はSATAの1番目のハードディスク(disk0)の拡張パーティションにある3番目の論理ディスクへデータベースをリストアします。</para>

      <note>
        <para>そのデータベースには、デバイス名自体以外の<quote>データベース名</quote>がありません。先例において、データベース名は'/dev/sda7'になります。</para>
      </note>
    </section>

    <section id="rnfb210-global-rawdevice-nbak">
      <!-- Level 2 section -->

      <title>nbak/nbackup の特記事項</title>

      <para>物理バックアップ・ユーティリティである<command>nbackup</command>に、差分ファイルのパスとファイル名を明確に与えなくてはなりません。これは、差分ファイルが /dev ディレクトリに書き込まれるのを防ぐ為に必要な措置です。これを実現する為には、isqlを利用して下記の命令文を実行して下さい。</para>

      <programlisting># isql /dev/sda7
SQL&gt; alter database add difference file '/tmp/dev_sda7';</programlisting>

      <section id="rnfb210-global-rawdevice-nbak-dbsize">
        <!-- Level 3 section -->

        <para>妥当な領域の中にnbakコピーのサイズを確保する為に、実際にデバイスにどの位格納するのかを知ることは有益です。nbackupの '-s' スイッチは "database page"にあるデータベースのサイズを返します。<emphasis /></para>

        <programlisting># nbackup -s -l /dev/sda7 77173</programlisting>

        <para>この結果をデバイスのブロックサイズと混同しないで下さい。この戻り値 - 77173 - はデータベースが占有するページ数です。物理的なサイズは"ページ数 × ページサイズ(単位はバイト)"で計算して下さい。もしページサイズが不確かならば、 "gsat -h" を使ってデータベースヘッダーから問い合わせることができます。</para>

        <literallayout>
  # gstat -h /dev/sda7
  Database &quot;/dev/sda7&quot;
  Database header page information:
          Flags                   0
          Checksum                12345
          Generation              43
          Page size               4096  &lt;---
          ODS version             11.1
   . . . . . . .
        </literallayout>
      </section>

      <!-- sect3 -->

      <section id="rnfb210-global-rawdevice-nbak-examples">
        <!-- Level 3 section -->

        <title>Rawデバイスを利用したnbackupの使用例</title>

        <orderedlist>
          <listitem>
            <para>1. '-s' スイッチを利用した実行結果を直接使用して、スクリプトでバックアッ プを実行できます。例えば、</para>

            <programlisting>
# DbFile=/dev/sda7
# DbSize=`nbackup -L $DbFile -S` || exit 1
# dd if=$DbFile ibs=4k count=$DbSize | # compress and record DVD
# nbackup -N $DbFile
            </programlisting>
          </listitem>

          <listitem>
            <para>2. コマンドラインによる、nbackupを利用したRawデバイスへの直接的なバックアップ</para>

            <programlisting>
# nbackup -B 0 /dev/sda7 /tmp/lvl.0
            </programlisting>
          </listitem>
        </orderedlist>
      </section>

      <!-- sect3 -->
    </section>

    <!-- sect2 -->

    <section id="rnfb210-global-rawdevice-further">
      <!-- Level 2 section -->

      <title>Rawデバイスに関する追加事項</title>

      <para>データベースにRawデバイス・ストレージを利用するにあたって、他の特記事項は現時点ではありませんが、下記の点には注意して下さい。</para>

      <itemizedlist>
        <listitem>
          <para>ファイルシステムにデータベースがファイルとして存在することよりも、このデータベースの成長と潜在的成長はエンドユーザにとって分かりづらいものです。稼働中のシステム環境に対するコントロールが手の届かないものとなるので、必要となるであろうモニタリングに関して、適切なドキュメントを確実に整備して下さい。</para>
        </listitem>

        <listitem>
          <para>Windowsに非常に精通している方はWindows上でRawデバイスを利用するという構想を試みるかもしれません。これはWindowsプラットフォームでどのように実現するかを調べることを優先した計画ではありません。しかしながら、それを行う方法を知っていると思うなら、あなたのWindows研究室でその案を試して頂けると幸いです。そしてその研究結果を良くても悪くても平凡でも firebird-devel リストに報告して下さい。</para>
        </listitem>

        <listitem>
          <tip>
            <para>あなたのRawデバイスをaliases.confファイルに保存して下さい。その方がストレージ機器を再構成する必要がでた場合でも、アプリケーションのコードで接続文字列を変更する必要ないでしょう。</para>
          </tip>
        </listitem>
      </itemizedlist>
    </section>

    <!-- sect2 -->
  </section>

  <!-- sect1 -->

  <!-- REMOTE INTERFACE -->

  <section id="rnfb210-global-remote" xreflabel="Remote Interface Improvement">
    <!-- Level 1 section -->

    <sectioninfo>
      <title>リモートインターフェースの改善</title>

      <author>
        <firstname>V. Khorsun,</firstname>

        <surname>D. Yemanov</surname>
      </author>
    </sectioninfo>

    <para>
      <ulink url="http://tracker.firebirdsql.org/browse/CORE-971">Feature
      request CORE-971</ulink>
    </para>

    <para>低速ネットワークにおけるリモートプロトコルの性能がわずかに向上しました。これを達成する為に、優先順位の高いパケットの一括処理が実行されるようになりました。同様に伝送バッファの最適化もされました。実際の試験シナリオにおいて、これらの変更はAPIのラウンドトリップの50%の低減が明らかになりました。これによりTCPのラウンドトリップの40%の低減も明らかとなりました。</para>

    <para>Firebird 2.1では、リモートインターフェースは isc_XXX_info コールへの応答パケットのサイズを、含まれているデータが実際に使用している長さに制限しています。例えば、実際には10バイトしかデータの入っていないバッファをクライアントに送り返す場合には、Firebird2.1のリモートインターフェースは、本当にたった10バイトしか送信しません。</para>

    <para>この変更による利益を享受するユーザは、特にインターネット経由でデータベースに接続しているクライアント等が考えられます。</para>

    <para>この変更を総括すると、</para>

    <orderedlist numeration="loweralpha">
      <listitem>
        <para>一括パケット送信。サーバとクライアントがバージョン2.1であることが必要で、プロトコル・ハンドシェイクが成功した後有効となります。保留しても大丈夫な特定のパケットの送信を、次のパケットとまとめて転送するために遅延させます。(例えば、allocate/deallocate 文の操作がこの領域に及ぶ等)</para>
      </listitem>

      <listitem>
        <para>命令文や要求に関する情報の先取り(プリフェッチ)と(多分)その後に続くAPIコールの為にクライアント側にそれらの情報をキャッシュする事。この実装はクライアント側だけであるが、一部上記(a)に記述される低減されたラウンドトリップの利益を享受している。</para>

        <para>それはどんなサーバのバージョンでも正常に機能します。クライアントがバージョン2.0以前のサーバと通信していたら期待に足りる最高の性能がでないとしても、例え作りの悪いクライアント・アプリケーションであっても僅かでももしかしたら利益をもたらすでしょう。</para>
      </listitem>

      <listitem>
        <para>データベース・エンジンから削除された情報応答(末尾のゼロ埋めの削除)。この実装はサーバ側のみなので、V2.1のサーバとどんなバージョンのクライアントとでも正常に機能します。前のバージョンのクライアントでさえFirebird2.1に接続でき、ラウンドトリップの低減の利益を享受するでしょう。例えその新機能とは違う前のリモートインターフェースが、今も尚 isc_dsql_prepare() に大きなパケットを送り返すのだとしてもです。</para>
      </listitem>

      <listitem>
        <para>他のラウンドトリップの低減方法は<quote>遅延実行</quote>と呼ばれるもので、同じ命令文において次のAPIコールをするまでに、<filename>isc_dsql_execute</filename>の実行直前の時点までSELECT要求は保持されます。
ラウンドトリップの低減の利点は、結果セットがひとつかふたつのネットワークパケットに収まる位のSELECT要求が大量にあるところで最も目に見えるようになります。</para>

        <para>この改善を機能させるためには、サーバ、クライアント共にv2.1以上にする必要があります。</para>

        <note>
          <para>僅かに可能性のある副作用は次の事が挙げられます。もし、<filename>isc_dsql_execute</filename>がある例外で
失敗したら、この例外は<emphasis>実際に</emphasis>原因となっていたAPIコールへの応答の中でクライアントへ返されます。例えば、<filename>isc_dsql_execute</filename>で例外を返す代わりに、<filename>isc_dsql_fetch</filename>、
<filename>isc_dsql_info</filename>のいずれかで実際に<filename>op_execute</filename>コールをディスパッチする
APIコールで例外が返されるでしょう。</para>

          <para>ほとんどの場合、この副作用は気づかれることはないでしょう。でも、もしかしたらPSQLのパラメータや変数の初期値と一緒にエラーが発生する所に現れるかもしれません。そして、例外が異常な順序で送られた例外の配列として気づくかもしれません。</para>
        </note>
      </listitem>
    </orderedlist>

    <para>この変更はTCP/IP及びNetBEUIで機能します。これらは下位互換性があり、既存のクライアント・コードを破壊しないでしょう。しかしながら、例えばJaybird JDBCやFirebirdクライアントの.NETドライバのように、独自の解釈をするリモートプロトコルを実装するドライバ層を使用している場合、もしあなたが使用しているドライバを更新しない限り、あなたの既存のコードではこの改善点は有効とならないでしょう。</para>
  </section>

  <!-- A P I -->

  <section id="rnfb210-global-api">
    <!-- Level 1 section -->

    <title>APIの変更</title>

    <section id="rnfb210-global-api-xsqlvar">
      <!-- Level 2 section -->

      <sectioninfo>
        <title>XSQLVAR</title>

        <author>
          <firstname>A.</firstname>

          <surname>dos Santos Fernandes</surname>
        </author>
      </sectioninfo>

      <para>データベース接続時のキャラクタセットが NONE の場合、接続時キャラクタセット又はBLOBキャラクタセットの識別子はテキストBLOBの<filename>XSQLVAR::sqlscale</filename>項目に引き渡されます。</para>
    </section>
  </section>

  <!-- OPTIMIZATION -->

  <section id="rnfb210-global-optim">
    <!-- Level 1 section -->

    <title>最適化</title>

    <section id="rnfb210-global-optim1">
      <!-- Level 2 section -->

      <sectioninfo>
        <title>複数インデックススキャンの最適化</title>

        <author>
          <firstname>V.</firstname>

          <surname>Khorsun</surname>
        </author>
      </sectioninfo>

      <para>
        <ulink url="http://tracker.firebirdsql.org/browse/CORE-1069">Feature
        request CORE-1069</ulink>
      </para>

      <para>AND 接続詞を伴う1つ以上のインデックスによるインデックススキャンが最適化されました。</para>
    </section>

    <section id="rnfb210-global-optim2">
      <!-- Level 2 section -->

      <sectioninfo>
        <title>スパースビットマップの操作の最適化</title>

        <author>
          <firstname>V.</firstname>

          <surname>Khorsun</surname>
        </author>
      </sectioninfo>

      <para>
        <ulink url="http://tracker.firebirdsql.org/browse/CORE-1070">Feature
        request CORE-1070</ulink>
      </para>

      <para>値が殆ど連続している時のスパースビットマップ(sparse bitmap)の操作(set、test及びclear)を最適化しました。 </para>
    </section>
  </section>

  <!-- CONFIGURATION AND TUNING -->

  <section id="rnfb210-global-cfg">
    <!-- Level 2 section -->

    <title>設定とチューニング</title>

    <section id="rnfb210--global-lckmgr">
      <!-- Level 3 section -->

      <sectioninfo>
        <title>ロックマネージャの制限の緩和と初期値の増大</title>

        <author>
          <firstname>D.</firstname>

          <surname>Yemanov</surname>
        </author>
      </sectioninfo>

      <para><ulink
      url="http://tracker.firebirdsql.org/browse/CORE-958">Feature requests
      CORE-958</ulink> and <ulink
      url="http://tracker.firebirdsql.org/browse/CORE-937">CORE-937</ulink></para>

      <itemizedlist>
        <listitem>
          <para><emphasis
          role="bold">ハッシュスロットの最大値</emphasis>は2048から65,536に上がりました。実際の設定は素数であるべきなので、サポートしている正確な値は65,521です(これは65,536より小さい最大の素数です)。最小値は101です。</para>
        </listitem>

        <listitem>
          <para>新しい<emphasis
          role="bold">ハッシュスロットの初期値</emphasis>は1009です。</para>
        </listitem>

        <listitem>
          <para><emphasis
          role="bold">ロックテーブルサイズ</emphasis>の初期値は全プラットフォームで1MBに増えました。</para>
        </listitem>
      </itemizedlist>
    </section>

    <section id="rnfb210-global-pgsz">
      <!-- Level 3 section -->

      <sectioninfo>
        <title>1Kと2Kのページサイズの廃止</title>

        <author>
          <firstname>D.</firstname>

          <surname>Yemanov</surname>
        </author>
      </sectioninfo>

      <para>
        <ulink url="http://tracker.firebirdsql.org/browse/CORE-969">Feature
        request CORE-969</ulink>
      </para>

      <para>効率が悪いので1Kと2Kのページサイズは廃止します。</para>

      <note>
        <para>このページサイズの制限は新規のデータベースのみ対象です。既に作成されたものはこれらのページサイズでも接続できます。</para>
      </note>
    </section>

    <section id="rnfb210-global-dskchunk"
             xreflabel="Enlarge Disk Allocation Chunks">
      <!-- Level 3 section -->

      <sectioninfo>
        <title>ディスク割り当てチャンクの拡大</title>

        <author>
          <firstname>V.</firstname>

          <surname>Khorsun</surname>
        </author>
      </sectioninfo>

      <para>
        <ulink url="http://tracker.firebirdsql.org/browse/CORE-1229">Feature
        request CORE-1229</ulink>
      </para>

      <para>v.2.1以前Firebirdはデータベースのファイルページに使うディスク領域の割り当てについて特別な取り決めはありませんでした。Firebirdは自身を含むページ間の依存により、<quote>丁寧な書込み</quote>戦略を提供する為、不規則に新しく割り当てたページに書き込んでいます。</para>

      <para>ODS11.1以上を利用するデータベースの為に、v.2.1以降のFirebirdサーバは今までと異なるディスク領域割り当て用のアルゴリズムを使用しています。これは既に存在するアプローチと関連した2つの既知の問題を解決するためです。</para>

      <orderedlist>
        <listitem>
          <para>
            <emphasis role="bold">ディスクの空き容量の欠如による破損</emphasis>
          </para>

          <para>予測できない書込み順序は、次のような状況を引き起こす可能性があります。それはページキャッシュが大量のダーティページを保持していて、そしてFirebirdがそのページキャッシュの情報を全て書き込む過程で、新規ページ用の領域を要求する必要があるという時に、この要求をかなえるための十分なディスク領域がない、という場合です。このような状況下では、管理者はディスク領域確保の為にデータベースをシャットダウンする事を決定します。これによりキャッシュに残っているダーティページを失うという事態がしばしば発生します。これは重大な破損へとつながります。</para>
        </listitem>

        <listitem>
          <para>
            <emphasis role="bold">ファイルの断片化</emphasis>
          </para>

          <para>比較的小さいチャンクにディスク領域を割り当てる事は、結果としてファイルシステムレベルでデータベースファイルの著しい断片化を招きます。例えば、バックアップ時、大量読み込みの性能が低下します。</para>
        </listitem>
      </orderedlist>

      <section id="rnfb210-global-dskchunk-alg">
        <!-- Level 4 section -->

        <title>解決方法</title>

        <para>解決方法は以下に述べる様に利用可能なディスク領域の状態に合ったページ書込みの管理のための規則と論理的根拠を導入する事です。</para>

        <orderedlist numeration="loweralpha">
          <listitem>
            <para>新規に割り当てられたページはデータベースエンジンに返る前に即座に書き込みます。その時ページが書き込めなかった場合は割り当ては発生しません。 PIP ビットはクリアされないままになり、適切なI/Oエラーが発生します。破損することはありません。なぜなら、キャッシュにある全てのダーティーページはディスク領域に割り当てられることが保障されていて、安全に書き込まれるからです。</para>

            <para>この変更は新規に割り当てられたページ毎に特別な書込みを追加しているので、ある程度パフォーマンスが悪くなると思われます。この影響を軽減する為に、新規に割り当てられたページの書込みは最大128kbのバッチで行われ、FirebirdはPIPヘッダーにこれら<quote>初期化された</quote>ページの数を記録します。</para>

            <note>
              <para>割り当てられ、解放され、また割り当てられたページは、既に<quote>管理下にある領域</quote>です。これはページを<quote>初期化する</quote>為に、もはや検証を必要としないという事です。そのような訳で、新規に割り当てられたページが、以前に割り当てられた事のないブロックである場合のみ、この二重書込みの対象となります。</para>
            </note>
          </listitem>

          <listitem>
            <para>断片化への対処として、Firebirdは現在ファイルシステムのAPIを適切に呼び出し、比較的大きなチャンクにディスク領域を予め<firstterm>割り当て</firstterm>ています。</para>

            <para>事前割当は<quote>ディスク領域不足</quote>状態の発生による破損を避ける為の余地も与えてくれます。管理者が利用可能なディスク領域を確保しなくてはならなくなる時まで、恐らくデータベースは動作を継続できるだけの領域を事前に割り当ててくれるでしょう。</para>

            <important>
              <para>
                <emphasis role="bold">(現在は）Windowsのみの対応となります</emphasis>
              </para>

              <para>今の所、WindowsのファイルシステムだけがこのようなAPIを公開しています。ということはつまり、この解決法の特徴はWindows版のみサポートされているということです。しかし、類似した機能は最近LinuxのAPIに追加されました。適切なAPIファンクションコールは、今後 <firstterm>ext3</firstterm> 等のような一般的なファイルシステムに登場するでしょう。</para>
            </important>
          </listitem>
        </orderedlist>
      </section>

      <section id="rnfb210-global-dskchunk-confparam">
        <!-- Level 4 section -->

        <title>DatabaseGrowthIncrement設定パラメータ</title>

        <para>ディスク領域の事前割り当てを上手に管理する為に、新パラメータ「<firstterm>DatabaseGrowthIncrement</firstterm>」が<filename>firebird.conf</filename>に追加されました。
これは事前割り当てされるチャンクのサイズの上限値をバイト単位で表しています。</para>

        <important>
          <para><quote>新設定パラメータと変更</quote>という章の<xref linkend="rnfb210-fbconf-dbgrowth" /> in the chapter entitledの欄にあるこ の設定に関する詳細事項を必ず読んで下さい。</para>
        </important>
      </section>

      <!-- sect4 -->
    </section>

    <section id="rnfb210-global-fscache">
      <!-- Level 3 section -->

      <sectioninfo>
        <title>スーパーサーバーにおけるファイルシステム・キャッシングのバイパス </title>

        <author>
          <firstname>V.</firstname>

          <surname>Khorsun</surname>
        </author>
      </sectioninfo>

      <para><ulink
      url="http://tracker.firebirdsql.org/browse/CORE-1381">Feature requests
      CORE-1381</ulink> and <ulink
      url="http://tracker.firebirdsql.org/browse/CORE-1480">CORE-1480</ulink></para>

      <para>Firebirdはページ・バッファー用としてメモリー上に独自のキャッシュを保持し、利用します。言い換えると、オペレーティング・システムはFirebirdのキャッシュを自身のファイルシステムのキャッシュに再度キャッシュしているかもしれません。もしFirebirdが利用可能なRAMよりも比較的大きなキャッシュを使えるように設定されていて、またForcedWritesがONになっているならば、キャッシュの二重化は殆ど何も利益をもたらすことなくリソースを無駄にしています。</para>

      <para>オペレーティング・システムは大きなファイルをキャッシュしようとする時、Firebirdのページ・キャッシュをスワップへしばしば移動します。これは集中的で無用なページングを引き起こします。実際のところ、もしスーパーサーバー用にFirebirdのページ・キャッシュサイズを、利用可能なRAMの80%より大きい値を設定すれば、危機的なリソース問題を引き起こすでしょう。</para>

      <note>
        <para>ファイルシステムのキャッシングは、ファイルへの書込み時には多少有益となります。しかしForcedWritesがOFFになっている場合に限ります。この設定は殆どの条件下において推奨されていません。</para>
      </note>

      <para>現在、Windows及びPOSIX上で稼動するスーパーサーバーに、ファイルシステムのキャッシュの可否を設定できる新しいパラメーター「<command>MaxFileSystemCache</command>」ができました。この設定は、ソートのような他の操作の為により多くのメモリーを解放するという利益があるかもしれません。また、ホストのリソースの消費を低減してくれるかもしれません。</para>

      <note>
        <para>クラッシックサーバーでは、ファイルシステムのキャッシュを回避できません。</para>
      </note>

      <para>「<command>MaxFileSystemCache</command>」パラメーターの詳細は「<xref
      linkend="rnfb210-fbconf-fscache" />」を参照願います。</para>
    </section>
  </section>

  <!-- OTHER -->

  <section id="rnfb210-global-other">
    <!-- Level 1 section -->

    <title>その他の大きな改善</title>

    <section id="rnfb210-global-other1">
      <!-- Level 2 section -->

      <sectioninfo>
        <title>ガーベッジコレクタの合理化</title>

        <author>
          <firstname>V.</firstname>

          <surname>Khorsun</surname>
        </author>
      </sectioninfo>

      <para>
        <ulink url="http://tracker.firebirdsql.org/browse/CORE-1071">Feature
        request CORE-1071</ulink>
      </para>

      <para>バックグラウンドで動くガーベッジコレクタのプロセスは、実行中のトランザクションで生成されたものを含め、ページ上のレコードのバック・バージョンを全て読み込んでいました。アクティブなレコードのバック・バージョンはガーベッジコレクションで考慮されないようになったので、この読込みは無駄な事となりました。</para>
    </section>

    <section id="rnfb210-global-other2">
      <!-- Level 2 section -->

      <sectioninfo>
        <title>外部ファイルの即時解放</title>

        <author>
          <firstname>V.</firstname>

          <surname>Khorsun</surname>
        </author>
      </sectioninfo>

      <para>
        <ulink url="http://tracker.firebirdsql.org/browse/CORE-961">Feature
        request CORE- 961</ulink>
      </para>

      <para>データベースエンジンは、ユーザーの要求によって既に使われなくなった外部テーブル・ファイルをすぐに解放するでしょう。</para>
    </section>

    <section id="rnfb210-global-other3">
      <!-- Level 2 section -->

      <sectioninfo>
        <title>Classic サーバーにおけるDSQLメタデータのキャッシュオブジェクトの同期化</title>

        <author>
          <firstname>A.</firstname>

          <surname>dos Santos Fernandes</surname>
        </author>
      </sectioninfo>

      <para>
        <ulink url="http://tracker.firebirdsql.org/browse/CORE-976">Feature
        request CORE-976</ulink>
      </para>

      <para>詳細無し</para>
    </section>

    <section id="rnfb210-global-other4">
      <!-- Level 2 section -->

      <sectioninfo>
        <title>BLOBの改善</title>

        <author>
          <firstname>A.</firstname>

          <surname>dos Santos Fernandes</surname>
        </author>
      </sectioninfo>

      <para>
        <ulink url="http://tracker.firebirdsql.org/browse/CORE-969">Feature
        request CORE-1169</ulink>
      </para>

      <para>一時的BLOBの指定先のBLOB形式への変換は、実体化の際に実行されようになりました。</para>
    </section>

    <section id="rnfb210-global-other5">
      <!-- Level 2 section -->

      <sectioninfo>
        <title>ストアドプロシージャ用形式フラグ</title>

        <author>
          <firstname>D.</firstname>

          <surname>Yemanov</surname>
        </author>
      </sectioninfo>

      <para>
        <ulink url="http://tracker.firebirdsql.org/browse/CORE-779">Feature
        request CORE-779</ulink>
      </para>

      <para>ストアドプロシージャ用形式フラグが導入された事により、RDB$PROCEDURESテーブルに項目RDB$PROCEDURE_TYPEを追加しました。設定可能な値は：</para>

      <variablelist>
        <varlistentry>
          <term>- 0又はNULL -</term>

          <listitem>
            <para>レガシープロシージャ(妥当性の検証はなし)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>- 1 - </term>

          <listitem>
            <para>選択可能なプロシージャ(SUSPEND文を含むプロシージャ)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>- 2 -</term>

          <listitem>
            <para>実行可能なプロシージャ(SUSPEND文がなく、SELECT文のFROM節で利用不可)</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="rnfb210-global-other6">
      <!-- sect2 -->

      <sectioninfo>
        <title>Linuxにおけるコア・ダンプ取得支援</title>

        <author>
          <firstname>A.</firstname>

          <surname>Peshkov</surname>
        </author>
      </sectioninfo>

      <para>
        <ulink url="http://tracker.firebirdsql.org/browse/CORE-1558">Feature
        request CORE-1558</ulink>
      </para>

      <para>「BugcheckAbort」設定パラメータは、<command>abort()</command>をすぐにコールしてコアダンプする代わりに、バグチェックの後に動作を継続しようとする事をサーバーに止めさせる機能を提供します。バグチェックは通常サーバーが認識できない問題の結果として発生するので、問題が未解決のまま動作を継続する事は、いづれにしても通常ありえません。そしてコアダンプは便利なデバッグ情報を提供することができます。</para>

      <para>より最近のLinuxディストリビューションでは、アプリケーションがクラッシュした時、初期設定ではもはや自動的にコアダンプしません。大抵ユーザーはコアダンプを機能させようとして苦労します。クラッシックサーバーとスーパーサーバーのルールが異なる事は、ディストリビューション間のOSのセットアップツールの一貫性のなさも相まって、いかなる有益な<quote>慣例</quote>をも役に立つことを困難にしています。</para>

      <para>Linux上のクラッシックサーバーとスーパーサーバーにコードが追加されました。これはこの問題を回避し、バグチェックでabort()が発生した場合、コアダンプファイルを自動生成する事です。Firebirdサーバーは適切に書込みができる場所(/tmp)に必要な「cwd」(作業ディレクトリの変更)を行い、コアダンプファイルを作成します。そして、「ソフト」の制限が「ハード」の制限と同じになるようにコアファイルのサイズの制限を設定します。 </para>

      <note>
        <para>リリースバージョンでは、コアダンプの自動起動は、firebird.confにあるBugcheckAbortパラメータが有効(1)に設定されている場合だけアクティブになります。デバッグバージョンは常にアクティブです。</para>

        <para>この機能を有効にする必要があるのならば、パラメータの変更を有効にする為にサーバーの再起動が必要になる事を忘れないで下さい。
        </para>
      </note>
    </section>
  </section>
</chapter>
