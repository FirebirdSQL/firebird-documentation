<chapter id="rnfb25-psql">
  <chapterinfo>
    <title>手続き型SQL（PSQL）</title>
  </chapterinfo>
  <para>Firebirdの手続き型言語（PSQL）にいくつかの重要な変更があります。すなわち、トリガ用の言語セット、ストアドプロシージャ、特にEXECUTE STATEMENTの新しい拡張機能に関連した動的に実行可能な文、といったものです。また、このリリースでは<quote>自律型トランザクション</quote>の到来が告げられます。</para>

  <section id="rnfb25-psql-links"><!-- Level 1 section -->
    <title>クイックリンク</title>
    <itemizedlist spacing="compact"><!-- Outer -->
      <listitem>
        <para><link linkend="rnfb25-psql-auton">自律型トランザクション</link></para>
      </listitem>
      <listitem>
        <para><link linkend="rnfb25-psql-colmtyp">PSQLの変数にデータベースのカラムの型を借用</link></para>
      </listitem>
      <listitem>
        <para><link linkend="rnfb25-psql-exctstmnt">EXECUTE STATEMENTの新たな拡張</link></para>
        <itemizedlist spacing="compact"><!-- Outer -1 -->
          <listitem>
            <para><link linkend="rnfb25-psql-cntxt">コンテキスト・イシュー</link></para>
            <itemizedlist><!-- Outer -2 -->
              <listitem>
                <para><link linkend="rnfb25-psql-authntctn">認証</link></para>
              </listitem>
              <listitem>
                <para><link linkend="rnfb25-psql-trnsctns">トランザクションの挙動</link></para>
              </listitem>
              <listitem>
                <para><link linkend="rnfb25-psql-inhrtprvs">アクセス権限の継承</link></para>
              </listitem>
            </itemizedlist><!-- Outer -2 -->
          </listitem>
          <listitem>
            <para><link linkend="rnfb25-psql-extqry">PSQLからの外部クエリ</link></para>
          </listitem>
          <listitem>
            <para><link linkend="rnfb25-psql-dynex">EXECUTE STATEMENTでの動的パラメータ</link></para>
          </listitem>
          <listitem>
            <para><link linkend="rnfb25-psql-exctstmnt-exmpls">EXECUTE STATEMENTの使用例</link></para>
          </listitem>
        </itemizedlist><!-- Outer -1 -->
      </listitem>
      <listitem>
        <para><link linkend="rnfb25-psql-imprvmts">PSQLのその他の改善点</link></para>
        <itemizedlist spacing="compact"><!-- Outer -1 -->
          <listitem>
            <para><link linkend="rnfb25-psql-imprvmts01">PSQL式としてのサブクエリ</link></para>
          </listitem>
          <listitem>
            <para><link linkend="rnfb251-psql-imprvmts02">コンテキスト変数としてのSQLSTATE</link></para>
          </listitem>
          
        </itemizedlist><!-- Outer -1 -->
      </listitem>
    </itemizedlist><!-- Outer -->
  </section><!-- sect 1 -->

  <section id="rnfb25-psql-auton"><!-- Level 1 section -->
    <sectioninfo>
    <title>自律型トランザクション</title>
      <author>
        <firstname>Adriano</firstname>
        <surname>dos Santos Fernandes</surname>
      </author>
    </sectioninfo>
    <para>トラッカー・リファレンス <ulink url="http://tracker.firebirdsql.org/browse/CORE-1409">CORE-1409</ulink></para>
    <para>この新たな実装により、PSQLモジュール内の自律型トランザクションでコードの一部の実行ができるようになりました。これは、例外を発生させる必要があるけれどもデータベースの変更をロールバックしたくないという状況では便利です。</para>

    <para>新しいトランザクションは、起動しているもののと同じ分離レベルで開始されます。自律型トランザクション内の文で発生した任意の例外は変更を引き起こし、ロールバッックされます。その文が終わりまで実行された場合はトランザクションはコミットされます。</para>
    <warning>
      <para>自律型トランザクションは起動しているものから独立しているので、この機能は、デッドロックを避けるよう注意して使う必要があります。</para>
    </warning>
    <para><emphasis role="bold">構文パターン</emphasis></para>
    <programlisting>
IN AUTONOMOUS TRANSACTION
DO
  &lt;単純な文 | 複合文&gt;
    </programlisting>

    <para><emphasis role="bold">使用例</emphasis></para>
    <programlisting>
create table log (
  logdate timestamp,
  msg varchar(60)
);

create exception e_conn 'Connection rejected';

set term !;

create trigger t_conn on connect
as
begin
  if (current_user = 'BAD_USER') then
  begin
    in autonomous transaction
    do
    begin
      insert into log (logdate, msg) values (current_timestamp, 'Connection rejected');
    end

    exception e_conn;
  end
end!

set term ;!
    </programlisting>
  </section>

  <section id="rnfb25-psql-colmtyp"><!-- Level 1 section -->
    <sectioninfo>
    <title>PSQLの変数にデータベースのカラムの型を借用</title>
      <author>
        <firstname>Adriano</firstname>
        <surname>dos Santos Fernandes</surname>
      </author>
    </sectioninfo>
    <para>トラッカー・リファレンス <ulink url="http://tracker.firebirdsql.org/browse/CORE-1356">CORE-1356</ulink></para>
    <para>この機能はバージョン2での実装を拡張したものです。これによって、PSQLで変数を宣言するための<quote>データ型</quote>としてドメインが利用できるようになりました。この用途のために、テーブルまたはビューからカラム定義のデータ型を借用できるようになりました。</para>

    <para><emphasis role="bold">構文パターン</emphasis></para>
    <programlisting>
    data_type ::=
         &lt;組み込みデータ型&gt;
       | &lt;ドメイン名&gt;
       | TYPE OF &lt;ドメイン名&gt;
       | TYPE OF COLUMN &lt;テーブルまたはビュー&gt;.&lt;カラム&gt;
    </programlisting>

    <note>
      <para>TYPE OF THEはカラムの型のみ取得します。カラムに定義された任意の制約またはデフォルト値は無視されます。</para>
    </note>

    <para><emphasis role="bold">例</emphasis></para>
    <programlisting>
CREATE TABLE PERSON (
  ID INTEGER,
  NAME VARCHAR(40)
  );

CREATE PROCEDURE SP_INS_PERSON (
  ID TYPE OF COLUMN PERSON.ID,
  NAME TYPE OF COLUMN PERSON.NAME
  )
  AS
DECLARE VARIABLE NEW_ID TYPE OF COLUMN PERSON.ID;
BEGIN
  INSERT INTO PERSON (ID, NAME)
    VALUES (:ID, :NAME)
    RETURNING ID INTO :NEW_ID;
END
    </programlisting>
<!-- Added in v.2.5.1 -->
    <warning>
      <title>トラップに注意！</title>
      <para>バージョン2.5以上では、カラムのデータ型の変更が可能になっています。そのカラムがストアドプロシージャやトリガで参照されていたとしても、例外がスローされることはありません。ただし、コンパイル済みのPSQLはBLOB内でバイナリ表現（<quote>BLR</quote>）として静的に格納されているため、オリジナルのBLRはバックアップやリストアを行なっても残っています。BLRは静的であるため、データ型を変更しても更新されません。</para>
      <para>このことは、TYPE OF構文や、テーブルから影響を受けるカラム、また、それらのテーブルから派生した任意のビューのカラムを使って変数が宣言されている場合、コンパイル済みBLRがデータ型の変更によって破壊されてしまうことを意味します。最善の場合、BLRは<quote>注意が必要</quote>のフラグを付けられますが、テストでは、どんな条件でもフラグ付けが行なわれるわけではないことが分かっています。</para>
      <para>つまり、フィールドがコンパイル済みPSQLに何らかの依存関係を持っていたとしても、あなたがそのフィールドの型を変更するのをエンジンはもう止めてくれなくなった、ということです。変更された状況の管理のため、影響を受けるプロシージャやトリガを特定したり、変更に対応してそれらを再コンパイルしたりすることは、あなた自身の問題となります。</para>
    </warning>
<!-- End of v.2.5.1 addition -->
  </section><!-- sect1 -->

  <section id="rnfb25-psql-exctstmnt"><!-- Level 1 section -->
    <title>EXECUTE文の新たな拡張</title>
    <para>われわれのリリースノートでは珍しく、この章はPSQLのEXECUTE STATEMENT文の完全で新しく拡張された構文から始め、その後で、さまざまな新機能とその使い方の説明に移ります。</para>

    <programlisting>
[FOR] EXECUTE STATEMENT &lt;query_text&gt; [(&lt;input_parameters&gt;)]
    [ON EXTERNAL [DATA SOURCE] &lt;connection_string&gt;]
    [WITH {AUTONOMOUS | COMMON} TRANSACTION]
    [AS USER &lt;user_name&gt;]
    [PASSWORD &lt;password&gt;]
    [ROLE &lt;role_name&gt;]
    [WITH CALLER PRIVILEGES]
    [INTO &lt;variables&gt;]
    </programlisting>
    <note>
      <para>オプションの句の順序は固定されておらず、例えば、次のモデルに基づく文も有効となります：</para>
      <literallayout class="monospaced">
    [ON EXTERNAL [DATA SOURCE] &lt;接続文字列&gt;]
    [WITH {AUTONOMOUS | COMMON} TRANSACTION]
    [AS USER &lt;ユーザー名&gt;]
    [PASSWORD &lt;パスワード&gt;]
    [ROLE &lt;ロール名&gt;]
    [WITH CALLER PRIVILEGES]
      </literallayout>
      <para>句の重複はできません。</para>
    </note>

    <section id="rnfb25-psql-cntxt"><!-- Level 2 section -->
      <title>コンテキスト・イシュー</title>
      <para>ON EXTERNAL DATA SOURCE句がない場合、EXECUTE STATEMENTは通常、CURRENT_CONNECTIONの文脈内で実行されます。AS USER句が省略されている場合、または、これがCURRENT_USERと同じ&lt;ユーザー名&gt;引数を持っている場合は、その通りです。</para>
      <para>しかし、&lt;ユーザー名&gt;がCURRENT_USERと異なる場合、文は、同じエンジン・インスタンス内で、Y-Valveとリモートレイヤーなしに確立された別の接続で実行されます。</para>
      <note>
        <para>AS USER &lt;ユーザー名&gt;句がない場合はCURRENT_USERがデフォルトとなります。</para>
      </note>

      <section id="rnfb25-psql-authntctn"><!-- Level 3 section -->
        <title>認証</title>
        <para>CURRENT_CONNECTIONとは異なる接続にサーバー認証が必要な場合、例えば、外部のデータソースでEXECUTE STATEMENTコマンドを実行するには、AS USERやPASSWORD句が必要になります。しかし、いくつかの条件のもとで、PASSWORDが省略できることがあります。その効果は以下の通りです：</para>

        <orderedlist enumeration="loweralpha">
          <listitem>
            <para>Windowsでは、<emphasis><quote>信頼された認証</quote>がアクティブとなっており</emphasis>、AS USERパラメータが欠けているか無効、またはCURRENT_USERと同じ場合、CURRENT_CONNECTION（つまり、外部データソースではなく）に<quote>信頼された認証</quote>が実行されます。</para>
          </listitem>
          <listitem>
            <para>外部データソース・パラメータが与えられ、その&lt;接続文字列&gt;がCURRENT_CONNECTIONと同じデータベースを参照している場合は、有効なユーザーアカウントはCURRENT_USERのものとなります。</para>
          </listitem>
          <listitem>
            <para>外部データソース・パラメータが与えられ、その&lt;接続文字列&gt;が、CURRENT_CONNECTIONがアタッチしているものとは異なるデータベースを参照している場合、有効なユーザーアカウントは、Firebirdプロセスが現在稼働しているOSのアカウントとなります。</para>
          </listitem>
        </orderedlist>
        <para>PASSWORD句が欠けている他の場合には、<emphasis>isc_dpb_user_name</emphasis>だけはDPB（アタッチメントパラメータ）で与えられ、native認証が試行されます。</para>
      </section>

      <section id="rnfb25-psql-trnsctns"><!-- Level 3 section -->
        <title>トランザクションの挙動</title>
        <para>この新しい構文はトランザクションの挙動を設定するオプションの句を含んでいます：WITH AUTONOMOUS TRANSACTIONとWITH COMMON TRANSACTIONです。デフォルトはWITH COMMON TRANSACTIONであり、特に指定する必要はありません。トランザクションの有効期間はCURRENT_TRANSACTIONの有効期間によって決まり、CURRENT_TRANSACTIONに従ってコミットまたはロールバックされます。</para>
        <para>WITH COMMON TRANSACTIONによる挙動は以下の通りです：</para>

        <orderedlist numeration="loweralpha">
          <listitem>
            <para>外部データソースでの任意のトランザクションを、CURRENT_TRANSACTIONと同じパラメータで開始します；あるいは、</para>
          </listitem>
          <listitem>
            <para>CURRENT_TRANSACTION内の文を実行します；または、</para>
          </listitem>
          <listitem>
            <para>CURRENT_CONNECTION内で開始される別のトランザクションを使用します。</para>
          </listitem>
        </orderedlist>

        <para>WITH AUTONOMOUS TRANSACTION設定は、新しいトランザクションをCURRENT_TRANSACTIONと同じパラメータで開始します。文が例外を発生させずに実行されればトランザクションはコミットされ、エラーがあった場合はロールバックされます。</para>
      </section>

      <section id="rnfb25-psql-inhrtprvs"><!-- Level 3 section -->
        <sectioninfo>
        <title>アクセス権限の継承</title>
          <author>
            <firstname>Vladyslav</firstname>
            <surname>Khorsun</surname>
          </author>
        </sectioninfo>
        <para>トラッカー・リファレンス <ulink url="http://tracker.firebirdsql.org/browse/CORE-1928">CORE-1928</ulink></para>
        <para>設計上、EXECUTE STATEMENTのもともとの実装では、実行可能なコードは実行されるストアドプロシージャまたはトリガのアクセス権限から分離され、CURRENT_USERが利用できる権限へと戻されます。この戦略は、任意の文を実行されてしまう脆弱性を低減できるため、概ね賢いものです。しかし、堅牢な環境やプライバシーが問題にならない状況では、制約と感じられることがあります。</para>
        <para>オプションの句WITH CALLER PRIVILEGESの導入により、実行可能な文に、実行されるストアドプロシージャやトリガのアクセス権限を継承させられるようになりました。文は呼び出し先のストアドプロシージャやトリガに適用される任意の追加権限を使用して作成されます。その効果は、文がストアドプロシージャやトリガによって直接実行された場合と同様のものです。</para>
        <important>
          <para>WITH CALLER PRIVILEGESオプションはON EXTERNAL DATA SOURCEオプションとは互換性がありません。</para>
        </important>

      </section>
    </section>

    <section id="rnfb25-psql-extqry"><!-- Level 2 section -->
      <sectioninfo>
      <title>PSQLからの外部クエリ</title>
        <author>
          <firstname>Vladyslav</firstname>
          <surname>Khorsun</surname>
        </author>
      </sectioninfo>
      <para>トラッカー・リファレンス <ulink url="http://tracker.firebirdsql.org/browse/CORE-1853">CORE-1853</ulink></para>
      <para>EXECUTE STATEMENTに&lt;接続文字列&gt;引数を付けたON EXTERNAL DATA SOURCE句を含めることで、外部データベースに対するクエリがサポートされました。</para>

      <section id="rnfb25-psql-extqry01"><!-- Level 3 section -->
        <title>&lt;接続文字列&gt;引数</title>
        <para>&lt;接続文字列&gt;のフォーマットはごく普通のもので、API関数<emphasis>isc_attach_database()</emphasis>に渡されます。すなわち、</para>
        <literallayout class="monospaced">
   [&lt;ホスト名&gt;&lt;プロトコル区切り文字&gt;]データベースのパス
        </literallayout>
      </section>

      <section id="rnfb25-psql-extqry02"><!-- Level 3 section -->
        <title>キャラクタ・セット</title>
        <para>外部のデータソースへの接続には、CURRENT_CONNECTIONの文脈で使われているものと同じキャラクタ・セットが使われます。</para>
      </section>

      <section id="rnfb25-psql-extqry03"><!-- Level 3 section -->
        <title>アクセス権限</title>
        <para>外部のデータソースが別のサーバー上にある場合、AS USER &lt;ユーザー名&gt;句とPASSWORD &lt;パスワード&gt;句が必要となります。</para>
        <para>外部のデータソースが別のサーバ上にある場合、WITH CALLER PRIVILEGES句は無視されます。</para>
        <para>情報が足りないよ！ロールはどうなってるの？</para>
      </section>

      <note>
        <para>外部接続での二相トランザクションはバージョン2.5では利用できません。</para>
      </note>
    </section>

    <section id="rnfb25-psql-dynex"><!-- Level 2 section -->
      <sectioninfo>
        <title>EXECUTE STATEMENTでの動的パラメータ</title>
        <authorgroup>
          <author><firstname>Vladyslav</firstname><surname>Khorsun</surname></author>
          <author><firstname>Alex</firstname><surname>Peshkov</surname></author>
       </authorgroup>
      </sectioninfo>
      <para>トラッカー・リファレンス <ulink url="http://tracker.firebirdsql.org/browse/CORE-1221">CORE-1221</ulink></para>

      <para>新たな拡張により、パラメータ化されたDSQL文に似た方法で、動的な入力パラメータ（プレースホルダ）を使って文を作成することができるようになりました。クエリのテキストそのものをパラメータとして渡すことも可能です。</para>

      <section id="rnfb-psql-dynex-syntax"><!-- Level 3 section -->
        <title>構文の表記規則</title>
        <para>この仕組みには、実行時のパーシングを容易にし、また、DSQLパラメータを扱うポピュラーなクライアント・ラッパー層（Delphiなど）と互換性のあるスタイルでのパラメータ<quote>命名</quote>オプションを許可するいくつかの表記規則が採用されています。API自体が持つ表記規則もサポートされており、定義された順序で名前なしパラメータを渡すことができます。<emphasis role="bold">ただし、名前付き、名前なしパラメータを混在させることはできません。</emphasis></para>

        <section id="rnfb-psql-dynex-syntax01"><!-- Level 4 section -->
          <title>新しい拘束演算子</title>
          <para>この点について、動的パラメータ機能の実装の中で、同等性テストでのクラッシュを避けるために、実行時の値を名前付きパラメータに拘束する新しい代入演算子を導入する必要がありました。この新しい演算子はPascalの代入演算子を真似たもの<quote>:=</quote>です。</para>
        </section>

        <section id="rnfb-psql-dynex-syntax02"><!-- Level 4 section -->
          <title>パラメータを定義する構文</title>

          <literallayout class="monospaced">
    &lt;input_parameters&gt; ::=
      &lt;named_parameter&gt; | &lt;input_parameters&gt;, &lt;named_parameter&gt;

    &lt;named_parameter&gt; ::=
      &lt;parameter name&gt; := &lt;expression&gt;
          </literallayout>
          <para><emphasis role="bold">名前付き入力パラメータ</emphasis>の例</para>
          <para>例えば、次のPSQL文は&lt;query_text&gt;と&lt;input_parameters&gt;（&lt;named_parameter&gt;）の両方を定義します：</para>
          <programlisting>
EXECUTE BLOCK AS
  DECLARE S VARCHAR(255);
  DECLARE N INT = 100000;
  BEGIN
  /* 通常のPSQL文字列としての&lt;query_text&gt;の割り当て */
    S = 'INSERT INTO TTT VALUES (:a, :b, :a)';

    WHILE (N > 0) DO
    BEGIN
    /* 各ループの実行は文字列の値と入力パラメータに
       拘束される値の両方に適用されます */

      EXECUTE STATEMENT (:S) (a := CURRENT_TRANSACTION, b := CURRENT_CONNECTION)
      WITH COMMON TRANSACTION;
      N = N - 1;
    END
  END
          </programlisting>
          <para><emphasis role="bold">名前なし入力パラメータ</emphasis>の例</para>
          <para>同様の文で、今度は名前なし入力パラメータを使用し、定数の引数を直接渡します。</para>
          <programlisting>
EXECUTE BLOCK AS
  DECLARE S VARCHAR(255);
  DECLARE N INT = 100000;
  BEGIN
    S = 'INSERT INTO TTT VALUES (?, ?, ?)';

    WHILE (N &gt; 0) DO
    BEGIN
      EXECUTE STATEMENT (:S) (CURRENT_TRANSACTION, CURRENT_CONNECTION, CURRENT_TRANSACTION);
      N = N - 1;
    END
  END
          </programlisting>
          <note>
            <para>次の点に注意して下さい。&lt;query_text&gt;と&lt;input_parameters&gt;の両方を使用する場合、必ず&lt;query_text&gt;を括弧で囲みます。すなわち、</para>
            <literallayout class="monospaced">
    EXECUTE STATEMENT (:sql) (p1 := 'abc', p2 := :second_param) ...
            </literallayout>
          </note>
        </section><!-- Level 4 -->
      </section><!-- Level 3 -->
    </section><!-- Level 2 -->
    <section id="rnfb-psql-exctstmnt-exceptions"><!-- Level 2 section -->
      <title>例外処理</title>
      <para>例外の取り扱いは、<command>ON EXTERNAL DATA SOURCE</command>句が与えられているかどうかで異なります。</para>

      <section id="rnfb-psql-exctstmnt-exceptions01"><!-- Level 3 section -->
        <title>ON EXTERNAL DATA SOURCE句がある場合</title>
        <para>ON EXTERNAL DATA SOURCE句があると、Firebirdは未知のデータソースから与えられるエラーコードを解釈することができず、エラー情報そのものを解釈し、文字列にラップして自身のエラー・ラッパー（<command>isc_eds_connection</command>または<command>isc_eds_statement</command>）へと渡します。</para>
        <para>リモートエラーを解釈したテキストには、エラーコードと対応するメッセージの両方が含まれます。</para>
        <orderedlist type="loweralpha">
          <listitem>
            <para><emphasis role="bold">isc_eds_connectionエラーのフォーマット</emphasis></para>
            <programlisting>
<emphasis>テンプレート文字列</emphasis>
  Execute statement error at @1 :\n@2Data source : @3
<emphasis>ステータスベクター・タグ</emphasis>
  isc_eds_connection,
  isc_arg_string, &lt;失敗したAPI関数名&gt;,
  isc_arg_string, &lt;外部エラーを解釈したテキスト&gt;,
  isc_arg_string, &lt;データソース名&gt;
            </programlisting>
          </listitem>

          <listitem>
            <para><emphasis role="bold">isc_eds_statementエラーのフォーマット</emphasis></para>
            <programlisting>
<emphasis>テンプレート文字列</emphasis>
  Execute statement error at @1 :\n@2Statement : @3\nData source : @4
<emphasis>ステータスベクター・タグ</emphasis>
  isc_eds_statement,
  isc_arg_string, &lt;失敗したAPI関数名&gt;,
  isc_arg_string, &lt;外部エラーを解釈したテキスト&gt;,
  isc_arg_string, &lt;クエリ&gt;,
  isc_arg_string, &lt;データソース名&gt;
            </programlisting>
          </listitem>
        </orderedlist>
        <para>PSQLレベルでは、これらのエラーのシンボルは、それらを他の<emphasis>gdscode</emphasis>と同様に扱うことで処理することができます。例えば、</para>
<!-- Correction v.2.5.1 -->
        <programlisting>
  WHEN GDSCODE eds_statement
        </programlisting>
        <note>
          <para>現状では、エラーコード生成元にWHEN文ではアクセスできません。この状況は将来改善されるかもしれません。</para>
      </note>
      </section><!-- Level 3 -->

      <section id="rnfb-psql-exctstmnt-exceptions02"><!-- Level 3 section -->
        <title>ON EXTERNAL DATA SOURCE句がない場合</title>
        <para>ON EXTERNAL DATA SOURCE句がない場合は、エラーの元のステータスベクターが呼び出し元であるPSQLコードにそのまま渡されます。</para>
        <para>例えば、動的な文が<emphasis>isc_lock_conflict</emphasis>の例外を引き起こした場合、例外は呼び出し元に渡され、通常のハンドラで取り扱われます：</para>
<!-- Correction v.2.5.1 -->
        <programlisting>
  WHEN GDSCODE lock_conflict
        </programlisting>
      </section><!-- Level 3 -->
    </section><!-- Level 2 -->

    <section id="rnfb25-psql-exctstmnt-exmpls"><!-- Level 2 section -->
      <title>EXECUTE STATEMENTの使用例</title>
      <para>以下の例は、EXECUTE STATEMENTの拡張をアプリケーションに適用する方法のサンプルを提供しています。</para>

      <section id="rnfb25-psql-exctstmnt-exmpls01"><!-- Level 3 section -->
        <title>テスト接続とトランザクション</title>
        <para>設定のバリエーションを比較できるように、テストを二つ挙げておきます：</para>

        <section id="rnfb25-psql-exctstmnt-exmpls01a"><!-- Level 4 section -->
          <para>テスト a）：同じトランザクションでこの文を数回実行する─現在のデータベースへの新しい接続を三つ作成し、呼び出しがあるたびにそれを再利用する。トランザクションは再利用される。</para>
          <programlisting>
EXECUTE BLOCK
  RETURNS (CONN INT, TRAN INT, DB VARCHAR(255))
AS
  DECLARE I INT = 0;
  DECLARE N INT = 3;
  DECLARE S VARCHAR(255);
BEGIN
  SELECT A.MON$ATTACHMENT_NAME FROM MON$ATTACHMENTS A
   WHERE A.MON$ATTACHMENT_ID = CURRENT_CONNECTION
    INTO :S;

  WHILE (i &lt; N) DO
  BEGIN
    DB = TRIM(CASE i - 3 * (I / 3)
      WHEN 0 THEN '\\.\' WHEN 1 THEN 'localhost:' ELSE '' END) || :S;

    FOR EXECUTE STATEMENT
      'SELECT CURRENT_CONNECTION, CURRENT_TRANSACTION
      FROM RDB$DATABASE'
      ON EXTERNAL :DB
      AS USER CURRENT_USER PASSWORD 'masterkey' -- ただの例です
      WITH COMMON TRANSACTION
      INTO :CONN, :TRAN
    DO SUSPEND;

    i = i + 1;
  END
END
          </programlisting>
        </section>

        <section id="rnfb25-psql-exctstmnt-exmpls01b"><!-- Level 4 section -->
          <para>テスト b）：同じトランザクションでこの文を数回実行する─呼び出しがあるたびに、現在のデータベースへの新しい接続を三つ作成する。</para>
          <programlisting>
EXECUTE BLOCK
  RETURNS (CONN INT, TRAN INT, DB VARCHAR(255))
AS
  DECLARE I INT = 0;
  DECLARE N INT = 3;
  DECLARE S VARCHAR(255);
BEGIN
  SELECT A.MON$ATTACHMENT_NAME
    FROM MON$ATTACHMENTS A
  WHERE A.MON$ATTACHMENT_ID = CURRENT_CONNECTION
   INTO :S;

  WHILE (i &lt; N) DO
  BEGIN
    DB = TRIM(CASE i - 3 * (I / 3)
      WHEN 0 THEN '\\.\'
      WHEN 1 THEN 'localhost:'
      ELSE '' END) || :S;

    FOR EXECUTE STATEMENT
    'SELECT CURRENT_CONNECTION, CURRENT_TRANSACTION FROM RDB$DATABASE'
      ON EXTERNAL :DB
      WITH AUTONOMOUS TRANSACTION -- 自律型トランザクションに注意
      INTO :CONN, :TRAN
    DO SUSPEND;

    i = i + 1;
  END
END
          </programlisting>
        </section><!-- 4 -->
      </section><!-- 3 -->

      <section id="rnfb25-psql-exctstmnt-exmpls02"><!-- Level 3 section -->
        <title>入力の評価のデモ</title>
        <para>一度だけ評価される入力式のデモ：</para>
        <programlisting>
EXECUTE BLOCK
  RETURNS (A INT, B INT, C INT)
AS
BEGIN
  EXECUTE STATEMENT (
    'SELECT CAST(:X AS INT),
            CAST(:X AS INT),
            CAST(:X AS INT)
       FROM RDB$DATABASE')
      (x := GEN_ID(G, 1))
    INTO :A, :B, :C;

  SUSPEND;
END
        </programlisting>
      </section><!-- 3 -->

      <section id="rnfb25-psql-exctstmnt-exmpls03"><!-- Level 3 section -->
        <title>書き込み速度テスト</title>
        <para>パラメータ化していない形式のEXECUTE STATEMENTと比較するため、われわれが以前に挙げていた入力パラメータの使用例を再掲します：</para>
        <programlisting>
RECREATE TABLE TTT (
  TRAN INT,
  CONN INT,
  ID INT);

-- 直接の書き込み：

EXECUTE BLOCK AS
  DECLARE N INT = 100000;
BEGIN
  WHILE (N &gt; 0) DO
  BEGIN
    INSERT INTO TTT VALUES (CURRENT_TRANSACTION, CURRENT_CONNECTION, CURRENT_TRANSACTION);
    N = N - 1;
  END
END

-- プリペアされた動的な文を介した書き込み
-- 名前付き入力パラメータを使用：

EXECUTE BLOCK AS
  DECLARE S VARCHAR(255);
  DECLARE N INT = 100000;
BEGIN
  S = 'INSERT INTO TTT VALUES (:a, :b, :a)';

  WHILE (N &gt; 0) DO
  BEGIN
    EXECUTE STATEMENT (:S)
      (a := CURRENT_TRANSACTION, b := CURRENT_CONNECTION)
    WITH COMMON TRANSACTION;
    N = N - 1;
  END
END

-- プリペアされた動的な文を介した書き込み
-- 名前なし入力パラメータを使用：

EXECUTE BLOCK AS
DECLARE S VARCHAR(255);
DECLARE N INT = 100000;
BEGIN
  S = 'INSERT INTO TTT VALUES (?, ?, ?)';

  WHILE (N &gt; 0) DO
  BEGIN
    EXECUTE STATEMENT (:S) (CURRENT_TRANSACTION, CURRENT_CONNECTION, CURRENT_TRANSACTION);
    N = N - 1;
  END
END
        </programlisting>
      </section><!-- Level 3 -->
    </section><!-- Level 2 -->
  </section><!-- Level 1 -->

  <section id="rnfb25-psql-imprvmts"><!-- Level 1 -->
    <title>PSQLのその他の改善点</title>
    <para>既存のPSQL構文の改善には以下のものが含まれます：</para>
    <section id="rnfb25-psql-imprvmts01"><!-- Level 2 -->
      <sectioninfo>
        <title>PSQL式としてのサブクエリ</title>
        <author><firstname>A.</firstname><surname>dos Santos Fernandes</surname></author>
      </sectioninfo>

      <para>トラッカー・リファレンス <ulink url="http://tracker.firebirdsql.org/browse/CORE-2580">CORE-2580</ulink></para>
      <para>従来は、PSQL式として使われるサブクエリは、SQLの項としてロジカルに有効な場合でも、例外を返していました。例えば、以下の構文ではすべてエラーが返されました：</para>
      <programlisting>
var = (select ... from ...);
if ((select ... from ...) = 1) then
if (1 = any (select ... from ...)) then
if (1 in (select ... from ...)) then
      </programlisting>

      <para>このような有効と見られる式は認められるようになりました。これで、SELECT...INTOを使って何が何でもスカラサブクエリの出力を取得して中間変数に渡すといった必要はなくなりました。</para>
    </section><!-- Level 2 -->

<!-- Added in v.2.5.1 -->

    <section id="rnfb251-psql-imprvmts02"><!-- Level 2 -->
      <sectioninfo>
        <title>コンテキスト変数としてのSQLSTATE</title>
        <author><firstname>D.</firstname><surname>Yemanov</surname></author>
      </sectioninfo>
      <para>トラッカー・リファレンス <ulink url="http://tracker.firebirdsql.org/browse/CORE-2890">CORE-2890</ulink></para>
      <para><emphasis role="bold">（バージョン2.5.1）</emphasis>SQLSTATEがPSQLコンテキスト変数として利用可能になりました。WHEN文中の例外処理部でGDSCODEやSQLCODEと同様に使われます。</para>
    </section>
  </section><!-- Level 1 -->
</chapter>
