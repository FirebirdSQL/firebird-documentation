<chapter id="rnfb25-dml">
  <chapterinfo>
    <title>データ操作言語（DML）</title>
  </chapterinfo>
  <para>この章では、Firebird 2.5でSQLのデータ操作言語サブセットに施された追加と改善を扱います。</para>

  <section id="rnfb25-dml-links"><!-- Level 1 section -->
    <title>クイックリンク</title>
    <itemizedlist spacing="compact">
      <listitem>
        <para><link linkend="rnfb25-dml-regex">SIMILAR TOを用いた正規表現検索のサポート</link></para>
      </listitem>
      <listitem>
        <para><link linkend="rnfb25-dml-hex">16進数リテラルのサポート</link></para>
      </listitem>
      <listitem>
        <para><link linkend="rnfb25-dml-uuid">新しいUUID変換関数</link></para>
      </listitem>
      <listitem>
        <para><link linkend="rnfb25-dml-lst">LIST()関数の拡張</link></para>
      </listitem>
      <listitem>
        <para><link linkend="rnfb25-dml-orisnull">SOME_COL = ? OR ? IS NULL句</link></para>
      </listitem>
<!-- Added v.2.5.1 -->
      <listitem>
        <para><link linkend="rnfb251-dml-datefuncs">DATEADD()およびDATEDIFF()関数の拡張</link></para>
      </listitem>
      <listitem>
        <para><link linkend="rnfb251-dml-bin-not">BIN_NOT()関数の追加</link></para>
      </listitem>
      <listitem>
        <para><link linkend="rnfb251-dml-write-temp">読み取り専用データベースでの一時表への書き込み</link></para>
      </listitem>
<!-- End addition -->
      <listitem>
        <para><link linkend="rnfb25-dml-optimiz">オプティマイザの改善</link></para>
      </listitem>
    </itemizedlist>

    <section id="rnfb25-dml-regex"><!-- Level 2 section -->
      <sectioninfo>
        <title>SIMILAR TOを用いた正規表現検索のサポート</title>
        <author>
          <firstname>Adriano</firstname>
          <surname>dos Santos Fernandes</surname>
        </author>
      </sectioninfo>
      <para>トラッカー・リファレンス  <ulink url="http://tracker.firebirdsql.org/browse/CORE-769">CORE-769</ulink></para>
      <para>新たなSIMILAR TO句の導入により、正規表現がサポートされました。この演算子には、与えられたSQL標準の正規表現が引数の文字列にマッチするか検証する機能があります。これは、WHERE句やCHECK制約、PSQLのIF() test文など、ブール式を受け付ける任意の文脈で有効となります。</para>

      <para><emphasis role="bold">構文パターン</emphasis></para>
      <programlisting>
&lt;similar句&gt; ::=
	&lt;値&gt; [ NOT ] SIMILAR TO &lt;similarパターン&gt; [ ESCAPE &lt;エスケープキャラクタ&gt; ]

&lt;similarパターン&gt; ::= &lt;キャラクタ値表現: 正規表現&gt;

&lt;正規表現&gt; ::=
      &lt;正規項&gt;
    | &lt;正規表現&gt; &lt;バーティカルバー&gt; &lt;正規項&gt;

&lt;正規項&gt; ::=
      &lt;正規因子&gt;
    | &lt;正規項&gt; &lt;正規因子&gt;

&lt;正規因子&gt; ::=
      &lt;正規一次子&gt;
    | &lt;正規一次子&gt; &lt;アスタリスク&gt;
    | &lt;正規一次子&gt; &lt;正符号&gt;
    | &lt;正規一次子&gt; &lt;疑問符&gt;
    | &lt;正規一次子&gt; &lt;繰り返し因子&gt;

&lt;繰り返し因子&gt; ::=
    &lt;左波括弧&gt; &lt;下限値&gt; [ &lt;上限指定&gt; ] &lt;右波括弧&gt;

&lt;上限指定&gt; ::= &lt;コンマ&gt; [ &lt;上限値&gt; ]

&lt;下限値&gt; ::= &lt;符号なし整数&gt;

&lt;上限値&gt; ::= &lt;符号なし整数&gt;

&lt;正規一次子&gt; ::=
      &lt;キャラクタ指定子&gt;
    | &lt;パーセント記号&gt;
    | &lt;正規キャラクタ・セット&gt;
    | &lt;left paren&gt; &lt;正規表現&gt; &lt;右括弧&gt;

&lt;キャラクタ指定子&gt; ::=
      &lt;エスケープされないキャラクタ&gt;
    | &lt;エスケープされたキャラクタ&gt;

&lt;正規キャラクタ・セット&gt; ::=
      &lt;アンダースコア&gt;
    | &lt;左角括弧&gt; &lt;キャラクタ列挙&gt;... &lt;右角括弧&gt;
    | &lt;左角括弧&gt; &lt;サーカムフレックス&gt; &lt;キャラクタ列挙&gt;... &lt;右角括弧&gt;
    | &lt;左角括弧&gt; &lt;包含するキャラクタの列挙&gt;... &lt;サーカムフレックス&gt; &lt;除外するキャラクタの列挙 exclude&gt;... 
        &lt;右角括弧&gt;

&lt;包含するキャラクタの列挙&gt; ::= &lt;キャラクタ列挙&gt;

&lt;除外するキャラクタの列挙&gt; ::= &lt;キャラクタ列挙&gt;

&lt;キャラクタ列挙&gt; ::=
      &lt;キャラクタ指定子&gt;
    | &lt;キャラクタ指定子&gt; &lt;負符号&gt; &lt;キャラクタ指定子&gt;
    | &lt;左角括弧&gt; &lt;コロン&gt; &lt;キャラクタクラス識別子&gt; &lt;コロン&gt; &lt;右角括弧&gt;

&lt;キャラクタ指定子&gt; ::=
      &lt;エスケープされないキャラクタ&gt;
    | &lt;エスケープされたキャラクタ&gt;

&lt;キャラクタクラス識別子&gt; ::=
      ALPHA
    | UPPER
    | LOWER
    | DIGIT
    | SPACE
    | WHITESPACE
    | ALNUM
      </programlisting>

      <note>
        <orderedlist>
          <listitem>
          <para>&lt;エスケープされないキャラクタ&gt;とは、&lt;左角括弧&gt;、&lt;右角括弧&gt;、&lt;左括弧&gt;、&lt;右括弧&gt;、&lt;バーティカルバー&gt;、&lt;サーカムフレックス&gt;、&lt;負符号&gt;、&lt;正符号&gt;、&lt;アスタリスク&gt;、&lt;アンダースコア&gt;、&lt;パーセント記号&gt;、&lt;疑問符&gt;、&lt;左波括弧&gt;、&lt;エスケープキャラクタ&gt;を除く任意のキャラクタです。</para>
          </listitem>
          <listitem>
          <para>&lt;エスケープされたキャラクタ&gt;とは、&lt;左角括弧&gt;、&lt;右角括弧&gt;、&lt;左括弧&gt;、&lt;右括弧&gt;、&lt;バーティカルバー&gt;、&lt;サーカムフレックス&gt;、&lt;負符号&gt;、&lt;正符号&gt;、&lt;アスタリスク&gt;,&lt;アンダースコア&gt;、&lt;パーセント記号&gt;、&lt;疑問符&gt;、&lt;左波括弧&gt;、&lt;エスケープキャラクタ&gt;のいずれか一つが続く&lt;エスケープキャラクタ&gt;です。</para>
          </listitem>
        </orderedlist>
      </note>

      <table id="rnfb25-t1">
        <title>キャラクタクラス識別子</title>
        <tgroup cols="3">
          <colspec align="left" colname="col-identifier" colwidth="1*"/>
          <colspec align="left" colname="col-desc" colwidth="2*"/>
          <colspec align="left" colname="col-note" colwidth="2*"/>
          <thead>
            <row>
              <entry align="left">識別子</entry>
              <entry align="left">説明</entry>
              <entry align="left">注意</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>ALPHA</entry>
              <entry>単純なラテン文字の全てのキャラクタ（a-z, A-Z）</entry>
              <entry>アクセントを無視したコレーションを使う場合はアクセント付きラテン文字を含む</entry>
            </row>
            <row>
              <entry>UPPER</entry>
              <entry>単純なラテン文字で大文字の全てのキャラクタ（A-Z）</entry>
              <entry>大文字小文字を区別しないコレーションを使う場合は小文字を含む</entry>
            </row>
            <row>
              <entry>LOWER</entry>
              <entry>単純なラテン文字で小文字の全てのキャラクタ（a-z）</entry>
              <entry>大文字小文字を区別しないコレーションを使う場合は大文字を含む</entry>
            </row>
            <row>
              <entry>DIGIT</entry>
              <entry>数字の全てのキャラクタ（0-9）</entry>
              <entry></entry>
            </row>
            <row>
              <entry>SPACE</entry>
              <entry>スペースキャラクタである全てのキャラクタ（ASCII 32）</entry>
              <entry></entry>
            </row>
            <row>
              <entry>WHITESPACE</entry>
              <entry>ボワイトスペースである全てのキャラクタ（垂直タブ（9）、改行（10）、水平タブ（11）、キャリッジリターン（13）、改頁（12）、スペース（32））</entry>
              <entry></entry>
            </row>
            <row>
              <entry>ALNUM</entry>
              <entry>単純なラテン文字（ALPHA）または数字（DIGIT）である全てのキャラクタ</entry>
              <entry></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para><emphasis role="bold">使用ガイド</emphasis></para>

       <para>&lt;正規表現&gt;または&lt;正規項&gt;にマッチする文字列に true を返します：</para>
       <literallayout class="monospaced">
      &lt;正規表現&gt; &lt;バーティカルバー&gt; &lt;正規項&gt;
       </literallayout>
       <programlisting>
    'ab' SIMILAR TO 'ab|cd|efg'   -- true
    'efg' SIMILAR TO 'ab|cd|efg'  -- true
    'a' SIMILAR TO 'ab|cd|efg'    -- false
       </programlisting>
       <para>&lt;正規一次子&gt;のゼロ回以上の繰り返しにマッチします：&lt;正規一次子&gt; &lt;アスタリスク&gt;</para>
       <programlisting>
    '' SIMILAR TO 'a*'     -- true
    'a' SIMILAR TO 'a*'    -- true
    'aaa' SIMILAR TO 'a*'  -- true
       </programlisting>

       <para>&lt;r正規一次子&gt;の一回以上の繰り返しにマッチします：&lt;正規一次子&gt; &lt;正符号&gt;</para>
       <programlisting>
    '' SIMILAR TO 'a+'     -- false
    'a' SIMILAR TO 'a+'    -- true
    'aaa' SIMILAR TO 'a+'  -- true
       </programlisting>

       <para>ゼロ個または一個の&lt;正規一次子&gt;にマッチします：&lt;正規一次子&gt; &lt;疑問符&gt;</para>
       <programlisting>
    '' SIMILAR TO 'a?'     -- true
    'a' SIMILAR TO 'a?'    -- true
    'aaa' SIMILAR TO 'a?'  -- false
       </programlisting>

       <para>&lt;正規一次子&gt;のきっかり&lt;下限値&gt;回の繰り返しにマッチします：&lt;正規一次子&gt; &lt;左括波括弧&gt; &lt;下限値&gt; &lt;右波括弧&gt;</para>
       <programlisting>
    '' SIMILAR TO 'a{2}'     -- false
    'a' SIMILAR TO 'a{2}'    -- false
    'aa' SIMILAR TO 'a{2}'   -- true
    'aaa' SIMILAR TO 'a{2}'  -- false
       </programlisting>

       <para>&lt;正規一次子&gt;の&lt;下限値&gt;以上の繰り返しにマッチします：&lt;正規一次子&gt; &lt;左波括弧&gt; &lt;下限値&gt; &lt;コンマ&gt; &lt;右波括弧&gt;</para>
       <programlisting>
    '' SIMILAR TO 'a{2,}'     -- false
    'a' SIMILAR TO 'a{2,}'    -- false
    'aa' SIMILAR TO 'a{2,}'   -- true
    'aaa' SIMILAR TO 'a{2,}'  -- true
       </programlisting>

       <para>&lt;正規一次子&gt;の&lt;下限値&gt;回以上&lt;上限値&gt;回以下の繰り返しにマッチします：&lt;正規一次子&gt; &lt;左波括弧&gt; &lt;下限値&gt; &lt;コンマ&gt; &lt;上限値&gt; &lt;右波括弧&gt;</para>
       <programlisting>
    '' SIMILAR TO 'a{2,4}'       -- false
    'a' SIMILAR TO 'a{2,4}'      -- false
    'aa' SIMILAR TO 'a{2,4}'     -- true
    'aaa' SIMILAR TO 'a{2,4}'    -- true
    'aaaa' SIMILAR TO 'a{2,4}'   -- true
    'aaaaa' SIMILAR TO 'a{2,4}'  -- false
       </programlisting>

       <para>（空ではない）任意のキャラクタにマッチします：&lt;アンダースコア&gt;</para>
       <programlisting>
    '' SIMILAR TO '_'    -- false
    'a' SIMILAR TO '_'   -- true
    '1' SIMILAR TO '_'   -- true
    'a1' SIMILAR TO '_'  -- false
       </programlisting>

       <para>任意の長さの文字列（空の文字列を含む）にマッチします：&lt;パーセント記号&gt;</para>
       <programlisting>
    '' SIMILAR TO '%'         -- true
    'az' SIMILAR TO 'a%z'     -- true
    'a123z' SIMILAR TO 'a%z'  -- true
    'azx' SIMILAR TO 'a%z'    -- false
       </programlisting>

       <para>&lt;正規表現&gt;を部分式としてグループ化し、一つの&lt;正規一次子&gt;として使います：&lt;左括弧&gt; &lt;正規表現&gt; &lt;右括弧&gt;</para>
       <programlisting>
    'ab' SIMILAR TO '(ab){2}'    -- false
    'aabb' SIMILAR TO '(ab){2}'  -- false
    'abab' SIMILAR TO '(ab){2}'  -- true
       </programlisting>

       <para>&lt;キャラクタ列挙&gt;中の一つのキャラクタにマッチします：&lt;左角括弧&gt; &lt;キャラクタ列挙&gt;... &lt;右角括弧&gt;</para>
        <programlisting>
    'b' SIMILAR TO '[abc]'    -- true
    'd' SIMILAR TO '[abc]'    -- false
    '9' SIMILAR TO '[0-9]'    -- true
    '9' SIMILAR TO '[0-8]'    -- false
       </programlisting>

       <para>&lt;キャラクタ列挙&gt;中のものを除くキャラクタにマッチします：&lt;左角括弧&gt; &lt;サーカムフレックス&gt; &lt;キャラクタ列挙&gt;... &lt;右角括弧&gt;</para>
       <programlisting>
    'b' SIMILAR TO '[^abc]'    -- false
    'd' SIMILAR TO '[^abc]'    -- true
       </programlisting>

       <para>&lt;除外するキャラクタの列挙&gt;中のキャラクタを除く&lt;包含するキャラクタの列挙&gt;中の一つのキャラクタにマッチします：&lt;左角括弧&gt; &lt;包含するキャラクタの列挙&gt;... &lt;サーカムフレックス&gt; &lt;除外するキャラクタの列挙&gt;...</para>
       <programlisting>
    '3' SIMILAR TO '[[:DIGIT:]^3]'    -- false
    '4' SIMILAR TO '[[:DIGIT:]^3]'    -- true
       </programlisting>

       <para>&lt;キャラクタクラス識別子&gt;に含まれる一つのキャラクタにマッチします。上掲の<link linkend="rnfb25-t1">キャラクタクラス識別子</link>の一覧表を参照して下さい。&lt;サーカムフレックス&gt;と一緒に使い、ロジックを反転させることもできます（上記）：&lt;左角括弧&gt; &lt;コロン&gt; &lt;キャラクタクラス識別子&gt; &lt;コロン&gt; &lt;右角括弧&gt;</para>
       <programlisting>
    '4' SIMILAR TO '[[:DIGIT:]]'  -- true
    'a' SIMILAR TO '[[:DIGIT:]]'  -- false
    '4' SIMILAR TO '[^[:DIGIT:]]' -- false
    'a' SIMILAR TO '[^[:DIGIT:]]' -- true
       </programlisting>

      <para><emphasis role="bold">例</emphasis></para>
      <programlisting>
create table department (
  number numeric(3) not null,
  name varchar(25) not null,
  phone varchar(14) 
  check (phone similar to '\([0-9]{3}\) [0-9]{3}\-[0-9]{4}' escape '\')
);

insert into department 
  values ('000', 'Corporate Headquarters', '(408) 555-1234');
insert into department 
  values ('100', 'Sales and Marketing', '(415) 555-1234');
insert into department 
  values ('140', 'Field Office: Canada', '(416) 677-1000');

insert into department
  values ('600', 'Engineering', '(408) 555-123'); -- 制約違反をチェック

select * from department
  where phone not similar to '\([0-9]{3}\) 555\-%' escape '\';
      </programlisting>
    </section>

    <section id="rnfb25-dml-hex"><!-- Level 2 section -->
      <sectioninfo>
        <title>16進数リテラルのサポート</title>
        <authorgroup>
          <author><firstname>Bill</firstname><surname>Oliver</surname></author>
          <author><firstname>Adriano</firstname><surname>dos Santos Fernandes</surname></author>
        </authorgroup>
      </sectioninfo>
      <para>トラッカー・リファレンス <ulink url="http://tracker.firebirdsql.org/browse/CORE-1760">CORE-1760</ulink></para>
      <para>16進数値とバイナリ文字列リテラルのサポートが導入されました。</para>

      <para><emphasis role="bold">構文パターン</emphasis></para>
      <programlisting>
&lt;16進数リテラル&gt; ::=
    { 0x | 0X } &lt;hexit&gt; [ &lt;hexit&gt;... ]

&lt;バイナリ文字列リテラル&gt; ::=
    { x | X } &lt;クオート&gt; [ { &lt;hexit&gt; &lt;hexit&gt; }... ] &lt;クオート&gt;

&lt;数字&gt; ::=
    0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

&lt;hexit&gt; ::=
    &lt;数字&gt; | A | B | C | D | E | F | a | b | c | d | e | f
      </programlisting>

      <section id="rnfb25-dml-hex-lit"><!-- section 3 -->
        <title>16進数リテラル</title>
        <itemizedlist>
          <listitem>
            <para>文字列中の&lt;hexit&gt;の数字は16を超えることはできません。</para>
          </listitem>
          <listitem>
            <para>&lt;hexit&gt;の数字が8を超えた場合、定数データ型は符号付BIGINTとなります。8以下の場合のデータ型は符号付INTEGERです。</para>
            <tip>
              <para>つまり、0xF0000000は-268435456であり、また0x0F0000000は4026531840である、ということです。</para>
            </tip>
          </listitem>
        </itemizedlist>
      </section>

      <section id="rnfb25-dml-hex-bin"><!-- section 3 -->
        <title>バイナリ文字列リテラル</title>
        <para>結果として生じる文字列は、CHAR(<emphasis>n</emphasis>/2) CHARACTER SET OCTETSとして定義されます。<emphasis>n</emphasis>は&lt;hexit&gt;の数字です。</para>
      </section>

      <para><emphasis role="bold">例</emphasis></para>
      <programlisting>
select 0x10, cast('0x0F0000000' as bigint)
  from rdb$database;
select x'deadbeef'
  from rdb$database;
      </programlisting>
    </section>

    <section id="rnfb25-dml-genuuid"><!-- Level 2 section -->
      <sectioninfo>
        <title>GEN_UUID()関数に対する重要な変更</title>
        <author>
          <firstname>Adriano</firstname>
          <surname>dos Santos Fernandes</surname>
        </author>
      </sectioninfo>

      <para>Firebird 2.5.2より前のバージョンでは、組み込み関数GEN_UUID()は完全にランダムな文字列を返しており、RFC-4122（UUID仕様）非対応となっていました。2.5.2以降、GEN_UUID()はUUIDバージョン4に準拠した文字列を返します。一部のbitは予約されており、それ以外はランダムとなります。</para>
      <note>
        <para>UUIDに準拠した文字列フォーマットは、次のようなものです。</para>
        <para><command>XXXXXXXX-XXXX-4XXX-YXXX-XXXXXXXXXXXX</command></para>
        <para>4は固定（バージョンを示す）で、Yは8、9、AまたはBです。</para>
      </note>
      <para>トラッカー・アイテム <ulink url="http://tracker.firebirdsql.org/browse/CORE-3238">CORE-3238</ulink>参照。</para>

    <section id="rnfb25-dml-uuid"><!-- Level 2 section -->
      <sectioninfo>
        <title>新しいUUID変換関数</title>
        <author>
          <firstname>Adriano</firstname>
          <surname>dos Santos Fernandes</surname>
        </author>
      </sectioninfo>
      <para>トラッカー・リファレンス <ulink url="http://tracker.firebirdsql.org/browse/CORE-1656">CORE-1656</ulink> および <ulink url="http://tracker.firebirdsql.org/browse/CORE-1682">CORE-1682</ulink></para>
      <para>新しい組み込み関数UUID_TO_CHARとCHAR_TO_UUIDにより、UUID CHAR(16) OCTETS文字列の形式とRFC4122-compliantの形式との相互の変換が可能になりました。</para>
      
      <important>
        <title>ビッグエンディアンのサーバーに関する注意点</title>
        <para>ビッグエンディアンのサーバー上のFirebird 2.5と2.5.1で、CHAR_TO_UUIDとUUID_TO_CHARは正しく動作しませんでした。変換の際にバイトやキャラクタが入れ替わり、誤った位置に置かれてしまうという不具合がありました。このバグはバージョン2.5.2以上では修正されています：トラッカー・アイテム <ulink url="http://tracker.firebirdsql.org/browse/CORE-3887">CORE-3887</ulink>を参照して下さい。ただし、このことは、バージョン2.5.2以降のCHAR_TO_UUIDとUUID_TO_CHARが、同じ入力パラメータに対して、以前のバージョンとは異なる値を返すということを意味します。</para>
      </important>
     </section>

      <section id="rnfb25-dml-uuid01"><!-- Level 3 section -->
        <title>CHAR_TO_UUID()</title>
        <para>CHAR_TO_UUID()関数はUUID（XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX）に対するCHAR(32) ASCII表現をストレージに最適化されたCHAR(16) OCTETS表現に変換します。</para>

        <para><emphasis role="bold">構文モデル</emphasis></para>
        <programlisting>
CHAR_TO_UUID( &lt;文字列&gt; )
        </programlisting>
        <para><emphasis role="bold">例</emphasis></para>
        <programlisting>
select char_to_uuid('93519227-8D50-4E47-81AA-8F6678C096A1')
  from rdb$database;
        </programlisting>
      </section>

      <section id="rnfb25-dml-uuid02"><!-- Level 3 section -->
        <title>UUID_TO_CHAR()</title>
        <para>UUID_TO_CHAR()関数は、CHAR(16) OCTETS UUID（GEN_UUID()関数で返されるもの）をCHAR(32) ASCII表現（XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX）に変換します。</para>

        <para><emphasis role="bold">構文モデル</emphasis></para>
        <programlisting>
UUID_TO_CHAR( &lt;文字列&gt; )
        </programlisting>
        <para><emphasis role="bold">例</emphasis></para>
        <programlisting>
select uuid_to_char(gen_uuid())
  from rdb$database;
        </programlisting>
      </section>
    </section><!-- Level 2 -->

    <section id="rnfb25-dml-orisnull"><!-- Level 2 section -->
      <sectioninfo>
        <title>SOME_COL = ? OR ? IS NULL句</title>
        <author>
          <firstname>Adriano</firstname>
          <surname>dos Santos Fernandes</surname>
        </author>
      </sectioninfo>
      <para>トラッカー・リファレンス <ulink url="http://tracker.firebirdsql.org/browse/CORE-2298">CORE-2298</ulink></para>

      <para>特に多くのDelphiプログラマからの要望を受け、カラムとパラメータが同値であるか、また、パラメータに渡された値がNULLかどうかの両方について<quote>OR</quote>テストを行うことができる演算子のサポートが実装されました。この構造体は、一つのクエリをプリペアしてフィルタを用いた結果のセットをリクエストし、同じクエリでフィルタを用いない別の結果のセットをリクエストするというような状況を避けるための手段としてしばしば要望されていました。</para>

      <para>Delphiなどのプログラミング・インターフェースはパラメータにクライアントサイドのオブジェクト名を適用するため、それらのユーザーは、DSQLエンジンが以下のような使い方を認めてくれるような機能を求めていました：</para>
      <literallayout class="monospaced">
  WHERE col1 = :param1 OR :param1 IS NULL
      </literallayout>

      <para>APIレベルでは、言語インターフェースはこのクエリを次のように翻訳します。</para>
      <literallayout class="monospaced">
  WHERE col1 = ? OR ? IS NULL
      </literallayout>

      <para>これには二つの問題がありました：</para>
      <orderedlist>
        <listitem>
          <para>プログラマはパラメータ<command>:param1</command>を、二つの参照を持つ単一の変数のように扱いますが、APIにはそれができません：これは二つの<emphasis>パラメータ</emphasis>で与えられます</para>
        </listitem>

        <listitem>
          <para>第二のパラメータのデータ型は未知のものとなり、プログラムがこれに割り当てる方法はありません。</para>
        </listitem>
      </orderedlist>

      <para>この問題の解決に必要だったのは、条件句<quote>? is NULL</quote>を扱える新しいデータ型を導入し、このようなリクエストを受け取った時に正しい処理を行えるようにFirebirdに仕込むことでした。</para>

      <para>この実装は、次のように動作します。第一の問題の解決のため、リクエストは<emphasis>二つの</emphasis>パラメータ（われわれのDelphiの例では）を与える必要があります：</para>
      <literallayout class="monospaced">
  WHERE col1 = :param1 OR :param2 IS NULL
      </literallayout>
      <itemizedlist>
        <listitem>
          <para><quote>param1</quote>がNULLでない場合、言語インターフェースは第一のパラメータに正しい値を割り当て、<command>XSQLVAR.sqlind</command>をNOT NULLに設定する必要があります。XSQLVAR.sqldataはNULLのままとします。</para>
        </listitem>
        <listitem>
          <para><quote>param2</quote>がNULLの場合、言語インターフェースは<emphasis>両方の</emphasis>パラメータのXSQLVAR.sqlindをNULLに設定する必要があります。XSQLVAR.sqldataはNULLのままとします。</para>
        </listitem>
      </itemizedlist>
      <para>言い換えると、 <command>? IS NULL</command>中のパラメータ（&nbsp;?&nbsp;）について：</para>

      <itemizedlist>
        <listitem>
          <para>XSQLVAR.sqlindは、パラメータのNULL/NON-NULLの状態に応じて設定される必要があります。これは新しい定数SQL_NULLによって記述されるパラメータの型です。</para>
        </listitem>
        <listitem>
          <para>パラメータのSQL_NULL型のXSQLVAR.sqldataは、常にクライアントのアプリケーションからNULLポインタとして渡される必要があり、決してアクセスされることはありません。</para>
        </listitem>
      </itemizedlist>

      <note>
        <title>出力セットに指定されたNULL</title>
        <para>NULLが出力定数として指定された場合（<command>select NULL from ...</command>）は、SQL_NULLによってではなく、当面はCHAR(1)として記述されることになります。これは将来のバージョンで変更される可能性があります。</para>
      </note>

    </section>

    <section id="rnfb25-dml-lst"><!-- Level 2 section -->
      <sectioninfo>
        <title>LIST()関数の拡張</title>
        <author>
          <firstname>Adriano</firstname>
          <surname>dos Santos Fernandes</surname>
        </author>
      </sectioninfo>
      <para>トラッカー・リファレンス <ulink url="http://tracker.firebirdsql.org/browse/CORE-1453">CORE-1453</ulink></para>
      <para>LIST()関数の区切り文字引数として文字列表現が認められるようになりました。</para>
      <para><emphasis role="bold">例</emphasis></para>
      <programlisting>
SELECT
  DISCUSSION_ID,
  LIST(COMMMENT, ASCII_CHAR(13))
FROM COMMENTS
  GROUP BY DISCUSSION_ID;
      </programlisting>
    </section><!-- sect2 -->
    
<!-- Added v.2.5.1 -->
    <section id="rnfb251-dml-datefuncs"><!-- Level 2 section -->
      <sectioninfo>
        <title>DATEADD()およびDATEDIFF()関数の拡張</title>
        <author>
          <firstname>Adriano</firstname>
          <surname>dos Santos Fernandes</surname>
        </author>
      </sectioninfo>
      <para>関数DATEADDとDATEDIFFにWEEKユニットが導入されました。</para>
      <para>MILLISECOND、SECOND．MINUTE．HOURユニットはもう無効なユニットではなく、DATE引数と一緒に使用できます。</para>
    </section>

    <section id="rnfb251-dml-bin-not"><!-- Level 2 section -->
      <sectioninfo>
        <title>BIN_NOT()関数の追加</title>
        <author>
          <firstname>Adriano</firstname>
          <surname>dos Santos Fernandes</surname>
        </author>
      </sectioninfo>
      <para>新しい関数BIN_NOT()はその引数で実行されるbitごとのNOT演算の結果を返します。これで、バージョン2.1で追加された組み込みバイナリ関数のセットが揃ったことになります。</para>
      <para><emphasis role="bold">構文パターン</emphasis></para>
      <literallayout class="monospaced">
  BIN_NOT( &lt;数字&gt; )
      </literallayout>
      <para><emphasis role="bold">例</emphasis></para>
      <programlisting>
select bin_not(flags) from x;
      </programlisting>
    </section>
    
    <section id="rnfb251-dml-write-temp"><!-- Level 2 section -->
      <sectioninfo>
        <title>読み取り専用データベースでの一時表への書き込み</title>
        <author>
          <firstname>Vladyslav</firstname>
          <surname>Khorsun</surname>
        </author>
      </sectioninfo>
      <para><emphasis role="bold">（バージョン2.5.1）</emphasis>読み取り専用データベースでのグローバル一時表への書き込み操作が可能になりました。</para>
      <para>トラッカー・リファレンス <ulink url="http://tracker.firebirdsql.org/browse/CORE-3399">CORE-3399</ulink></para>
    </section>

<!-- End addition -->

    <section id="rnfb25-dml-optimiz"><!-- Level 2 section -->
      <title>オプティマイザの改善</title>
      <para>認識済みの問題に対処するオプティマイザロジックの変更には以下のものを含みます：</para>
      <variablelist>
        <varlistentry>
          <term>CROSS JOINのロジック（D. Yemanov）</term>
          <listitem>
            <para>CROSS JOINが空のテーブルを含んでいる場合でも、オプティマイザには、クエリが無効であることを検出してすぐに空のセットを返すための特別なロジックがありませんでした。そのショートカット・ロジックが実装されました。</para>
            <para>トラッカー・リファレンス <ulink url="http://tracker.firebirdsql.org/browse/CORE-2200">CORE-2200</ulink></para>
            <note>
              <para>同様の変更はv.2.1.2で実装されています。</para>
            </note>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>派生テーブル（A. dos Santos Fernandes）</term>
          <listitem>
            <para>派生テーブルの使用中に利用できるコンテキスト数の上限が拡大されました。</para>
            <para>トラッカー・リファレンス <ulink url="http://tracker.firebirdsql.org/browse/CORE-2029">CORE-2029</ulink></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>DEFAULT評価のタイミング（A. dos Santos Fernandes）</term>
          <listitem>
            <para>まれな状況ですが、カラムに定義されたDEFAULTの値または式に対する評価が早いと、そのカラムに与えられた入力値の評価に関して、混乱した状況を引き起こす可能性があります。この可能性については、DEFAULTの評価を延期し、実際の必要がない限り、実際には全く評価を実行しないことによって対処します。</para>
            <para>トラッカー・リファレンス <ulink url="http://tracker.firebirdsql.org/browse/CORE-1842">CORE-1842</ulink></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>NOT IN検索でのインデックスの使用（A. dos Santos Fernandes）</term>
          <listitem>
            <para>NOT IN句でインデックスの使用を可能にすることにより、パフォーマンスが改善されました。</para>
            <para>トラッカー・リファレンス <ulink url="http://tracker.firebirdsql.org/browse/CORE-1137">CORE-1137</ulink></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Undoログのメモリ消費（D. Yemanov）</term>
          <listitem>
            <para>一度のトランザクションで長く続いた更新の後の、Undoログによる過剰なメモリ消費が回避されました。</para>
            <para>トラッカー・リファレンス <ulink url="http://tracker.firebirdsql.org/browse/CORE-1477">CORE-1477</ulink></para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section><!-- sect2 -->

    <section id="rnfb25-dml-other"><!-- Level 2 section -->
      <title>その他の改善点</title>
      <para>小さなイライラを解消するその他の変更点は、以下のものを含みます：</para>
      <variablelist>

        <varlistentry>
          <term>FREE_ITエラー検出（A. dos Santos Fernandes）</term>
          <listitem>
            <para>従来は、FREE_ITを使って宣言されたUDFが、返されたポインタが<command>ib_util_malloc()</command>関数によって割り当てられなかった場合にクラッシュすることがありました。現在は、そのような状況が検出されると、例外がスローされ、ポインタは割り当てられた状態を維持します。</para>
            <para>トラッカー・リファレンス <ulink url="http://tracker.firebirdsql.org/browse/CORE-1937">CORE-1937</ulink></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>メッセージ<quote>式の評価はサポートされていません</quote>の改善（C. Valderrama）</term>
          <listitem>
            <para>多くのセカンダリGDSコードが導入されました。これにより、<quote>式の評価はサポートされていません</quote>の例外がスローされて失敗していた操作に関して、詳細情報が与えられるようになりました。例えば：</para>
            <literallayout class="monospaced">
  'Argument for @1 in dialect 1 must be string or numeric（ダイアレクト1での@1の引数は文字列か数値でなければなりません）'
  'Strings cannot be added to or subtracted from DATE or TIME types（文字列を追加したり、DATE型やTIME型から取り去ることはできません）'
  'Invalid data type for subtraction involving DATE, TIME or TIMESTAMP types（DATE、TIME、TIMESTAMP型が必要な減算に対する無効なデータ型です）'
   など
            </literallayout>
            <para>これらの詳細メッセージは、ステータスベクターでの<command>isc_expression_eval_err（式の評価はサポートされていません）</command>エラー用のGDSコードに従っています。</para>
            <para>トラッカー・リファレンス <ulink url="http://tracker.firebirdsql.org/browse/CORE-1799">CORE-1799</ulink></para>
          </listitem>
        </varlistentry>
      </variablelist>

    </section><!-- sect2 -->
  </section>

</chapter>
