<?xml version="1.0" encoding="UTF-8"?>
<!--
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
-->
<book id="langref25">
  <bookinfo>
    <title>Firebird 2.5 Language Reference</title>
    <author>
      <firstname>Paul</firstname>
      <surname>Vinkenoog et al.</surname>
    </author>
    <edition>December 2010, document version 1.0</edition>
  </bookinfo>
  <chapter id="langref25-intro">
    <title>Introduction</title>
    <section id="langref25-intro-subject">
      <title>Subject matter</title>
      <subtitle>What's this book about?</subtitle>
      <para>To be updated.</para>
    </section>
    <section id="langref25-intro-authors">
      <title>Authorship</title>
      <para>To be updated.</para>
    </section>
  </chapter>
  <chapter id="langref25-background">
    <title>Background</title>
    <section id="langref25-background-flavors">
      <title>SQL flavors</title>
      <para>This reference describes the SQL language supported by Firebird. However, there are
        different subsets of SQL that apply to different areas and thus should be distinguished.
        Namely, they are:</para>
      <para>
        <itemizedlist>
          <listitem>
            <para>Dynamic SQL (DSQL)</para>
          </listitem>
          <listitem>
            <para>Procedural SQL (PSQL)</para>
          </listitem>
          <listitem>
            <para>Embedded SQL (ESQL)</para>
          </listitem>
          <listitem>
            <para>Interactive SQL (ISQL)</para>
          </listitem>
        </itemizedlist>
      </para>
      <para>Dynamic SQL is the major part of the language which corresponds to the Part 2
        (SQL/Foundation) part of the SQL specification. DSQL represents statements passed by client
        applications through the public Firebird API and processed by the database engine.</para>
      <para>Procedural SQL is the extention to the Dynamic SQL which additionally allows compound
        statements containing local variables, assignments, conditions, loops and other procedural
        constructs. PSQL corresponds to the Part 4 (SQL/PSM) part of the SQL specifications.
        Originally, PSQL extenstions were available in persistent stored modules (procedures and
        triggers) only, but recently they became surfaced in Dynamic SQL as well (see EXECUTE
        BLOCK).</para>
      <para>Embedded SQL defines the DSQL subset supported by Firebird GPRE - the application which
        allows you to embed SQL constructs into your host programming language (C, C++, Pascal,
        Cobol, etc) and preprocess those embedded constructs into the proper Firebird API calls.
        Please note that only a part of DSQL statements and expressions are supported in
        ESQL.</para>
      <para>Interactive ISQL means the language that can be executed using Firebird ISQL - the
        command-line application for interactive SQL access to databases. As it's a regular client
        application, its native language is DSQL. But it also offers a few additional commands </para>
      <para>Both DSQL and PSQL subsets are completely presented in this reference. Neither ESQL nor
        ISQL flavors are described here unless mentioned explicitly.</para>
    </section>
    <section id="langref25-background-dialects">
      <title>SQL dialects</title>
      <para>The SQL dialect is a term that defines the specific features of the SQL language that
        are available when accessing the database. SQL dialects can be defined at the database level
        and at the connection level. There are three dialects available:</para>
      <para>
        <itemizedlist>
          <listitem>
            <para>Dialect 1 stores both date and time information in a DATE data type and has a
              TIMESTAMP data type which is identical to DATE. Double quotes are used to delimit
              string data. The precision for NUMERIC and DECIMAL data types is less than in dialect
              3 and if the precision is greater than 9, Firebird internally stores these as long
              floating point values. BIGINT is not permitted as a data type. Identifiers are
              case-insensitive. Generator values are stored as 32-bit integers.</para>
          </listitem>
          <listitem>
            <para>Dialect 2 is available only on the Firebird client connection and cannot be set in
              the database. It is intended to assist debugging of possible problems with legacy data
              when migrating a database from dialect 1 to 3.</para>
          </listitem>
          <listitem>
            <para>Dialect 3 databases allow numbers (DECIMAL and NUMERIC data types) to be
              internally stored as long fixed point values (scaled integers) when the precision is
              greater than 9. The TIME data type is able to be used and stores time data only. The
              DATE data type stores on date information. BIGINT is available as a 64-bit integer
              data type. Double quotes can be used but only for identifiers that are case-sensitive,
              not for string data which has to use single quotes. Generator values are stored as
              64-bit integers.</para>
          </listitem>
        </itemizedlist>
      </para>
      <para>Dialect 1 is targeted to provide support for legacy (pre-v6) InterBase applications so
        that they would work the same way with Firebird. Dialect 2 is used as a transition dialect
        intended to highlight the issues while migrating to dialect 3. Newly developed databases and
        applications are highly recommended to use dialect 3. Both database and connection dialects
        should match, except the migration case with Dialect 2.</para>
      <para>This reference describes the semantics of SQL dialect 3 unless specified
        otherwise.</para>
    </section>
    <section id="langref25-background-errors">
      <title>Error conditions</title>
      <para>Processing of the every SQL statement either completes successfully or fails due to a
        specific error condition.</para>
    </section>
  </chapter>
  <chapter id="langref25-structure">
    <title>Language structure</title>
    <section id="langref25-structure-basics">
      <title>Basics: statements, tokens, keywords</title>
      <para>To be written.</para>
    </section>
    <section id="langref25-structure-identifiers">
      <title>Identifiers</title>
      <para>To be written.</para>
    </section>
    <section id="langref25-structure-literals">
      <title>Literals</title>
      <para>To be written.</para>
    </section>
    <section id="langref25-structure-operators">
      <title>Operators and specials</title>
      <para>To be written.</para>
    </section>
    <section id="langref25-structure-comments">
      <title>Comments</title>
      <para>To be written.</para>
    </section>
  </chapter>
  <chapter id="langref25-datatypes">
    <title>Data types</title>
    <section id="langref25-datatypes-numtypes">
      <title>Numeric types</title>
      <section id="langref25-datatypes-smallint">
        <title><database>SMALLINT</database></title>
        <para><database>SMALLINT</database> is the 16-bit signed integer type.</para>
        <formalpara>
          <title>Syntax:</title>
          <para>
            <blockquote>
              <programlisting>SMALLINT</programlisting>
            </blockquote>
          </para>
        </formalpara>
        <para><database>SMALLINT</database> numbers range from -2<superscript>15</superscript> to
            2<superscript>15</superscript>-1, or from -32768 to 32767.</para>
      </section>
      <section id="langref25-datatypes-integer">
        <title><database>INTEGER</database></title>
        <para><database>INTEGER</database> is the 32-bit signed integer type.</para>
        <formalpara>
          <title>Syntax:</title>
          <para>
            <blockquote>
              <programlisting>INTEGER</programlisting>
            </blockquote>
          </para>
        </formalpara>
        <para>A shorthand form <database>INT</database> is also available.</para>
        <para>INTEGER numbers range from -2<superscript>31</superscript> to
            2<superscript>31</superscript>-1, or from -2147483648 to 2147483647.</para>
      </section>
      <section id="langref25-datatypes-bigint">
        <title><database>BIGINT</database> data type</title>
        <para><database>BIGINT</database> is the 64-bit signed integer type.</para>
        <formalpara>
          <title>Syntax:</title>
          <para>
            <blockquote>
              <programlisting>BIGINT</programlisting>
            </blockquote>
          </para>
        </formalpara>
        <para><database>BIGINT</database> numbers range from -2<superscript>63</superscript> to
            2<superscript>63</superscript>-1, or from -9223372036854775808 to
          9223372036854775807.</para>
        <note>
          <para>The BIGINT data type is available in Dialect 3 only.</para>
        </note>
      </section>
      <section id="langref25-datatypes-float">
        <title><database>FLOAT</database> data type</title>
        <para><database>FLOAT (precision)</database> is the approximate number with the binary
          precision equal to or greater than specified by the &lt;precision>.</para>
        <formalpara>
          <title>Syntax:</title>
          <para>
            <blockquote>
              <programlisting>FLOAT [(precision)]</programlisting>
            </blockquote>
          </para>
        </formalpara>
        <para>The precision must be positive, but there's no explicit upper limit (however, it's
          physically limited by 32767). If the precision declaration is omitted, then zero value is
          implied.</para>
        <para>If the precision is less than 8 then the FLOAT data type is internally implemented as
          a single precision floating-point value (commonly it is 32-bit). The FLOAT data type with
          a greater declared precision is implemented as a double precision floating-point value
          (commonly it is 64-bit). Both formats are covered by the IEEE 754 standard.</para>
        <para>The declared precision is not strictly enforced, it only dictates the choice between
          the two supported binary precisions.</para>
      </section>
      <section id="langref25-datatypes-real">
        <title><database>REAL</database> data type</title>
        <para><database>REAL</database> is the approximate number with the binary precision less
          than 8.</para>
        <formalpara>
          <title>Syntax:</title>
          <para>
            <blockquote>
              <programlisting>REAL</programlisting>
            </blockquote>
          </para>
        </formalpara>
        <para>REAL is a predefined FLOAT data type implemented as a single precision floating-point
          value, so please refer to the appropriate section for the details.</para>
      </section>
      <section id="langref25-datatypes-double">
        <title><database>DOUBLE PRECISION</database> data type</title>
        <para><database>DOUBLE PRECISION</database> is the approximate number with the binary
          precision equal to or greater than 8.</para>
        <formalpara>
          <title>Syntax:</title>
          <para>
            <blockquote>
              <programlisting>DOUBLE PRECISION</programlisting>
            </blockquote>
          </para>
        </formalpara>
        <para>DOUBLE PRECISION is a predefined FLOAT data type implemented as a double precision
          floating-point value, so please refer to the appropriate section for the details.</para>
      </section>
      <section id="langref25-datatypes-longfloat">
        <title><database>LONG FLOAT</database> data type</title>
        <para><database>LONG FLOAT</database> is the approximate number with the binary precision
          equal to or greater than 8.</para>
        <formalpara>
          <title>Syntax:</title>
          <para>
            <blockquote>
              <programlisting>LONG FLOAT [(precision)]</programlisting>
            </blockquote>
          </para>
        </formalpara>
        <para>LONG FLOAT is non-standard alternative to the DOUBLE PRECISION data type, so please
          refer to the appropriate section for the details. The optional precision declaration is
          ignored.</para>
      </section>
      <section id="langref25-datatypes-numeric">
        <title><database>NUMERIC</database> data type</title>
        <para><database>NUMERIC (precision, scale)</database> is the exact number with the decimal
          precision and scale specified by the &lt;precision> and &lt;scale>.</para>
        <formalpara>
          <title>Syntax:</title>
          <para>
            <blockquote>
              <programlisting>NUMERIC [precision [, scale]]</programlisting>
            </blockquote>
          </para>
        </formalpara>
        <para>The scale of NUMERIC is the count of decimal digits in the fractional part, to the
          right of the decimal point. The precision of NUMERIC is the total count of decimal digits
          in the number.</para>
        <para>The precision must be positive, the maximum supported value is 18. The scale must be
          zero or positive, up to the specified precision.</para>
        <para>If the scale is omitted, then zero value is implied, thus meaning an integer value of
          the specified precision, i.e. NUMERIC (P) is equivalent to NUMERIC (P, 0). If both the
          precision and the scale are omitted, then precision of 9 and zero scale are implied, i.e.
          NUMERIC is equivalent to NUMERIC (9, 0).</para>
        <para>The internal representation of the NUMERIC data type may vary. Numerics with the
          precision up to (and including) 4 are always stored as scaled short integers (SMALLINT).
          Numerics with the precision up to (and including) 9 are always stored as scaled regular
          integers (INTEGER). Storage of higher precision numerics depends on the SQL dialect. In
          Dialect 3, they are stored as scaled large integers (BIGINT). In Dialect 1, however, large
          integers are not available, therefore they are stored as double precision floating-point
          values (DOUBLE PRECISION).</para>
        <para>The effective precision limit for the given value depends on the corresponding
          storage. For example, NUMERIC (5) will be stored as INTEGER, thus allowing values in the
          precision range up to (and including) NUMERIC (9). So beware that the declared precision
          is not strictly enforced.</para>
        <para>Values outside the range limited by the effective precision are not allowed. Values
          with the scale larger than the declared one will be rounded to the declared scale while
          performing an assignment.</para>
      </section>
      <section id="langref25-datatypes-decimal">
        <title><database>DECIMAL</database> data type</title>
        <para><database>DECIMAL (precision, scale)</database> is the exact number with the decimal
          scale specified by the &lt;scale> and the decimal precision equal to or greater than the
          value of the specified &lt;precision>.</para>
        <formalpara>
          <title>Syntax:</title>
          <para>
            <blockquote>
              <programlisting>DECIMAL [precision [, scale]]</programlisting>
            </blockquote>
          </para>
        </formalpara>
        <para>A shorthand form <database>DEC</database> is also available.</para>
        <para>DECIMAL data type is almost identical to the NUMERIC data type, so please refer to the
          appropriate section for the details. The only difference is that DECIMAL is never
          internally stored as a small integer, so its minimal effective precision is equal to 9. </para>
        <note>
          <para>Accordingly to the SQL standard, NUMERIC is declared to be a strict data type which
            enforces the declared precision, while DECIMAL can accept more decimal digits than
            declared. In Firebird, however, both enforce the effective precision rather than the
            declared one, with NUMERIC being just a bit stricter in the lower precision
            range.</para>
        </note>
      </section>
    </section>
    <section id="langref25-datatypes-chartypes">
      <title>Character types</title>
      <section id="langref25-datatypes-char">
        <title><database>CHARACTER</database> data type</title>
        <para><database>CHARACTER (length)</database> is the fixed-length string with the character
          length equal to the specified &lt;length>.</para>
        <formalpara>
          <title>Syntax:</title>
          <para>
            <blockquote>
              <programlisting>CHARACTER [(length)] [CHARACTER SET charset]</programlisting>
            </blockquote>
          </para>
        </formalpara>
        <para>A shorthand form <database>CHAR</database> is also available.</para>
        <para>The declared length must be positive. If the length specification is omitted, length
          of 1 (one character) is implied. The maximum supported byte length is 32767, thus the
          maximum supported character length depends on the declared character set.</para>
        <para>The CHARACTER data type definition may include the character set name, so that all the
          characters of the string value belong to the declared character set. If the character set
          name is omitted, the database-wise default character set is implied. See the complete list
          of supported character sets in Appendix B.</para>
        <para>Values of the CHARACTER data type are right padded with the appropriate padding
          character up to the declared length, and are physically stored this way. However, the
          trailing padding characters are semantically insignificant and ignored when comparing
          CHARACTER values. Strings longer than the declared length are not accepted, unless the
          excess characters are all equal to the appropriate padding character, in this case the
          string is truncated to the declared length.</para>
        <note>
          <para>The default padding character is the space character (ASCII code 0x20) and it
            applies to the every character set except OCTETS which represents binary strings and
            thus has binary zero (ASCII code 0x00) as the padding character.</para>
        </note>
      </section>
      <section id="langref25-datatypes-nchar">
        <title><database>NATIONAL CHARACTER</database> data type</title>
        <para><database>NATIONAL CHARACTER (length)</database> is the fixed-length string with the
          character length equal to the specified &lt;length> and having the predefined character
          set of ISO8859_1.</para>
        <formalpara>
          <title>Syntax:</title>
          <para>
            <blockquote>
              <programlisting>NATIONAL CHARACTER [(length)]</programlisting>
            </blockquote>
          </para>
        </formalpara>
        <para>Shorthand forms <database>NATIONAL CHAR</database> and <database>NCHAR</database> are
          also available.</para>
        <para>Besides having the character set hardcoded, NATIONAL CHARACTER data type is absolutely
          equal to the CHARACTER data type, so please refer to the appropriate section for the
          details.</para>
      </section>
      <section id="langref25-datatypes-varchar">
        <title><database>CHARACTER VARYING</database> data type</title>
        <para><database>CHARACTER VARYING (length)</database> is the varying-length string with the
          character length limited by the specified &lt;length>.</para>
        <formalpara>
          <title>Syntax:</title>
          <para>
            <blockquote>
              <programlisting>CHARACTER VARYING (length) [CHARACTER SET charset]</programlisting>
            </blockquote>
          </para>
        </formalpara>
        <para>Shorthand forms <database>CHAR VARYING</database> and <database>VARCHAR</database> are
          also available.</para>
        <para>The declared length is mandatory and it must be positive. The maximum supported byte
          length is 32765, thus the maximum supported character length depends on the declared
          character set.</para>
        <para>The CHARACTER data type definition may include the character set name, so that all the
          characters of the string value belong to the declared character set. If the character set
          name is omitted, the database-wise default character set is implied. See the complete list
          of supported character sets in Appendix B.</para>
        <para>Values of the CHARACTER VARYING data type are never padded. Internally, the CHARACTER
          VARYING values are prefixed with the 16-bit length counter, so they are stored using the
          actual string length. Strings longer than the declared length are not accepted.</para>
      </section>
      <section id="langref25-datatypes-nvarchar">
        <title><database>NATIONAL CHARACTER VARYING</database> data type</title>
        <para><database>NATIONAL CHARACTER VARYING (length)</database> is the varying-length string
          with the character length limited by the specified &lt;length> and having the predefined
          character set of ISO8859_1.</para>
        <formalpara>
          <title>Syntax:</title>
          <para>
            <blockquote>
              <programlisting>NATIONAL CHARACTER VARYING [(length)]</programlisting>
            </blockquote>
          </para>
        </formalpara>
        <para>A shorthand form <database>NATIONAL CHAR VARYING</database> is also available.</para>
        <para>Besides having the character set hardcoded, NATIONAL CHARACTER VARYING data type is
          absolutely equal to the CHARACTER VARYING data type, so please refer to the appropriate
          section for the details.</para>
      </section>
    </section>
    <section id="langref25-datatypes-datetimetypes">
      <title>Date/time types</title>
      <section id="langref25-datatypes-date">
        <title><database>DATE</database> data type</title>
        <para><database>DATE</database> represents the temporal value containing the year-month-day
          part.</para>
        <formalpara>
          <title>Syntax:</title>
          <para>
            <blockquote>
              <programlisting>DATE</programlisting>
            </blockquote>
          </para>
        </formalpara>
        <para>DATE values range from 01-Jan-0001 to 31-Dec-9999.</para>
        <para>Internally, DATE values are stored as 32-bit signed integers, representing the offset
          (in days) from the baseline date (17-Nov-1858).</para>
        <note>
          <para>This definition applies to Dialect 3 only. In Dialect 1, the DATE data type is a
            replacement for the TIMESTAMP data type, thus containing both date and time parts. See
            the appropriate section for the details.</para>
        </note>
      </section>
      <section id="langref25-datatypes-time">
        <title><database>TIME</database> data type</title>
        <para><database>TIME</database> represents the temporal value containing the
          hour-minute-second part, including second fractions.</para>
        <formalpara>
          <title>Syntax:</title>
          <para>
            <blockquote>
              <programlisting>TIME</programlisting>
            </blockquote>
          </para>
        </formalpara>
        <para>TIME values range from 00:00:00.0000 AM to 23:59:59.9999 PM.</para>
        <para>Internally, TIME values are stored as 32-bit scaled unsigned integers, representing
          both the number of seconds passed since the day start (which is a baseline, so that zero
          time value means a midnight) and the number of second fractions passed since the start of
          the current second. The scale value is 10000, so the supported precision is 1/10000 second
          (100 microseconds).</para>
        <note>
          <para>The TIME data type is available in Dialect 3 only.</para>
        </note>
      </section>
      <section id="langref25-datatypes-timestamp">
        <title><database>TIMESTAMP</database> data type</title>
        <para><database>TIMESTAMP</database> represents the temporal value containing both
          year-month-day and hour-minute-second parts, including second fractions.</para>
        <formalpara>
          <title>Syntax:</title>
          <para>
            <blockquote>
              <programlisting>TIMESTAMP</programlisting>
            </blockquote>
          </para>
        </formalpara>
        <para>TIMESTAMP values range from 01-Jan-0001 00:00:00.0000 AM to 31-Dec-9999 23:59:59.9999
          PM.</para>
        <para>Internally, TIMESTAMP values are stored as a combination of two 32-bit integers, each
          representing its own part (date or time), so its total size is 64 bits. See prior sections
          for the storage details.</para>
      </section>
    </section>
    <section id="langref25-datatypes-bintypes">
      <title>Binary types</title>
      <section id="langref25-datatypes-blob">
        <title><database>BLOB</database> data type</title>
        <para><database>BLOB</database> is the data type representing text or binary data of
          arbitrary length.</para>
        <formalpara>
          <title>Syntax:</title>
          <para>
            <blockquote>
              <programlisting>BLOB [SUB_TYPE subtype]
     [SEGMENT SIZE segsize]
     [CHARACTER SET charset]</programlisting>
            </blockquote>
          </para>
        </formalpara>
        <formalpara>
          <title>Shortcuts:</title>
          <para>
            <blockquote>
              <programlisting>BLOB (segsize)
BLOB (segsize, subtype)
BLOB (, subtype)</programlisting>
            </blockquote>
          </para>
        </formalpara>
        <para>By default, every blob internally consists of a chained list of segments, each up to
          64KB in size. Small segments are combined together so that they could share the same disk
          page. There are three storage levels of blobs. Blobs of level 0 fit on a single disk page
          and may even reside at the same data page where the rest of the fields are stored. Blobs
          of level 1 are always stored on dedicated disk pages and consist of the root page (which
          itself does not store any blob data but contains an inventory of other data pages) and a
          number of data pages the blob content is splitted among. Blobs of level 2 extend the
          aforementioned scheme by having a root inventory page which enumerates other inventory
          pages that in turn point to the data pages containing the blob contents. This three-level
          storage layout along with the database page size establish the practical size limit for
          blobs, which is equal to 2GB for the maximum supported page size of 16KB.</para>
        <para>So it can be said that BLOB segments represent the logical blob structure rather than
          the physical one. They do not directly affect the blob storage on disk and the appropriate
          low-level I/O operations performed by Firebird internally, but they define the granulation
          of the blob contents and the way how the blob is accessed at the interface layer. If you
          need to read the whole blob, you should iterate through all the segments. If you need to
          read just a few bytes in the middle of the blob, you should read all the segments
          preceding these bytes.</para>
        <note>
          <para>There is also a concept of so called streamed blobs. They are not splitted into
            separate segments and are directly accessible for reading and writing from any specified
            position. The choice between segmented and streamed blobs is done by the application
            developer when creating the blob contents, it's not covered by the BLOB declaration in
            SQL.</para>
        </note>
        <para>The BLOB sub-type describes the blob contents. While Firebird usually does not guess
          about the internal structure of the BLOB data, there are some predefined sub-types that
          may affect the BLOB handling. The BLOB sub-type can be declared via either the
          corresponding numeric value, or by using a mnemonic name for the predefined sub-types,
          e.g.:</para>
        <para>
          <blockquote>
            <programlisting>BLOB SUB_TYPE 0
BLOB SUB_TEXT BINARY</programlisting>
          </blockquote>
        </para>
        <para>If the BLOB sub-type is omitted, sub-type of 0 (BINARY) is implied. However, if the
          BLOB declararion includes the character set (ses below), then sub-type of 1 (TEXT) is
          implied.</para>
        <para>BLOB sub-types can be negative, zero or positive values in the range from -32768 to
          32767. Negative BLOB sub-types are user-defined ones and can be used by application
          developers to distinguish between different formats of binary contents. Zero BLOB sub-type
          is predefined for binary blobs that are processed transparently without any assumptions
          about their contents. BLOB sub-type of 1 is predefined for text blobs that are processed
          similarly to the character data types. They may be treated like very long character
          strings, including conversions from and to character data types, usage in the various
          string-wise operators and built-in functions, and so on. Binary and text blobs can be used
          by application developers as well. Positive BLOB sub-types greater than 1 are reserved for
          internal use, they are not allowed for user blobs.</para>
        <!-- Should the table {mnemonic-value} of the predefined sub-types be published? -->
        <para>The BLOB segment size defines the number of bytes to be processed (read or written) by
          a single interface operation with that blob. It must be a positive value limited by 65535
          bytes. If the BLOB segment size is omitted, then the value of 80 bytes is implied. The
          BLOB segment size also</para>
        <para>The BLOB declaration may include the character set name, so that all the characters
          the blob contents consists of belong to the specified character set. The character set can
          be specified for text and binary blobs only. If this happens for a binary blob, then the
          sub-type gets implicitly changed to TEXT. If the character set name is omitted, the
          database-wise default character set is implied. See the complete list of supported
          character sets in Appendix B.</para>
      </section>
    </section>
    <section id="langref25-datatypes-arrays">
      <title>Arrays</title>
      <para>To be written.</para>
    </section>
    <section id="langref25-datatypes-comparison">
      <title>Comparison rules</title>
      <para>Values of the same data type are compared accordingly to the natural rules of the
        corresponding data type. Blobs are compared either byte-wise or character-wise for binary
        and text blobs respectively, using their entire contents.</para>
      <para>Mixed-type comparisons, however, are processed using the special priority rules. The
        value with the data type of the less priority is implicitly converted to the data type of
        the value with greater priority and then both values are compared naturally. The priority
        list is the following (starting with the least priority):</para>
      <itemizedlist>
        <listitem>
          <para>CHARACTER, CHARACTER VARYING</para>
        </listitem>
        <listitem>
          <para>SMALLINT</para>
        </listitem>
        <listitem>
          <para>INTEGER</para>
        </listitem>
        <listitem>
          <para>BIGINT</para>
        </listitem>
        <listitem>
          <para>REAL</para>
        </listitem>
        <listitem>
          <para>DOUBLE PRECISION</para>
        </listitem>
        <listitem>
          <para>DATE, TIME</para>
        </listitem>
        <listitem>
          <para>TIMESTAMP</para>
        </listitem>
      </itemizedlist>
      <para>The derived data types (NUMERIC, DECIMAL, FLOAT, LONG FLOAT) are compared accordingly to
        the priorities of their underlying data types. Scaled numeric values are adjusted to their
        maximal scale before comparing.</para>
      <para>Character strings are compared without regard to their trailing padding characters, if
        any. International character strings (any character set except NONE, OCTETS and ASCII) are
        compared accordingly to their collation rules, explicit or implicit.</para>
      <para>When DATE or TIME value is converted to TIMESTAMP, it gets its missing part completed.
        DATE values get zero time part (midnight), TIME values get the today's date as their date
        part.</para>
      <para>If one of the comparison arguments is a blob, then custom rules are used. In this case,
        the second argument gets converted to a string value (binary or character) and then the
        string comparison rules apply.</para>
    </section>
    <section id="langref25-datatypes-coercion">
      <title>Coercion rules</title>
      <para>There are situations where a few values of different data types must provide the unified
        result. In this case, those values should be converted to their common (less restrictive)
        data type. Below are the rules applied (in the specified order) for those implicit
        conversions:</para>
      <itemizedlist>
        <listitem>
          <para>If any data type is BLOB, the result is also BLOB</para>
        </listitem>
        <listitem>
          <para>If any data type is CHARACTER VARYING, or if one data type is CHARACTER and another
            one is numeric or date/time, the result is CHARACTER VARYING</para>
        </listitem>
        <listitem>
          <para>If any data type is CHARACTER, the result is also CHARACTER</para>
        </listitem>
        <listitem>
          <para>If any datatype is an approximate numeric, then each data type must be numeric and
            the result is an approximate numeric</para>
        </listitem>
        <listitem>
          <para>If all data types are exact numerics, the result is an exact numeric with the
            maximal precision and maximal scale</para>
        </listitem>
        <listitem>
          <para>If any data type is DATE, TIME or TIMESTAMP, then each data type must be the same
            DATE, TIME or TIMESTAMP and the result is also the same DATE, TIME or TIMESTAMP</para>
        </listitem>
      </itemizedlist>
      <para>If the coercion result is BLOB and there is any binary blob in the list, the resulting
        blob is also binary.</para>
      <para>If the coercion results in a text blob, the resulting charset is derived using the
        following rules:</para>
      <itemizedlist>
        <listitem>
          <para>If any input character set is OCTETS, the resulting character set is also
            OCTETS</para>
        </listitem>
        <listitem>
          <para>If any input character set is neither NONE nor ASCII, it is chosen as the resulting
            character set</para>
        </listitem>
        <listitem>
          <para>If any input character set is ASCII, or if any input part is numeric or date/time,
            result is ASCII</para>
        </listitem>
        <listitem>
          <para>Otherwise, result is NONE</para>
        </listitem>
      </itemizedlist>
    </section>
    <section id="langref25-datatypes-collation">
      <title>Collation rules</title>
      <para>To be written.</para>
    </section>
  </chapter>
  <chapter id="langref25-commons">
    <title>Common language elements</title>
    <section id="langref25-commons-values">
      <title>Value expressions</title>
      <para>To be written.</para>
    </section>
    <section id="langref25-commons-queries">
      <title>Select expressions</title>
      <para>To be written.</para>
    </section>
    <section id="langref25-commons-predicates">
      <title>Predicates</title>
      <para>To be written.</para>
    </section>
  </chapter>
  <chapter id="langref25-functions">
    <title>Built-in functions and variables</title>
    <section id="langref25-functions-contextvars">
      <title>Context variables</title>
      <para>To be written.</para>
    </section>
    <section id="langref25-functions-scalarfuncs">
      <title>Scalar functions</title>
      <para>To be written.</para>
    </section>
    <section id="langref25-functions-aggfuncs">
      <title>Aggregate functions</title>
      <para>To be written.</para>
    </section>
  </chapter>
  <appendix id="langref25-reskeywords">
    <title>Reserved words and keywords</title>
    <para>Reserved words are part of the Firebird SQL language. They cannot be used as identifiers
      (e.g. as table or procedure names), except when enclosed in double quotes in Dialect 3.
      However, you should avoid this unless you have a compelling reason.</para>
    <para>Keywords are also part of the language. They have a special meaning when used in the
      proper context, but they are not reserved for Firebird's own and exclusive use. You can use
      them as identifiers without double-quoting.</para>
  </appendix>
  <appendix id="langref25-charsets">
    <title>Character sets and collations</title>
    <para>To be written.</para>
  </appendix>
  <appendix id="langref25-errors">
    <title>Error codes</title>
    <para>To be written.</para>
  </appendix>
  <appendix id="langref25-dochist">
    <title>Document History</title>
    <para>The exact file history is recorded in the <filename class="directory">manual</filename>
      module in our CVS tree; see <ulink url="http://sourceforge.net/cvs/?group_id=9028"
        >http://sourceforge.net/cvs/?group_id=9028</ulink></para>
    <para>
      <revhistory>
        <revision>
          <revnumber>1.0</revnumber>
          <date>?? Xxx 2010</date>
          <authorinitials>PV</authorinitials>
          <revdescription>
            <para>First publication, based on the <citetitle>Firebird 2.1 Language Reference
                Update</citetitle> with the changes for 2.5 added (roughly adding ???? % to the
              size).</para>
          </revdescription></revision>
      </revhistory>
    </para>
  </appendix>
  <appendix id="langref25-license">
    <title>License notice</title>
    <para>The contents of this Documentation are subject to the Public Documentation License Version
      1.0 (the <quote>License</quote>); you may only use this Documentation if you comply with the
      terms of this License. Copies of the License are available at <ulink
        url="http://www.firebirdsql.org/file/documentation/reference_manuals/firebird_licenses/Public-Documentation-License.pdf"
        >http://www.firebirdsql.org/file/documentation/reference_manuals/firebird_licenses/Public-Documentation-License.pdf</ulink>
      (PDF) and <ulink url="http://www.firebirdsql.org/en/public-documentation-license/"
        >http://www.firebirdsql.org/en/public-documentation-license/</ulink> (HTML).</para>
    <para>The Original Documentation is titled <citetitle>Firebird 2.5 Language Reference
        Update</citetitle>.</para>
    <para>The Initial Writers of the Original Documentation are: Paul Vinkenoog et al.</para>
    <para>Copyright (C) 2008-2010. All Rights Reserved. Initial Writers contact: paul at vinkenoog
      dot nl.</para>
    <para>Writers and Editors of included PDL-licensed material (the <quote>al.</quote>) are: J.
      Beesley, Helen Borrie, Arno Brinkman, Frank Ingermann, Vlad Khorsun, Alex Peshkov, Nickolay
      Samofatov, Adriano dos Santos Fernandes, Dmitry Yemanov.</para>
    <para>Included portions are Copyright (C) 2001-2010 by their respective authors. All Rights
      Reserved.</para>
  </appendix>
</book>
