<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../../../../tools/docbook-dtd/docbookx.dtd">
<chapter id="fblangref25-security">
  <title>Security</title>
  <para>Databases must be secure and so must the data stored in them. Firebird provides two levels of
  data security protection: user authentication at the server level and SQL privileges within databases.
  This chapter tells you how to manage security at both levels.</para>
  <section id="fblangref25-security-auth">
    <title>User Authentication</title>
    <para>The security of the entire database depends on user identification and on checking its authenticity.
    The information about users authorised to access a specific Firebird server is stored in a special security database
    named <filename>security2.fdb</filename>.  Each record in <filename>security2.fdb</filename> is a user account
    for one user.</para>
    <para>A user name, consisting of up to 31 characters, is a case-insensitive system identifier. A user must have a password
    with a maximum of eight significant characters.  Whilst it is valid to enter a password longer than eight characters,
    the subsequent characters are ignored.  Passwords are case-sensitive.</para>
    <para>The embedded version of Firebrd server does not use authenticaion. However, a valid user name and, if applicable,
    a ROLE, should be specified in the connection parameters because they are required to control access to objects in
    the database.</para>
    <para>If the SYSDBA user or a user with the RDB$ADMIN role is the user specified during the connection, the user will
    have unlimited access to the database.  If the user is the database Owner, without the RDB$ADMIN role, that user wiil
    be able to access all objects within the database that s/he owns.</para>

    <section id="fblangref25-security-auth-special">
      <title>Special Users</title>
      <para>In Firebird, the special account SYSDBA exists beyond any security limitations, having complete access to all
      objects in all databases on the server. The default SYSDBA password on Windows and MacOS is 'masterkey'&mdash;or
      'masterke', to be exact, because of the 8-character length limit.
        <important>
          <title>Extremely Important!</title>
          <para>The default password 'masterkey' is known across the universe.  It should be changed as soon
          as the Firebird server installation is complete.
          </para>
        </important>
      </para>

      <section id="fblangref25-security-auth-special-posix">
        <title>POSIX Hosts</title>
        <para>On POSIX systems, including MacOSX, Firebird will interpret a POSIX user account as though it were a
        Firebird user account in its own security database, provided the server sees the client machine as a trusted
        host and the system user accounts exist on both the client and the server. To establish a <quote>trusted</quote>
        relationship with the client host, the corresponding entries must be included in one of the files
        <filename>/etc/hosts.equiv</filename> or <filename>/etc/gds_hosts.equiv</filename> on Firebird's host
        server.
          <itemizedlist>
            <listitem>The file <filename>hosts.equiv</filename> contains trusted relationships at operating
            system level, encompassing all services (rlogin, rsh, rcp, and so on)</listitem>
            <listitem>The file <filename>gds_hosts.equiv</filename> contains trusted relationships between
            Firebird hosts only.</listitem>
          </itemizedlist>
        The format is identical for both files and looks like this:
          <literallayout class="monospaced">
  hostname [username]
          </literallayout>
        </para>
        <para>The <emphasis role="bold">root</emphasis> user can act as SYSDBA on POSIX host systems. Firebird interprets
        the <emphasis role="bold">root</emphasis> user as though it were SYSDBA and it provides access to all databases
        on the server.</para>
      </section>

      <section id="fblangref25-security-auth-special-windows">
        <title>Windows Hosts</title>
        <para>On Windows NT (i.e., server-capable) operating systems, operating system accounts can be used. Trusted
        Authentication must be enabled by setting the <emphasis>Authentication</emphasis> parameter to <emphasis>Trusted</emphasis>
        or <emphasis>Mixed</emphasis> in the configuration file, <filename> firebird.conf</filename>.</para>
        <para>Even with trusted authentication enabled, Windows operating system Administrators are not automatically
        granted SYSDBA privileges when they connect to a database.  To make that happen, the internally-create role
        <database>RDB$ADMIN</database> must be altered by SYSDBA or the database Owner, to enable it:
          <programlisting>
ALTER ROLE RDB$ADMIN
  SET AUTO ADMIN MAPPING;
          </programlisting>
        </para>
      </section>
    </section>
    <section id="fblangref25-security-auth-manage-users">
      <title>SQL Statements for User Management</title>
      <para>In Firebird 2.5 and above, user accounts are created, modified and deleted using a series of
      SQL statements that can be submitted by a suitably privileged user who is logged in to any database.
      The following users have the authority to manage the user account of other users:
        <itemizedlist>
          <listitem>SYSDBA</listitem>
          <listitem>Any user who has the RDB$ADMIN role in the security database and is logged in to a
          regular database with that role</listitem>
          <listitem>A Windows operating system user who has the RDB$ADMIN role in the security
          databases, provided the server is configured to use trusted authentication</listitem>
          <listitem>a Windows operating system Administrator, provided that
            <itemizedlist>
              <listitem>AUTO ADMIN MAPPING parameter is enabled in the security database
              (<filename>security2.fdb</filename>) AND</listitem>
              <listitem>the server is configured to use trusted authentication
                <note>
                  <para>AUTO ADMIN MAPPING enabled only in the end-user database is not
                  sufficient to permit user management of other users.</para>
                </note>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>
      </para>
      <para>Non-privileged users can use only the <database>ALTER USER</database> statement to edit some
      data in their own accounts.</para>

      <section id="fblangref25-security-auth-create-user">
        <title><database>CREATE USER</database></title>
        <formalpara>
          <title>Used for</title>
          <para>Creating a Firebird user account</para>
        </formalpara>
        <formalpara>
          <title>Available in</title>
          <para>DSQL</para>
        </formalpara>
        <formalpara><title>Syntax</title>
          <blockquote><programlisting>
CREATE USER username PASSWORD 'password'
[FIRSTNAME 'firstname']
[MIDDLENAME 'middlename']
[LASTNAME 'lastname']
[GRANT ADMIN ROLE];
          </programlisting></blockquote>
        </formalpara>

        <table id="fblangref25-security-tbl-createuser">
        <?dbfo keep-together='auto'?>
          <title>CREATE USER Statement Parameters</title>
          <tgroup cols="2">
            <colspec colname="colParam" colwidth="*"></colspec>
            <colspec colname="colDes" colwidth="3*"></colspec>
            <thead>
              <row valign="middle">
                <entry align="center">Parameter</entry>
                <entry align="center">Description</entry>
              </row>
            </thead>
            <tbody>
              <row valign="middle">
                <entry align="center">username</entry>
                <entry align="left">User name. The maximum length is 31 characters, following the rules
                for Firebird identifiers</entry>
              </row>
              <row valign="middle">
                <entry align="center">password</entry>
                <entry align="left">User password. It may consist of up to 32 characters, however only the
                first 8 characters count. Case-sensitive</entry>
              </row>
              <row valign="middle">
                <entry align="center">firstname</entry>
                <entry align="left">Optional: User's first name. The maximum length is 32 characters</entry>
              </row>
              <row valign="middle">
                <entry align="center">middlename</entry>
                <entry align="left">Optional: User's middle name. The maximum length is 32 characters</entry>
              </row>
              <row valign="middle">
                <entry align="center">lastname</entry>
                <entry align="left">Optional: User's last name. The maximum length is 32 characters</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>Use a <database>CREATE USER</database> statement to create a new Firebird user account. The
        user must not already exist in the Firebird security database, or a primary key violation error message
        will be returned.</para>
        <para>The <database>PASSWORD</database> clause specifies the user's password. The optional
        <database>FIRSTNAME, MIDDLENAME</database> and <database>LASTNAME</database> clauses can be used to
        specify additional user properties, such as the person's first name, middle name and last name,
        respectively.  They are just simple VARCHAR(32) fields and can be used to store anything you prefer.</para>
        <para>If the <database>GRANT ADMIN ROLE</database> clause is specified, the new user account is created
        with the privileges of the RDB$ADMIN role in the security database (<filename>security2.fdb</filename>).
        It allows the new user to manage user accounts, but it does not grant the user any special privileges
        in regular databases.</para>
        <para>To create a user account, the current user must have <link
        linkend="fblangref25-security-auth-manage-users">administrator privileges</link>.</para>

        <formalpara>
          <title>Examples</title>
          <orderedlist>
            <listitem>Creating a user with the username <function>bigshot</function>:
              <blockquote><programlisting>
CREATE USER bigshot PASSWORD 'buckshot';
              </programlisting></blockquote>
            </listitem>
            <listitem>Creating the user John with additional properties (first and last names):
              <blockquote><programlisting>
CREATE USER john PASSWORD 'fYe_3Ksw'
FIRSTNAME 'John'
LASTNAME 'Doe';
              </programlisting></blockquote>
            </listitem>
            <listitem>Creating the user superuser with user management privileges:
              <blockquote><programlisting>
CREATE USER superuser PASSWORD 'kMn8Kjh'
GRANT ADMIN ROLE;
              </programlisting></blockquote>
            </listitem>
          </orderedlist>
        </formalpara>
        <formalpara>
          <title>See also</title>
          <para>&nbsp;<link linkend="fblangref25-security-auth-alter-user"><database>ALTER USER</database></link>,
          <link linkend="fblangref25-security-auth-drop-user"><database>DROP USER</database></link>
          </para>
        </formalpara>
      </section> <!-- Create user -->

      <section id="fblangref25-security-auth-alter-user">
        <title><database>ALTER USER</database></title>
        <formalpara>
          <title>Used for</title>
          <para>Modifying a Firebird user account</para>
        </formalpara>
        <formalpara>
          <title>Available in</title>
          <para>DSQL</para>
        </formalpara>
        <formalpara><title>Syntax</title>
          <blockquote><programlisting>
ALTER USER username
{
  [SET]
  [PASSWORD 'password']
  [FIRSTNAME 'firstname']
  [MIDDLENAME 'middlename']
  [LASTNAME 'lastname']
}
[{GRANT | REVOKE} ADMIN ROLE];
          </programlisting></blockquote>
        </formalpara>
        <table id="fblangref25-security-tbl-alteruser">
        <?dbfo keep-together='auto'?>
          <title>ALTER USER Statement Parameters</title>
          <tgroup cols="2">
            <colspec colname="colParam" colwidth="*"></colspec>
            <colspec colname="colDes" colwidth="3*"></colspec>
            <thead>
              <row valign="middle">
                <entry align="center">Parameter</entry>
                <entry align="center">Description</entry>
              </row>
            </thead>
            <tbody>
              <row valign="middle">
                <entry align="center">username</entry>
                <entry align="left">User name. Cannot be changed.</entry>
              </row>
              <row valign="middle">
                <entry align="center">password</entry>
                <entry align="left">User password. It may consist of up to 32 characters, however only the
                first 8 characters count. Case-sensitive</entry>
              </row>
              <row valign="middle">
                <entry align="center">firstname</entry>
                <entry align="left">Optional: User's first name. The maximum length is 32 characters</entry>
              </row>
              <row valign="middle">
                <entry align="center">middlename</entry>
                <entry align="left">Optional: User's middle name. The maximum length is 32 characters</entry>
              </row>
              <row valign="middle">
                <entry align="center">lastname</entry>
                <entry align="left">Optional: User's last name. The maximum length is 32 characters</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>Use the ALTER USER statement to edit the details in the named Firebird user account. To edit
        the account of another user, the current user must have administrator privileges.  Any user
        can edit his or her own account, except that only a privileged user may use GRANT/REVOKE ADMIN ROLE.
        </para>
        <para>All of the arguments are optional but at least one of them must be present:
          <itemizedlist>
            <listitem>The PASSWORD clause is for specifying a new password for the user</listitem>
            <listitem>FIRSTNAME, MIDDLENAME and LASTNAME allow editing of the optional user properties,
            such as the person's first name, middle name and last name respectively</listitem>
            <listitem>Including the clause <database>GRANT ADMIN ROLE</database> grants the user the
            privileges of the RDB$ADMIN role in the security database (<filename>security2.fdb</filename>)
            which enables him/her to manage the accounts of other users.  It does not grant the user any
            special privileges in regular databases.</listitem>
            <listitem>Including the clause <database>REVOKE ADMIN ROLE</database> removes the user's privileges
            of the RDB$ADMIN role in the security database, thus denying that user the ability to edit any
            user account except his/her own</listitem>
          </itemizedlist>
        </para>

        <formalpara>
          <title>Examples</title>
          <orderedlist>
            <listitem>Changing the password for the user <function>bobby</function> and granting
            him user management privileges:
              <blockquote><programlisting>
ALTER USER bobby PASSWORD '67-UiT_G8'
GRANT ADMIN ROLE;
              </programlisting></blockquote>
            </listitem>
            <listitem>Editing the optional properties (the first and last names) of the user
            <function>dan</function>:
              <blockquote><programlisting>
ALTER USER dan
FIRSTNAME 'No_Jack'
LASTNAME 'Kennedy';
              </programlisting></blockquote>
            </listitem>
            <listitem>Revoking user management privileges from user <function>dumbbell</function>:
              <blockquote><programlisting>
ALTER USER dumbbell
DROP ADMIN ROLE;
              </programlisting></blockquote>
            </listitem>
          </orderedlist>
        </formalpara>
        <formalpara>
          <title>See also</title>
          <para>&nbsp;<link linkend="fblangref25-security-auth-create-user"><database>CREATE USER</database></link>,
          <link linkend="fblangref25-security-auth-drop-user"><database>DROP USER</database></link>
          </para>
        </formalpara>
      </section> <!-- Alter user -->

      <section id="fblangref25-security-auth-drop-user">
        <title><database>DROP USER</database></title>
        <formalpara>
          <title>Used for</title>
          <para>Deleting a Firebird user account</para>
        </formalpara>
        <formalpara>
          <title>Available in</title>
          <para>DSQL</para>
        </formalpara>
        <formalpara><title>Syntax</title>
          <blockquote><programlisting>
DROP USER username;
          </programlisting></blockquote>
        </formalpara>
        <table id="fblangref25-security-tbl-dropuser">
        <?dbfo keep-together='auto'?>
          <title>DROP USER Statement Parameter</title>
          <tgroup cols="2">
            <colspec colname="colParam" colwidth="*"></colspec>
            <colspec colname="colDes" colwidth="3*"></colspec>
            <thead>
              <row valign="middle">
                <entry align="center">Parameter</entry>
                <entry align="center">Description</entry>
              </row>
            </thead>
            <tbody>
              <row valign="middle">
                <entry align="center">username</entry>
                <entry align="left">User name</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>Use the statement DROP USER to delete a Firebird user account.  The current
        user requires Administrator privileges.</para>
        <formalpara>
          <title>Example</title>
          <para>&nbsp;Deleting the user <function>bobby</function>:
            <blockquote><programlisting>
DROP USER bobby;
            </programlisting></blockquote>
          </para>
        </formalpara>
        <formalpara>
          <title>See also</title>
          <para>&nbsp;<link linkend="fblangref25-security-auth-create-user"><database>CREATE USER</database></link>,
          <link linkend="fblangref25-security-auth-alter-user"><database>ALTER USER</database></link>
          </para>
        </formalpara>
      </section> <!-- Drop user -->
    </section> <!-- User Management -->
  </section><!-- Authentication -->

  <section id="fblangref25-security-privs">
    <title>SQL Privileges</title>
    <para>The second level of Firebird's security model is SQL privileges that are stored within a database to control
    which users may access which objects and the types of access they are allowed to those objects. An authorized user
    has no privileges being granted them explicitly.</para>
    <para>When an object is created, only the user who created it (its Owner) and SYSDBA have privileges for it.  They
    can grant privileges to other users, roles or objects.</para>

    <section id="fblangref25-security-privs-owner">
      <title>The Object Owner</title>
      <para>The user who creates a database object becomes its Owner. Only the owner of a database object and users
      with administrator privileges can change or delete the database object. The Owner of the database, i.e., the
      user who created it, or restored it from a <emphasis>gbak</emphasis> backup, does not have Owner privileges to
      objects in the database that were created by another user.
        <important>
          <title>Some Ownership Drawbacks</title>
          <para>Any authorized user who has access to the database can create any valid database object. Up to and
          including this release, the issue is not controlled.</para>
          <para>Because not all database objects are associated with an Owner&mdash;domains, external functions (UDFs),
          BLOB filters, generators (sequences) and exceptions&mdash;they must be regarded as vulnerable, since any
          authenticate user can change and delete them.</para>
        </important>
      </para>
      <para>SYSDBA or the object Owner can grant privileges to and revoke them from other users, including privileges
      to grant privileges to other users. The process of granting and revoking SQL privileges is implemented with
      two statements:
        <literallayout class="monospaced">
  GRANT &lt;privilege&gt; ON &lt;OBJECT-TYPE&gt; &lt;object-name&gt; TO { &lt;user-name&gt; | ROLE &lt;role-name&gt; }
  REVOKE &lt;privilege&gt; ON &lt;OBJECT-TYPE&gt; &lt;object-name&gt; FROM { &lt;user-name&gt; | ROLE &lt;role-name&gt; }
        </literallayout>
      </para>
    </section><!-- Object owner -->

    <section id="fblangref25-security-privs-role">
      <title>ROLE Management Statements</title>
      <para>A role is a database object that packages a set of privileges. Roles implement the concept of access control
      at a group level.  Multiple privileges are granted to the role and then that role can be granted to or revoked
      from one or many users.</para>
      <para>In this section the tasks of creating and deleting roles are discused, along with statements to allow or
      deny the automatic assignment of the internally implemented RDB$ADMIN role to Administrators on Windows
      servers when trusted authentication is enabled.</para>

      <section id="fblangref25-security-privs-createrole">
        <title><database>CREATE ROLE</database></title>
        <formalpara><title>Used for</title>
          <para>Creating a new role</para>
        </formalpara>
        <formalpara>
          <title>Available in</title>
          <para>DSQL, ESQL</para>
        </formalpara>
        <formalpara><title>Syntax</title>
          <blockquote><programlisting>
CREATE ROLE rolename;
          </programlisting></blockquote>
        </formalpara>
        <table id="fblangref25-security-tbl-createrole">
        <?dbfo keep-together='auto'?>
          <title>CREATE ROLE Statement Parameter</title>
          <tgroup cols="2">
            <colspec colname="colParam" colwidth="*"></colspec>
            <colspec colname="colDes" colwidth="3*"></colspec>
            <thead>
              <row valign="middle">
                <entry align="center">Parameter</entry>
                <entry align="center">Description</entry>
              </row>
            </thead>
            <tbody>
              <row valign="middle">
                <entry align="center">rolename</entry>
                <entry align="left">Role name. The maximum length is 31 characters</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>The statement <database>CREATE ROLE</database> creates a new role. The name of a role must be
        unique among the names of roles in the current database.
          <warning>
            <para>It is advisable to make the name of a role unique among user names as well. The system
            will not prevent the creation of a role whose name clashes with an existing user name but, if
            you do, the user will be unable to connect to the database.</para>
          </warning>
        </para>
        <formalpara>
          <title>Who can create a role?</title>
          <para>&nbsp;Any user connected to the database can create a role. The user who creates a role
          becomes its owner.</para>
        </formalpara>
        <formalpara>
          <title>Example</title>
          <para>&nbsp;Creating a role named SELLERS:
            <blockquote><programlisting>
CREATE ROLE SELLERS;
            </programlisting></blockquote>
          </para>
        </formalpara>
        <formalpara>
          <title>See also</title>
          <para>&nbsp;<link linkend="fblangref25-security-privs-droprole"><database>DROP ROLE</database></link>,
          <link linkend="fblangref25-security-privs-grant"><database>GRANT</database></link>,
          <link linkend="fblangref25-security-privs-revoke"><database>REVOKE</database></link>
          </para>
        </formalpara>
      </section><!-- create role -->

      <section id="fblangref25-security-privs-alterrole">
        <title><database>ALTER ROLE</database></title>
        <formalpara><title>Used for</title>
          <para>Allowing or denying automatic assignment of the role RDB$ADMIN to Administrators
          on Windows servers where trusted authentication is enabled.</para>
        </formalpara>
        <formalpara>
          <title>Available in</title>
          <para>DSQL</para>
        </formalpara>
        <formalpara><title>Syntax</title>
          <blockquote><programlisting>
ALTER ROLE RDB$ADMIN {SET | DROP} AUTO ADMIN MAPPING;
          </programlisting></blockquote>
        </formalpara>
        <para>The statement <database>ALTER ROLE RDB$ADMIN</database> is used to enable or disable the automatic
        assignment of the RDB$ADMIN role to Administrators on Windows host servers at log-in to the current
        database when trusted authentication is enabled.  By default, it is disabled.</para>
        <note>
          <title><database>AUTO ADMIN MAPPING</database> in the Security Database</title>
          <para>No SQL statement is available for setting the <database>AUTO ADMIN MAPPING</database> parameter
          on or off in the security database. Only the <emphasis>gsec</emphasis> command-line utility can be used
          for that task:
            <blockquote><literallayout class="monospaced">
gsec -mapping set
gsec -mapping drop
            </literallayout></blockquote>
          </para>
        </note>
        <formalpara>
          <title>Who can alter the RDB$ADMIN role?</title>
          <para>&nbsp;This statement can be executed by users with sufficiently escalated
          privileges, particularly
            <itemizedlist spacing="compact">
              <listitem>SYSDBA</listitem>
              <listitem>Any user who has the privileges of the RDB$ADMIN role and is logged in with this role</listitem>
              <listitem>A Windows Administrator, if the automatic assignment of the <database>RDB$ADMIN</database>
              role is already enabled and trusted authentication is enabled</listitem>
            </itemizedlist>
          </para>
        </formalpara>
        <formalpara>
          <title>Examples</title>
          <orderedlist>
            <listitem>Enabling automatic assignment of the <database>RDB$ADMIN</database> role
            to Windows administrators:
              <blockquote><programlisting>
ALTER ROLE RDB$ADMIN SET AUTO ADMIN MAPPING;
              </programlisting></blockquote>
            </listitem>
            <listitem>Disabling automatic assignment of the <database>RDB$ADMIN</database> role
            to Windows administrators:
              <blockquote><programlisting>
ALTER ROLE RDB$ADMIN DROP AUTO ADMIN MAPPING;
              </programlisting></blockquote>
            </listitem>
          </orderedlist>
        </formalpara>
        <formalpara>
          <title>See also</title>
          <para>&nbsp;<link linkend="fblangref25-security-rdbadmin"><database>RDB$ADMIN</database> Role</link></para>
        </formalpara>
      </section><!-- alter role -->

      <section id="fblangref25-security-privs-droprole">
        <title><database>DROP ROLE</database></title>
        <formalpara><title>Used for</title>
          <para>Deleting a role</para>
        </formalpara>
        <formalpara>
          <title>Available in</title>
          <para>DSQL, ESQL</para>
        </formalpara>
        <formalpara><title>Syntax</title>
          <blockquote><programlisting>
DROP ROLE rolename;
          </programlisting></blockquote>
        </formalpara>
        <table id="fblangref25-security-tbl-droprole">
        <?dbfo keep-together='auto'?>
          <title>DROP ROLE Statement Parameter</title>
          <tgroup cols="2">
            <colspec colname="colParam" colwidth="*"></colspec>
            <colspec colname="colDes" colwidth="3*"></colspec>
            <thead>
              <row valign="middle">
                <entry align="center">Parameter</entry>
                <entry align="center">Description</entry>
              </row>
            </thead>
            <tbody>
              <row valign="middle">
                <entry align="center">rolename</entry>
                <entry align="left">Role name</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>The statement <database>DROP ROLE</database> deletes an existing role. Once the role is
        deleted, the entire set of privileges is revoked from all users and objects that were granted
        the role.</para>
        <formalpara>
          <title>Who can delete a role?</title>
          <para>&nbsp;The following users can drop a role:
            <itemizedlist spacing="compact">
              <listitem>role Owner</listitem>
              <listitem>SYSDBA user</listitem>
              <listitem>any user assigned the <database>RDB$ADMIN</database> role and logged in using it</listitem>
              <listitem>the <emphasis>root</emphasis> user on a POSIX operating system</listitem>
              <listitem>an Administrator on Windows, if trusted authentication is enabled and the automatic
              assignment of the <database>RDB$ADMIN</database> role is enabled</listitem>
            </itemizedlist>
          </para>
        </formalpara>
        <formalpara>
          <title>Example</title>
          <para>&nbsp;Deleting the role SELLERS:
            <blockquote><programlisting>
DROP ROLE SELLERS;
            </programlisting></blockquote>
          </para>
        </formalpara>
        <formalpara><title>See also</title>
          <para>&nbsp;<link linkend="fblangref25-security-privs-createrole"><database>CREATE ROLE</database></link>,
          <link linkend="fblangref25-security-privs-grant"><database>GRANT</database></link>,
          <link linkend="fblangref25-security-privs-revoke"><database>REVOKE</database></link>
          </para>
        </formalpara>
      </section> <!-- drop role -->
    </section><!-- role -->

    <section id="fblangref25-security-privs-granting">
      <title>Statements for Granting Privileges</title>
      <para>A GRANT statement is used for granting privileges&mdash;including roles&mdash;to users and
      other database objects.</para>

      <section id="fblangref25-security-privs-grant">
        <title><database>GRANT</database></title>
        <formalpara><title>Used for</title>
          <para>Granting privileges and assigning roles</para>
        </formalpara>
        <formalpara>
          <title>Available in</title>
          <para>DSQL, ESQL</para>
        </formalpara>
        <formalpara><title>Syntax</title>
          <blockquote><programlisting>
GRANT {
  &lt;privileges&gt; ON [TABLE] {tablename | viewname} |
    EXECUTE ON PROCEDURE procname
  } TO {&lt;object_list&gt; | &lt;user_list&gt; [WITH GRANT OPTION]} |
[{GRANTED BY | AS} [USER] grantor];

GRANT &lt;role_granted&gt;
TO {PUBLIC | &lt;role_grantee_list&gt; [WITH ADMIN OPTION]}
[{GRANTED BY | AS} [USER] grantor];

&lt;privileges&gt; ::= ALL [PRIVILEGES] | &lt;privilege_list&gt;

&lt;privilege_list&gt; ::= {
  SELECT |
  DELETE |
  INSERT |
  UPDATE [(col [,col &hellip;])] |
  REFERENCES [(col [,col &hellip;])]
} [, &lt;privilege_list&gt; &hellip;]

&lt;object_list&gt; ::= {
  PROCEDURE procname |
  TRIGGER trigname |
  VIEW viewname |
  PUBLIC
} [, &lt;object_list&gt; &hellip;]

&lt;user_list&gt; ::= {
  [USER] username |
  [ROLE] rolename |
  GROUP Unix_group
  Unix_user
} [, &lt;user_list&gt; &hellip;]

&lt;role_granted&gt; ::= rolename [, rolename &hellip;]

&lt;role_grantee_list&gt; ::= [USER] username [, [USER] username  &hellip;]
          </programlisting></blockquote>
        </formalpara>

        <table id="fblangref25-security-tbl-grant">
        <?dbfo keep-together='auto'?>
          <title>GRANT Statement Parameters</title>
          <tgroup cols="2">
            <colspec colname="colParam" colwidth="*"></colspec>
            <colspec colname="colDes" colwidth="3*"></colspec>
            <thead>
              <row valign="middle">
                <entry align="center">Parameter</entry>
                <entry align="center">Description</entry>
              </row>
            </thead>
            <tbody>
              <row valign="middle">
                <entry align="center">tablename</entry>
                <entry align="left">The name of the table the privilege applies to</entry>
              </row>
              <row valign="middle">
                <entry align="center">viewname</entry>
                <entry align="left">The name of the view the privilege applies to</entry>
              </row>
              <row valign="middle">
                <entry align="center">procname</entry>
                <entry align="left">The name of the stored procedure the EXECUTE privilege
                applies to;  or the name of the procedure to be granted the privilege[s]</entry>
              </row>
              <row valign="middle">
                <entry align="center">col</entry>
                <entry align="left">The table column the privilege is to apply to</entry>
              </row>
              <row valign="middle">
                <entry align="center">Unix_group</entry>
                <entry align="left">The name of a user group in a POSIX operating system</entry>
              </row>
              <row valign="middle">
                <entry align="center">username</entry>
                <entry align="left">The user name the privileges are granted to or the role is assigned to</entry>
              </row>
              <row valign="middle">
                <entry align="center">rolename</entry>
                <entry align="left">Role name</entry>
              </row>
              <row valign="middle">
                <entry align="center">trigname</entry>
                <entry align="left">Trigger name</entry>
              </row>
              <row valign="middle">
                <entry align="center">grantor</entry>
                <entry align="left">The user granting the privilege[s]</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>A GRANT statement grants one or several privileges on database objects to users, roles,
        stored procedures, triggers or views.</para>
        <para>A regular, authenticated user has no privileges on any database object until they are explicitly
        granted to him or her. When an object is created, only the user who has created it (the Owner) and
        SYSDBA have privileges for it and can grant privileges to other users, roles or objects.</para>
        <para>Different sets of privileges apply to different types of metadata objects. The different
        types of privileges will be described separately later.</para>

        <section id="fblangref25-security-privs-grant-to">
          <title>The <database>TO</database> Clause</title>
          <para>The <database>TO</database> clause is used to specify the list of users, roles and database
          objects (procedures, triggers and views) the enumerated privileges are to be granted to. It
          is mandatory.</para>
          <para>The optional <database>USER</database> and <database>ROLE</database> keywords in the
          <database>TO</database> clause allow you to specify exactly who or what is granted the
          privilege. If a <database>USER</database> or <database>ROLE</database> keyword is not specified,
          the server checks whether for a role with this name and, if there is none, the privileges are
          granted to the user without further checking.
            <tip>
              <title>Recommendation</title>
              <para>Although the <database>USER</database> and <database>ROLE</database> keywords are
              optional, it is advisable to use them in order to avoid ambiguity.</para>
            </tip>
          </para>
          <para>The <database>GRANT</database> statement does not check for the existence of a user
          to which the privileges are being granted.  When granting a privilege to a database object,
          you must specify the object type of the object.</para>
        </section><!-- TO clause -->

        <section id="fblangref25-security-privs-grant-public">
          <title>The User <database>PUBLIC</database></title>
          <para>SQL has a special user named <database>PUBLIC</database>, that represents all users.
          Any operation that is allowed on a particular object for the user <database>PUBLIC</database>
          can be performed by any authenticated user.
            <important>
              <para>If privileges are granted to the user PUBLIC, they should be revoked from the
              user PUBLIC as well.</para>
            </important>
          </para>
          <para>The optional WITH GRANT OPTION clause allows the users specified in the user list
          to grant the privileges specified in the privilege list to other users.</para>
        </section><!-- user public -->

        <section id="fblangref25-security-privs-grant-grantedby">
          <title>The <database>GRANTED BY</database> Clause</title>
          <para>By default, when privileges are granted in a database, the current user is
          registered as the person who granted them. The <database>GRANTED BY</database> clause
          is available to grant those privileges as another user.</para>
          <para>If the REVOKE statement is used, the <database>GRANTED BY</database> user must be
          the current user who submits it.
            <note>
              <title>Alternative Syntax Using <database>AS &lt;username&gt;</database></title>
              <para>The non-standard AS clause is supported as a synonym of the GRANTED BY clause to
              simplify migration from other relational DBMSs.</para>
            </note>
          </para>
          <formalpara>
            <title>Who can use the GRANTED BY clause?</title>
            <itemizedlist spacing="compact">
              <listitem>Database Owner</listitem>
              <listitem>SYSDBA</listitem>
              <listitem>Any user who has the privileges of the RDB$ADMIN role and is logged in with this role</listitem>
              <listitem>A Windows Administrator, if the automatic assignment of the <database>RDB$ADMIN</database>
              role is already enabled and trusted authentication is enabled</listitem>
            </itemizedlist>
            <para>The owner of the role cannot use <database>GRANTED BY</database> unless s/he has the escalated
            privileges enumerated here.</para>
          </formalpara>
        </section><!-- granted by -->

        <section id="fblangref25-security-privs-table">
          <title>Privileges on Tables and Views</title>
          <para>In most cases, one <database>GRANT</database> statement grants one privilege to one user or
          object.  However, with tables and views, syntax is available to grant multiple privileges in one
          statement.</para>

          <table id="fblangref25-security-tbl-tableprivs">
          <?dbfo keep-together='auto'?>
            <title>List of Privileges on Tables</title>
            <tgroup cols="2">
              <colspec colname="colParam" colwidth="*"></colspec>
              <colspec colname="colDes" colwidth="3*"></colspec>
              <thead>
                <row valign="middle">
                  <entry align="center">Privilege</entry>
                  <entry align="center">Description</entry>
                </row>
              </thead>
              <tbody>
                <row valign="middle">
                  <entry align="center">SELECT</entry>
                  <entry align="left">Permits the user or object to SELECT data from the table or view</entry>
                </row>
                <row valign="middle">
                  <entry align="center">INSERT</entry>
                  <entry align="left">Permits the user or object to INSERT rows into the table or view</entry>
                </row>
                <row valign="middle">
                  <entry align="center">UPDATE</entry>
                  <entry align="left">Permits the user or object to UPDATE rows in the table or view</entry>
                </row>
                <row valign="middle">
                  <entry align="center">DELETE</entry>
                  <entry align="left">Permits the user or object to DELETE rows from the table or view</entry>
                </row>
                <row valign="middle">
                  <entry align="center">REFERENCES</entry>
                  <entry align="left">Permits the user or object to reference the specified column[s] of the
                  table via a foreign key. If the primary or unique key referenced by the foreign key of the
                  other table is composite then all columns of the key should be specified.</entry>
                </row>
                <row valign="middle">
                  <entry align="center">ALL</entry>
                  <entry align="left">Combines SELECT, INSERT, UPDATE, DELETE and REFERENCES privileges
                  in a single package</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
          <formalpara>
            <title>Examples of GRANT &lt;privilege&gt; on Tables</title>
            <orderedlist>
              <listitem>SELECT and INSERT privileges to the user ALEX:
                <blockquote><programlisting>
GRANT SELECT, INSERT ON TABLE SALES
  TO USER ALEX;
                </programlisting></blockquote>
              </listitem>
              <listitem>The SELECT privilege to the MANAGER, ENGINEER roles and to the user IVAN:
                <blockquote><programlisting>
GRANT SELECT ON TABLE CUSTOMER
  TO ROLE MANAGER, ROLE ENGINEER, USER IVAN;
                </programlisting></blockquote>
              </listitem>
              <listitem>
                <blockquote><programlisting>

                </programlisting></blockquote>
              </listitem>
              <listitem>All privileges to the ADMINISTRATOR role, together
              with the authority to grant the same privileges to others:
                <blockquote><programlisting>
GRANT ALL ON TABLE CUSTOMER
  TO ROLE ADMINISTRATOR
  WITH GRANT OPTION;
                </programlisting></blockquote>
              </listitem>
              <listitem>The SELECT and REFERENCEs privileges on the NAME column
              to all users and objects:
                <blockquote><programlisting>
GRANT SELECT, REFERENCES (NAME) ON TABLE COUNTRY
TO PUBLIC;
                </programlisting></blockquote>
              </listitem>
              <listitem>The SELECT privilege being granted to the user IVAN
              by the user ALEX:
                <blockquote><programlisting>
GRANT SELECT ON TABLE EMPLOYEE
  TO USER IVAN
  GRANTED BY ALEX;
                </programlisting></blockquote>
              </listitem>
              <listitem>Granting the UPDATE privilege on the FIRST_NAME, LAST_NAME
              columns:
                <blockquote><programlisting>
GRANT UPDATE (FIRST_NAME, LAST_NAME) ON TABLE EMPLOYEE
  TO USER IVAN;
                </programlisting></blockquote>
              </listitem>
              <listitem>Granting the INSERT privilege to the
              stored procedure ADD_EMP_PROJ:
                <blockquote><programlisting>
GRANT INSERT ON EMPLOYEE_PROJECT
  TO PROCEDURE ADD_EMP_PROJ;
                </programlisting></blockquote>
              </listitem>
            </orderedlist>
          </formalpara>
        </section> <!-- Table privileges -->

        <section id="fblangref25-security-privs-execute">
          <title>The <database>EXECUTE</database> Privilege</title>
          <para>The EXECUTE privilege applies to stored procedures.  It allows
          the grantee to execute the stored procedure and, if applicable, to retrieve
          its output.  In the case of selectable stored procedures, it acts
          somewhat like a <database>SELECT</database> privilege, insofar as this
          style of stored procedure is executed in response to a <database>SELECT</database>
          statement.</para>
          <formalpara>
            <title>Example</title>
            <para>&nbsp;Granting the EXECUTE privilege on a stored procedure to a role:
              <blockquote><programlisting>
GRANT EXECUTE ON PROCEDURE ADD_EMP_PROJ
  TO ROLE MANAGER;
              </programlisting></blockquote>
            </para>
          </formalpara>
        </section> <!-- Execute privileges -->
      </section><!-- GRANT -->
    </section> <!-- statements granting privileges -->

    <section id="fblangref25-security-privs-assignroles">
      <title>Assigning Roles</title>
      <para>Assigning a role is similar to granting a privilege.  One or more roles can be assigned
      to one or a list of users or objects using one <database>GRANT</database> statement.  The
      optional <database>WITH ADMIN OPTION</database> clause allows all grantees specified in the
      list to assign any roles from the list to other users.</para>
      <formalpara>
        <title>Examples of Role Assignment</title>
        <orderedlist>
          <listitem>Assigning the DIRECTOR and MANAGER roles to the user IVAN:
            <blockquote><programlisting>
GRANT DIRECTOR, MANAGER TO USER IVAN;
            </programlisting></blockquote>
          </listitem>
          <listitem>Assigning the ADMIN role to the user ALEX with the authority to assign
          this role to other users:
            <blockquote><programlisting>
GRANT MANAGER TO USER ALEX WITH ADMIN OPTION;
            </programlisting></blockquote>
          </listitem>
        </orderedlist>
      </formalpara>
      <formalpara>
        <title>See also</title>
        <para>&nbsp;<link linkend="fblangref25-security-privs-revoke"><database>REVOKE</database></link>
        </para>
      </formalpara>
    </section> <!-- assigning roles -->

    <section id="fblangref25-security-privs-revoking">
      <title>Statements for Revoking Privileges</title>
      <para>A REVOKE statement is used for revoking privileges&mdash;including roles&mdash;from users and
      other database objects.</para>

      <section id="fblangref25-security-privs-revoke">
        <title><database>REVOKE</database></title>
        <formalpara>
          <title>Used for</title>
          <para>&nbsp;Revoking privileges or de-assigning roles</para>
        </formalpara>
        <formalpara>
          <title>Available in</title>
          <para>DSQL, ESQL</para>
        </formalpara>
        <formalpara>
          <title>Syntax</title>
          <blockquote><programlisting>
REVOKE [GRANT OPTION FOR] {
  &lt;privileges&gt; ON [TABLE] {tablename | viewname} |
  EXECUTE ON PROCEDURE procname }
FROM {&lt;object_list&gt; | &lt;user_list&gt;}
[{GRANTED BY | AS} [USER] grantor];

REVOKE [ADMIN OPTION FOR] &lt;role_granted&gt;
FROM {PUBLIC | &lt;role_grantee_list&gt;}
[{GRANTED BY | AS} [USER] grantor];

REVOKE ALL ON ALL FROM &lt;user_list&gt;;

&lt;privileges&gt; ::= ALL [PRIVILEGES] | &lt;privilege_list&gt;

&lt;privilege_list&gt; ::= {
  SELECT |
  DELETE |
  INSERT |
  UPDATE [(col [,col &hellip;])] |
  REFERENCES [(col [,col &hellip;])]
} [, &lt;privilege_list&gt; &hellip;]

&lt;object_list&gt; ::= {
  PROCEDURE procname |
  TRIGGER trigname |
  VIEW viewname |
  PUBLIC
} [, &lt;object_list&gt; &hellip;]

&lt;user_list&gt; ::= {
  [USER] username |
  [ROLE] rolename |
  Unix_user |
  GROUP Unix_group
} [, &lt;user_list&gt; &hellip;]

&lt;role_granted&gt; ::= rolename [, rolename &hellip;]

&lt;role_grantee_list&gt; ::= [USER] username [, [USER] username  &hellip;]
          </programlisting></blockquote>
        </formalpara>

        <table id="fblangref25-security-tbl-revoke">
        <?dbfo keep-together='auto'?>
          <title>REVOKE Statement Parameters</title>
          <tgroup cols="2">
            <colspec colname="colParam" colwidth="*"></colspec>
            <colspec colname="colDes" colwidth="3*"></colspec>
            <thead>
              <row valign="middle">
                <entry align="center">Parameter</entry>
                <entry align="center">Description</entry>
              </row>
            </thead>
            <tbody>
              <row valign="middle">
                <entry align="center">tablename</entry>
                <entry align="left">The name of the table the privilege is to be revoked from</entry>
              </row>
              <row valign="middle">
                <entry align="center">viewname</entry>
                <entry align="left">The name of the view the privilege is to be revoked from</entry>
              </row>
              <row valign="middle">
                <entry align="center">procname</entry>
                <entry align="left">The name of the stored procedure the EXECUTE privilege
                 is to be revoked from;  or the name of the procedure that is to have the privilege[s]
                 revoked</entry>
              </row>
              <row valign="middle">
                <entry align="center">trigname</entry>
                <entry align="left">Trigger name</entry>
              </row>
              <row valign="middle">
                <entry align="center">col</entry>
                <entry align="left">The table column the privilege is to be revoked from</entry>
              </row>
              <row valign="middle">
                <entry align="center">username</entry>
                <entry align="left">The user name from which the privileges are to be revoked from or the role
                is to be removed from</entry>
              </row>
              <row valign="middle">
                <entry align="center">rolename</entry>
                <entry align="left">Role name</entry>
              </row>
              <row valign="middle">
                <entry align="center">Unix_group</entry>
                <entry align="left">The name of a user group in a POSIX operating system</entry>
              </row>
              <row valign="middle">
                <entry align="center">grantor</entry>
                <entry align="left">The grantor user on whose behalf the the privilege[s] are
                being revoked</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>The REVOKE statement is used for revoking privileges from users, roles, stored procedures,
        triggers and views that were granted using the GRANT statement.
        See <link linkend="fblangref25-security-privs-grant"><database>GRANT</database></link> for
        detailed descriptions of the various types of privileges.</para>
        <para>Only the user who granted the privilege can revoke it.</para>

        <section id="fblangref25-security-privs-revoke-from">
          <title>The <database>FROM</database> Clause</title>
          <para>The <database>FROM</database> clause is used to specify the list of users, roles and
          database objects (procedures, triggers and views) that will have the enumerated privileges
          revoked. The optional <database>USER</database> and <database>ROLE</database> keywords in the
          <database>FROM</database> clause allow you to specify exactly which type is to have the
          privilege revoked. If a <database>USER</database> or <database>ROLE</database> keyword is not specified,
          the server checks whether for a role with this name and, if there is none, the privileges are
          revoked from the user without further checking.
            <tip>
              <title>Recommendation</title>
              <para>Although the <database>USER</database> and <database>ROLE</database> keywords are
              optional, it is advisable to use them in order to avoid ambiguity.</para>
            </tip>
          </para>
          <para>The <database>GRANT</database> statement does not check for the existence of a user
          from which the privileges are being revoked.  When revoking a privilege from a database object,
          you must specify the object type of the object.
            <important>
              <title>Revoking Privileges from user <database>PUBLIC</database></title>
              <para>Privileges that were granted to the special user named <database>PUBLIC</database> must
              be revoked from the user <database>PUBLIC</database>. User <database>PUBLIC</database> provides
              a way to grant privileges to all users at once but it is not <quote>a group of
              users</quote>.</para>
            </important>
          </para>
        </section> <!-- FROM Clause -->

        <section id="fblangref25-security-privs-revoke-grantoption">
          <title>Revoking the <database>GRANT OPTION</database></title>
          <para>The optional <database>GRANT OPTION FOR</database> clause revokes the user's privilege to
          grant privileges on the table, view, trigger or stored procedure to other users or to roles.
          </para>
        </section> <!-- grant option -->

        <section id="fblangref25-security-privs-revoke-role">
          <title>Removing the Privilege to One or More Roles</title>
          <para>One usage of the <database>REVOKE</database> statement is to remove roles that were assigned
          to a user, or a group of users, by a <database>GRANT</database> statement. In the case of multiple
          roles and/or multiple grantees, the <database>REVOKE</database> verb is followed by the list of
          roles that will be removed from the list of users specified after the <database>FROM</database>
          clause.</para>
          <para>The optional <database>ADMIN OPTION FOR</database> clause provides the means to revoke the
          grantee's <quote>administrator</quote> privilege, the ability to assign the same role
          to other users, without revoking the grantee's privilege to the role.</para>

          <para>Multiple roles and grantees can be processed in a single statement.</para>
        </section>

        <section id="fblangref25-security-privs-revoke-exgrantby">
          <title>Revoking Privileges That Were <database>GRANTED BY</database></title>
          <para>A privilege that has been granted using the <database>GRANTED BY</database> clause
          is internally attributed explicitly to the grantor designated by that original
          <database>GRANT</database> statement.  To revoke a privilege that was obtained by
          this method, the current user must be logged in either with full administrative 
          privileges or as the user designated as &lt;grantor&gt; by that <database>GRANTED BY</database>
          clause.
            <note>
              <para>The same rule applies if the syntax used in the original <database>GRANT</database>
              statement used the synonymous <database>AS</database> form to introduce the clause, instead
              of the standard <database>GRANTED BY</database> form.</para>
            </note>
          </para>
        </section>

        <section id="fblangref25-security-privs-revoke-allonall">
          <title>Revoking <database>ALL ON ALL</database></title>
          <para>If the current user is logged in with full administrator privileges, 
          the statement
            <blockquote><literallayout class="monospaced">
REVOKE ALL ON ALL
            </literallayout></blockquote>
          can be used to revoke all privileges (including roles) on all objects from one or more
          users and/or roles. All privileges for the user will be removed, regardless of
          who granted them.  It is a quick way to <quote>clear</quote> privileges when access to
          the database must be blocked for a particular user.</para>
          <para>If the current user is not logged in with escalated privileges, the only
          privileges revoked will be those s/he granted originally.</para>
          <para>Although <database>REVOKE ALL ON ALL</database> removes privileges on stored
          procedures, triggers and views, it does not remove the parameter storing the
          name of the user that granted those privileges.</para>
          <note>The <database>GRANTED BY</database> clause is not supported.</note>
        </section> <!-- revoke all on all -->

        <formalpara>
          <title>Examples using REVOKE</title>
          <orderedlist>
            <listitem>Revoking the privileges for reading and inserting into the SALES 
              <blockquote><programlisting>
REVOKE SELECT, INSERT ON TABLE SALES FROM USER ALEX;
              </programlisting></blockquote>
            </listitem>
            <listitem>Revoking the privilege for reading the CUSTOMER table from the MANAGER
            and ENGINEER roles and from the user IVAN:
              <blockquote><programlisting>
REVOKE SELECT ON TABLE CUSTOMER
FROM ROLE MANAGER, ROLE ENGINEER, USER IVAN;
              </programlisting></blockquote>
            </listitem>
            <listitem>Revoking from the ADMINISTRATOR role the authority to grant any privileges
            on the CUSTOMER table to other users or roles:
              <blockquote><programlisting>
REVOKE GRANT OPTION FOR ALL ON TABLE CUSTOMER
FROM ROLE ADMINISTRATOR;
              </programlisting></blockquote>
            </listitem>
            <listitem>Revoking the privilege for reading the COUNTRY table and the
            authority to reference the NAME column of the COUNTRY table from any user,
            via the special user PUBLIC:
              <blockquote><programlisting>
REVOKE SELECT, REFERENCES (NAME) ON TABLE COUNTRY
  FROM PUBLIC;
              </programlisting></blockquote>
            </listitem>
            <listitem>Revoking the privilege for reading the EMPLOYEE table from the user IVAN,
            that was granted by the user ALEX:
              <blockquote><programlisting>
REVOKE SELECT ON TABLE EMPLOYEE
  FROM USER IVAN GRANTED BY ALEX;
              </programlisting></blockquote>
            </listitem>
            <listitem>Revoking the privilege for updating the FIRST_NAME and LAST_NAME columns
            of the EMPLOYEE table from the user IVAN:
              <blockquote><programlisting>
REVOKE UPDATE (FIRST_NAME, LAST_NAME) ON TABLE EMPLOYEE
  FROM USER IVAN;
              </programlisting></blockquote>
            </listitem>
            <listitem>Revoking the privilege for inserting records into the
            EMPLOYEE_PROJECT table from the ADD_EMP_PROJ procedure:
              <blockquote><programlisting>
REVOKE INSERT ON EMPLOYEE_PROJECT
  FROM PROCEDURE ADD_EMP_PROJ;
              </programlisting></blockquote>
            </listitem>
            <listitem>Revoking the privilege for executing the procedure ADD_EMP_PROJ
            from the MANAGER role:
              <blockquote><programlisting>
REVOKE EXECUTE ON PROCEDURE ADD_EMP_PROJ
  FROM ROLE MANAGER;
              </programlisting></blockquote>
            </listitem>
            <listitem>Revoking the DIRECTOR and MANAGER roles from the user IVAN:
              <blockquote><programlisting>
REVOKE DIRECTOR, MANAGER FROM USER IVAN;
              </programlisting></blockquote>
            </listitem>
            <listitem>Revoke from the user ALEX the authority to assign the MANAGER 
            role to other users:
              <blockquote><programlisting>
REVOKE ADMIN OPTION FOR MANAGER FROM USER IVAN;
              </programlisting></blockquote>
            </listitem>
            <listitem>
              <para>Revoking all privileges (including roles) on all objects from the user IVAN:
              <blockquote><programlisting>
REVOKE ALL ON ALL FROM IVAN;
              </programlisting></blockquote>
              After this statement is executed, the user IVAN will have no privileges whatsoever.
              </para>
            </listitem>
          </orderedlist>
        </formalpara>
        <formalpara>
          <title>See also</title>
          <para><link linkend="fblangref25-security-privs-grant"><database>GRANT</database></link>
          </para>
        </formalpara>
      </section> <!-- revoke statement -->
    </section> <!-- statements revoking privileges -->

    <section id="fblangref25-security-rdbadmin">
      <title><database>RDB$ADMIN</database> Role</title>
      <para>The <database>RDB$ADMIN</database> internally-created role is present in every
      database. Assigning the <database>RDB$ADMIN</database> role to a regular user in a
      database grants that user the privileges of the <database>SYSDBA</database>, in the
      current database only.</para>
      <para>The escalated privileges take effect when the user is logged in to that regular
      database under the <database>RDB$ADMIN</database> role and give full control over all
      objects in the database.</para>
      <para>Being granted the <database>RDB$ADMIN</database> role in the security database
      confers the authority to create, edit and delete user accounts.</para>
      <para>In both cases, the user with the escalated privileges can assign <database>RDB$ADMIN</database>
      role to any other user. In other words, specifying <database>WITH ADMIN OPTION</database> is
      unnecessary because it is built into the role.</para>

      <section id="fblangref25-security-rdbadmin01">
        <title>Granting the <database>RDB$ADMIN</database> Role in a Regular Database</title>
        <para>In a regular database, the <database>RDB$ADMIN</database> role is granted and
        revoked with the usual syntax:
          <blockquote><programlisting>
GRANT RDB$ADMIN TO username

REVOKE RDB$ADMIN FROM username
          </programlisting></blockquote>
        </para>
        <table id="fblangref25-security-tbl-grant-rdbadmin">
        <?dbfo keep-together='auto'?>
          <title>RDB$ADMIN Role GRANT and REVOKE Statement Parameter</title>
          <tgroup cols="2">
            <colspec colname="colParam" colwidth="*"></colspec>
            <colspec colname="colDes" colwidth="3*"></colspec>
            <thead>
              <row valign="middle">
                <entry align="center">Argument</entry>
                <entry align="center">Description</entry>
              </row>
            </thead>
            <tbody>
              <row valign="middle">
                <entry align="center">username</entry>
                <entry align="left">The name of the user to which the RDB$ADMIN role is
                to be assigned or from which it is to be revoked</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <formalpara>
          <title>A grantor can be</title>
          <itemizedlist spacing="compact">
            <listitem>SYSDBA</listitem>
            <listitem>Any user who has the privileges of the RDB$ADMIN role and is logged in with this role</listitem>
            <listitem>A Windows Administrator, if the automatic assignment of the <database>RDB$ADMIN</database>
            role is already enabled and trusted authentication is enabled</listitem>
          </itemizedlist>
        </formalpara>
        <formalpara>
          <title>See also</title>
          <para>&nbsp;<link linkend="fblangref25-security-privs-grant"><database>GRANT</database></link>,
          <link linkend="fblangref25-security-privs-revoke"><database>REVOKE</database></link>
          </para>
        </formalpara>

        <section id="fblangref25-security-rdbadmin02">
          <title>Using the <database>RDB$ADMIN</database> Role in a Normal Database</title>
          <para>To exercise his <database>RDB$ADMIN</database> privileges, the grantee simply
          includes the role in the connection attribues when connecting to the database.</para>
        </section>
      </section> <!-- regular database -->

      <section id="fblangref25-security-rdbadmin03">
        <title>Granting the <database>RDB$ADMIN</database> Role in the Security Database</title>
        <para>Since nobody&mdash;not even <database>SYSDBA</database>&mdash; can connect to the
        security database, the <database>GRANT</database> and <database>REVOKE</database> statements
        are of no use for this task. Instead, the <database>RDB$ADMIN</database> role is granted
        and revoked using the SQL statements for user management:
          <blockquote><programlisting>
CREATE USER newuser
PASSWORD 'password'
GRANT ADMIN ROLE

ALTER USER existinguser
GRANT ADMIN ROLE

ALTER USER existinguser
REVOKE ADMIN ROLE
          </programlisting></blockquote>
          <note>
            <para><database>GRANT ADMIN ROLE</database> and <database>REVOKE ADMIN ROLE</database> are
            not statements in the <database>GRANT</database> and <database>REVOKE</database> lexicon.
            They are three-word parameters to the statements <database>CREATE USER</database>
            and <database>ALTER USER</database>.</para>
          </note>
        </para>
        <table id="fblangref25-security-tbl-rdbadmin">
        <?dbfo keep-together='auto'?>
          <title>RDB$ADMIN Role GRANT and REVOKE Parameters</title>
          <tgroup cols="2">
            <colspec colname="colParam" colwidth="*"></colspec>
            <colspec colname="colDes" colwidth="3*"></colspec>
            <thead>
              <row valign="middle">
                <entry align="center">Parameter</entry>
                <entry align="center">Description</entry>
              </row>
            </thead>
            <tbody>
              <row valign="middle">
                <entry align="center">newuser</entry>
                <entry align="left">Name of new user (for CREATE USER)</entry>
              </row>
              <row valign="middle">
                <entry align="center">existinguser</entry>
                <entry align="left">Name of existing user (for ALTER USER)</entry>
              </row>
              <row valign="middle">
                <entry align="center">password</entry>
                <entry align="left">User password for new user.  It may have up to 32
                characters but only the first 8 characters are significant</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <formalpara>
          <title>A grantor can be</title>
          <itemizedlist spacing="compact">
            <listitem>SYSDBA</listitem>
            <listitem>Any user who has the privileges of the RDB$ADMIN role and is logged in with this role</listitem>
            <listitem>A Windows Administrator, if the automatic assignment of the <database>RDB$ADMIN</database>
            role is already enabled and trusted authentication is enabled</listitem>
          </itemizedlist>
        </formalpara>
        <formalpara>
          <title>See also</title>
          <para>&nbsp;<link linkend="fblangref25-security-auth-create-user"><database>CREATE USER</database></link>,
          <link linkend="fblangref25-security-auth-alter-user"><database>ALTER USER</database></link>
          </para>
        </formalpara>

        <section id="fblangref25-security-rdbadmin04">
          <title>Doing the Same Task Using <emphasis>gsec</emphasis></title>
          <para>An alternative is to use <emphasis>gsec</emphasis>
          with the <function>-admin</function> parameter to store the
          <database>RDB$ADMIN</database> attribute on the user's record:
            <blockquote><literallayout class="monospaced">
gsec -add newuser -pw password -admin yes
gsec -mo existinguser -admin yes
gsec -mo existinguser -admin no
            </literallayout></blockquote>
          </para>
          <note>
            <para>Depending on the adminstrative status of the current user, more
            parameters may be needed when invoking <emphasis>gsec</emphasis>,
            e.g., -user and -pass, or -trusted.</para>
          </note>
        </section><!-- use gsec -->

        <section id="fblangref25-security-rdbadmin05">
          <title>Using the <database>RDB$ADMIN</database> Role in the Security Database</title>
          <para>To manage user accounts through SQL, the grantee must specify the
          <database>RDB$ADMIN</database> role when connecting. This poses a problem,
          because nobody can connect to the security database.</para>
          <para>The solution is that the user connects to regular database where he
          also has <database>RDB$ADMIN</database> rights. He logs in with the
          escalated privileges, by specifying the <database>RDB$ADMIN</database> role when
          connecting.  From there, he can submit any SQL user management command.</para>
          <para>It may not be the most elegant of solutions, but it is the only way.
          If there is not a regular database where the user has the <database>RDB$ADMIN</database>
          role, the SQL route is blocked.</para>

          <section id="fblangref25-security-rdbadmin0">
            <title>Using <emphasis>gsec</emphasis> with <database>RDB$ADMIN Rights</database></title>
            <para>To perform user management with <emphasis>gsec</emphasis>, the user must provide
            the extra switch <function>-role rdb$admin</function>.</para>
          </section>
        </section> <!-- using w.security database -->
      </section> <!-- security database -->
    </section> <!-- rdb$admin role -->

    <section id="fblangref25-security-autoadminmapping">
      <title><database>AUTO ADMIN MAPPING</database></title>
      <para>In Firebird 2.1, Windows Administrators would automatically receive <database>SYSDBA</database>
      privileges if trusted authentication was configured for server connections.  In Firebird 2.5, it is no
      longer automatic.  The setting of the <database>AUTO ADMIN MAPPING</database> switch now determines whether
      Administrators have automatic <database>SYSDBA</database> rights, on a database-by-database
      basis.  By default, when a database is created, it is off.</para>
      <para>If <database>AUTO ADMIN MAPPING</database> is enabled in the database, it will take effect whenever
      a Windows administrator
        <orderedlist numeration="loweralpha" spacing="compact">
          <listitem>connects using trusted authentication, and</listitem>
          <listitem>connects without specifying any role</listitem>
        </orderedlist>
      </para>
      <para>After a successful <quote>auto admin</quote> connection, the current role is set
      to <database>RDB$ADMIN</database>.</para>

      <section id="fblangref25-security-autoadminmapping01">
        <title>Auto Admin Mapping in Regular Databases</title>
        <para>To switch automatic mapping on and off in a regular database:
          <blockquote><programlisting>
ALTER ROLE RDB$ADMIN
    SET AUTO ADMIN MAPPING -- switch it on

ALTER ROLE RDB$ADMIN
    DROP AUTO ADMIN MAPPING -- switch it off
          </programlisting></blockquote>
        </para>
        <para>Either statement must be issued by a user with sufficient rights, that is:
          <itemizedlist spacing="compact">
            <listitem>the database Owner</listitem>
            <listitem>SYSDBA</listitem>
            <listitem>Any user who has the privileges of the RDB$ADMIN role and is logged in with this role</listitem>
            <listitem>A Windows Administrator, if the automatic assignment of the <database>RDB$ADMIN</database>
            role is already enabled and trusted authentication is enabled</listitem>
          </itemizedlist>
        </para>
        <para>In regular databases, the status of <database>AUTO ADMIN MAPPING</database> is checked only at connection
        time. If an Administrator has the <database>RDB$ADMIN</database> role because auto-mapping was on when he logged
        in, he will keep that role for the duration of the session, even if he or someone else turns off the mapping in
        the meantime.</para>
        <para>Likewise, switching on <database>AUTO ADMIN MAPPING</database> will not change the current role to
        <database>RDB$ADMIN</database> for Administrators who were already connected.</para>
        <formalpara>
          <title>See also</title>
          <para>&nbsp;<link linkend="fblangref25-security-privs-alterrole"><database>ALTER ROLE</database></link>
          </para>
        </formalpara>
      </section>

      <section id="fblangref25-security-autoadminmapping02">
        <title>Auto Admin Mapping in the Security Database</title>
        <para>No SQL statements exist to switch automatic mapping on and off in the security database.
        Instead, <emphasis>gsec</emphasis> must be used:
          <blockquote><literallayout class="monospaced">
gsec -mapping set

gsec -mapping drop
          </literallayout></blockquote>
        </para>
        <para>More <emphasis>gsec</emphasis> switches may be needed, depending on what kind of log-in
        you used to connect, e.g., <function>-user</function> and <function>-pass</function>, or
        <function>-trusted</function>.</para>
        <para>Only <database>SYSDBA</database> can set the auto-mapping on if it is disabled.</para>
        <formalpara>
          <title>These users can set the auto-mapping off (drop it)</title>
          <itemizedlist spacing="compact">
            <listitem>SYSDBA</listitem>
            <listitem>A Windows Administrator whose login was with the <database>RDB$ADMIN</database> role
            assigned by way of <database>AUTO ADMIN MAPPING</database>, with trusted authentication enabled</listitem>
          </itemizedlist>
          <note>
            <para>Ordinary users connecting with the <database>RDB$ADMIN</database> role do not have sufficient
            privilege to switch <database>AUTO ADMIN MAPPING</database> on or off in the security database.</para>
          </note>
        </formalpara>
      </section>
    </section> <!-- auto admin mapping -->
  </section> <!-- privs -->






</chapter>