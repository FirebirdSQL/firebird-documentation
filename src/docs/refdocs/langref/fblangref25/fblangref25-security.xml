<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../../../../tools/docbook-dtd/docbookx.dtd">
<chapter id="fblangref25-security">
  <title>Security</title>
  <para>Databases must be secure and so must the data stored in them. Firebird provides two levels of
  data security protection: user authentication at the server level and SQL privileges within databases.
  This chapter tells you how to manage security at both levels.</para>
  <section id="fblangref25-security-auth">
    <title>User Authentication</title>
    <para>The security of the entire database depends on identifying a user on verifying its authority, a 
    procedure known as <firstterm>authentication</firstterm>.
    The information about users authorised to access a specific Firebird server is stored in a special security database
    named <filename>security2.fdb</filename>.  Each record in <filename>security2.fdb</filename> is a user account
    for one user.</para>
    <para>A user name, consisting of up to 31 characters, is a case-insensitive system identifier. A user must have a 
    password, of which the first eight are significant.  Whilst it is valid to enter a password longer than eight characters,
    any subsequent characters are ignored.  Passwords are case-sensitive.</para>
    <para>If the user specified during the connection is the SYSDBA or a specially privileged user, that user will
    have unlimited access to the database.  The database owner, without special privileges, wiil be able to access only
    the objects in the database that s/he owns.</para>

    <section id="fblangref25-security-auth-special">
      <title>Specially Privileged Users</title>
      <para>In Firebird, the SYSDBA account is a <quote>Superuser</quote> that exists beyond any security
      restrictions.  It has complete access to all objects in all regular databases on the server, and full 
      read/write access to the accounts in the security database <filename>security2.fdb</filename>.  No 
      user has access to the metadata of the security database.</para>

      <para>The default SYSDBA password on Windows and MacOS is 'masterkey'&mdash;or 'masterke', to be exact, 
      because of the 8-character length limit.
        <important>
          <title>Extremely Important!</title>
          <para>The default password 'masterkey' is known across the universe.  It should be changed as soon
          as the Firebird server installation is complete.
          </para>
        </important>
        Other users can acquire elevated privileges in several ways, some of which are dependent on
        the operating system platform.  These are discussed in the sections that follow and are 
        summarised in <link linkend="fblangref25-security-administrators"><citetitle>Administrators</citetitle></link>.</para>

      <section id="fblangref25-security-auth-special-posix">
        <title>POSIX Hosts</title>
        <para>On POSIX systems, including MacOSX, Firebird will interpret a POSIX user account as though it were a
        Firebird user account in its own security database, provided the server sees the client machine as a trusted
        host and the system user accounts exist on both the client and the server. To establish a <quote>trusted</quote>
        relationship with the client host, the corresponding entries must be included in one of the files
        <filename>/etc/hosts.equiv</filename> or <filename>/etc/gds_hosts.equiv</filename> on Firebird's host
        server.
          <itemizedlist spacing="compact">
            <listitem>The file <filename>hosts.equiv</filename> contains trusted relationships at operating
            system level, encompassing all services (rlogin, rsh, rcp, and so on)</listitem>
            <listitem>The file <filename>gds_hosts.equiv</filename> contains trusted relationships between
            Firebird hosts only.</listitem>
          </itemizedlist>
        The format is identical for both files and looks like this:
          <literallayout class="monospaced">
  hostname [username]
          </literallayout>
        </para>
        <section id="fblangref25-security-auth-sysdba-posix">
          <title>The <database>SYSDBA</database> User on POSIX</title>
          <para>On POSIX hosts, other than MacOSX, the <database>SYSDBA</database> user does not have a default
          password.  If the full installation is done using the standard scripts, a one-off password will be
          created and stored in a text file in the same directory as <filename>security2.fdb</filename>, commonly
          <filename>/opt/firebird/</filename>.  The name of the password file is <filename>SYSDBA.password</filename>.</para>
          <note>
            <para>In an installation performed by a distribution-specific installer, the location of the
            security database and the password file may be different from the standard one.</para>
          </note>
        </section>
        <section id="fblangref25-security-auth-root-posix">
          <title>The <emphasis>root</emphasis> User</title>
          <para>The <emphasis role="bold">root</emphasis> user can act directly as <database>SYSDBA</database>
          on POSIX host systems. Firebird interprets <emphasis role="bold">root</emphasis> as though it
          were <database>SYSDBA</database> and it provides access to all databases on the server.</para>
        </section>
      </section> <!-- POSIX hosts -->

      <section id="fblangref25-security-auth-special-windows">
        <title>Windows Hosts</title>
        <para>On Windows server-capable operating systems, operating system accounts can be used. Trusted
        Authentication must be enabled by setting the <emphasis>Authentication</emphasis> parameter to <emphasis>Trusted</emphasis>
        or <emphasis>Mixed</emphasis> in the configuration file, <filename> firebird.conf</filename>.</para>
        <para>Even with trusted authentication enabled, Windows operating system Administrators are not automatically
        granted SYSDBA privileges when they connect to a database.  To make that happen, the internally-created role
        <database>RDB$ADMIN</database> must be altered by SYSDBA or the database owner, to enable it.  For details, refer
        to the later section entitled <link linkend="fblangref25-security-autoadminmapping"><citetitle>AUTO ADMIN
        MAPPING</citetitle></link>.</para>

        <para>The embedded version of Firebird server on Windows does not use server-level authentication.
        However, because objects within a database are subject to SQL privileges, a valid user name and, if
        applicable, a role, may be required in the connection parameters.</para>
      </section>

      <section id="fblangref25-security-auth-special-dbowner">
        <title>The Database Owner</title>
        <para>The <quote>owner</quote> of a database is either the user who was <database>CURRENT_USER</database> at
        the time of creation or, if the parameters <database>USER</database> and <database>PASSWORD</database> were
        supplied in the <database>CREATE DATABASE</database> statement, the user cited there.</para>
        <para><quote>Owner</quote> is not a user name and the user who is the owner of the database is not
        a specially privileged user.  However, the owner does have some rights with respect to the database,
        including the right to drop it, to restore it from a backup and to enable or disable the 
        <link linkend="fblangref25-security-autoadminmapping"><citetitle>AUTO ADMIN MAPPING</citetitle></link> 
        capability.</para>
        <para>The owner has no automatic privileges over any database objects that are created by other users 
        after the database comes into existence.</para>
      </section>
    </section> <!-- Special Users -->

    <section id="fblangref25-security-rdbadmin">
      <title><database>RDB$ADMIN</database> Role</title>
      <para>The internally-created role <database>RDB$ADMIN</database> is present in every
      database. Assigning the <database>RDB$ADMIN</database> role to a regular user in a
      database grants that user the privileges of the <database>SYSDBA</database>, in the
      current database only.</para>
      <para>The elevated privileges take effect when the user is logged in to that regular
      database under the <database>RDB$ADMIN</database> role and give full control over all
      objects in the database.</para>
      <para>Being granted the <database>RDB$ADMIN</database> role in the security database
      confers the authority to create, edit and delete user accounts.</para>
      <para>In both cases, the user with the elevated privileges can assign <database>RDB$ADMIN</database>
      role to any other user. In other words, specifying <database>WITH ADMIN OPTION</database> is
      unnecessary because it is built into the role.</para>

      <section id="fblangref25-security-rdbadmin03">
        <title>Granting the <database>RDB$ADMIN</database> Role in the Security Database</title>
        <para>Since nobody&mdash;not even <database>SYSDBA</database>&mdash; can connect to the
        security database, the <database>GRANT</database> and <database>REVOKE</database> statements
        are of no use for this task. Instead, the <database>RDB$ADMIN</database> role is granted
        and revoked using the SQL statements for user management:
          <blockquote><programlisting>
CREATE USER new_user
PASSWORD 'password'
GRANT ADMIN ROLE

ALTER USER existing_user
GRANT ADMIN ROLE

ALTER USER existing_user
REVOKE ADMIN ROLE
          </programlisting></blockquote>
          <note>
            <para><database>GRANT ADMIN ROLE</database> and <database>REVOKE ADMIN ROLE</database> are
            not statements in the <database>GRANT</database> and <database>REVOKE</database> lexicon.
            They are three-word parameters to the statements <database>CREATE USER</database>
            and <database>ALTER USER</database>.</para>
          </note>
        </para>
        <table id="fblangref25-security-tbl-rdbadmin">
        <?dbfo keep-together='auto'?>
          <title>Parameters for RDB$ADMIN Role GRANT and REVOKE</title>
          <tgroup cols="2">
            <colspec colname="colParam" colwidth="*"></colspec>
            <colspec colname="colDes" colwidth="3*"></colspec>
            <thead>
              <row valign="middle">
                <entry align="center">Parameter</entry>
                <entry align="center">Description</entry>
              </row>
            </thead>
            <tbody>
              <row valign="middle">
                <entry align="center">new_user</entry>
                <entry align="left">Using CREATE USER, name for the new user</entry>
              </row>
              <row valign="middle">
                <entry align="center">existing_user</entry>
                <entry align="left">Using ALTER USER, Name of an existing user</entry>
              </row>
              <row valign="middle">
                <entry align="center">password</entry>
                <entry align="left">Using CREATE USER, password for the new user. Its theoretical
                limit is 127 bytes but only the first 8 characters are considered.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

       <para>The grantor must be already logged in as an
        <link linkend="fblangref25-security-administrators">administrator</link>.</para>
        <formalpara>
          <title>See also</title>
          <para>&nbsp;<link linkend="fblangref25-security-auth-create-user"><database>CREATE USER</database></link>,
          <link linkend="fblangref25-security-auth-alter-user"><database>ALTER USER</database></link>
          </para>
        </formalpara>

        <section id="fblangref25-security-rdbadmin04">
          <title>Doing the Same Task Using <emphasis>gsec</emphasis></title>
          <para>An alternative is to use <emphasis>gsec</emphasis>
          with the <function>-admin</function> parameter to store the
          <database>RDB$ADMIN</database> attribute on the user's record:
            <blockquote><literallayout class="monospaced">
gsec -add new_user -pw password -admin yes
gsec -mo existing_user -admin yes
gsec -mo existing_user -admin no
            </literallayout></blockquote>
          </para>
          <note>
            <para>Depending on the adminstrative status of the current user, more
            parameters may be needed when invoking <emphasis>gsec</emphasis>,
            e.g., -user and -pass, or -trusted.</para>
          </note>
        </section><!-- use gsec -->

        <section id="fblangref25-security-rdbadmin05">
          <title>Using the <database>RDB$ADMIN</database> Role in the Security Database</title>
          <para>To manage user accounts through SQL, the grantee must specify the
          <database>RDB$ADMIN</database> role when connecting. No user can connect to the 
          security database, so the solution is that the user connects to a regular database where he
          also has <database>RDB$ADMIN</database> rights, supplying the <database>RDB$ADMIN</database>
          role in his login parameters.  From there, he can submit any SQL user management command.</para>

          <para>The SQL route for the user is blocked for any database in which he has not been the 
          granted the <database>RDB$ADMIN</database> role.</para>

          <section id="fblangref25-security-rdbadmin0">
            <title>Using <emphasis>gsec</emphasis> with <database>RDB$ADMIN Rights</database></title>
            <para>To perform user management with <emphasis>gsec</emphasis>, the user must provide
            the extra switch <function>-role rdb$admin</function>.</para>
          </section>
        </section> <!-- using w.security database -->
      </section> <!-- security database -->


      <section id="fblangref25-security-rdbadmin01">
        <title>Granting the <database>RDB$ADMIN</database> Role in a Regular Database</title>
        <para>In a regular database, the <database>RDB$ADMIN</database> role is granted and
        revoked with the usual syntax for granting and revoking roles:
          <blockquote><programlisting>
GRANT [ROLE] RDB$ADMIN TO <replaceable>username</replaceable>

REVOKE [ROLE] RDB$ADMIN FROM <replaceable>username</replaceable>
          </programlisting></blockquote>
        </para>
        <para>In order to grant and revoke the <database>RDB$ADMIN</database> role, the grantor must be logged
        in as an <link linkend="fblangref25-security-administrators">administrator</link>.</para>

        <formalpara>
          <title>See also</title>
          <para>&nbsp;<link linkend="fblangref25-security-privs-grant"><database>GRANT</database></link>,
          <link linkend="fblangref25-security-privs-revoke"><database>REVOKE</database></link>
          </para>
        </formalpara>

        <section id="fblangref25-security-rdbadmin02">
          <title>Using the <database>RDB$ADMIN</database> Role in a Regular Database</title>
          <para>To exercise his <database>RDB$ADMIN</database> privileges, the grantee simply
          includes the role in the connection attributes when connecting to the database.</para>
        </section>
      </section> <!-- regular database -->
      
    <section id="fblangref25-security-autoadminmapping">
      <title><database>AUTO ADMIN MAPPING</database></title>
      <para>In Firebird 2.1, Windows Administrators would automatically receive <database>SYSDBA</database>
      privileges if trusted authentication was configured for server connections.  In Firebird 2.5, it is no
      longer automatic.  The setting of the <database>AUTO ADMIN MAPPING</database> switch now determines whether
      Administrators have automatic <database>SYSDBA</database> rights, on a database-by-database
      basis.  By default, when a database is created, it is disabled.</para>
      <para>If <database>AUTO ADMIN MAPPING</database> is enabled in the database, it will take effect whenever
      a Windows Administrator connects
        <orderedlist numeration="loweralpha" spacing="compact">
          <listitem>using trusted authentication, and</listitem>
          <listitem>without specifying any role</listitem>
        </orderedlist>
      </para>
      <para>After a successful <quote>auto admin</quote> connection, the current role is set
      to <database>RDB$ADMIN</database>.</para>

      <section id="fblangref25-security-autoadminmapping01">
        <title>Auto Admin Mapping in Regular Databases</title>
        <para>To enable and disable automatic mapping in a regular database:
          <blockquote><programlisting>
ALTER ROLE RDB$ADMIN
    SET AUTO ADMIN MAPPING -- enable it

ALTER ROLE RDB$ADMIN
    DROP AUTO ADMIN MAPPING -- disable it
          </programlisting></blockquote>
        </para>
        <para>Either statement must be issued by a user with sufficient rights, that is:
          <itemizedlist spacing="compact">
            <listitem>the database owner</listitem>
            <listitem>an <link linkend="fblangref25-security-administrators">administrator</link></listitem>
          </itemizedlist>
        </para>
        <para>In regular databases, the status of <database>AUTO ADMIN MAPPING</database> is checked only at connection
        time. If an Administrator has the <database>RDB$ADMIN</database> role because auto-mapping was on when he logged
        in, he will keep that role for the duration of the session, even if he or someone else turns off the mapping in
        the meantime.</para>
        <para>Likewise, switching on <database>AUTO ADMIN MAPPING</database> will not change the current role to
        <database>RDB$ADMIN</database> for Administrators who were already connected.</para>
      </section>

      <section id="fblangref25-security-autoadminmapping02">
        <title>Auto Admin Mapping in the Security Database</title>
        <para>No SQL statements exist to switch automatic mapping on and off in the security database.
        Instead, <emphasis>gsec</emphasis> must be used:
          <blockquote><literallayout class="monospaced">
gsec -mapping set

gsec -mapping drop
          </literallayout></blockquote>
        </para>
        <para>More <emphasis>gsec</emphasis> switches may be needed, depending on what kind of log-in
        you used to connect, e.g., <function>-user</function> and <function>-pass</function>, or
        <function>-trusted</function>.</para>
        <para>Only <database>SYSDBA</database> can set the auto-mapping on if it is disabled. Any
        administrator can drop (disable) it.</para>
      </section>
    </section> <!-- auto admin mapping -->

    </section> <!-- rdb$admin role -->
    <section id="fblangref25-security-administrators">
      <title>Administrators</title>
      <para>As a general description, an administrator is a user that has sufficient rights to read, write to,
      create, alter or delete any object in a database to which that user's administrator status applies.
      The table summarises how <quote>Superuser</quote> privileges are enabled in the various Firebird security
      contexts.</para>
      <table id="fblangref25-security-tbl-admins">
      <?dbfo keep-together='auto'?>
        <title>Administrator (<quote>Superuser</quote>) Characteristics</title>
        <tgroup cols="3" colsep="0" frame="none">
          <colspec colname="colUser" colwidth="*"></colspec>
          <colspec colname="colAdmin" colwidth="*"></colspec>
          <colspec colname="colComment" colwidth="3*"></colspec>
          <spanspec spanname="all" namest="colUser" nameend="colComment"/>
          <thead>
            <row valign="middle">
              <entry align="left" valign="top">User</entry>
              <entry align="left" valign="top">RDB$ADMIN Role</entry>
              <entry align="left" valign="top">Comments</entry>
            </row>
          </thead>
          <tbody>
            <row valign="top">
              <entry align="left">SYSDBA</entry>
              <entry align="left">Auto</entry>
              <entry align="left">Exists automatically at server level. Has full privileges to
              all objects in all databases. Can create, alter and drop users but has no direct
              access to the security database</entry>
            </row>
            <row valign="top">
              <entry align="left"><replaceable>root</replaceable> user on POSIX</entry>
              <entry align="left">Auto</entry>
              <entry align="left">Exactly like SYSDBA</entry>
            </row>
            <row valign="top">
              <entry align="left">Superuser on POSIX</entry>
              <entry align="left">Auto</entry>
              <entry align="left">Exactly like SYSDBA</entry>
            </row>
            <row valign="top">
              <entry align="left">Windows Administrator</entry>
              <entry align="left">Set as CURRENT_ROLE if login succeeds</entry>
              <entry align="left">Exactly like SYSDBA if all of the following are true:
                <simplelist type="horiz" columns="2">
                  <member>In firebird.conf file</member><member><emphasis>Authentication</emphasis> = mixed / trusted 
                  and Firebird is restarted before proceeding</member>
                  <member>AUTO ADMIN MAPPING</member><member>Enabled in all databases in which the user needs 
                  Superuser privileges</member>
                  <member>Login</member><member>Does not include a role</member>
                </simplelist>
              </entry>
            </row>
            <row valign="top">
              <entry align="left">Regular user</entry>
              <entry align="left">Must be previously granted; must be supplied at login</entry>
              <entry align="left">Like SYSDBA, but only in the database[s} where the role is granted</entry>
            </row>
            <row valign="top">
              <entry align="left">POSIX OS user</entry>
              <entry align="left">Must be previously granted; must be supplied at login</entry>
              <entry align="left">Like SYSDBA, but only in the database[s} where the role is granted</entry>
            </row>
            <row valign="top">
              <entry align="left">Windows user</entry>
              <entry align="left">Must be previously granted; must be supplied at login</entry>
              <entry align="left">Not available if config file parameter
              <emphasis>Authentication</emphasis> = native</entry>
            </row>
            <row valign="top">
              <entry align="left" spanname="all">The database owner is not an administrator.  It is 
              the user that created the database.  If the same user also created some objects in the
              database, then that user owns those objects and has unrestricted access only to them.
              Nevertheless, the owner can drop the database and can also authorise 
              <link linkend="fblangref25-security-autoadminmapping"><database>AUTO ADMIN
              MAPPING</database></link>.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section id="fblangref25-security-auth-manage-users">
      <title>SQL Statements for User Management</title>
      <para>In Firebird 2.5 and above, user accounts are created, modified and deleted using a 
      series of SQL statements that can be submitted by a user with full administrator rights
      in the security database.
     <note>
       <para>For a Windows Administrator, AUTO ADMIN MAPPING enabled only in a regular database is not
       sufficient to permit management of other users.  For instructions to enable it in the security
       database, see <link linkend="fblangref25-security-autoadminmapping02"><citetitle>Auto Admin Mapping
       in the Security Database</citetitle></link>.</para>
      </note>
      </para>
      <para>Non-privileged users can use only the <database>ALTER USER</database> statement and only
      to edit some data in their own accounts.</para>

      <section id="fblangref25-security-auth-create-user">
        <title><database>CREATE USER</database></title>
        <formalpara>
          <title>Used for</title>
          <para>Creating a Firebird user account</para>
        </formalpara>
        <formalpara>
          <title>Available in</title>
          <para>DSQL</para>
        </formalpara>
        <formalpara><title>Syntax</title>
          <blockquote><programlisting>
CREATE USER <replaceable>username</replaceable> PASSWORD '<replaceable>password</replaceable>'
[FIRSTNAME '<replaceable>firstname</replaceable>']
[MIDDLENAME '<replaceable>middlename</replaceable>']
[LASTNAME '<replaceable>lastname</replaceable>']
[GRANT ADMIN ROLE];
          </programlisting></blockquote>
        </formalpara>

        <table id="fblangref25-security-tbl-createuser">
        <?dbfo keep-together='auto'?>
          <title>CREATE USER Statement Parameters</title>
          <tgroup cols="2">
            <colspec colname="colParam" colwidth="*"></colspec>
            <colspec colname="colDes" colwidth="3*"></colspec>
            <thead>
              <row valign="middle">
                <entry align="center">Parameter</entry>
                <entry align="center">Description</entry>
              </row>
            </thead>
            <tbody>
              <row valign="middle">
                <entry align="center">username</entry>
                <entry align="left">User name. The maximum length is 31 characters, following the rules
                for Firebird regular identifiers.  It is always case-insensitive</entry>
              </row>
              <row valign="middle">
                <entry align="center">password</entry>
                <entry align="left">User password. Its theoretical limit is 127 bytes but only the
                first 8 characters are considered. Case-sensitive</entry>
              </row>
              <row valign="middle">
                <entry align="center">firstname</entry>
                <entry align="left">Optional: User's first name. Maximum length 31 characters</entry>
              </row>
              <row valign="middle">
                <entry align="center">middlename</entry>
                <entry align="left">Optional: User's middle name. Maximum length 31 characters</entry>
              </row>
              <row valign="middle">
                <entry align="center">lastname</entry>
                <entry align="left">Optional: User's last name. Maximum length 31 characters</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>Use a <database>CREATE USER</database> statement to create a new Firebird user account. The
        user must not already exist in the Firebird security database, or a primary key violation error message
        will be returned.</para>
        <para>The &lt;<replaceable>username</replaceable> argument must follow the rules for Firebird
        regular identifiers:  see <link linkend="fblangref25-structure-identifiers"><citetitle>Identifiers</citetitle></link>
        in the <citetitle>Structure</citetitle> chapter. User names are always case-insensitive.  Supplying a
        user name enclosed in double quotes will not cause an exception: the quotes will be ignored. If a space is the
        only illegal character supplied, the user name will be truncated back to the first space character. Other illegal
        characters will cause an exception.</para>
        <para>The <database>PASSWORD</database> clause specifies the user's password. A password of more than eight
        characters is accepted with a warning but any surplus characters will be ignored.</para>
        <para>The optional <database>FIRSTNAME, MIDDLENAME</database> and <database>LASTNAME</database> clauses
        can be used to specify additional user properties, such as the person's first name, middle name and last
        name, respectively.  They are just simple VARCHAR(31) fields and can be used to store anything you prefer.</para>
        <para>If the <database>GRANT ADMIN ROLE</database> clause is specified, the new user account is created
        with the privileges of the RDB$ADMIN role in the security database (<filename>security2.fdb</filename>).
        It allows the new user to manage user accounts from any regular database he logs into, but it does not
        grant the user any special privileges on objects in those databases.</para>
        <para>To create a user account, the current user must have <link
        linkend="fblangref25-security-auth-manage-users">administrator privileges</link>.</para>
        <note>
          <para>CREATE / ALTER / DROP USER are DDL statements.  Remember to COMMIT your work.  In <emphasis>isql</emphasis>,
          the command SET AUTO ON will enable autocommit on DDL statements.  In third-party tools and other
          user applications, this may not be the case.</para>
        </note>

        <formalpara>
          <title>Examples</title>
          <orderedlist>
            <listitem>Creating a user with the username <function>bigshot</function>:
              <programlisting>
CREATE USER bigshot PASSWORD 'buckshot';
              </programlisting>
            </listitem>
            <listitem>Creating the user <function>john</function> with additional properties (first and last names):
              <programlisting>
CREATE USER john PASSWORD 'fYe_3Ksw'
FIRSTNAME 'John'
LASTNAME 'Doe';
              </programlisting>
            </listitem>
            <listitem>Creating the user <function>superuser</function> with user management privileges:
              <programlisting>
CREATE USER superuser PASSWORD 'kMn8Kjh'
GRANT ADMIN ROLE;
              </programlisting>
            </listitem>
          </orderedlist>
        </formalpara>
        <formalpara>
          <title>See also</title>
          <para>&nbsp;<link linkend="fblangref25-security-auth-alter-user"><database>ALTER USER</database></link>,
          <link linkend="fblangref25-security-auth-drop-user"><database>DROP USER</database></link>
          </para>
        </formalpara>
      </section> <!-- Create user -->

      <section id="fblangref25-security-auth-alter-user">
        <title><database>ALTER USER</database></title>
        <formalpara>
          <title>Used for</title>
          <para>Modifying a Firebird user account</para>
        </formalpara>
        <formalpara>
          <title>Available in</title>
          <para>DSQL</para>
        </formalpara>
        <formalpara><title>Syntax</title>
          <blockquote><programlisting>
ALTER USER username
{
  [SET]
  [PASSWORD 'password']
  [FIRSTNAME 'firstname']
  [MIDDLENAME 'middlename']
  [LASTNAME 'lastname']
}
[{GRANT | REVOKE} ADMIN ROLE];
          </programlisting></blockquote>
        </formalpara>
        <table id="fblangref25-security-tbl-alteruser">
        <?dbfo keep-together='auto'?>
          <title>ALTER USER Statement Parameters</title>
          <tgroup cols="2">
            <colspec colname="colParam" colwidth="*"></colspec>
            <colspec colname="colDes" colwidth="3*"></colspec>
            <thead>
              <row valign="middle">
                <entry align="center">Parameter</entry>
                <entry align="center">Description</entry>
              </row>
            </thead>
            <tbody>
              <row valign="middle">
                <entry align="center">username</entry>
                <entry align="left">User name. Cannot be changed.</entry>
              </row>
              <row valign="middle">
                <entry align="center">password</entry>
                <entry align="left">User password. Its theoretical limit is 127 bytes but only the
                first 8 characters are considered. Case-sensitive</entry>
              </row>
              <row valign="middle">
                <entry align="center">firstname</entry>
                <entry align="left">Optional: User's first name, or other optional text. Max. length is 31 characters</entry>
              </row>
              <row valign="middle">
                <entry align="center">middlename</entry>
                <entry align="left">Optional: User's middle name, or other optional text. Max. length is 31 characters</entry>
              </row>
              <row valign="middle">
                <entry align="center">lastname</entry>
                <entry align="left">Optional: User's last name, or other optional text. Max. length is 31 characters</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>Use an <database>ALTER USER</database> statement to edit the details in the named Firebird
        user account. To modify the account of another user, the current user must have
        <link linkend="fblangref25-security-administrators">administrator privileges</link> in the security
        database.  Administrator privileges only in regular databases are not sufficient.</para>
        <para>Any user can alter his or her own account, except that only an administrator may use
        <database>GRANT/REVOKE ADMIN ROLE</database>. </para>
        <para>All of the arguments are optional but at least one of them must be present:
          <itemizedlist>
            <listitem>The <database>PASSWORD</database> parameter is for specifying a new password for
            the user</listitem>
            <listitem><database>FIRSTNAME</database>, <database>MIDDLENAME</database> and <database>LASTNAME</database>
            allow updating of the optional user properties,
            such as the person's first name, middle name and last name respectively</listitem>
            <listitem>Including the clause <database>GRANT ADMIN ROLE</database> grants the user the
            privileges of the <database>RDB$ADMIN</database> role in the security database
            (<filename>security2.fdb</filename>), enabling him/her to manage the accounts of other users.
            It does not grant the user any special privileges in regular databases.</listitem>
            <listitem>Including the clause <database>REVOKE ADMIN ROLE</database> removes the user's administrator
            in the security database which, once the transaction is committed, will deny that user the ability
            to alter any user account except his or her own</listitem>
          </itemizedlist>
        </para>
        <note>
          <para>Remember to commit your work if you are working in an application that does not
          auto-commit DDL.</para>
        </note>

        <formalpara>
          <title>Examples</title>
          <orderedlist>
            <listitem>Changing the password for the user <function>bobby</function> and granting
            him user management privileges:
              <programlisting>
ALTER USER bobby PASSWORD '67-UiT_G8'
GRANT ADMIN ROLE;
              </programlisting>
            </listitem>
            <listitem>Editing the optional properties (the first and last names) of the user
            <function>dan</function>:
              <programlisting>
ALTER USER dan
FIRSTNAME 'No_Jack'
LASTNAME 'Kennedy';
              </programlisting>
            </listitem>
            <listitem>Revoking user management privileges from user <function>dumbbell</function>:
              <programlisting>
ALTER USER dumbbell
DROP ADMIN ROLE;
              </programlisting>
            </listitem>
          </orderedlist>
        </formalpara>
        <formalpara>
          <title>See also</title>
          <para>&nbsp;<link linkend="fblangref25-security-auth-create-user"><database>CREATE USER</database></link>,
          <link linkend="fblangref25-security-auth-drop-user"><database>DROP USER</database></link>
          </para>
        </formalpara>
      </section> <!-- Alter user -->

      <section id="fblangref25-security-auth-drop-user">
        <title><database>DROP USER</database></title>
        <formalpara>
          <title>Used for</title>
          <para>Deleting a Firebird user account</para>
        </formalpara>
        <formalpara>
          <title>Available in</title>
          <para>DSQL</para>
        </formalpara>
        <formalpara><title>Syntax</title>
          <blockquote><programlisting>
DROP USER username;
          </programlisting></blockquote>
        </formalpara>
        <table id="fblangref25-security-tbl-dropuser">
        <?dbfo keep-together='auto'?>
          <title>DROP USER Statement Parameter</title>
          <tgroup cols="2">
            <colspec colname="colParam" colwidth="*"></colspec>
            <colspec colname="colDes" colwidth="3*"></colspec>
            <thead>
              <row valign="middle">
                <entry align="center">Parameter</entry>
                <entry align="center">Description</entry>
              </row>
            </thead>
            <tbody>
              <row valign="middle">
                <entry align="center">username</entry>
                <entry align="left">User name</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>Use the statement DROP USER to delete a Firebird user account.  The current
        user requires <link linkend="fblangref25-security-administrators">administrator privileges</link>.</para>
        <note>
          <para>Remember to commit your work if you are working in an application that does not
          auto-commit DDL.</para>
        </note>

        <formalpara>
          <title>Example</title>
          <para>&nbsp;Deleting the user <function>bobby</function>:
            <blockquote><programlisting>
DROP USER bobby;
            </programlisting></blockquote>
          </para>
        </formalpara>
        <formalpara>
          <title>See also</title>
          <para>&nbsp;<link linkend="fblangref25-security-auth-create-user"><database>CREATE USER</database></link>,
          <link linkend="fblangref25-security-auth-alter-user"><database>ALTER USER</database></link>
          </para>
        </formalpara>
      </section> <!-- Drop user -->
    </section> <!-- User Management -->
  </section><!-- Authentication -->

  <section id="fblangref25-security-privs">
    <title>SQL Privileges</title>
    <para>The second level of Firebird's security model is SQL privileges.  Whilst a successful login&mdash;the
    first level&mdash;authorises a user's access to the server and to all databases under that server, it does
    not imply that he has access to any objects in any databases. When an object is created, only the user that
    created it (its owner) and administrators have access to it. The user needs <firstterm>privileges</firstterm>
    on each object he needs to access.  As a general rule, privileges must be <firstterm>granted</firstterm>
    explicitly to a user by the object owner or an <link linkend="fblangref25-security-administrators">administrator</link>
    of the database.</para>

    <para>A privilege comprises a DML access type (<database>SELECT</database>, <database>INSERT</database>,
    <database>UPDATE</database>, <database>DELETE</database>, <database>EXECUTE</database>
    and <database>REFERENCES</database>), the name of a database object (table, view, procedure, role)
    and the name of the user (user, procedure, trigger, role) to which it is granted. Various means are
    available to grant multiple types of access on an object to multiple users in a single <database>GRANT</database>
    statement. Privileges may be withdrawn from a user with <database>REVOKE</database> statements.</para>

    <para>Privileges are are stored in the database to which they apply and are not applicable to any
    other database.</para>

    <section id="fblangref25-security-privs-owner">
      <title>The Object Owner</title>
      <para>The user who creates a database object becomes its owner. Only the owner of an object and users
      with administrator privileges in the database can alter or drop the database object. The owner of the
      database, i.e., the user who created it, does not have owner privileges to objects that were created
      by another user.
        <important>
          <title>Some Ownership Drawbacks</title>
          <para>Any authenticated user can access any database and create any valid database object. Up to and
          including this release, the issue is not controlled.</para>
          <para>Because not all database objects are associated with an owner&mdash;domains, external
          functions (UDFs), BLOB filters, generators (sequences) and exceptions&mdash;ownerless objects must
          be regarded as vulnerable on a server that is not adequately protected.</para>
        </important>
      </para>
      <para>SYSDBA or the object owner can grant privileges to and revoke them from other users, including
      privileges to grant privileges to other users. The process of granting and revoking SQL privileges is
      implemented with two statements of the general form:
        <literallayout class="monospaced">
GRANT &lt;privilege&gt; ON &lt;OBJECT-TYPE&gt; &lt;object-name&gt; 
  TO { &lt;user-name&gt; | ROLE &lt;role-name&gt; }

REVOKE &lt;privilege&gt; ON &lt;OBJECT-TYPE&gt; &lt;object-name&gt; 
  FROM { &lt;user-name&gt; | ROLE &lt;role-name&gt; }
        </literallayout>
      The &lt;OBJECT-TYPE&gt; is not required for every type of privilege.  For some types of privilege, extra
      parameters are available, either as options or as requirements.
      </para>
    </section><!-- Object owner -->

    <section id="fblangref25-security-privs-granting">
      <title>Statements for Granting Privileges</title>
      <para>A GRANT statement is used for granting privileges&mdash;including roles&mdash;to users and
      other database objects.</para>

      <section id="fblangref25-security-privs-grant">
        <title><database>GRANT</database></title>
        <formalpara><title>Used for</title>
          <para>Granting privileges and assigning roles</para>
        </formalpara>
        <formalpara>
          <title>Available in</title>
          <para>DSQL, ESQL</para>
        </formalpara>
        <formalpara><title>Syntax</title>
          <blockquote><programlisting>
GRANT {
  &lt;privileges&gt; ON [TABLE] {tablename | viewname} 
  | EXECUTE ON PROCEDURE procname
      }
TO &lt;grantee_list&gt;
  [WITH GRANT OPTION]} | [{GRANTED BY | AS} [USER] grantor];

GRANT &lt;role_granted&gt;
TO &lt;role_grantee_list&gt; [WITH ADMIN OPTION]
[{GRANTED BY | AS} [USER] grantor]

&lt;privileges&gt; ::= ALL [PRIVILEGES] | &lt;privilege_list&gt;

&lt;privilege_list&gt; ::= {&lt;privilege&gt; [, &lt;privilege&gt; [, &hellip; ] ] }

&lt;privilege&gt; ::=
  SELECT |
  DELETE |
  INSERT |
  UPDATE [(col [, col [, &hellip;] ] ) ] |
  REFERENCES (col [, &hellip;])

&lt;grantee_list&gt; ::= {&lt;grantee&gt; [, &lt;grantee&gt; [, &hellip;] ]}

&lt;grantee&gt;  ::=
  [USER] username | [ROLE] rolename |  GROUP Unix_group
  | PROCEDURE procname | TRIGGER trigname | VIEW viewname | PUBLIC

&lt;role_granted&gt; ::= rolename [, rolename &hellip;]

&lt;role_grantee_list&gt; ::= [USER] &lt;role_grantee&gt; [,[USER] &lt;role_grantee&gt; [, &hellip;]]

&lt;role_grantee&gt; ::= {username | PUBLIC }
          </programlisting></blockquote>
        </formalpara>

        <table id="fblangref25-security-tbl-grant">
        <?dbfo keep-together='auto'?>
          <title>GRANT Statement Parameters</title>
          <tgroup cols="2">
            <colspec colname="colParam" colwidth="*"></colspec>
            <colspec colname="colDes" colwidth="3*"></colspec>
            <thead>
              <row valign="middle">
                <entry align="center">Parameter</entry>
                <entry align="center">Description</entry>
              </row>
            </thead>
            <tbody>
              <row valign="middle">
                <entry align="center">tablename</entry>
                <entry align="left">The name of the table the privilege applies to</entry>
              </row>
              <row valign="middle">
                <entry align="center">viewname</entry>
                <entry align="left">The name of the view the privilege applies to</entry>
              </row>
              <row valign="middle">
                <entry align="center">procname</entry>
                <entry align="left">The name of the stored procedure the EXECUTE privilege
                applies to;  or the name of the procedure to be granted the privilege[s]</entry>
              </row>
              <row valign="middle">
                <entry align="center">col</entry>
                <entry align="left">The table column the privilege is to apply to</entry>
              </row>
              <row valign="middle">
                <entry align="center">Unix_group</entry>
                <entry align="left">The name of a user group in a POSIX operating system</entry>
              </row>
              <row valign="middle">
                <entry align="center">username</entry>
                <entry align="left">The user name to which the privileges are granted to or 
                to which the role is assigned</entry>
              </row>
              <row valign="middle">
                <entry align="center">rolename</entry>
                <entry align="left">Role name</entry>
              </row>
              <row valign="middle">
                <entry align="center">trigname</entry>
                <entry align="left">Trigger name</entry>
              </row>
              <row valign="middle">
                <entry align="center">grantor</entry>
                <entry align="left">The user granting the privilege[s]</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>A GRANT statement grants one or more privileges on database objects to users, roles,
        stored procedures, triggers or views.</para>
        <para>A regular, authenticated user has no privileges on any database object until they are explicitly
        granted, either to that individual user or to all users bundled as the user PUBLIC. When an object is 
        created, only the user who has created it (the owner) and 
        <link linkend="fblangref25-security-administrators">administrators</link> have privileges for it and 
        can grant privileges to other users, roles or objects.</para>
        <para>Different sets of privileges apply to different types of metadata objects. The different
        types of privileges will be described separately later.</para>

        <section id="fblangref25-security-privs-grant-to">
          <title>The <database>TO</database> Clause</title>
          <para>The <database>TO</database> clause is used for listing the users, roles and database
          objects (procedures, triggers and views) that are to be granted the privileges enumerated in
          &lt;privileges&gt;. The clause is mandatory.</para>

          <para>The optional <database>USER</database> and <database>ROLE</database> keywords in the
          <database>TO</database> clause allow you to specify exactly who or what is granted the
          privilege. If a <database>USER</database> or <database>ROLE</database> keyword is not specified,
          the server checks for a role with this name and, if there is none, the privileges are
          granted to the user without further checking.</para>
          
          <section id="fblangref25-security-privs-role">
            <title>Packaging Privileges in a <database>ROLE</database> Object</title>
            <para>A role is a <quote>container</quote> object that can be used to package a collection of
            privileges.  Use of the role is then granted to each user that requires those privileges.  A role
            can also be granted to a list of users.</para>
            <para>The role must exist before privileges can be granted to it.  See 
            <link linkend="fblangref25-ddl-createrole"><database>CREATE ROLE</database></link> in the DDL
            chapter for the syntax and rules.  The role is maintained by granting privileges to it and, 
            when required, revoking privileges from it.  If a role is dropped (see 
            <link linkend="fblangref25-ddl-droprole"><database>DROP ROLE</database></link>), all users
            lose the privileges acquired through the role.  Any privileges that were granted additionally
            to an affected user by way of a different grant statement are retained.</para>
            <para>A user that is granted a role must supply that role with his login credentials in order to
            exercise the associated privileges.  Any other privileges granted to the user are not affected
            by logging in with a role.</para>
            <para>More than one role can be granted to the same user but logging in with multiple roles
            simultaneously is not supported.</para>
            <para>A role can be granted only to a user.</para>
          </section> <!-- ROLE packaging -->

          <important>
            <title>Please note:</title>
            <itemizedlist spacing="compact">
              <listitem>When a <database>GRANT</database> statement is executed, the security database 
              is not checked for the existence of the grantee user.  This is not a bug: SQL permissions 
              are concerned with controlling data access for authenticated users, both native and 
              trusted, and trusted operating system users are not stored in the security database.</listitem>
              <listitem>When granting a privilege to a database object, such as a procedure, trigger or
              view, you must specify the object type between the keyword <database>TO</database> and 
              the object name.</listitem>
              <listitem>Although the <database>USER</database> and <database>ROLE</database> keywords
              are optional, it is advisable to use them, in order to avoid ambiguity.</listitem>
            </itemizedlist>
          </important>
        </section><!-- TO clause -->

        <section id="fblangref25-security-privs-grant-public">
          <title>The User <database>PUBLIC</database></title>
          <para>Firebird has a predefined user named <database>PUBLIC</database>, that represents 
          all users. Privileges for operations on a particular object that are granted to the 
          user <database>PUBLIC</database> can be exercised by any user that has been authenticated 
          at login.
            <important>
              <para>If privileges are granted to the user <database>PUBLIC</database>, they should be
              revoked from the user <database>PUBLIC</database> as well.</para>
            </important>
          </para>
        </section><!-- user public -->

        <section id="fblangref25-security-privs-withgrantoption">
          <title>The <database>WITH GRANT OPTION</database> Clause</title>
          <para>The optional <database>WITH GRANT OPTION</database> clause allows the users 
          specified in the user list to grant the privileges specified in the privilege list 
          to other users.</para>
          <caution>
            <para>It is possible to assign this option to the user <database>PUBLIC</database>. 
            Do not do it!</para>
          </caution>
        </section>

        <section id="fblangref25-security-privs-grant-grantedby">
          <title>The <database>GRANTED BY</database> Clause</title>
          <para>By default, when privileges are granted in a database, the current user is
          recorded as the grantor. The <database>GRANTED BY</database> clause enables the
          current user to grant those privileges as another user.</para>
          <para>If the REVOKE statement is used, it will fail if the current user is not
          the user that was named in the <database>GRANTED BY</database> clause.</para>

          <section id="fblangref25-security-privs-grant-grant-as">
            <title>Alternative Syntax Using <database>AS &lt;username&gt;</database></title>
            <para>The non-standard <database>AS</database> clause is supported as a synonym
            of the <database>GRANTED BY</database> clause to simplify migration from other
            database systems.</para>
          </section>

          <para>The clauses <database>GRANTED BY</database> and <database>AS</database> can be 
          used only by the database owner and 
          <link linkend="fblangref25-security-administrators">administrators</link>.  The object 
          owner cannot use it unless he also has administrator privileges.</para>
        </section><!-- granted by -->

        <section id="fblangref25-security-privs-table">
          <title>Privileges on Tables and Views</title>
          <para>In theory, one <database>GRANT</database> statement grants one privilege to one
          user or object.  In practice, the syntax allows multiple privileges to be granted to
          multiple users in one <database>GRANT</database> statement.</para>
          <formalpara>
            <title>Syntax extract</title>
            <blockquote><programlisting>
...
&lt;privileges&gt; ::= ALL [PRIVILEGES] | &lt;privilege_list&gt;

&lt;privilege_list&gt; ::= {&lt;privilege&gt; [, &lt;privilege&gt; [, &hellip; ] ] }

&lt;privilege&gt; ::= {
  SELECT |
  DELETE |
  INSERT |
  UPDATE [(col [,col [, &hellip;])] ] ) ] |
  REFERENCES (col [, col [, &hellip;] ] )
                      }
            </programlisting></blockquote>
          </formalpara>
          <table id="fblangref25-security-tbl-tableprivs">
          <?dbfo keep-together='auto'?>
            <title>List of Privileges on Tables</title>
            <tgroup cols="2">
              <colspec colname="colParam" colwidth="*"></colspec>
              <colspec colname="colDes" colwidth="3*"></colspec>
              <thead>
                <row valign="middle">
                  <entry align="center">Privilege</entry>
                  <entry align="center">Description</entry>
                </row>
              </thead>
              <tbody>
                <row valign="middle">
                  <entry align="center">SELECT</entry>
                  <entry align="left">Permits the user or object to SELECT data from the table or view</entry>
                </row>
                <row valign="middle">
                  <entry align="center">INSERT</entry>
                  <entry align="left">Permits the user or object to INSERT rows into the table or view</entry>
                </row>
                <row valign="middle">
                  <entry align="center">UPDATE</entry>
                  <entry align="left">Permits the user or object to UPDATE rows in the table or view, optionally
                  restricted to specific columns</entry>
                </row>
                <row valign="middle">
                  <entry align="center"><replaceable>col</replaceable></entry>
                  <entry align="left">(Optional) name of a column to which the user's UPDATE privilege is restricted</entry>
                </row>

                <row valign="middle">
                  <entry align="center">DELETE</entry>
                  <entry align="left">Permits the user or object to DELETE rows from the table or view</entry>
                </row>
                <row valign="middle">
                  <entry align="center">REFERENCES</entry>
                  <entry align="left">Permits the user or object to reference the specified column[s] of the
                  table via a foreign key. If the primary or unique key referenced by the foreign key of the
                  other table is composite then all columns of the key must be specified.</entry>
                </row>
                <row valign="middle">
                  <entry align="center"><replaceable>col</replaceable></entry>
                  <entry align="left">(Mandatory) name of one column in the referenced foreign key</entry>
                </row>

                <row valign="middle">
                  <entry align="center">ALL</entry>
                  <entry align="left">Combines SELECT, INSERT, UPDATE, DELETE and REFERENCES privileges
                  in a single package</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
          <formalpara>
            <title>Examples of GRANT &lt;privilege&gt; on Tables</title>
            <orderedlist>
              <listitem>SELECT and INSERT privileges to the user ALEX:
                <programlisting>
GRANT SELECT, INSERT ON TABLE SALES
  TO USER ALEX;
                </programlisting>
              </listitem>
              <listitem>The SELECT privilege to the MANAGER, ENGINEER roles and to the user IVAN:
                <programlisting>
GRANT SELECT ON TABLE CUSTOMER
  TO ROLE MANAGER, ROLE ENGINEER, USER IVAN;
                </programlisting>
              </listitem>
              <listitem>All privileges to the ADMINISTRATOR role, together
              with the authority to grant the same privileges to others:
                <programlisting>
GRANT ALL ON TABLE CUSTOMER
  TO ROLE ADMINISTRATOR
  WITH GRANT OPTION;
                </programlisting>
              </listitem>
              <listitem>The SELECT and REFERENCEs privileges on the NAME column
              to all users and objects:
                <programlisting>
GRANT SELECT, REFERENCES (NAME) ON TABLE COUNTRY
TO PUBLIC;
                </programlisting>
              </listitem>
              <listitem>The SELECT privilege being granted to the user IVAN
              by the user ALEX:
                <programlisting>
GRANT SELECT ON TABLE EMPLOYEE
  TO USER IVAN
  GRANTED BY ALEX;
                </programlisting>
              </listitem>
              <listitem>Granting the UPDATE privilege on the FIRST_NAME, LAST_NAME
              columns:
                <programlisting>
GRANT UPDATE (FIRST_NAME, LAST_NAME) ON TABLE EMPLOYEE
  TO USER IVAN;
                </programlisting>
              </listitem>
              <listitem>Granting the INSERT privilege to the
              stored procedure ADD_EMP_PROJ:
                <programlisting>
GRANT INSERT ON EMPLOYEE_PROJECT
  TO PROCEDURE ADD_EMP_PROJ;
                </programlisting>
              </listitem>
            </orderedlist>
          </formalpara>
        </section> <!-- Table privileges -->

        <section id="fblangref25-security-privs-execute">
          <title>The <database>EXECUTE</database> Privilege</title>
          <para>The EXECUTE privilege applies to stored procedures.  It allows
          the grantee to execute the stored procedure and, if applicable, to retrieve
          its output.  In the case of selectable stored procedures, it acts
          somewhat like a <database>SELECT</database> privilege, insofar as this
          style of stored procedure is executed in response to a <database>SELECT</database>
          statement.</para>
          <formalpara>
            <title>Example</title>
            <para>&nbsp;Granting the EXECUTE privilege on a stored procedure to a role:
              <blockquote><programlisting>
GRANT EXECUTE ON PROCEDURE ADD_EMP_PROJ
  TO ROLE MANAGER;
              </programlisting></blockquote>
            </para>
          </formalpara>
        </section> <!-- Execute privileges -->
      </section><!-- GRANT -->
    </section> <!-- statements granting privileges -->

    <section id="fblangref25-security-privs-assignroles">
      <title>Assigning Roles</title>
      <para>Assigning a role is similar to granting a privilege.  One or more roles can be assigned
      to one or more users, including the
      <link linkend="fblangref25-security-privs-grant-public">user <database>PUBLIC</database></link>,
      using one <database>GRANT</database> statement.</para>
      <section id="fblangref25-security-privs-withadminoption">
        <title>The <database>WITH ADMIN OPTION</database> Clause</title>
        <para>The optional <database>WITH ADMIN OPTION</database> clause allows the users
        specified in the user list to grant the role[s] specified to other users.</para>
        <caution>
          <para>It is possible to assign this option to <database>PUBLIC</database>.
          Do not do it!</para>
        </caution>
      </section>

      <formalpara>
        <title>Examples of Role Assignment</title>
        <orderedlist>
          <listitem>Assigning the DIRECTOR and MANAGER roles to the user IVAN:
            <programlisting>
GRANT DIRECTOR, MANAGER TO USER IVAN;
            </programlisting>
          </listitem>
          <listitem>Assigning the ADMIN role to the user ALEX with the authority to assign
          this role to other users:
            <programlisting>
GRANT MANAGER TO USER ALEX WITH ADMIN OPTION;
            </programlisting>
          </listitem>
        </orderedlist>
      </formalpara>
      <formalpara>
        <title>See also</title>
        <para>&nbsp;<link linkend="fblangref25-security-privs-revoke"><database>REVOKE</database></link>
        </para>
      </formalpara>
    </section> <!-- assigning roles -->

    <section id="fblangref25-security-privs-revoking">
      <title>Statements for Revoking Privileges</title>
      <para>A REVOKE statement is used for revoking privileges&mdash;including roles&mdash;from users and
      other database objects.</para>

      <section id="fblangref25-security-privs-revoke">
        <title><database>REVOKE</database></title>
        <formalpara>
          <title>Used for</title>
          <para>&nbsp;Revoking privileges or role assignments</para>
        </formalpara>
        <formalpara>
          <title>Available in</title>
          <para>DSQL, ESQL</para>
        </formalpara>
        <formalpara>
          <title>Syntax</title>
          <blockquote><programlisting>
REVOKE [GRANT OPTION FOR] {
  &lt;privileges&gt; ON [TABLE] {tablename | viewname} |
  EXECUTE ON PROCEDURE procname }
FROM &lt;grantee_list&gt;
[{GRANTED BY | AS} [USER] grantor];

REVOKE [ADMIN OPTION FOR] &lt;role_granted&gt;
FROM {PUBLIC | &lt;role_grantee_list&gt;}
[{GRANTED BY | AS} [USER] grantor];

REVOKE ALL ON ALL FROM &lt;user_list&gt;;

&lt;privileges&gt; ::= ALL [PRIVILEGES] | &lt;privilege_list&gt;

&lt;privilege_list&gt; ::= {&lt;privilege&gt; [, &lt;privilege&gt; [, &hellip; ] ] }

&lt;privilege&gt; ::=
  SELECT |
  DELETE |
  INSERT |
  UPDATE [(col [, col [, col [,&hellip;] ] ] ) ] |
  REFERENCES (col [, col [, &hellip;] ] )

&lt;grantee_list&gt; ::= {&lt;grantee&gt; [, &lt;grantee&gt; [, &hellip;] ]}

&lt;grantee&gt;  ::=
  [USER] username | [ROLE] rolename |  GROUP Unix_group
  | PROCEDURE procname | TRIGGER trigname | VIEW viewname | PUBLIC

&lt;role_granted&gt; ::= rolename [, rolename &hellip;]

&lt;role_grantee_list&gt; ::= [USER] &lt;role_grantee&gt; [,[USER] &lt;role_grantee&gt; [, &hellip;]]

&lt;role_grantee&gt; ::= {username | PUBLIC }
          </programlisting></blockquote>
        </formalpara>

        <table id="fblangref25-security-tbl-revoke">
        <?dbfo keep-together='auto'?>
          <title>REVOKE Statement Parameters</title>
          <tgroup cols="2">
            <colspec colname="colParam" colwidth="*"></colspec>
            <colspec colname="colDes" colwidth="3*"></colspec>
            <thead>
              <row valign="middle">
                <entry align="center">Parameter</entry>
                <entry align="center">Description</entry>
              </row>
            </thead>
            <tbody>
              <row valign="middle">
                <entry align="center">tablename</entry>
                <entry align="left">The name of the table the privilege is to be revoked from</entry>
              </row>
              <row valign="middle">
                <entry align="center">viewname</entry>
                <entry align="left">The name of the view the privilege is to be revoked from</entry>
              </row>
              <row valign="middle">
                <entry align="center">procname</entry>
                <entry align="left">The name of the stored procedure the EXECUTE privilege
                 is to be revoked from;  or the name of the procedure that is to have the privilege[s]
                 revoked</entry>
              </row>
              <row valign="middle">
                <entry align="center">trigname</entry>
                <entry align="left">Trigger name</entry>
              </row>
              <row valign="middle">
                <entry align="center">col</entry>
                <entry align="left">The table column the privilege is to be revoked from</entry>
              </row>
              <row valign="middle">
                <entry align="center">username</entry>
                <entry align="left">The user name from which the privileges are to be revoked from or the role
                is to be removed from</entry>
              </row>
              <row valign="middle">
                <entry align="center">rolename</entry>
                <entry align="left">Role name</entry>
              </row>
              <row valign="middle">
                <entry align="center">Unix_group</entry>
                <entry align="left">The name of a user group in a POSIX operating system</entry>
              </row>
              <row valign="middle">
                <entry align="center">grantor</entry>
                <entry align="left">The grantor user on whose behalf the the privilege[s] are
                being revoked</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>The REVOKE statement is used for revoking privileges from users, roles, stored procedures,
        triggers and views that were granted using the GRANT statement.
        See <link linkend="fblangref25-security-privs-grant"><database>GRANT</database></link> for
        detailed descriptions of the various types of privileges.</para>
        <para>Only the user who granted the privilege can revoke it.</para>

        <section id="fblangref25-security-privs-revoke-from">
          <title>The <database>FROM</database> Clause</title>
          <para>The <database>FROM</database> clause is used to specify the list of users, roles and
          database objects (procedures, triggers and views) that will have the enumerated privileges
          revoked. The optional <database>USER</database> and <database>ROLE</database> keywords in the
          <database>FROM</database> clause allow you to specify exactly which type is to have the
          privilege revoked. If a <database>USER</database> or <database>ROLE</database> keyword is not specified,
          the server checks for a role with this name and, if there is none, the privileges are
          revoked from the user without further checking.
            <tip>
              <title>Tips</title>
              <itemizedlist spacing="compact">
                <listitem>Although the <database>USER</database> and <database>ROLE</database> keywords
                are optional, it is advisable to use them in order to avoid ambiguity.</listitem>
                <listitem>The <database>GRANT</database> statement does not check for the existence 
                of the user from which the privileges are being revoked.</listitem>
                <listitem>When revoking a privilege from a database object, you must specify its object type
                </listitem>
              </itemizedlist>
            </tip>
          </para>

          <important>
            <title>Revoking Privileges from user <database>PUBLIC</database></title>
            <para>Privileges that were granted to the special user named <database>PUBLIC</database> must
            be revoked from the user <database>PUBLIC</database>. User <database>PUBLIC</database> provides
            a way to grant privileges to all users at once but it is not <quote>a group of
            users</quote>.</para>
          </important>

        </section> <!-- FROM Clause -->

        <section id="fblangref25-security-privs-revoke-grantoption">
          <title>Revoking the <database>GRANT OPTION</database></title>
          <para>The optional <database>GRANT OPTION FOR</database> clause revokes the user's privilege to
          grant privileges on the table, view, trigger or stored procedure to other users or to roles. It 
          does not revoke the privilege with which the grant option is associated.
          </para>
        </section> <!-- grant option -->

        <section id="fblangref25-security-privs-revoke-role">
          <title>Removing the Privilege to One or More Roles</title>
          <para>One usage of the <database>REVOKE</database> statement is to remove roles that were assigned
          to a user, or a group of users, by a <database>GRANT</database> statement. In the case of multiple
          roles and/or multiple grantees, the <database>REVOKE</database> verb is followed by the list of
          roles that will be removed from the list of users specified after the <database>FROM</database>
          clause.</para>
          <para>The optional <database>ADMIN OPTION FOR</database> clause provides the means to revoke the
          grantee's <quote>administrator</quote> privilege, the ability to assign the same role
          to other users, without revoking the grantee's privilege to the role.</para>

          <para>Multiple roles and grantees can be processed in a single statement.</para>
        </section>

        <section id="fblangref25-security-privs-revoke-exgrantby">
          <title>Revoking Privileges That Were <database>GRANTED BY</database></title>
          <para>A privilege that has been granted using the <database>GRANTED BY</database> clause
          is internally attributed explicitly to the grantor designated by that original
          <database>GRANT</database> statement.  To revoke a privilege that was obtained by
          this method, the current user must be logged in either with full administrative 
          privileges or as the user designated as &lt;grantor&gt; by that <database>GRANTED BY</database>
          clause.
            <note>
              <para>The same rule applies if the syntax used in the original <database>GRANT</database>
              statement used the synonymous <database>AS</database> form to introduce the clause, instead
              of the standard <database>GRANTED BY</database> form.</para>
            </note>
          </para>
        </section>

        <section id="fblangref25-security-privs-revoke-allonall">
          <title>Revoking <database>ALL ON ALL</database></title>
          <para>If the current user is logged in with full
          <link linkend="fblangref25-security-administrators">administrator</link> privileges
          in the database, the statement
            <blockquote><literallayout class="monospaced">
REVOKE ALL ON ALL
            </literallayout></blockquote>
          can be used to revoke all privileges (including roles) on all objects from one or more
          users and/or roles. All privileges for the user will be removed, regardless of
          who granted them.  It is a quick way to <quote>clear</quote> privileges when access to
          the database must be blocked for a particular user.</para>
          <para>If the current user is not logged in as an administrator, the only
          privileges revoked will be those that were granted originally by that user.</para>

          <para>Although <database>REVOKE ALL ON ALL</database> removes privileges on stored
          procedures, triggers and views, it does not remove the parameter storing the
          name of the user that granted those privileges.</para>
          <note>
            <para>The <database>GRANTED BY</database> clause is not supported.</para>
          </note>
        </section> <!-- revoke all on all -->

        <bridgehead renderas="sect4">Examples using REVOKE</bridgehead>
        <orderedlist>
          <listitem>Revoking the privileges for reading and inserting into the SALES
            <programlisting>
REVOKE SELECT, INSERT ON TABLE SALES FROM USER ALEX;
            </programlisting>
          </listitem>
          <listitem>Revoking the privilege for reading the CUSTOMER table from the MANAGER
          and ENGINEER roles and from the user IVAN:
            <programlisting>
REVOKE SELECT ON TABLE CUSTOMER
FROM ROLE MANAGER, ROLE ENGINEER, USER IVAN;
            </programlisting>
          </listitem>
          <listitem>Revoking from the ADMINISTRATOR role the authority to grant any privileges
          on the CUSTOMER table to other users or roles:
            <programlisting>
REVOKE GRANT OPTION FOR ALL ON TABLE CUSTOMER
FROM ROLE ADMINISTRATOR;
            </programlisting>
          </listitem>
          <listitem>Revoking the privilege for reading the COUNTRY table and the
          authority to reference the NAME column of the COUNTRY table from any user,
          via the special user PUBLIC:
            <programlisting>
REVOKE SELECT, REFERENCES (NAME) ON TABLE COUNTRY
  FROM PUBLIC;
            </programlisting>
          </listitem>
          <listitem>Revoking the privilege for reading the EMPLOYEE table from the user IVAN,
          that was granted by the user ALEX:
              <programlisting>
REVOKE SELECT ON TABLE EMPLOYEE
  FROM USER IVAN GRANTED BY ALEX;
            </programlisting>
          </listitem>
          <listitem>Revoking the privilege for updating the FIRST_NAME and LAST_NAME columns
          of the EMPLOYEE table from the user IVAN:
            <programlisting>
REVOKE UPDATE (FIRST_NAME, LAST_NAME) ON TABLE EMPLOYEE
  FROM USER IVAN;
            </programlisting>
          </listitem>
          <listitem>Revoking the privilege for inserting records into the
          EMPLOYEE_PROJECT table from the ADD_EMP_PROJ procedure:
            <programlisting>
REVOKE INSERT ON EMPLOYEE_PROJECT
  FROM PROCEDURE ADD_EMP_PROJ;
            </programlisting>
          </listitem>
          <listitem>Revoking the privilege for executing the procedure ADD_EMP_PROJ
          from the MANAGER role:
            <programlisting>
REVOKE EXECUTE ON PROCEDURE ADD_EMP_PROJ
  FROM ROLE MANAGER;
            </programlisting>
          </listitem>
          <listitem>Revoking the DIRECTOR and MANAGER roles from the user IVAN:
            <programlisting>
REVOKE DIRECTOR, MANAGER FROM USER IVAN;
            </programlisting>
          </listitem>
          <listitem>Revoke from the user ALEX the authority to assign the MANAGER
          role to other users:
              <programlisting>
REVOKE ADMIN OPTION FOR MANAGER FROM USER IVAN;
            </programlisting>
          </listitem>
          <listitem>Revoking all privileges (including roles) on all objects from the user IVAN:
            <programlisting>
REVOKE ALL ON ALL FROM IVAN;
            </programlisting>
              After this statement is executed, the user IVAN will have no privileges whatsoever.
          </listitem>
        </orderedlist>
        <formalpara>
          <title>See also</title>
          <para><link linkend="fblangref25-security-privs-grant"><database>GRANT</database></link>
          </para>
        </formalpara>
      </section> <!-- revoke statement -->
    </section> <!-- statements revoking privileges -->


  </section> <!-- privs -->






</chapter>