<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE appendix PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../../../../tools/docbook-dtd/docbookx.dtd">
<appendix id="fblangref25-appx01-supplement">
  <title>Supplementary Information</title>
  <para>In this Appendix are topics that developers may wish to refer to, to
  enhance understanding of features or changes.</para>

  <section  id="fblangref25-appx01-supp-rdb_validblr">
    <title>The <database>RDB$VALID_BLR</database> Field</title>
    <para>The field <database>RDB$VALID_BLR</database> was added to the system tables
    <database>RDB$PROCEDURES</database> and <database>RDB$TRIGGERS</database> in Firebird 2.1.
    Its purpose is to signal possible invalidation of a PSQL module after alteration of a domain 
    or table column on which the module depends.<database>RDB$VALID_BLR</database>
    is set to 0 for any procedure or trigger whose code is made invalid by such 
    a change.</para>
    <section>
      <title>How Invalidation Works</title>
      <para>In triggers and procedures, dependencies arise on the definitions of table 
      columns accessed and also on any parameter or variable that has been defined in the 
      module using the <database>TYPE OF</database> clause.</para>
      <para>After the engine has altered any domain, including the implicit domains created
      internally behind column definitions and output parameters, the engine internally 
      recompiles all of its dependencies.  
      <note>
        <para>In V.2.x these comprise procedures and triggers but not blocks coded in DML 
        statements for run-time execution with <database>EXECUTE BLOCK</database>.  Firebird 
        3 will encompass more module types (stored functions, packages).</para>
      </note>
      </para>
      <para>Any module that fails to recompile because of an incompatibility arising from a 
      domain change is marked as invalid (<quote>invalidated</quote> by setting the
      <database>RDB$VALID_BLR</database> in its system record (in
      <database>RDB$PROCEDURES</database> or <database>RDB$TRIGGERS</database>, as appropriate)
      to zero.</para>
      <para>Revalidation (setting <database>RDB$VALID_BLR</database> to 1) occurs when
      <orderedlist spacing="compact">
        <listitem>the domain is altered again and the new definition is compatible
        with the previously invalidated module definition;  OR</listitem>
        <listitem>the previously invalidated module is altered to match the new domain
        definition</listitem>
     </orderedlist>
     </para>
    </section>
    <para>The following query will find the modules that depend on a specific domain and report
    the state of their <database>RDB$VALID_BLR</database> fields:
      <blockquote><programlisting>
SELECT * FROM (
  SELECT
    'Procedure',
    rdb$procedure_name,
    rdb$valid_blr
  FROM rdb$procedures
  UNION ALL
  SELECT
    'Trigger',
    rdb$trigger_name,
    rdb$valid_blr
  FROM rdb$triggers
) (type, name, valid)
WHERE EXISTS
  (SELECT * from rdb$dependencies
   WHERE rdb$dependent_name = name
     AND rdb$depended_on_name = 'MYDOMAIN')

/* Replace MYDOMAIN with the actual domain name.
   Use all-caps if the domain was created
   case-insensitively. Otherwise, use the exact
   capitalisation. */
      </programlisting></blockquote>
      The following query will find the modules that depend on a specific table column and
      report the state of their <database>RDB$VALID_BLR</database> fields:
      <blockquote><programlisting>
SELECT * FROM (
  SELECT
    'Procedure',
    rdb$procedure_name,
    rdb$valid_blr
  FROM rdb$procedures
  UNION ALL
  SELECT
    'Trigger',
    rdb$trigger_name,
    rdb$valid_blr
  FROM rdb$triggers) (type, name, valid)
WHERE EXISTS
  (SELECT *
   FROM rdb$dependencies
   WHERE rdb$dependent_name = name
     AND rdb$depended_on_name = 'MYTABLE'
     AND rdb$field_name = 'MYCOLUMN')
      </programlisting></blockquote>
    </para>

    <important>
      <para>All PSQL invalidations caused by domain/column changes are reflected in the
      <database>RDB$VALID_BLR</database> field.  However, other kinds of changes, such as
      the number of input or output parameters, called routines and so on, do not affect
      the validation field even though they potentially invalidate the module.  A typical
      such scenario might be one of the following:
        <orderedlist>
          <listitem>A procedure (B) is defined, that calls another procedure (A) and reads
          output parameters from it.  In this case, a dependency is registered in
          <database>RDB$DEPENDENCIES</database>.  Subsequently, the called procedure (A) is
          altered to change or remove one or more of those output parameters.  The
          <database>ALTER PROCEDURE A</database> statement will fail with an error when
          commit is attempted.</listitem>
          <listitem>A procedure (B) calls procedure A, supplying values for its input parameters.
          No dependency is registered in <database>RDB$DEPENDENCIES</database>.  Subsequent
          modification of the input parameters in procedure A will be allowed. Failure will
          occur at run-time, when B calls A with the mismatched input parameter set.</listitem>
        </orderedlist>
      </para>
    </important>
    <note>
      <title>Other Notes</title>
      <itemizedlist>
        <listitem>For PSQL modules inherited from earlier Firebird versions (including a number of system
        triggers, even if the database was created under Firebird 2.1 or higher),
       <database>RDB$VALID_BLR</database> is NULL. This does not imply that their BLR is invalid.</listitem>

        <listitem>The <emphasis>isql</emphasis> commands <database>SHOW PROCEDURES</database> and
        <database>SHOW TRIGGERS</database> display an asterisk in the <database>RDB$VALID_BLR</database>
        column for any module for which the value is zero (i.e., invalid). However, <database>SHOW
        PROCEDURE &lt;procname&gt;</database> and <database>SHOW TRIGGER &lt;trigname&gt;</database>,
        which display individual PSQL modules, do not signal invalid BLR at all.</listitem>
      </itemizedlist>
    </note>
  </section> <!-- rdb$valid_blr -->

  <!-- ======================================================================================
                     N O T E   O N   E Q U A L I T Y
       ====================================================================================== -->
  <section id="fblangref25-appx01-note-on-equality">
    <title>A Note on Equality</title>
    <important>
      <para>This note about equality and inequality operators applies
      everywhere in Firebird's SQL language.</para>
    </important>
    <para>The <quote><literal>=</literal></quote> operator, which is
    explicitly used in many conditions, only matches values to values.
    According to the SQL standard, <constant>NULL</constant> is not a
    value and hence two <constant>NULLs</constant> are neither equal nor
    unequal to one another. If you need <constant>NULLs</constant> to
    match each other in a condition, use the <database>IS NOT DISTINCT
    FROM</database> operator. This operator returns true if the operands
    have the same value <emphasis>or</emphasis> if they are both
    <database>NULL</database>.</para>

    <blockquote>
      <programlisting>select *
  from A join B
  on A.id is not distinct from B.code</programlisting>
        </blockquote>

        <para>Likewise, in cases where you want to test against <constant>NULL</constant> for
        a condition of <emphasis>inequality</emphasis>equality, use <database>IS DISTINCT
        FROM</database>, not <quote><literal>&lt;&gt;</literal></quote>. If
        you want <constant>NULL</constant> to be considered different from any
        value and two <constant>NULLs</constant> to be considered equal:</para>
    <blockquote>
      <programlisting>select *
  from A join B
  on A.id is distinct from B.code</programlisting>
    </blockquote>
  </section>

</appendix>
