<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../../../../tools/docbook-dtd/docbookx.dtd">
<chapter id="fblangref25-structure">
  <title>SQL Language Structure</title>
  <para>This reference describes the SQL language supported by Firebird.</para>
  
  <section id="fblangref25-background">
    <title>Background to Firebird's SQL Language</title>
    <para>To begin, a few points about some characteristics that are in the
    background to Firebird's language implementation. </para>
    <section id="fblangref25-structure-flavours">
      <title>SQL Flavours</title>
      <para>Distinct <emphasis>subsets of SQL</emphasis> apply to different sectors of 
      activity. The SQL subsets in Firebird's language implementation are:</para>
      <para><itemizedlist>
          <listitem>
            <para>Dynamic SQL (DSQL)</para>
          </listitem>
          <listitem>
            <para>Procedural SQL (PSQL)</para>
          </listitem>
          <listitem>
            <para>Embedded SQL (ESQL)</para>
          </listitem>
          <listitem>
            <para>Interactive SQL (ISQL)</para>
          </listitem>
        </itemizedlist></para>
      <para><command>Dynamic SQL</command> is the major part of the language which corresponds to the Part 2
      (SQL/Foundation) part of the SQL specification. DSQL represents statements passed by client
      applications through the public Firebird API and processed by the database engine.</para>

      <para><command>Procedural SQL</command> augments Dynamic SQL to allow compound
      statements containing local variables, assignments, conditions, loops and other procedural
      constructs. PSQL corresponds to the Part 4 (SQL/PSM) part of the SQL specifications.
      Originally, PSQL extensions were available in persistent stored modules (procedures and
      triggers) only, but in more recent releases they were surfaced in Dynamic SQL as well (see
      <link linkend="fblangref25-dml-execblock"><database>EXECUTE BLOCK</database></link>).</para>

      <para><command>Embedded SQL</command> defines the DSQL subset supported by
      Firebird <emphasis>gpre</emphasis>, the application which allows you to embed SQL constructs
      into your host programming language (C, C++, Pascal, Cobol, etc.) and preprocess those embedded 
      constructs into the proper Firebird API calls.</para>
      <note>
        <para>Only a portion of the statements and expressions implemented in DSQL are
        supported in ESQL.</para>
      </note>

      <para><command>Interactive ISQL</command> refers to the language that can be executed
      using Firebird <emphasis>isql</emphasis>, the command-line application for accessing databases
      interactively.  As a regular client application, its native language is DSQL. It also offers a
      few additional commands that are not available outside its specific environment.</para>

      <para>Both DSQL and PSQL subsets are completely presented in this reference. Neither ESQL nor
      ISQL flavours are described here unless mentioned explicitly.</para>
    </section>

    <section id="fblangref25-structure-dialects">
      <title>SQL Dialects</title>
      <para><emphasis>SQL dialect</emphasis> is a term that defines the specific features of the
      SQL language that are available when accessing a database. SQL dialects can be defined at the
      database level and specified at the connection level. Three dialects are available:</para>
      <itemizedlist>
        <listitem>
          <para><emphasis>Dialect 1</emphasis> is intended solely to allow backward comptibility
          with legacy databases from very old InterBase versions, v.5 and below.  Dialect 1 databases
          retain certain language features that differ from Dialect 3, the default for Firebird
          databases.</para>
          <itemizedlist>
            <listitem>
              <para>Date and time information are stored in a DATE data type.  A TIMESTAMP data type
              is also available, that is identical to this DATE implementation.</para>
            </listitem>
            <listitem>
              <para>Double quotes may be used as an alternative to apostrophes for delimiting string
              data. This is contrary to the SQL standard&mdash;double quotes are reserved for a 
              distinct syntactic purpose both in standard SQL and in Dialect 3.  Double-quoting 
              strings is therefore to be avoided strenuously.</para>
            </listitem>
            <listitem>
              <para>The precision for NUMERIC and DECIMAL data types is smaller than in Dialect 3
              and, if the precision of a fixed decimal number is greater than 9, Firebird stores it
              internally as a long floating point value.</para>
            </listitem>
            <listitem>
              <para>The BIGINT (64-bit integer) data type is not supported.</para>
            </listitem>
            <listitem>
              <para>Identifiers are case-insensitive and must always comply with the rules for regular
              identifiers&mdash;see the section
              entitled <link linkend="fblangref25-structure-identifiers">Identifiers</link>, below.</para>
            </listitem>
            <listitem>
              <para>Although generator values are stored as 64-bit integers, a Dialect 1 client request,
              <function>SELECT GEN_ID (MyGen, 1)</function>, for example, will return the generator 
              value truncated to 32 bits.</para>
            </listitem>
          </itemizedlist>
        </listitem>
        <listitem>
          <para><emphasis>Dialect 2</emphasis> is available only on the Firebird client connection
          and cannot be set in the database. It is intended to assist debugging of possible problems
          with legacy data when migrating a database from dialect 1 to 3.</para>
        </listitem>
        <listitem>
          <para>In <emphasis>Dialect 3</emphasis> databases,</para>
          <itemizedlist>
            <listitem>
              <para>numbers (DECIMAL and NUMERIC data types) are stored internally as long
              fixed point values (scaled integers) when the precision is greater than 9.</para>
            </listitem>
            <listitem>
              <para>The TIME data type is available for storing time-of-day data only.</para>
            </listitem>
            <listitem>
              <para>The DATE data type stores only date information.</para>
            </listitem>
            <listitem>
              <para>The  64-bit integer data type BIGINT is available.</para>
            </listitem>
            <listitem>
              <para>Double quotes are reserved for delimiting non-regular identifiers, enabling object
              names that are case-sensitive or that do not meet the requirements for regular identifiers
              in other ways.</para>
            </listitem>
            <listitem>
              <para>All strings must be delimited with single quotes (apostrophes).</para>
            </listitem>
            <listitem>
              <para>Generator values are stored as 64-bit integers.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
      <important>
        <para>Use of Dialect 3 is strongly recommended for newly developed databases and applications.
        Both database and connection dialects should match, except under migration conditions
        with Dialect 2.</para>
        <para>This reference describes the semantics of SQL Dialect 3 unless specified otherwise.</para>
      </important>
    </section>

    <section id="fblangref25-structure-errors">
      <title>Error Conditions</title>
      <para>Processing of every SQL statement either completes successfully or fails due to a
      specific error condition.</para>
    </section>
  </section> <!-- Background -->

  <section id="fblangref25-structure-basics">
    <title>Basic Elements: Statements, Clauses, Keywords</title>
    <para>The primary construct in SQL is the <emphasis>statement</emphasis>. A statement
    defines what the database management system should do with a particular data or metadata
    object. More complex statements contain simpler constructs&mdash;<emphasis>clauses</emphasis>
    and <emphasis>options</emphasis>.</para>
    <formalpara>
      <title>Clauses</title>
      <para>A clause defines a certain type of directive in a statement. For instance, the
      <database>WHERE</database> clause in a <database>SELECT</database> statement and in some
      other data manipulation statements (<database>UPDATE, DELETE</database>) specifies
      criteria for searching one or more tables for the rows that are to be selected, updated
      or deleted. The <database>ORDER BY</database> clause specifies how the output data
      &mdash;result set&mdash; should be sorted.</para>
    </formalpara>
    <formalpara>
      <title>Options</title>
      <para>Options, being the simplest constructs, are specified in association with specific
      keywords to provide qualification for clause elements.  Where alternative options are
      available, it is usual for one of them to be the default, used if nothing is specified for
      that option.  For instance, the <database>SELECT</database> statement will return all of the rows
      that match the search criteria unless the <database>DISTINCT</database> option restricts
      the output to non-duplicated rows.</para>
    </formalpara>
    <formalpara>
      <title>Keywords</title>
      <para>All words that are included in the SQL lexicon are keywords.  Some keywords are
      <emphasis>reserved</emphasis>, meaning their usage as identifiers for database objects,
      parameter names or variables is prohibited in some or all contexts.  Non-reserved keywords
      can be used as identifiers, although it is not recommended.  From time to time, non-reserved
      keywords may become reserved when some new language feature is introduced.</para>
    </formalpara>
    <para>For instance, the following statement will be executed without errors because, although 
    <database>ABS</database> is a keyword, it is not a reserved word.<blockquote>
    <programlisting>CREATE TABLE T (ABS INT NOT NULL);</programlisting>
    <para>On the contrary, the following statement will return an error because <database>ADD</database> 
    is both a keyword and a reserved word.</para>
    <programlisting>CREATE TABLE T (ADD INT NOT NULL);</programlisting>
    </blockquote></para>
    <para>Refer to the list of reserved words and keywords in the chapter 
    <link linkend="fblangref25-appx03-reskeywords">Reserved Words and Keywords</link>.</para>
  </section>
  
  <section id="fblangref25-structure-identifiers">
    <title>Identifiers</title>
    <para>All database objects have names, often called <emphasis>identifiers</emphasis>. Two types 
    of names are valid as identifiers: <emphasis>regular</emphasis> names, similar to variable names 
    in regular programming languages, and <emphasis>delimited</emphasis> names that are specific to
    SQL. To be valid, each type of identifier must conform to a set of rules, as follows:</para>
    <formalpara>
      <title>Rules for Regular Object Identifiers</title>
      <itemizedlist>
        <listitem>Length cannot exceed 31 characters</listitem>
        <listitem>
          <para>The name must start with an unaccented, 7-bit ASCII alphabetic character. It may be 
          followed by other 7-bit ASCII letters, digits, underscores or dollar signs.  No other 
          characters, including spaces, are valid. The name is case-insensitive, meaning it can 
          be declared and used in either upper or lower case. Thus, from the system's point of view, 
          the following names are the same:</para>
          <literallayout class="monospaced">
    fullname
    FULLNAME
    FuLlNaMe
    FullName
          </literallayout>
        </listitem>
      </itemizedlist>
      <para>Regular name syntax</para>
      <literallayout class="monospaced">
&lt;name> ::=
  &lt;letter&gt; | &lt;name&gt;&lt;letter&gt; | &lt;name&gt;&lt;digit&gt; | &lt;name&gt;_ | &lt;name&gt;$

  &lt;letter&gt; ::= &lt;upper letter&gt; | &lt;lower letter&gt;

  &lt;upper letter&gt; ::= A | B | C | D | E | F | G | H | I | J | K | L | M |
                           N | O | P | Q | R | S | T | U | V | W | X | Y | Z

  &lt;lower letter&gt; ::= a | b | c | d | e | f | g | h | i | j | k | l | m |
                           n | o | p | q | r | s | t | u | v | w | x | y | z

  &lt;digit&gt; ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
      </literallayout>
    </formalpara>

    <formalpara>
      <title>Rules for Delimited Object Identifiers</title>
      <itemizedlist>
        <listitem>Length cannot exceed 31 characters</listitem>
        <listitem>The entire string must be enclosed in double-quotes,
        e.g. <database>&quot;anIdentifier&quot;</database></listitem>
        <listitem>It may contain characters from any Latin character set, including a
        accented characters, spaces and special characters</listitem>
        <listitem>An identifier can be a reserved word</listitem>
        <listitem>Delimited identifiers are always case-sensitive</listitem>
        <listitem>Trailing spaces in delimited names are removed, as with any string constant</listitem>
        <listitem>Delimited identifiers are available in Dialect 3 only.
        For more details on dialects, see <link linkend="fblangref25-structure-dialects">SQL Dialect</link></listitem>
      </itemizedlist>
      <literallayout></literallayout>
      <para>Delimited name syntax</para>
      <literallayout class="monospaced">
  &lt;delimited name&gt; ::= &quot;&lt;permitted_character&gt;[&lt;permitted_character&gt; &hellip;]&quot;
      </literallayout>
    </formalpara>
    <note>
      <para>A delimited identifier such as <command>&quot;FULLNAME&quot;</command> is the same
      as the regular identifiers <command>FULLNAME, fullname, FullName</command>, and so on.  The reason
      is that Firebird stores all regular names in upper case, regardless of how they were
      defined or declared. Delimited identifiers are always stored according to the exact case of
      their definition or declaration.  Thus, <command>&quot;FullName&quot;</command> is different
      from <command>FULLNAME</command> and, for example, <command>FullName</command>.</para>
    </note>

  </section>


  <section id="fblangref25-structure-literals">
    <title>Literals</title>
    <para>Literals are used to represent data in a direct format.  Examples of standard types of literals 
    are:</para>
    <literallayout class="monospaced">
          integer - 0, -34, 45, 0X080000000;
          real - 0.0, -3.14, 3.23e-23;
          string - 'text', 'don''t!';
          date - DATE '10.01.2014';
          time - TIME '15:12:56';
          timestamp - TIMESTAMP '10.01.2014 13:32:02';
          null state - null
     </literallayout>
     <para>Details about handling the literals for each data type are discussed in the next
     chapter, <link linkend="fblangref25-datatypes">Data Types and Subtypes</link>.</para>
  </section>

  <section id="fblangref25-structure-operators">
    <title>Operators and Special Characters</title>
    <para>A set of special characters is reserved for use as operators or separators.</para>
    <literallayout class="monospaced">
  &lt;special char&gt; ::= &lt;space&gt; | &quot; | % | &amp; | &apos; | ( | ) | * | + | , | - |
                     . | / | : | ; | &lt; | = | &gt; | ? | [ | ] | ^ | { | }
    </literallayout>
    <para>Some of these characters, alone or in combinations, may be used as operators 
    (arithmetical, string, logical), as SQL command separators, to quote identifiers and 
    to mark the limits of string literals or comments.</para>
    <formalpara>
      <title>Operator Syntax</title>
      <literallayout class="monospaced">
&lt;operator&gt; ::=
  &lt;string concatenation operator&gt; |
  &lt;arithmetic operator&gt; |
  &lt;comparison operator&gt; |
  &lt;logical operator&gt;

  &lt;string concatentation operator&gt; ::= {||}

  &lt;arithmetic operator&gt; ::= * | / | + | - |

  &lt;comparison operator&gt; ::=
  {=} | {&lt;&gt;} | {!=} | {~=} | {^=} |
  {&gt;} | {&lt;} | {&gt;=} | {&lt;=} | {!&gt;} | {~&gt;} | {^&gt;} |
  {!&lt;} | {~&lt;} | {^&lt;}

  &lt;logical operator&gt; ::= NOT | AND | OR
      </literallayout>
      <para>For more details on operators, see <link linkend="fblangref25-commons-expressions">Expressions</link>.</para>
    </formalpara>
  </section>
  <section id="fblangref25-structure-comments">
    <title>Comments</title>
    <para>Comments may be present in SQL scripts, SQL statements and PSQL modules. A comment
    can be any text specified by the code writer, usually used to document how particular parts of the
    code work. The parser ignores the text of comments.</para>
    <para>Firebird supports two types of comments: <command>block</command> 
    and <command>in-line</command>.</para>
    <formalpara>
      <title>Syntax</title>
      <literallayout class="monospaced">
  &lt;comment&gt; ::= &lt;block comment&gt; | &lt;single-line comment&gt;

  &lt;block comment&gt; ::=
  /* &lt;ASCII char&gt;[&lt;ASCII char&gt; &hellip;] */

  &lt;single-line comment&gt; ::=
    -- &lt;ASCII char&gt;[&lt;ASCII char> &hellip;]&lt;end line&gt;
      </literallayout>
    </formalpara>
    <para>Block comments start with the <command>/*</command> character 
    pair and end with the <command>*/</command> character pair. Text in
    block comments may be of any length and can occupy multiple lines.</para>
    <para>In-line comments start with a pair of hyphen characters,
    <command>--</command> and continue up to the end of the current line.</para>
    
    <formalpara>
      <title>Example</title>
      <programlisting>
  CREATE PROCEDURE P(APARAM INT)
  RETURNS (B INT)
  AS
  BEGIN
    /* This text will be ignored during the execution of the statement 
       since it is a comment
    */
    B = A + 1; -- In-line comment
    SUSPEND;
  END
      </programlisting>
    </formalpara>
  </section>
</chapter>
