<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="fbodbc205-connection">
  <title>Connecting to Firebird from Applications</title>
  <para>The ODBC/JDBC driver attempts to connect a client to the Firebird server according
  to a set of attributes that default to those provided by the DSN definition.  Those stored 
  attributes can be, and usually are overridden by parameters passed by the application or 
  read from a file (FILEDSN) when it prepares to connect.</para>
  <section id="fbodbc205-conn-params">
    <title>Connection Parameters</title>

    <para>The connection parameters for the driver comprise a list of strings in the form
    <code>KEYWORD=value</code>, separated by semicolons.  The following table enumerates
    the keywords with their verbose meanings and, where it is not obvious, their possible
    values.

    <table id="fbodbc205-conn-keywords-tbl">
    <?dbfo keep-together='auto'?>
      <title>Keywords for Connection Attributes</title>
      <tgroup cols="3">
        <colspec colname="colKeyword" colwidth="*"></colspec>
        <colspec colname="colVerbose" colwidth="*"></colspec>
        <colspec colname="colMoreInfo" colwidth="3*"></colspec>
        <thead>
          <row valign="middle">
            <entry align="center">Keyword</entry>
            <entry align="center">Description</entry>
            <entry align="center">More Information</entry>
          </row>
        </thead>
        <tbody>
          <row valign="middle">
            <entry align="left">UID or USER</entry>
            <entry align="left">Database account, i.e.. username</entry>
            <entry align="left">...</entry>
          </row>
          <row valign="middle">
            <entry align="left">PWD or PASSWORD</entry>
            <entry align="left">Password</entry>
            <entry align="left">...</entry>
          </row>
          <row valign="middle">
            <entry align="left">ROLE</entry>
            <entry align="left">Role</entry>
            <entry align="left">...</entry>
          </row>
          <row valign="middle">
            <entry align="left">DSN</entry>
            <entry align="left">Data source name</entry>
            <entry align="left">...</entry>
          </row>
          <row valign="middle">
            <entry align="left">DRIVER</entry>
            <entry align="left">Driver name</entry>
            <entry align="left">e.g., the string <code>Firebird/InterBase(r) driver</code>.  Defaults to the 
            driver defined in the DSN.</entry>
          </row>
          <row valign="middle">
            <entry align="left">DBNAME or DATABASE</entry>
            <entry align="left">Database</entry>
            <entry align="left">Full path to the database *as seen by the server*, including
            IP address | server name[/port] for a remote connection.  Defaults to the database defined
            in the DSN. </entry>
          </row>
          <row valign="middle">
            <entry align="left">CLIENT</entry>
            <entry align="left">Local path to the required <code>fbclient</code> library</entry>
            <entry align="left">May be needed if the connection is to be via an embedded server
            library located in an application folder.</entry>
          </row>  
          <row valign="middle">
            <entry align="left">CHARSET or CHARACTERSET</entry>
            <entry align="left">Client-side default character set</entry>
            <entry align="left">Should be the same as the default character set of the database, if
            possible;  or one that is known to be codepage-compatible.</entry>
          </row>
          <row valign="middle">
            <entry align="left">READONLY</entry>
            <entry align="left">Read-only</entry>
            <entry align="left">Set transactions in this connection to be read-only.  The default 
            is read/write.</entry>
          </row>
          <row valign="middle">
            <entry align="left">NOWAIT</entry>
            <entry align="left">No wait</entry>
            <entry align="left">Set transactions in this connection to have NO WAIT lock resolution.  
            The default is WAIT.</entry>
          </row>
          <row valign="middle">
            <entry align="left">LOCKTIMEOUT</entry>
            <entry align="left">Set the lock timeout on WAIT transaction</entry>
            <entry align="left">Pass the number of seconds to elapse after encountering a lock
            conflict until a transaction is to return an error.  Not valid if the transaction is 
            set for NO WAIT resolution.</entry>
          </row>
          <row valign="middle">
            <entry align="left">DIALECT</entry>
            <entry align="left">Set SQL dialect</entry>
            <entry align="left">Only 1 or 3 is valid. Normally this would have been set in the DSN.
            It must match the dialect of the database.</entry>
          </row>
          <row valign="middle">
            <entry align="left">QUOTED</entry>
            <entry align="left">Set on quoted identifiers</entry>
            <entry align="left">If set in the DSN, the setting should be correct, i.e., already ON
            or OFF.</entry>
          </row>
          <row valign="middle">
            <entry align="left">SENSITIVE</entry>
            <entry align="left">Set on case-sensitive identifiers</entry>
            <entry align="left">If set in the DSN, the setting should be correct, i.e., already ON
            or OFF.</entry>
          </row>  
          <row valign="middle">
            <entry align="left">AUTOQUOTED</entry>
            <entry align="left">Set on auto-quoting identifiers</entry>
            <entry align="left">If set in the DSN, the setting should be correct, i.e., already ON
            or OFF.</entry>
          </row>
          <row valign="middle">
            <entry align="left">USESCHEMA</entry>
            <entry align="left">Set on <quote>use schema</quote></entry>
            <entry align="left">If set in the DSN, the setting should be correct.</entry>
          </row>
          <row valign="middle">
            <entry align="left">SAFETHREAD</entry>
            <entry align="left">Safe threading</entry>
            <entry align="left">...</entry>
          </row>
          <row valign="middle">
            <entry align="left">FILEDSN</entry>
            <entry align="left">File DSN</entry>
            <entry align="left">Path to a file where the attribute strings from
            a previous connection are stored.  If this string is present, the 
            contents of the file will take priority over the main DSN.</entry>
          </row>
          <row valign="middle">
            <entry align="left">SAVEDSN</entry>
            <entry align="left">Save DSN</entry>
            <entry align="left">Path to a file where the attribute strings from
            this connection, if successful, are to be stored.  The password will 
            be saved in encrypted format.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    </para>

    <section id="fbodbc205-dsnkeys-readseq">
      <title>Read Sequence of the Keys</title>
      <para>The ODBC function <classname>SQLDriverConnect</classname> gives priority to the
      attributes defined in the connection string, only fetching those stored in the DSN, or
      in a cited FILEDSN, to fill in any gaps.</para>
    </section>

    <section id="fbodbc205-examples-connection">
      <title>Connection Examples</title>
      <para>Some examples of connection strings for applications that use the ODBC function 
      <code>SQLDriverConnect</code>:
        <programlisting>
Open(&quot;DSN=myDb;&quot;)
        </programlisting>
      Here, the function is expected to read everything it needs from the DSN.  User name
      and password are not supplied in the string. If they are not present in the DSN, 
      either
        <orderedlist spacing="compact">
          <listitem>it will use the environment variables ISC_PASSWORD and ISC_USER 
          if they are are set; otherwise</listitem>
          <listitem>it will prompt the user for the login credentials</listitem>
        </orderedlist>
      </para>
        
      <para>
        <programlisting>
Open(&quot;DSN=myDb; UID=MCSSITE; PWD=mcssite;&quot;)
        </programlisting>
      The function should have what it needs to make this connection, provided the user name 
      and password are authenticated by the server.</para>
      
      <para>
        <programlisting>
Open(&quot;DSN=myDb; UID=MCSSITE; PWD=mcssite; DBNAME=172.17.2.10:/usr/local/db/myDb.fdb;&quot;)

Open(&quot;DSN=myDb; UID=MCSSITE; PWD=mcssite; DBNAME=myserver:/usr/local/db/myDb.fdb;&quot;)
        </programlisting>
      The DBNAME key points to the server IP address in the first example, with the path to the 
      database file in the POSIX format. The second example is making the same connection, using 
      the server's host name instead of the IP address.
      </para>
      
      <para>Three examples including the DRIVER attribute in the string:

        <programlisting>
Open(&quot;DRIVER=Firebird/InterBase(r) driver; DBNAME=172.17.2.10:/usr/local/db/myDb.fdb;&quot;)

Open(&quot;DRIVER=Firebird/InterBase(r) driver; UID=MCSSITE; PWD=mcssite; DBNAME=172.17.2.10:/usr/local/db/myDb.fdb;&quot;)

Open(&quot;DRIVER=Firebird/InterBase(r) driver; UID=MCSSITE; PWD=mcssite; DBNAME=dummy;&quot;)
        </programlisting>
      In the last example, a local connection using a database alias in place of the database
      file path.  Of course, the alias must be present in <filename>aliases.conf</filename> in
      the root directory of the Firebird server (or, for Firebird 3 and up,
      in <filename>databases.conf</filename>).
      </para>
      <para>Using the server IP address and specifying an alternative port, with the target
      database on a POSIX server;  and the same using the server's host name instead:
        <programlisting>
172.17.2.10/3051:/usr/local/db/myDb.fdb

myserver/3051:/usr/local/db/myDb.fdb
        </programlisting>
      </para>

      <para>Using the server IP address, with the target database on a Windows server;  
      and the same using the server's host name instead:
        <programlisting>
172.17.2.10:c:\db\myDb.fdb

myserver:c:\db\myDb.fdb
        </programlisting>
      </para>

      <para>Using the server IP address and specifying an alternative port, with the target
      database on a Windows server;  and the same using the server's host name instead:
        <programlisting>
172.17.2.10/3051:c:\db\myDb.fdb

myserver/3051:c:\db\myDb.fdb
        </programlisting>
       </para>

       <para>Using TCP/IP local loopback, using the L/L IP address on a 
       POSIX server;  and the same using the L/L host name <code>localhost</code>:
        <programlisting>
127.0.0.1:/usr/local/db/myDb.fdb

localhost:/usr/local/db/myDb.fdb
        </programlisting>
      The same things on a Windows server:
        <programlisting>
127.0.0.1:c:\db\myDb.fdb

localhost:c:\db\myDb.fdb
        </programlisting>
      </para>

      <section id="fbodbc205-examples-embedded">
        <title>DBNAME for Embedded Connections</title>
        <para>The DBNAME value for embedded connections and for the 
        <quote>Windows Local</quote> (XNET) style of connection uses 
        just the file path or alias, without host name, IP address or 
        any port number.
          <note>
            <para>From Windows 3 on, the way we conceptualise non-network
            connections on all platforms is more unified than for the earlier
            versions.  However, from the point of view of the ODBC/JDBC driver, 
            the expression of the DBNAME value has not changed, regardless 
            of the platform on which we are making our embedded connection.
            </para>
          </note>
        </para>
        <para>Local connection on a Windows server using first the file path
        and next an alias:
          <programlisting>
DBNAME=C:\db\myDb.fdb

DBNAME=C:dummy
          </programlisting>
         On a POSIX server:
          <programlisting>
DBNAME=/usr/local/db/myDb.fdb

DBNAME=dummy
          </programlisting>
        </para>
      </section>

      <section id="fbodbc205-examples-aliases">
        <title>DBNAME Using Aliases</title>
        <para>It is strongly recommended to define and use aliases to simplify
        life for you and your users.  It makes your DBNAME values completely 
        neutral to the filesystem and so much less cumbersome.  In our last pairs of 
        examples, the same alias was used on both Windows and POSIX.  The one on the
        Windows server would be defined thus:
          <literallayout class="monospaced">
  dummy = C:\db\myDb.fdb
          </literallayout>
        while, on the Linux server, it would be defined thus:
          <literallayout class="monospaced">
  dummy = /usr/local/db/myDb.fdb
          </literallayout>
        </para>
      </section>
    </section>
  </section>
</chapter>