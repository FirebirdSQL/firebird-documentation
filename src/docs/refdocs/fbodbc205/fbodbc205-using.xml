<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE appendix PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../../../tools/docbook-dtd/docbookx.dtd">
<chapter id="fbodbc205-using">
  <title>Developing with the Firebird ODBC/JDBC Driver</title>
  <para>The Firebird ODBC driver supports multiple simultaneous connections to
  different databases and different servers, each connection operating independently 
  from any others.</para>
  <section id="fbodbc205-threading">
    <title>Multithreading</title>
    <para>Thread protection can be specified at two levels:
      <orderedlist spacing="compact">
        <listitem>sharing an environment handle</listitem>
        <listitem>sharing a connection handle</listitem>
      </orderedlist>
    </para>
    
    <para>By default, the driver is built using the following define:
      <programlisting>
#define DRIVER_LOCKED_LEVEL     DRIVER_LOCKED_LEVEL_CONNECT
      </programlisting>
    which enables a single connection to share multiple local threads.
    </para>
    <para>The default setting is reflected in the initial setup of the 
    DSN on Windows: <code>SAFETHREAD=Y</code>.
    </para>

    <para>If the driver is built using the following define:
      <programlisting>
#define DRIVER_LOCKED_LEVEL     DRIVER_LOCKED_LEVEL_NONE
      </programlisting>
    then the driver is built without multi-threading support and responsibility 
    for threading control is transferred to the Firebird client library. This 
    provides for fastest performance.
    </para>
    <para>If you have a build that was made with this define, you should make it the
    default thread behaviour for the DSN by configuring <code>SAFETHREAD=N</code> 
    in its interface.</para>

    <para>If the driver is built using the following define:
      <programlisting>
#define DRIVER_LOCKED_LEVEL     DRIVER_LOCKED_LEVEL_ENV
      </programlisting>
    then a single environment handle can be shared by multiple local threads.
    </para>

    <note>
      <para>You may save a specific set of connection conditions or overrides
      in a FILEDSN.</para>
    </note>

  </section>

  <section id="fbodbc205-transactions">
    <title>Transactions</title>
    <para>Firebird supports three transaction isolation levels:
      <itemizedlist spacing="compact">
        <listitem>READ COMMITTED</listitem>
        <listitem>SNAPSHOT (<quote>concurrency</quote> or <quote>repeatable read</quote>)</listitem>
        <listitem>SNAPSHOT TABLE STABILITY <quote>consistency</quote>)</listitem>
      </itemizedlist>
    </para>

    <para>The default isolation level of the ODBC/JDBC driver is READ COMMITTED, which
    maps with read committed in other database systems.  Firebird's other isolation levels
    do not map so easily.  In the ODBC/JDBC driver, SNAPSHOT maps to REPEATABLE READ and
    SNAPSHOT TABLE STABILITY maps to SERIALIZABLE, with some tweaks.</para>
    <para>Since v.2.0, the driver has been able to support every transaction configuration
    that Firebird can support, including table reservation (<quote>table blocking</quote>).
    That was achieved by incorporating the so-called <quote>EmbeddedSQL</quote> syntax that
    is native to the old pre-compiler, <emphasis>gpre</emphasis>, to prepare calls to the
    ODBC API by the function <function>SQLExecDirect</function>.</para>

    <section id="fbodbc205-locking">
      <title>Locking</title>
      <para>Firebird implements optimistic row-level locking under all conditions. A transaction
      does not attempt to lock a record until it is ready to post an update operation affecting
      that record. It can happen, though rarely, for an update to fail because another client
      has a lock on the record, even if the transaction that fails started before the one that
      secured the lock.</para>
      <para>Firebird's record versioning engine is able to achieve a granularity finer than
      that provided by traditional row-level locking. Versioning allows any number of transactions
      to read a consistent copy of any given record, even if other transactions are updating the
      same row simultaneously. Readers and writers never block one another and Firebird's
      maintenance of record versions is totally transparent to the user.</para>
    </section>

    <section id="fbodbc205-tx-request">
      <title>Transaction Request Syntax</title>
      <para>The syntax for an ODBC-friendly transaction request follows.
        <literallayout class="monospaced">
SET | DECLARE TRANSACTION [LOCAL] [NAME &lt;transaction-name&gt; [USING &lt;namedUniqueWorkspace&gt;]]
[READ WRITE | READ ONLY]
[WAIT | NO WAIT]
[AUTOCOMMIT]
[NO_AUTO_UNDO]
[[ISOLATION LEVEL] {SNAPSHOT [TABLE STABILITY] or REPEATABLE READ
| SERIALIZABLE
| READ COMMITTED [[NO] RECORD_VERSION]}]
[RESERVING &lt;table-name-1&gt; [, &lt;table-name-2&gt;[, ...&lt;table-name-n&gt;] ]
[FOR [SHARED | PROTECTED] {READ | WRITE}] [, ]
        </literallayout>
      </para>
      <section id="fbodbc205-tx-options">
        <title>What the Options Mean</title>
        <para><database>DECLARE TRANSACTION...</database> declares the described
        transaction, without activating it.  <database>SET TRANSACTION...</database>,
        on the other hand, activates the transaction, temporarily switching the
        SQL_ATTR_AUTOCOMMIT global attribute of the ODBC API to SQL_AUTOCOMMIT_OFF.
        The transaction will have to be finished explicitly;  when it ends, the abiding
        rule of the API resumes.</para>
        <para><database>LOCAL</database> limits a transaction to acting only within
        the context of the current connection.</para>

        <para><database>NAME &lt;transaction-name&gt;</database> is a uniquely-named
        transaction, prepared for use by any connections in the global environment.</para>

        <para><database>USING &lt;namedUniqueWorkspace&gt;</database> is a uniquely-named transaction
        workspace in which <database>NAME &lt;transaction-name&gt;</database> can be
        set to run by any connections in the global environment.  Identically named
        transactions with differing parameters can run in the same named workspace.</para>

        <section id="fbodbc205-tx-named">
          <title>Named Transactions and Transaction Workspaces</title>

          <para>The construct <database>DECLARE TRANSACTION ...
          NAME &lt;transaction-name&gt; [USING &lt;namedUniqueWorkspace&gt;]</database> allows explicit
          transactions to be configured and saved into the global environment in preparation
          for repeated use for any connection request or by any active connection. An instance
          of the saved transaction can be called into action by a specific form of the
          <database>SET TRANSACTION</database> command:</para>
          <para>For a connection request:<literallayout class="monospaced">
SET TRANSACTION NAME MyReadTransaction
            </literallayout>
          or<literallayout class="monospaced">
SET TRANSACTION NAME MyReadTransaction USING MyDsnDb1
            </literallayout>
          </para>
          <para>for separate requests within a single active connection:<literallayout class="monospaced">
SET TRANSACTION LOCAL NAME MyReadTransaction
            </literallayout>
          or <literallayout class="monospaced">
SET TRANSACTION LOCAL NAME MyReadTransaction USING MyDsnDb1
            </literallayout>
          and, in this connection, for another request: <literallayout class="monospaced">
SET TRANSACTION LOCAL NAME MyWriteTransaction
            </literallayout>
          or <literallayout class="monospaced">
SET TRANSACTION LOCAL NAME MyWriteTransaction USING MyDsnDb1
            </literallayout>
          </para>

          <para>The form <database>SET TRANSACTION
          ... NAME &lt;transaction-name&gt; [USING &lt;namedUniqueWorkspace&gt;]</database> differs
          from earlier implementations whereby the configuration set by the
          <database>SET</database> command would be repeated for the next transaction. The inclusion
          of the NAME and/or USING clauses makes the configuration repeatable on demand by use of the
          name.
            <important>
              <para>A return to the usual mode of operation requires a detach/connect cycle.</para>
            </important>
          </para>
        </section>

        <section id="fbodbc205-txns-finishing">
          <title>Ending Explicit Transactions</title>
          <para>In SQL, a transaction is completed by a <database>COMMIT</database> or 
          <database>ROLLBACK</database> request.  ODBC has methods that do one or the 
          other, such as <function>SQLEndTran</function>.  Some programs are able to 
          invoke <function>SQLExecDirect</function> but cannot call <function>SQLEndTran</function>.
          For those programs it is necessary to call an explicit
            <programlisting>
SQLExecDirect( hStmt, &quot;COMMIT&quot; )
            </programlisting>
          to ensure that the interface will call
            <programlisting>   
SQLEndTran( SQL_HANDLE_DBC, hConnection, SQL_COMMIT );
            </programlisting>
          </para>
          <note>
            <para>If a transaction is initiated locally, the driver will execute 
            <function>SQLEndTran</function> for the local <code>hStmt</code>.</para>
          </note>
        </section>
      </section> <!-- fbodbc205-tx-options -->
    </section>  <!-- fbodbc205-tx-request -->

    <section id="fbodbc205-tx-2-phase">
      <title>Two Phase Commit Transactions</title>
      <para>The ODBC/JDBC driver supports two-phase commit transactions, that is,
      a single transaction across different Firebird databases.  Up to 16 databases
      can be accessed simultaneously in one such transaction&mdash;that is an
      absolute limit.</para>

      <para>The call to start a two-phase commit transaction is:
        <programlisting>
SQLSetConnectAttr (connection, 4000, (void*) TRUE, 0);
        </programlisting>
      </para>
      <para>To cancel the common connection:
        <programlisting>
SQLSetConnectAttr (connection, 4000, (void*) FALSE, 0);
        </programlisting>
      </para>
    </section>

    <section id="fbodbc205-multi-tx">
      <title>More Transactions</title>
      <para>Firebird ODBC by default uses one transaction per connection.
      Programatically you can use a more flexible transaction stucture. For
      example you can use multiple transactions within one connection, whereby
      a single connection can be using a number of read/write transactions
      simultaneously. </para>
      <para><emphasis role="bold">An Example</emphasis></para>
      <programlisting>
    HSTMT stmtRd;
    HSTMT stmtWr;
    SQLAllocHandle( SQL_HANDLE_STMT, connection, &amp;stmtRd );
    SQLAllocHandle( SQL_HANDLE_STMT, connection, &amp;stmtWr );
    SQLExecDirect( stmtRd, (UCHAR*)
     &quot;SET TRANSACTION LOCAL\n&quot;
     &quot;READ ONLY\n&quot;
     &quot;ISOLATION LEVEL\n&quot;
     &quot;READ COMMITTED NO RECORD_VERSION WAIT\n&quot;,
     SQL_NTS );
    SQLExecDirect( stmtWr, (UCHAR*)
     &quot;SET TRANSACTION LOCAL\n&quot;
     &quot;READ WRITE\n&quot;
     &quot;ISOLATION LEVEL\n&quot;
     &quot;READ COMMITTED NO RECORD_VERSION WAIT\n&quot;,
     SQL_NTS );
    SQLExecDirect( stmtRd,(UCHAR*)
     &quot;SELECT CURRENCY FROM COUNTRY&quot;
     &quot;   WHERE country = 'Canada'&quot;
     &quot;   FOR UPDATE OF CURRENCY&quot;,
     SQL_NTS );
    SQLFetch( stmtRd );
    SQLPrepare( stmtWr, (UCHAR*)
  &quot;update COUNTRY\n&quot;
  &quot;set    CURRENCY = 'CndDlr'\n&quot;
  &quot;where  COUNTRY = 'Canada'\n&quot;,
  SQL_NTS );
    SQLExecute( stmtWr );
    SQLExecDirect( stmtWr, (UCHAR*)&quot;COMMIT&quot;, SQL_NTS );
      </programlisting>
    </section>

    <section id="fbodbc205-tx-ms-dtc">
      <title>MS DTC Transactions </title>
      <para>The Microsoft Distributed Transaction Coordinator (MS DTC) service is a 
      Windows component that is responsible for coordinating transactions that span 
      multiple resource managers, such as database systems, message queues, and file
      systems. It can perform global, single-phase or two-phase commit transactions 
      involving MSSQL Server, Sybase and other servers that are able to to work with 
      it.  Our ODBC/JDBC driver provides that capability for Firebird servers.</para>
      <para><emphasis role="bold">An Example Using MS DTC</emphasis></para>
      <programlisting>
// Include MS DTC specific header files.
//------------------------------------------------------------------------------
#define INITGUID
#include &quot;txdtc.h&quot;
#include &quot;xolehlp.h&quot;
    ITransactionDispenser *pTransactionDispenser;
    ITransaction *pTransaction;
    // Obtain the ITransactionDispenser Interface pointer
    // by calling DtcGetTransactionManager()
    DtcGetTransactionManager( NULL,// [in] LPTSTR pszHost,
         NULL,// [in] LPTSTR pszTmName,
         IID_ITransactionDispenser,// [in] REFIID rid,
         0,// [in] DWORDdwReserved1,
         0, // [in] WORDwcbReserved2,
         NULL,// [in] void FAR * pvReserved2,
         (void **)&amp;pTransactionDispenser // [out] void** ppvObject
         );
    // Establish connection to database on server#1
    LogonToDB( &amp;gSrv1 );
    // Establish connection to database on server#2
    LogonToDB( &amp;gSrv2 );
    // Initiate an MS DTC transaction
    pTransactionDispenser->BeginTransaction(
         NULL,// [in] IUnknown __RPC_FAR *punkOuter,
         ISOLATIONLEVEL_ISOLATED,// [in] ISOLEVEL isoLevel,
         ISOFLAG_RETAIN_DONTCARE,// [in] ULONG isoFlags,
         NULL,// [in] ITransactionOptions *pOptions
         &amp;pTransaction// [out] ITransaction **ppTransaction
         );
    // Enlist each of the data sources in the transaction
    SQLSetConnectOption( gSrv1->hdbc, SQL_COPT_SS_ENLIST_IN_DTC, (UDWORD)pTransaction );
    SQLSetConnectOption( gSrv2->hdbc, SQL_COPT_SS_ENLIST_IN_DTC, (UDWORD)pTransaction );
    // Generate the SQL statement to execute on each of the databases
    sprintf( SqlStatement,
      &quot;update authors set address = '%s_%d' where au_id = '%s'&quot;,
       gNewAddress, i, gAuthorID );
    // Perform updates on both of the DBs participating in the transaction
    ExecuteStatement( &amp;gSrv1, SqlStatement );
    ExecuteStatement( &amp;gSrv2, SqlStatement );
    // Commit the transaction
    hr = pTransaction->Commit( 0, 0, 0 );
    // or roll back the transaction
    //hr = pTransaction->Abort( 0, 0, 0 );
      </programlisting>
    </section>
  </section>  <!-- fbodbc205-transactions -->

  <section id="fbodbc205-password">
    <title>Password Security</title>
    <para>When a DSN is created with the username and password in place,
    the database password is encrypted and is saved in <filename>odbc.ini</filename>.
    Alternatively, the login credentials can be entered during the database
    connection phase or can be passed using the connection string.</para>
  </section>

  <section id="fbodbc205-cursors">
    <title>Cursors</title>
    <para>In the current Firebird ODBC/JDBC driver, the Dynamic and Keyset cursors 
    are modified to use the Static cursor, through which it is not possible to update
    sets.</para>
    <para>For best performance, use the cursor <code>ForwardOnly</code>.</para>
    <para>The read operators <code>SQLFetch</code>, <code>SQLExtendedFetch</code>
    and <code>SQLScrollFetch</code> use <code>SQL_ROWSET_SIZE</code> 
    and <code>SQL_ATTR_ROW_ARRAY_SIZE</code>.</para>
    <para>For best performance using BLOB fields, use the operator
    <code>SQLBindParameter</code>, regardless of the size of the BLOB field, as
    this will work much faster than using <code>SQLPutData/ SQLGetData</code>.</para>
    
    <para>To use the Firebird driver's cursors, call the following statements:
      <programlisting>
    // Specify that the Firebird ODBC Cursor is always used, then connect.
    SQLSetConnectAttr( hdbc, SQL_ATTR_ODBC_CURSORS, (SQLPOINTER)SQL_CUR_USE_DRIVER, 0 );
    SQLConnect( hdbc, (UCHAR*)connectString, SQL_NTS, NULL, 0, NULL, 0 );
      </programlisting>
    </para>
    
    <section id="fbodbc205-cursors-library">
      <title>ODBC Cursor Library</title>
      <para>This topic is well documented in MSDN. However, we must stress the absolute 
      requirement to use these statements before connecting:
        <programlisting>
    // Specify that the ODBC Cursor Library is always used, then connect.
    SQLSetConnectAttr( hdbc, SQL_ATTR_ODBC_CURSORS, (SQLPOINTER)SQL_CUR_USE_ODBC, 0 );
    SQLConnect( hdbc, (UCHAR*)connectString, SQL_NTS, NULL, 0, NULL, 0 );
        </programlisting>
      </para>
      <para>That data sets keys (?) in the rowset buffers. Updating the buffers requires
      this statement:
        <programlisting>
    SQLFetchScroll( hstmtSel, SQL_FETCH_RELATIVE, 0 );
        </programlisting>
      </para>

    </section>
  </section>

  <section id="fbodbc205-storedprocs">
    <title>Stored Procedures</title>
    <para>In Firebird we can have two types of stored procedures, known as 
    <firstterm>executable</firstterm> and <firstterm>selectable</firstterm>.
    Both types can take input parameters and return output but they differ both
    in the way they are written and in the mechanism for calling them.
      <itemizedlist>
        <listitem>
          <para>Output from an executable procedure is optional and any output 
          returned is a set of not more than one <quote>row</quote> of values.
          If output is defined and none is produced, the output is null.</para>
          <para>Returning data is not the primary goal of an executable procedure. 
          Its purpose is to perform data operations that are invisible to the 
          user.</para>
          <para>The mechanism for calling an executable procedure is the 
          SQL statement <database> EXECUTE PROCEDURE</database>.  For example,
            <programlisting>
execute procedure MyProc(?,?)
            </programlisting>
          </para>
        </listitem>
        
        <listitem>
          <para>A selectable procedure is written with the objective of returning 
          a set of zero, one or many rows of data. It can be used to change data but it 
          should not be written to do that.  The PSQL statement <database>SUSPEND</database>
          is used in this style of procedure to pass a row of output that has been 
          collected inside an iteration of a <database>FOR SELECT..</database> loop out
          to a buffer.</para>
          <para>The mechanism for calling a selectable procedure is the SQL statement
          SELECT.</para>
        </listitem>
      </itemizedlist>
    </para>
    
    <para>In this example we have a selectable procedure from which we expect to 
    receive a set of zero or more rows based on the input parameters:
      <programlisting>
select * from MyProc(?,?)
      </programlisting>
    </para>
    <para>Microsoft Excel and some other applications use this statement to call a 
    stored procedure:
      <programlisting>
{[? =] Call MyProc (?,?)}.
      </programlisting>
    The Firebird ODBC/JDBC driver determines what call to use when executing 
    a stored procedure, from the metadata obtained from the Firebird engine.  Firebird flags 
    a procedure as 'executable' or 'selectable' according to count of <database>SUSPEND</database>
    statements in the assembled (BLR) code of its definition.  For a trivial example:
      <programlisting>
create procedure TEST
  as
    begin
    end
      </programlisting>
    Because the procedure has no <database>SUSPEND</database> statements, the ODBC driver 
    knows to pass the call as <database>execute procedure TEST</database>.
    </para>
    <para>For this procedure:
      <programlisting>
create procedure &quot;ALL_LANGS&quot;
   returns (&quot;CODE&quot; varchar(5),
         &quot;GRADE&quot; varchar(5),
         &quot;COUNTRY&quot; varchar(15),
         &quot;LANG&quot; varchar(15))
   as
   BEGIN
     &quot;LANG&quot; = null;
     FOR SELECT job_code, job_grade, job_country FROM job
     INTO :code, :grade, :country
     DO
       BEGIN
         FOR SELECT languages FROM show_langs(:code, :grade, :country)
         INTO :lang
           DO
             SUSPEND;
             /* Put nice separators between rows */
             code = '=====';
             grade = '=====';
             country = '===============';
             lang = '==============';
             SUSPEND;
       END
     END
      </programlisting>
      the BLR code for the stored procedure contains more than zero <database>SUSPEND</database>
      statements, so the ODBC Driver will use <database>select * from &quot;ALL_LANGS&quot;</database>.
    </para>

  </section>

  <section id="fbodbc205-arraytype">
    <title><database>ARRAY</database> Data Type</title>
    <para>To modify single dimension array data type fields, you need to conform to the 
    following rules:
      <itemizedlist spacing="compact">
        <listitem>Specify simple types (<database>INTEGER</database>, etc.) as {1, 2, 3}</listitem>
        <listitem>Specify string types (<database>CHAR</database>, etc.) as {'1', '2', '3'}</listitem>
      </itemizedlist>
    </para>
    
    <warning>
      <title>TRAPS!</title>
      <para>If you edit an element of the array e.g. element 1, 2 and 5, and do not 
      specify the other elements of the array, e.g. 3 and 4, then the other elements 
      of the array will be zeroed (integer), or blank (string).</para> 
      <para>With some programs where columns are dependent on array data, it is possible
      to enter array data into a currently <database>NULL</database> array column without 
      a validity check being made on the various array elements. Under these circumstances 
      it is essential to enter the array elements before entering the column data.</para>
    </warning> 
    <para>
      <figure id="fbodbc205-array-trap01">
        <title>Data loss when updating an ARRAY field (1)</title>
        <mediaobject>
          <imageobject>
          <!-- actual image size is 856px X 271px -->
            <imagedata fileref="images/fb_odbc_ModArrayField.png" format="PNG"
             width="496px" depth="157px"
             scalefit="1" align="center" />  <!-- 85% -->
          </imageobject>
        </mediaobject>
      </figure>

      <figure id="fbodbc205-array-trap02">
        <title>Data loss when updating an ARRAY field (2)</title>
        <mediaobject>
          <imageobject>
          <!-- actual image size is 917px X 474px -->
            <imagedata fileref="images/fb_odbc_ruleModArrayField.png" format="PNG"
             width="495px" depth="256px"
             scalefit="1" align="center" />  <!-- 85% -->
          </imageobject>
        </mediaobject>
      </figure>
    </para>
  </section> <!-- fbodbc205-arraytype -->

  <section id="fbodbc205-clarion">
    <sectioninfo>
      <title>Usage with Clarion</title>
      <authorgroup>
        <author><firstname>Jorge</firstname><othername>Andres</othername><surname>Brugger</surname></author>
        <author><firstname>Vernon</firstname><surname>Godwin</surname></author>
        <author><firstname>Vladimir</firstname><surname>Tsvigun</surname></author>
      </authorgroup>
    </sectioninfo>
    <para>Clarion users can work with mixed-case object names in Firebird.
      <orderedlist>
        <listitem>Create your database in Firebird. You can use table names like &quot;Pending_Invoices&quot; and fields
like &quot;Order_Number&quot;.</listitem>
        <listitem>Create the DSN for the Database, making sure to check all options
in &quot;Extended Identifier Properties&quot;</listitem>
        <listitem>Open your dictionary, and import multiple tables as normal from the odbc source.
It will work, but do not try to browse or use the files in an application yet.</listitem>
        <listitem>For every field, type in the 'External Name' the name of the field surrounded by
quotes (for example, type &quot;Order_Number&quot; in the external name).</listitem>
      </orderedlist>
    </para>
    <para>That's it! Now use your dictionary with mixed case identifiers, without problems.
    But remember&mdash;you must use double quotes around object names in all SQL statements 
    from inside Clarion.
    </para>
  </section>

</chapter>