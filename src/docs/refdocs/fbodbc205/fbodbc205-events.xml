<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE appendix PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../../../tools/docbook-dtd/docbookx.dtd">
<chapter id="fbodbc205-events">
  <title>Firebird Events</title>
  <para>To illustrate the use of Firebird events with the ODBC/JDBC driver, we use
  the example database, <filename>employee.fdb</filename> and work with the <database>SALES</database>
  table. This table has an <database>AFTER INSERT</database> trigger <database>POST_NEW_ORDER</database>
  that contains the statement <database>POST_EVENT 'new_order';</database>.  Its effect will be
  to signal a listener on the client side when a new record is committed into <database>SALES</database>.
  </para>
  <para>Let us suppose that the table has also a <database>BEFORE UPDATE</database> trigger
  that posts an event 'change_order' in subsequent operations when the field
  <database>ORDER_STATUS</database> is changed.
    <tip>
      <para>The trigger <database>BEFORE UPDATE</database> does not exist: this scenario is just
      for illustration purposes, but you could create it if you like:
        <programlisting>
CREATE OR ALTER TRIGGER BI_SALES FOR SALES
ACTIVE BEFORE UPDATE
AS BEGIN
  IF (NEW.ORDER_STATUS = 'new') THEN
  BEGIN
     NEW.ORDER_STATUS = 'open';
     POST_EVENT 'change_order';
  END
END
        </programlisting>
      </para>
    </tip>
  </para>
  <para>For our demo, we need to insert a new record into <database>SALES</database>.  The field
  <database>ORDER_STATUS</database> on the newly-inserted record contains the default value 'new'.
  After it commits, posting the event 'new_order', we want to go back and change something in the
  new record.  When we do so, our <database>BEFORE UPDATE</database> trigger,
  <database>BI_SALES</database> will check whether the value of <database>ORDER_STATUS</database> is
  still 'new' and, if so, it will change it to 'open' and post the event 'change_order'.</para>

  <note>
    <para>We are not really interested in how inserting and changing the record affects
    the database state.  The idea here is to show how to prime the driver to manage
    listening for multiple events.</para>
  </note>
  <section id="fbodbc205-events-listener">
    <title>Priming the Driver to Listen for Events</title>
    <para>The first piece of setting up the driver to listen for events
    is to connect to an ODBC interface file that describes Firebird events processing:
      <literallayout class="monospaced">
#include &quot;OdbcUserEvents.h&quot;
      </literallayout>
    </para>
    <para>Next, in the table <code>eventInfo</code>, we specify the events that we are
    interested in.  For our example, the event 'new_order' is the only one we are interested
    in at this stage. The event 'change_order' is in the picture only to demonstrate the driver's
    ability to manage multiple events.
      <programlisting>
ODBC_EVENT_INFO eventInfo[] =
{
 INIT_ODBC_EVENT(&quot;new_order&quot;),
 INIT_ODBC_EVENT(&quot;change_order&quot;)
};
      </programlisting>
    </para>

    <para>Now, we need to create a structure&mdash;which we will name <code>MyUniqueData</code>&mdash;to
    store the data tasks involved in our operation. In our example, a field <code>event_flag</code>
    will signal an event delivered from the server.  Our job starts from there.
      <programlisting>
struct MyUniqueData
{
 int event_flag;
 //... other define for use into astRoutine
};
      </programlisting>
    </para>
    <para>We need to create a callback function, <code>astRoutine</code>, which will be activated when
    events defined in the <code>eventInfo</code> table are flagged:
      <programlisting>
void astRoutine( void *userEventsInterfase, short length, char * updated )
{
    PODBC_USER_EVENTS_INTERFASE userInterfase = (PODBC_USER_EVENTS_INTERFASE)userEventsInterfase;
    SQLSetConnectAttr( userInterfase->hdbc, SQL_FB_UPDATECOUNT_EVENTS, (SQLPOINTER)updated, SQL_LEN_BINARY_ATTR( length ) );
    MyUniqueData &amp;myData = *(MyUniqueData*)userInterfase->userData;
    myData.event_flag++;
    printf( &quot;ast routine was called\n&quot; );
}
      </programlisting>
    </para>

    <para>The function needs to have a call:
      <programlisting>
  SQLSetConnectAttr( userInterfase->hdbc,
                       SQL_FB_UPDATECOUNT_EVENTS,
                       (SQLPOINTER)updated,
                       SQL_LEN_BINARY_ATTR( length ) );
      </programlisting>
    This call is needed for updating the state of events in our structure <code>eventInfo</code>.
    That structure has a field <code>countEvents</code> that maintains a total of
    event operations and a Boolean field <code>changed</code> that is set True when the
    'before' and 'after' values of <code>countEvents</code> are different.</para>

    <para>When we want to flag an event that we are interested in, we issue the command:
      <literallayout class="monospaced">
    myData.event_flag++;
      </literallayout>
    It provides a fairly primitive mechanism for synchronizing workflow, but it is sufficient
    for our needs.  Its setup is as follows:
      <itemizedlist>
        <listitem>At connection time or when the DSN is being constructed, the <database>NOWAIT</database>
        option must be set to OFF</listitem>
        <listitem>
          <para>The following statements need to be issued:
            <programlisting>
    // Specify that the Firebird ODBC Cursor is always used, then connect.
    SQLSetConnectAttr( hdbc, SQL_ATTR_ODBC_CURSORS, (SQLPOINTER)SQL_CUR_USE_DRIVER, 0 );
    SQLConnect( hdbc, (UCHAR*)connectString, SQL_NTS, NULL, 0, NULL, 0 );
            </programlisting>
          </para>
        </listitem>
        <listitem>
          <para>For the purpose of our demonstration we need to prepare an SQL cursor request.  Your
          own, real-life scenario would be less trivial, of course.
            <programlisting>
    SQLPrepare( stmtSel, (UCHAR*)
  &quot;SELECT po_number&quot;
  &quot; FROM sales&quot;
                &quot; WHERE order_status = 'new'&quot;
  &quot; FOR UPDATE&quot;,
  SQL_NTS );
            </programlisting>
          </para>
        </listitem>
        <listitem>
          <para>We'll construct the cursor query for our demo, naming it 'C':
            <programlisting>
    char *cursor = &quot;C&quot;;
    SQLSetCursorName( stmtSel, (UCHAR*)cursor, sizeof( cursor ) );

    SQLPrepare( stmtUpd, (UCHAR*)
  &quot;UPDATE sales&quot;
                &quot; SET order_status = 'open'&quot;
  &quot; WHERE CURRENT OF C&quot;,
         SQL_NTS );
            </programlisting>
          </para>
        </listitem>

        <listitem>
          <para>Initialize the structure <code>ODBC_EVENTS_BLOCK_INFO</code> as the events interface
            that is passed to the driver:
            <programlisting>
    myData.event_flag = 0;
    ODBC_EVENTS_BLOCK_INFO eventsBlockInfo = INIT_EVENTS_BLOCK_INFO( hdbc, eventInfo, astRoutine, &amp;myData );
    SQLSetConnectAttr( hdbc, SQL_FB_INIT_EVENTS, (SQLPOINTER)&amp;eventsBlockInfo, SQL_LEN_BINARY_ATTR((int)sizeof( eventsBlockInfo )) );
    - to inform connection, that we are ready to accept events.
    SQLSetConnectAttr( hdbc, SQL_FB_REQUEUE_EVENTS, (SQLPOINTER)NULL, 0 );
            </programlisting>
          </para>
        </listitem>

        <listitem>
          <para>Events begin ...
            <programlisting>
    while ( !iret )
    {
        // If the event was triggered, reset the buffer and re-queue
 if ( myData.event_flag )
 {
     myData.event_flag = 0;
     // Check for first ast_call.  isc_que_events fires
     // each event to get processing started
     if ( first )
          first = 0;
     else
     {
  // Select query to look at triggered events
  ret = SQLExecute( stmtSel );
  for (;;)
  {
   ret = SQLFetch( stmtSel );
   if ( ret == SQL_NO_DATA_FOUND )
    break;
   ret = SQLExecute( stmtUpd );
  }
     /* Re-queue for the next event */
     SQLSetConnectAttr( hdbc, SQL_FB_REQUEUE_EVENTS, (SQLPOINTER)NULL, 0 );
     /* This does not block, but as a sample program there is nothing
     ** else for us to do, so we will take a nap
     */
     Sleep(1000);
 }
    }
            </programlisting>
          </para>
        </listitem>
      </itemizedlist>
    </para>

  </section> <!-- fbodbc205-events-listener -->

</chapter>