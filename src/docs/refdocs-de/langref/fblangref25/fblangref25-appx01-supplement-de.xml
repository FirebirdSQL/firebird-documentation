<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE appendix PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../../../../tools/docbook-dtd/docbookx.dtd">
<appendix id="fblangref25-appx01-supplement-de">
  <title>Zusatzinformationen</title>
  <para>In diesem Anhang finden Sie Themen, auf die sich Entwickler beziehen können, 
      um das Verständnis für Funktionen oder Änderungen zu verbessern.</para>

  <section id="fblangref25-appx01-supp-rdb_validblr-de">
    <title>Das Feld <database>RDB$VALID_BLR</database></title>
    <para>Das Feld <database>RDB$VALID_BLR</database> wurde zu den Systemtabellen
    <database>RDB$PROCEDURES</database> und <database>RDB$TRIGGERS</database> in Firebird 2.1 hinzugefügt.
    Sein Zweck ist, eine mögliche Ungültigkeit eines PSQL-Moduls nach einer Änderung einer Domäne oder Tabellenspalte, 
    von der das Modul abhängt, zu signalisieren.<database>RDB$VALID_BLR</database>
    wird auf 0 gesetzt, sobald der Code einer Prozedur oder eines Triggers ungültig durch eine solche 
    Änderung wird.</para>
    <section>
      <title>Funktionsweise der Invalidierung</title>
      <para>Bei Triggern und Prozeduren ergeben sich Abhängigkeiten durch die Definitionen der Tabellenspalten, 
          auf die zugegriffen wird, und auch über alle Parameter oder Variablen, die im Modul mit der 
          <database>TYPE OF</database>-Klausel definiert wurden.</para>
      <para>
          Nachdem die Engine jede Domain, einschließlich der impliziten Domains, die intern hinter den 
          Spaltendefinitionen und den Ausgabeparametern erstellt wurden, geändert hat, 
          werden alle ihre Abhängigkeiten intern neu kompiliert.
      <note>
        <para>In V.2.x beinhaltet dies Prozeduren und Trigger, jedoch keine Blöcke, die in DML-Anweisungen für die 
            Laufzeitausführung mit <database>EXECUTE BLOCK</database> codiert sind. Firebird 3 umfasst weitere Modultypen 
            (gespeicherte Funktionen, Pakete).</para>
      </note>
      </para>
      <para>Jedes Modul, dass nicht neukompiliert werden kann, aufgrund einer Inkompatibilität durch 
          eine Änderung einer Domain, wird als ungültig markiert (<quote>invalidated</quote>). Dies geschieht durch
          Setzen von <database>RDB$VALID_BLR</database> im Systemdatensatz (in
      <database>RDB$PROCEDURES</database> oder <database>RDB$TRIGGERS</database>)
      auf 0.</para>
      <para>Revalidierung (setzen von <database>RDB$VALID_BLR</database> auf 1) tritt auf, wenn
      <orderedlist spacing="compact">
        <listitem>die Domain erneut geändert wird und die neue Definition kompatibel zur 
            vorigen invalidierten Moduldefinition ist; ODER</listitem>
        <listitem>das vorige invalidierte Modul angepasst wurde um zur neuen Domain-Definition zu passen</listitem>
     </orderedlist>
     </para>
    </section>
    <para>Die folgende Abfrage zeigt alle Module an, die von einer bestimmten Domain abhängig sind,
        und gibt deren <database>RDB$VALID_BLR</database>-Status aus:
      <blockquote><programlisting>
SELECT * FROM (
  SELECT
    'Procedure',
    rdb$procedure_name,
    rdb$valid_blr
  FROM rdb$procedures
  UNION ALL
  SELECT
    'Trigger',
    rdb$trigger_name,
    rdb$valid_blr
  FROM rdb$triggers
) (type, name, valid)
WHERE EXISTS
  (SELECT * from rdb$dependencies
   WHERE rdb$dependent_name = name
     AND rdb$depended_on_name = 'MYDOMAIN')

/* Replace MYDOMAIN with the actual domain name.
   Use all-caps if the domain was created
   case-insensitively. Otherwise, use the exact
   capitalisation. */
      </programlisting></blockquote>
      Die folgende Abfrage zeigt alle Module an, die von einer bestimmten Tabellenspalte abhängig sind,
        und gibt deren <database>RDB$VALID_BLR</database>-Status aus:
      <blockquote><programlisting>
SELECT * FROM (
  SELECT
    'Procedure',
    rdb$procedure_name,
    rdb$valid_blr
  FROM rdb$procedures
  UNION ALL
  SELECT
    'Trigger',
    rdb$trigger_name,
    rdb$valid_blr
  FROM rdb$triggers) (type, name, valid)
WHERE EXISTS
  (SELECT *
   FROM rdb$dependencies
   WHERE rdb$dependent_name = name
     AND rdb$depended_on_name = 'MYTABLE'
     AND rdb$field_name = 'MYCOLUMN')
      </programlisting></blockquote>
    </para>

    <important>
      <para>Alle PSQL-Invalidierungen die durch Änderungen einer Domain oder Spalte verursacht werden,
          spiegeln sich im <database>RDB$VALID_BLR</database>-Feld wieder. Jedoch beeinflussen andere
          Änderungen, wie beispielsweise die Anzahl der Ein- und Ausgabeparameter, aufgerufene Routinen
          usw. die Gültigkeitsfelder nicht, obwohl sie die Module potenziell invalidieren. Ein typisches
          Szenario ist folgendes:
        <orderedlist>
          <listitem>Eine Prozedur (B) wird definiert, diese ruft eine andere Prozedur (A) auf und
            liest ihre Ausgabeparameter.  In diesem Fall wird die Abhängigkeit in
          <database>RDB$DEPENDENCIES</database> registriert. Danach wird Prozedur (A) angepasst. Es werden
          ein oder mehr Ausgabeparameter angepasst oder entfernt. Das Statement
          <database>ALTER PROCEDURE A</database> wird mit einem Fehler quittiert, 
          sobald versucht wird ein Commit durchzuführen.</listitem>
          <listitem>Eine Prozedur (B) ruft Prozedur A auf und übergibt Werte für die Eingabeparameter.
              Keine Abhängigkeiten werden in <database>RDB$DEPENDENCIES</database> registriert. 
              Danach werden Änderungen an den Eingabeparametern in Prozedur A durchgeführt.
              Fehler werden zur Laufzeit auftreten, wenn B A aufruft und es nicht-passende Eingabeparemeter
              übergeben werden.</listitem>
        </orderedlist>
      </para>
    </important>
    <note>
      <title>Weitere Hinweise Notes</title>
      <itemizedlist>
        <listitem>Für PSQL-Module aus früheren Firebird-Versionen (gilt für einige Systemtrigger, 
            sogar wenn die Datenbank unter Firebird 2.1. oder höher erstellt wurde), ist
       <database>RDB$VALID_BLR</database> NULL. Dies heißt nicht, dass ihre BLR ungültig ist.</listitem>

        <listitem>Die <emphasis>isql</emphasis>-Befehle <database>SHOW PROCEDURES</database> und
        <database>SHOW TRIGGERS</database> zeigen ein Sternchen in der <database>RDB$VALID_BLR</database>-Spalte
        für alle Module, deren Wert 0 ist (ungültig). Für <database>SHOW
        PROCEDURE &lt;procname&gt;</database> und <database>SHOW TRIGGER &lt;trigname&gt;</database>,
        welche einzelne PSQL-Module sind, werden gar keien ungültigen BLR signalisiert.</listitem>
      </itemizedlist>
    </note>
  </section> <!-- rdb$valid_blr -->

  <!-- ======================================================================================
                     N O T E   O N   E Q U A L I T Y
       ====================================================================================== -->
  <section id="fblangref25-appx01-note-on-equality-de">
    <title>Ein Hinweis zur Gleichheit</title>
    <important>
      <para>Diese Anmerkung über Gleichheits- und Ungleichheits-Operatoren gilt überall 
          in der Firebird SQL-Sprache.</para>
    </important>
    <para>Der <quote><literal>=</literal></quote>-Operator, welcher ausdrücklich
    in vielen Bedingungen verwendet wird, prüft nur Werte gegen Werte.
    Entsprechend dem SQL-Standard, ist <constant>NULL</constant> kein Wert
    und somit sind zwei <constant>NULLs</constant> weder gleich noch ungleich
    zueinander. Wenn Sie <constant>NULLs</constant> in Bedingungen vergleichen
    müssen, nutzen Sie den Operator <database>IS NOT DISTINCT
    FROM</database>. Dieser gibt wahr zurück, falls die Operanden den gleichen Wert
    besitzen <emphasis>oder</emphasis> beide 
    <database>NULL</database> sind.</para>

    <blockquote>
      <programlisting>select *
  from A join B
  on A.id is not distinct from B.code</programlisting>
        </blockquote>

        <para>In Fällen in denen Sie gegen <constant>NULL</constant> innerhalb einer 
        <emphasis>ungleich</emphasis>-Bedingung testen wollen, nutzen Sie <database>IS DISTINCT
        FROM</database>, nicht <quote><literal>&lt;&gt;</literal></quote>. Möchten Sie 
        <constant>NULL</constant> unterschiedlich zu anderen Werten und zwei <constant>NULLs</constant> 
        als gleich betrachten:</para>
    <blockquote>
      <programlisting>select *
  from A join B
  on A.id is distinct from B.code</programlisting>
    </blockquote>
  </section>

</appendix>
