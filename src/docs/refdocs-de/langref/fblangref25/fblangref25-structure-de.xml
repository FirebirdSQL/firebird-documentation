<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../../../../tools/docbook-dtd/docbookx.dtd">
<chapter id="fblangref25-structure-de">
  <title>SQL Sprachstruktur</title>
  <para>Diese Referenz beschreibt die von Firebird unterstützte SQL-Sprache.</para>
  
  <section id="fblangref25-background-de">
    <title>Hintergrund zu Firebirds SQL-Sprache</title>
    <para>Zu Beginn, ein paar Punkte über die Eigenschaften die im Hintergrund von Firebirds Sprache
			eine Rolle spielen. </para>
    <section id="fblangref25-structure-flavours-de">
      <title>SQL Bestandteile</title>
      <para>Verschiedene <emphasis>Teilmengen von SQL</emphasis> gehören wiederum in verschiedene Aktivitätsbereiche.
	  Die Teilmengen in Firebirds Sprachimplementation sind:</para>
      <para><itemizedlist>
          <listitem>
            <para>Dynamic SQL (DSQL)</para>
          </listitem>
          <listitem>
            <para>Procedural SQL (PSQL)</para>
          </listitem>
          <listitem>
            <para>Embedded SQL (ESQL)</para>
          </listitem>
          <listitem>
            <para>Interactive SQL (ISQL)</para>
          </listitem>
        </itemizedlist></para>
      <para><command>Dynamic SQL</command> macht den Hauptteil der Sprache aus, der in Abschnitt
      (SQL/Foundation) 2 der SQL-Spezifikation beschrieben wird. DSQL repräsentiert Statements, die 
	  von Anwendungen über die Firebird API durch die Datenbank verarbeitet werden.</para>

	  <para><command>Procedural SQL</command> ergänzt Anweisungen der Dynamic SQL um lokale Variablen,
	  Zuweisungen, Bedingungen, Schleifen und andere prozedurale Verhalten. PSQL entspricht dem 4. Teil (SQL/PSM)
	  der SQL-Spezifikationen. Ursprüunglich waren PSQL-Erweiterungen nur über persistent gespeicherte Module (Prozeduren
	  und Trigger) verfügbar. In späteren Releases wurden diese jedoch auch in Dynamic SQL aufgenommen (vergleichen Sie 
	  hierzu auch <link linkend="fblangref25-dml-execblock-de"><database>EXECUTE BLOCK</database></link>).</para>
	  
      <para><command>Embedded SQL</command> berschreibt die Untermenge von DSQL, die von Firebird <emphasis>gpre</emphasis>
	  unterstützt wird. Dies ist die Anwendung, welche es erlaubt, SQL-Konstrukte in Ihre Host-Programmiersprache
      (C, C++, Pascal, Cobol, etc.) einzubetten und diese in gültigen Firebird API-Aufrufen auszuführen.</para>
      <note>
        <para>Nur ein Teil der in DSQL implementierten Anweisungen und Ausdrücke werden in ESQL unterstützt.</para>
      </note>

      <para><command>Interactive ISQL</command> wird durch die Sprache beschrieben, die mittels 
      Firebirds <emphasis>isql</emphasis> ausgeführt werden kann. Dies ist die Befehlszeilenanwendung,
	  für den interaktiven Zugriff auf Datenbanken. Da dies eine reguläre Client-Anwendung ist, ist ihre 
	  native Sprache in DSQL verfasst. Sie nutzt außerdem einige zusätzliche Befehle, die nicht außerhalb
	  ihrer spezifischen Umgebung gelten.</para>

      <para>Sowohl DSQL wie auch PSQL werden vollständig in dieser Referenz behandelt. Dies gilt nicht
	  für ESQL und ISQL, sofern nicht ausdrücklich beschrieben.</para>
    </section>

    <section id="fblangref25-structure-dialects-de">
      <title>SQL-Dialekte</title>
      <para>Der Begriff <emphasis>SQL dialect</emphasis> beschreibt ein spezifisches Feature der 
	  SQL-Sprache, das bei Zugriff einer Datenbank zur Verfügung steht. SQL-Dialekte können auf 
	  Datenbankebene definiert und auf Verbindungsebene spezifiziert werden. Drei Dialekte stehen
	  zur Verfügung:</para>
      <itemizedlist>
        <listitem>
          <para><emphasis>Dialect 1</emphasis> dient aussschließlich der Abwärtskompatibilität mit
		  sehr alten InterBase-Datenbanken bis Version 5. Dialekt 1-Datenbanken beinhalten einige
		  Features, die sich von Dialekt 3, dem Firebird-Standard, unterscheiden.
		  </para>
          <itemizedlist>
            <listitem>
              <para>Datums- und Zeitinformationen werden als DATE-Datentyp gespeichert. Ein
			  TIMESTAMP-Datentyp ist ebenfalls verfügbar, der identisch mit dieser 
			  DATE-Implementierung ist.</para>
            </listitem>
            <listitem>
              <para>Doppelte Anführungszeichen dürfen als Alternative für das Apostroph als 
			  Textbegrenzer verwendet werden. Dies ist gegensätzlich zum SQL-Standard&mdash;doppelte Anführungszeichen
              sind für den einen bestimmten Zweck sowohl in Standard SQL wie auch in Dialekt 3 
			  reserviert. Als Textbegrenzer sollten doppelte Anführungszeichen demnach energisch
			  vermieden werden.</para>
            </listitem>
            <listitem>
              <para>Die Präzision für NUMERIC- und DECIMAL-Datentypen ist geringer als im Dialekt 3
			  und falls die Präzision einer Dezimalzahl größer als 9 Stellen sein soll, wird Firebird
			  diese intern als Fließkommazahl speichern.</para>
            </listitem>
            <listitem>
              <para>Der Datentyp BIGINT (64-Bit Integer) wird nicht unterstützt.</para>
            </listitem>
            <listitem>
              <para>Bezeichner unterscheiden Groß- und Kleinschreibung und müssen immer den Regeln
			  für Bezeichner entsprechen&mdash;vergleichen Sie den Abschnitt
			  <link linkend="fblangref25-structure-identifiers-de">Bezeichner</link>.</para>
            </listitem>
            <listitem>
              <para>Obwohl Generator-Werte als 64-Bit-Zahlen gespeichert werden, wird ein Clientaufruf
			  von zum Beispiel <function>SELECT GEN_ID (MyGen, 1)</function> immer einen 32-Bit-Wert
			  zurückgeben.</para>
            </listitem>
          </itemizedlist>
        </listitem>
        <listitem>
          <para><emphasis>Dialect 2</emphasis> ist nur in der Firebird-Clientverbindung verfügbar und
		  kann nicht in der Datenbank definiert werden. Hintergrund ist, Entwickler beim Debugging zu 
		  unterstützen, wenn eine reguläre Datenbank von Dialekt 1 zu Dialekt 3 migriert werden soll.
		  </para>
        </listitem>
        <listitem>
          <para>In <emphasis>Dialect 3</emphasis>-Datenbanken,</para>
          <itemizedlist>
            <listitem>
              <para>werden Zahlen (DECIMAL- und NUMERIC-Datentypen) intern als lange Fließkommazahl
			  gespeichert, sobald die Präzision größer als 9 Stellen ist.</para>
            </listitem>
            <listitem>
              <para>Der TIME-Datentyp ist nur für das Speichern von Tageszeiten gedacht.</para>
            </listitem>
            <listitem>
              <para>Der DATE-Datentyp speichert nur Datumsinformationen.</para>
            </listitem>
            <listitem>
              <para>Der BIGINT-Datentyp für 64-Bit-Integer ist verfügbar.</para>
            </listitem>
            <listitem>
              <para>Doppelte Anführungszeichen sind reserviert als Begrenzer für irreguläre Bezeichner.
			  Diese ermöglichen es Objektnamen zu definieren, die Groß- und Kleinschreibung unterscheiden
			  oder die Anforderungen an reguläre Bezeichner nicht erfüllen.</para>
            </listitem>
            <listitem>
              <para>Alle Zeichenketten müssen in einfachen Anführungszeichen begrenzt werden.</para>
            </listitem>
            <listitem>
              <para>Generatorwerte werden als 64-Bit-Ganzzahlen gespeichert.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
      <important>
        <para>Die Verwendung von Dialekt 3 wird strengstens für die Entwicklung neuer Datenbanken 
		und Anwendungen empfohlen. Sowohl die Datenbank- als auch die Verbindungsdialekte sollte 
		zueinander passen. Ausnahme bildet die Migration mittels Dialekt 2.</para>
        <para>Diese Referenz beschreibt die Semantic unter SQL Dialekt 3, solange nicht anders 
		angegeben.</para>
      </important>
    </section>

    <section id="fblangref25-structure-errors-de">
      <title>Fehlerbedingungen</title>
      <para>Jede Verarbeitung eines SQL-Statements wird erfolgreich beendet oder mit einer
	  speziellen Fehlerbedingung abgebrochen.</para>
    </section>
  </section> <!-- Background -->

  <section id="fblangref25-structure-basics">
    <title>Grundelemente: Statements, Klauseln, Schlüsselwörter</title>
    <para>Das grundlegendste Konstrukt in SQL ist das <emphasis>Statement</emphasis>. Ein Statement
	definert was das DBMS mit bestimmten Daten oder Metadaten-Objekten tun soll. Komplexere Statements
	bedienen sich einfacher Konstrukte&mdash;<emphasis>Klauseln</emphasis> und 
	<emphasis>Optionen</emphasis>.</para>
    <formalpara>
      <title>Klauseln</title>
      <para>Eine Klausel definiert eine besteimmte Art von Derektiven in einem Statement.
	  So bestimmt zum Beispiel die <database>WHERE</database>-Klausel in einem 
	  <database>SELECT</database>-Statement und anderen manipulativen Statements
	  (<database>UPDATE, DELETE</database>) Kriterien, um Daten innerhalb einer oder 
	  mehrerer Tabellen auszuwählen, zu aktualisieren oder zu löschen. Die Klausel
	  <database>ORDER BY</database> gibt an, in welcher Reihenfolge die ausgegebenen Daten
      &mdash;Rückgabesatz&mdash; sortiert werden sollen.</para>
    </formalpara>
    <formalpara>
      <title>Optionen</title>
      <para>Optionen sind die einfachsten Konstrukte und werden in Verbindung mit bestimmten
	  Schlüsselwörtern eingesetzt. Wo Optionen zum Einsatz kommen, wird eine als Standard
	  hinterlegt, solange nichts anderes angegeben wurde. So wird zum Beispiel das 
	  <database>SELECT</database>-Statement alle Datenzeilen zurückgeben, die die erforderlichen
	  Kriterien der Abfrage erfüllen, es sei denn die Option <database>DISTINCT</database>
	  schränkt diese Ausgabe auf eindeutige Zeilen ein.</para>
    </formalpara>
    <formalpara>
      <title>Schlüsselwörter</title>
      <para>Alle Schlüsselwörter die im SQL-Katalog enthalten sind, werden als Schlüsselwörter bezeichnet.
	  Einige Schlüsselwörter sind <emphasis>reserviert</emphasis>, das heißt ihr Gebrauch als 
	  Bezeichner für Datenbankobjekte, Parameternamen oder Variablen ist in bestimmten oder 
	  gar allen Kontexten untersagt. Nichtreservierte Schlüsselwörter können als Bezeichner verwendet
	  werden, obwohl dies nicht empfohlen wird. Von Zeit zu Zeit kann es vorkommen, dass nichtreservierte
	  Schlüsselwörter im Zuge von Spracherweiterungen reserviert werden.</para>
    </formalpara>
    <para>Im Beispiel wird das folgende Statement ohne Fehler ausgeführt, obwohl
    <database>ABS</database> ein Schlüsselwort und nicht reserviert ist.<blockquote>
    <programlisting>CREATE TABLE T (ABS INT NOT NULL);</programlisting>
    <para>Andererseits wird das folgende Statement mit einem Fehler beendet, da <database>ADD</database> 
    sowohl ein Schlüsselwort als auch ein reserviertes Wort ist.</para>
    <programlisting>CREATE TABLE T (ADD INT NOT NULL);</programlisting>
    </blockquote></para>
    <para>Bitte vergleichen Sie auch die Auflistung reservierter Wörter und Schlüsselwörter im
	Abschnitt
    <link linkend="fblangref25-appx03-reskeywords-de">Reservierte Wörter und Schlüsselwörter</link>.</para>
  </section>
  
  <section id="fblangref25-structure-identifiers-de">
    <title>Bezeichner</title>
    <para>Alle Datenbankobjekte haben Namen, häufig auch <emphasis>Bezeichner</emphasis> genannt. 
	Zwei Namensarten sind gültige Bezeichner: <emphasis>reguläre</emphasis> Namen, ähnlich den Variablennamen
	in regurlären Programmiersprachen, und <emphasis>begrenzte</emphasis> Namen, die spezifisch für
	SQL sind. Um als gültig erachtet zu werden, muss jeder Bezeichnertyp konform zu gewissen Regeln sein:</para>
    <formalpara>
      <title>Regeln für reguläre Objektbezeichner</title>
      <itemizedlist>
        <listitem>Die Zeichenlänge darf 31 Zeichen nicht übersteigen</listitem>
        <listitem>
          <para>Der Name muss mit einem unakzentuierten, 7-Bit ASCII-Zeichen beginnen. Zahlen sind nicht erlaubt. 
		  Die weiteren Zeichen dürfen aus weiteren 7-Bit ASCII-Zeichen, Zahlen, Unterstrichen oder Dollarzeichen
		  bestehen. Keine anderen Zeichen, darunter auch Leerzeichen, dürfen Verwendung finden. Beim Namen wird 
		  nicht zwischen Groß- und Kleinschreibung unterschieden. Das heißt, der Name kann sowohl in Klein- als
		  auch Großschreibung verwendet werden. Somit sind folgende Namen für das System gleichzusetzen:</para>
          <literallayout class="monospaced">
    fullname
    FULLNAME
    FuLlNaMe
    FullName
          </literallayout>
        </listitem>
      </itemizedlist>
      <para>Syntax für reguläre Namen</para>
      <literallayout class="monospaced">
&lt;name> ::=
  &lt;letter&gt; | &lt;name&gt;&lt;letter&gt; | &lt;name&gt;&lt;digit&gt; | &lt;name&gt;_ | &lt;name&gt;$

  &lt;letter&gt; ::= &lt;upper letter&gt; | &lt;lower letter&gt;

  &lt;upper letter&gt; ::= A | B | C | D | E | F | G | H | I | J | K | L | M |
                           N | O | P | Q | R | S | T | U | V | W | X | Y | Z

  &lt;lower letter&gt; ::= a | b | c | d | e | f | g | h | i | j | k | l | m |
                           n | o | p | q | r | s | t | u | v | w | x | y | z

  &lt;digit&gt; ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
      </literallayout>
    </formalpara>

    <formalpara>
      <title>Regeln für begrenzte Objektbezeichner</title>
      <itemizedlist>
        <listitem>Die Zeichenlänge darf 31 Zeichen nicht überschreiten.</listitem>
        <listitem>Die gesamte Zeichenkette muss in doppelte Anführungszeichen
		eingeschlossen werden, z.B. <database>&quot;anIdentifier&quot;</database>.</listitem>
        <listitem>Es darf jedes Zeichen eines Latin-Zeichensatzes verwendet werden,
		inklusive akzentuierte Zeichen, Leerzeichen und Sonderzeichen.</listitem>
        <listitem>Ein Bezeichner darf ein reserviertes Wort sein.</listitem>
        <listitem>Begrenzte Objektbezeichner unterscheiden immer zwischen Groß- und Kleinschreibung.</listitem>
        <listitem>Führende Leerzeichen werden entfernt, so wie bei jeder konstanten Zeichenkette.</listitem>
        <listitem>Begrenzte Objektbezeichner sind nur in Dialekt 3 verfügbar. Für mehr Details, vgl.
		<link linkend="fblangref25-structure-dialects">SQL-Dialekte</link></listitem>
      </itemizedlist>
      <literallayout></literallayout>
      <para>Syntax für begrenzte Objektbezeichner</para>
      <literallayout class="monospaced">
  &lt;delimited name&gt; ::= &quot;&lt;permitted_character&gt;[&lt;permitted_character&gt; &hellip;]&quot;
      </literallayout>
    </formalpara>
    <note>
      <para>Ein begrenzter Bezeichner wie <command>&quot;FULLNAME&quot;</command> ist das Gleiche
	  wie die regulären Bezeichner <command>FULLNAME, fullname, FullName</command>, usw..  Der Grund
	  hierfür ist, dass Firebird alle regulären Namen in Großschreibung speichert, egal wie sie definiert
	  oder deklariert wurden. Begrenzte Bezeichner hingegen werden immer so gespeichert, wie sie definiert wurden.
	  Damit unterscheided sich <command>&quot;FullName&quot;</command> von <command>FULLNAME</command> 
	  und beispielsweise <command>FullName</command>.</para>
    </note>

  </section>


  <section id="fblangref25-structure-literals-de">
    <title>Literale</title>
    <para>Literale werden verwendet um Daten in einem bestimmten Format zu repräsentieren.
	Beispiele hierfür sind:</para>
    <literallayout class="monospaced">
          integer - 0, -34, 45;
          real - 0.0, -3.14, 3.23e-23;
          string - 'text', 'don''t!';
          date - DATE '10.01.2014';
          time - TIME '15:12:56';
          timestamp - TIMESTAMP '10.01.2014 13:32:02';
          null state - null
     </literallayout>
     <para>Wie Literale für die diversen Datentypen verwendet werden, wird im nächsten 
	 Abschnitt <link linkend="fblangref25-datatypes-de">Datentypen und Unterdatentypen</link> behandelt.</para>
  </section>

  <section id="fblangref25-structure-operators-de">
    <title>Operatoren und Sonderzeichen</title>
    <para>Einige Sonderzeichen sind für die Verwendung als Operator oder Separator reserviert.</para>
    <literallayout class="monospaced">
  &lt;special char&gt; ::= &lt;space&gt; | &quot; | % | &amp; | &apos; | ( | ) | * | + | , | - |
                     . | / | : | ; | &lt; | = | &gt; | ? | [ | ] | ^ | { | }
    </literallayout>
    <para>Einige dieser Zeichen, allein oder in Kombination, dürfen als Operatoren
    (arithmetisch, Zeichenkette, logisch), als SQL Befehlsseparatoren, zum Anführen von Bezeichnern und 
	zum Markieren von Begrenzungen von Zeichenketten oder Kommentaren verwendet werden.</para>
    <formalpara>
      <title>Syntax für Operatoren</title>
      <literallayout class="monospaced">
&lt;operator&gt; ::=
  &lt;string concatenation operator&gt; |
  &lt;arithmetic operator&gt; |
  &lt;comparison operator&gt; |
  &lt;logical operator&gt;

  &lt;string concatentation operator&gt; ::= {||}

  &lt;arithmetic operator&gt; ::= * | / | + | - |

  &lt;comparison operator&gt; ::=
  {=} | {&lt;&gt;} | {!=} | {~=} | {^=} |
  {&gt;} | {&lt;} | {&gt;=} | {&lt;=} | {!&gt;} | {~&gt;} | {^&gt;} |
  {!&lt;} | {~&lt;} | {^&lt;}

  &lt;logical operator&gt; ::= NOT | AND | OR
      </literallayout>
      <para>Für weitere Details zu Operatoren, vgl. <link linkend="fblangref25-commons-expressions-de">Ausdrücke</link>.</para>
    </formalpara>
  </section>
  <section id="fblangref25-structure-comments-de">
    <title>Kommentare</title>
    <para>Kommentare können in SQL-Skripten, -Statements und PSQL-Modulen eingefügt werden.
	Ein Kommentar kann dabei jede Art von Text sein, die der Autor üblicherweise zum 
	Dokumentieren seines Codes verwendet. Der Parser ignoriert Kommentartexte.</para>
    <para>Firebird unterstützt zwei Arten von Kommentaren: <command>block</command> 
    und <command>in-line</command>.</para>
    <formalpara>
      <title>Syntax</title>
      <literallayout class="monospaced">
  &lt;comment&gt; ::= &lt;block comment&gt; | &lt;single-line comment&gt;

  &lt;block comment&gt; ::=
  /* &lt;ASCII char&gt;[&lt;ASCII char&gt; &hellip;] */

  &lt;single-line comment&gt; ::=
    -- &lt;ASCII char&gt;[&lt;ASCII char> &hellip;]&lt;end line&gt;
      </literallayout>
    </formalpara>
    <para>Block-Kommentare starten mit Zeichenpaar <command>/*</command> und enden
    mit dem Zeichenpaar <command>*/</command>. Text innerhalb der Block-Kommentare
	kann jede Länge haben und darf aus mehreren Zeilen bestehen.</para>
    <para>In-line-Kommentare starten mit dem Zeichenpaar
    <command>--</command> und gelten bis zum Ende der Zeile.</para>
    
    <formalpara>
      <title>Beispiel</title>
      <programlisting>
  CREATE PROCEDURE P(APARAM INT)
  RETURNS (B INT)
  AS
  BEGIN
    /* This text will be ignored during the execution of the statement 
       since it is a comment
    */
    B = A + 1; -- In-line comment
    SUSPEND;
  END
      </programlisting>
    </formalpara>
  </section>
</chapter>
