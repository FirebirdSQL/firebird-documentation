<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE appendix PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../../../tools/docbook-dtd/docbookx.dtd">
<chapter id="fbodbc205-events-de">
  <title>Firebird-Ereignisse</title>
  <para>Um die Verwendung von Firebird-Ereignissen mit dem ODBC/JDBC-Treiber zu veranschaulichen, 
      verwenden wir die Beispieldatenbank <filename>employee.fdb</filename> und arbeiten mit der Tabelle 
      <database>SALES</database>. Diese Tabelle enthält einen <database>AFTER INSERT</database>-Trigger 
      <database>POST_NEW_ORDER</database>, der die Anweisung <database>POST_EVENT 'new_order';</database> 
      enthält. Seine Wirkung besteht darin, einem Listener auf der Clientseite zu signalisieren, wenn ein 
      neuer Datensatz in <database>SALES</database> übergeben wird.
  </para>
  <para>Nehmen wir an, dass die Tabelle auch einen <database>BEFORE UPDATE</database>-Trigger hat, der ein
  Ereignis "change_order" in nachfolgenden Operationen veröffentlicht, wenn das Feld 
  <database>ORDER_STATUS</database> geändert wird.
    <tip>
      <para>Der Trigger <database>BEFORE UPDATE</database> existiert nicht, dieses Szenario dient nur zur 
      Veranschaulichung, aber Sie könnten es erstellen, wenn Sie möchten:
        <programlisting>
CREATE OR ALTER TRIGGER BI_SALES FOR SALES
ACTIVE BEFORE UPDATE
AS BEGIN
  IF (NEW.ORDER_STATUS = 'new') THEN
  BEGIN
     NEW.ORDER_STATUS = 'open';
     POST_EVENT 'change_order';
  END
END
        </programlisting>
      </para>
    </tip>
  </para>
  <para>Für unsere Demo müssen wir einen neuen Datensatz in <database>SALES</database> einfügen. 
  Das Feld <database>ORDER_STATUS</database> auf dem neu eingefügten Datensatz enthält den Standardwert 
  'new'. Nach dem Festschreiben, indem das Ereignis 'new_order' gepostet wird, möchten wir zurückgehen 
  und etwas im neuen Datensatz ändern. Wenn Sie dies tun, überprüft unser 
  <database>BEFORE UPDATE</database>-Trigger <database>BI_SALES</database>, ob der Wert von 
  <database>ORDER_STATUS</database> immer noch 'new' ist und wenn ja, dann wird es in "open" ändern 
  und das Ereignis "change_order" veröffentlichen.</para>

  <note>
    <para>Es interessiert uns nicht wirklich, wie sich das Einfügen und Ändern des Datensatzes auf den 
        Datenbankzustand auswirkt. Die Idee hier ist, zu zeigen, wie der Treiber für die Verwaltung 
        von mehreren Ereignissen eingerichtet wird.</para>
  </note>
  <section id="fbodbc205-events-listener-de">
    <title>Den Treiber dazu veranlassen, auf Ereignisse zu warten</title>
    <para>Der erste Schritt zum Einrichten des Treibers für das Abhören von Ereignissen besteht darin, 
        eine Verbindung zu einer ODBC-Schnittstellendatei herzustellen, die die Verarbeitung von 
        Firebird-Ereignissen beschreibt:
      <literallayout class="monospaced">
#include &quot;OdbcUserEvents.h&quot;
      </literallayout>
    </para>
    <para>Als nächstes spezifizieren wir in der Tabelle <code>eventInfo</code> die Ereignisse, an denen 
    wir interessiert sind. Für unser Beispiel ist das Ereignis 'new_order' das einzige, an dem wir uns 
    zu diesem Zeitpunkt interessieren. Das Ereignis 'change_order' ist nur auf dem Bild zu sehen, um die 
    Fähigkeit des Treibers zu demonstrieren, mehrere Ereignisse zu verwalten.
      <programlisting>
ODBC_EVENT_INFO eventInfo[] =
{
 INIT_ODBC_EVENT(&quot;new_order&quot;),
 INIT_ODBC_EVENT(&quot;change_order&quot;)
};
      </programlisting>
    </para>

    <para>Nun müssen wir eine Struktur erstellen &mdash; die wir <code>MyUiqueData</code> nennen werden&mdash; 
    um die Datenaufgaben zu speichern, die an unserer Operation beteiligt sind. In unserem Beispiel wird 
    ein Feld <code>event_flag</code> ein Ereignis signalisieren, das vom Server geliefert wird. Unsere 
    Arbeit beginnt an dieser Stelle.
      <programlisting>
struct MyUniqueData
{
 int event_flag;
 //... andere Definitionen für die Verwendung in astRoutine
};
      </programlisting>
    </para>
    <para>Wir müssen eine Callback-Funktion erstellen, <code>astRoutine</code>, die aktiviert wird, wenn 
    in der <code>eventInfo</code>-Tabelle definierte Ereignisse markiert sind:
      <programlisting>
void astRoutine( void *userEventsInterfase, short length, char * updated )
{
    PODBC_USER_EVENTS_INTERFASE userInterfase = (PODBC_USER_EVENTS_INTERFASE)userEventsInterfase;
    SQLSetConnectAttr( userInterfase->hdbc, SQL_FB_UPDATECOUNT_EVENTS, (SQLPOINTER)updated, SQL_LEN_BINARY_ATTR( length ) );
    MyUniqueData &amp;myData = *(MyUniqueData*)userInterfase->userData;
    myData.event_flag++;
    printf( &quot;ast routine was called\n&quot; );
}
      </programlisting>
    </para>

    <para>Die Funktion muss einen Anruf haben:
      <programlisting>
  SQLSetConnectAttr( userInterfase->hdbc,
                       SQL_FB_UPDATECOUNT_EVENTS,
                       (SQLPOINTER)updated,
                       SQL_LEN_BINARY_ATTR( length ) );
      </programlisting>
      Dieser Aufruf wird benötigt, um den Status von Ereignissen in unserer Struktur 
      <code>eventInfo</code> zu aktualisieren. Diese Struktur hat ein Feld <code>countEvents</code>, 
      das eine Gesamtzahl von Ereignisoperationen verwaltet, und ein Boolesches Feld <code>changed</code>, 
      das auf Wahr gesetzt wird, wenn die 'vor'- und 'nach'-Werte von <code>countEvents</code> unterschiedlich sind.</para>

    <para>Wenn wir ein Ereignis, an dem wir interessiert sind, kennzeichnen möchten, geben wir folgenden Befehl aus:
      <literallayout class="monospaced">
    myData.event_flag++;
      </literallayout>
    Es bietet einen ziemlich primitiven Mechanismus zur Synchronisierung von Arbeitsabläufen, aber es ist ausreichend 
      für unsere Bedürfnisse. Seine Einrichtung ist wie folgt:
      <itemizedlist>
        <listitem>Zur Verbindungszeit oder beim Erstellen des DSN muss die Option <database>NOWAIT</database> auf 
        OFF gesetzt werden</listitem>
        <listitem>
          <para>Die folgenden Anweisungen müssen ausgegeben werden:
            <programlisting>
    // Geben Sie an, dass der Firebird ODBC-Cursor immer verwendet wird, und verbinden Sie ihn dann.
    SQLSetConnectAttr( hdbc, SQL_ATTR_ODBC_CURSORS, (SQLPOINTER)SQL_CUR_USE_DRIVER, 0 );
    SQLConnect( hdbc, (UCHAR*)connectString, SQL_NTS, NULL, 0, NULL, 0 );
            </programlisting>
          </para>
        </listitem>
        <listitem>
          <para>Zum Zweck unserer Demonstration müssen wir eine SQL-Cursor-Anfrage vorbereiten. 
              Ihr eigenes, realistisches Szenario wäre natürlich weniger trivial.
            <programlisting>
    SQLPrepare( stmtSel, (UCHAR*)
  &quot;SELECT po_number&quot;
  &quot; FROM sales&quot;
                &quot; WHERE order_status = 'new'&quot;
  &quot; FOR UPDATE&quot;,
  SQL_NTS );
            </programlisting>
          </para>
        </listitem>
        <listitem>
          <para>Wir konstruieren die Cursor-Abfrage für unsere Demo und nennen sie 'C':
            <programlisting>
    char *cursor = &quot;C&quot;;
    SQLSetCursorName( stmtSel, (UCHAR*)cursor, sizeof( cursor ) );

    SQLPrepare( stmtUpd, (UCHAR*)
  &quot;UPDATE sales&quot;
                &quot; SET order_status = 'open'&quot;
  &quot; WHERE CURRENT OF C&quot;,
         SQL_NTS );
            </programlisting>
          </para>
        </listitem>

        <listitem>
          <para>Initialisieren Sie die Struktur <code>ODBC_EVENTS_BLOCK_INFO</code> als die Ereignisschnittstelle, 
          die an den Treiber übergeben wird:
            <programlisting>
    myData.event_flag = 0;
    ODBC_EVENTS_BLOCK_INFO eventsBlockInfo = INIT_EVENTS_BLOCK_INFO( hdbc, eventInfo, astRoutine, &amp;myData );
    SQLSetConnectAttr( hdbc, SQL_FB_INIT_EVENTS, (SQLPOINTER)&amp;eventsBlockInfo, SQL_LEN_BINARY_ATTR((int)sizeof( eventsBlockInfo )) );
    - to inform connection, that we are ready to accept events.
    SQLSetConnectAttr( hdbc, SQL_FB_REQUEUE_EVENTS, (SQLPOINTER)NULL, 0 );
            </programlisting>
          </para>
        </listitem>

        <listitem>
          <para>Ereignisse beginnen ...
            <programlisting>
    while ( !iret )
    {
        // Wenn das Ereignis ausgelöst wurde, den Puffer zurücksetzen und neu einreihen
 if ( myData.event_flag )
 {
     myData.event_flag = 0;
     // Suchen Sie nach dem ersten ast_call. Mit isc_que_events 
     // wird jedes Ereignis ausgelöst, um die Verarbeitung zu starten
     if ( first )
          first = 0;
     else
     {
  // Wählen Sie eine Abfrage aus, um nach ausgelösten Ereignissen zu suchen
  ret = SQLExecute( stmtSel );
  for (;;)
  {
   ret = SQLFetch( stmtSel );
   if ( ret == SQL_NO_DATA_FOUND )
    break;
   ret = SQLExecute( stmtUpd );
  }
     /* Warteschlange für das nächste Ereignis */
     SQLSetConnectAttr( hdbc, SQL_FB_REQUEUE_EVENTS, (SQLPOINTER)NULL, 0 );
     /* Das blockiert nicht, aber als Beispielprogramm gibt es für 
     ** uns nichts anderes, also machen wir ein Nickerchen
     */
     Sleep(1000);
 }
    }
            </programlisting>
          </para>
        </listitem>
      </itemizedlist>
    </para>

  </section> <!-- fbodbc205-events-listener -->

</chapter>