<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../../tools/docbook-dtd/docbookx.dtd">
<article id="gbak">
  <title>Firebird Backup &amp; Restore Utility</title>

  <titleabbrev>Gbak - Firebird Backup &amp; Restore Utility</titleabbrev>

  <articleinfo>
    <date>20 October 2009</date>

    <author>
      <firstname>Norman</firstname>

      <surname>Dunbar</surname>
    </author>

    <edition>11 October 2011 - Document version 1.6</edition>
  </articleinfo>

  <section id="gbak-intro">
    <title>Introduction</title>

    <para><application>Gbak</application> is one of the database backup and
    restore utilities supplied with Firebird. In Firebird 1.5 it is the only
    supplied utility of this kind while Firebird 2.x also has the
    <application>nbackup</application> utility which is described in another
    document.</para>

    <para>In this manual, we will discuss:</para>

    <itemizedlist spacing="compact">
      <listitem>
        <para>Command-line options for <application>gbak</application>.</para>
      </listitem>

      <listitem>
        <para><application>gbak</application> commands and their
        parameters.</para>
      </listitem>

      <listitem>
        <para>Running <application>gbak</application> in backup or restore
        modes.</para>
      </listitem>

      <listitem>
        <para>Some caveats, gotchas and foibles of
        <application>gbak</application>.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section id="gbak-cmdline">
    <title>Command-line Options</title>

    <section id="gbak-cmdline-common">
      <title>Common Options</title>

      <para>When running <application>gbak</application> in backup or restore
      mode, there are a number of options which apply to either mode. These
      are:</para>

      <itemizedlist spacing="normal">
        <listitem>
          <para><userinput>-?</userinput></para>

          <para>This switch displays the command line options and switches. It
          replaces the old method in which you had to supply an invalid switch
          (see <userinput>-help</userinput> below) in order to see the list of
          valid ones.</para>

          <note>
            <para>Firebird 2.5 onwards.</para>
          </note>
        </listitem>

        <listitem>
          <para><userinput>-FE[TCH_PASSWORD] &lt;password file name&gt; |
          stdin | /dev/tty</userinput></para>

          <para>This switch causes the password for the appropriate user to be
          read from a file as opposed to being specified on the command line.
          The file name supplied is <emphasis>not</emphasis> in quotes and
          must be readable by the user running
          <application>gbak</application>. If the file name is specified as
          <filename>stdin</filename>, then the user will be prompted for a
          password. On POSIX systems, the file name <filename
          class="devicefile">/dev/tty</filename> will also result in a prompt
          for the password.</para>

          <note>
            <para>Firebird 2.5 onwards.</para>
          </note>
        </listitem>

        <listitem>
          <para><userinput>-M[ETA_DATA]</userinput></para>

          <para>This switch causes your data to be ignored and not backed up
          or restored. In a backup, only the database meta data are backed up.
          When used in a restore, any data in the dump file will not be
          restored. This switch can be used when creating database clones
          which are required to contain only the <database>tables</database>,
          <database>indices</database> etc but none of the data.</para>
        </listitem>

        <listitem>
          <para><userinput>-PAS[SWORD] &lt;password&gt;</userinput></para>

          <para>Supplies the password for the username specified above. This
          need not be supplied if <envar>ISC_PASSWORD</envar> environment
          variable exists and has the correct value.</para>
        </listitem>

        <listitem>
          <para><userinput>-RO[LE] &lt;SQL role name&gt;</userinput></para>

          <para>Allows the specification of the role to be used by the
          connecting user. Not of much practical use and is not normally used
          in practice.</para>
        </listitem>

        <listitem>
          <para><userinput>-U[SER] &lt;username&gt;</userinput></para>

          <para>Allows the username of the SYSDBA or database owner user to be
          specified if the database is to be backed up, or, in the case of a
          restore (with the <userinput>-c[reate]</userinput> switch
          specified), any valid username can be specified. This need not be
          supplied if <envar>ISC_USER</envar> environment variable exists and
          has a correct value for the username.</para>

          <para>Databases can only be backed up by SYSDBA or the database
          owner. A restore can also be carried out by SYSDBA or the database
          owner, however, if the <userinput>-c(reate)</userinput> switch is
          used, <emphasis>any</emphasis> validated username can create a new
          database from a backup file.</para>
        </listitem>

        <listitem>
          <para><userinput>-V[ERIFY]</userinput></para>

          <para>Normally <application>gbak</application> operates quietly with
          no information written to the display. This switch reverses that
          situation and causes lots of information to be displayed. The
          default is to display the output to the screen, but you can redirect
          the output to a log file using the <userinput>-y</userinput>
          switch.</para>
        </listitem>

        <listitem>
          <para><userinput>-Y &lt;filename&gt; or the text
          "suppress"</userinput></para>

          <para>Used in conjunction with the <userinput>-v[erify]</userinput>
          switch to redirect status messages to a file or device, rather than
          the screen, or to suppress them altogether.</para>

          <para>If <userinput>-y suppress</userinput> is used, then no
          information will be written to screen regardless of whether
          <userinput>-v[erify]</userinput> is specified.</para>

          <para>If a filename is given <emphasis>and</emphasis> the
          <userinput>-v[erify]</userinput> switch is specified, the file will
          be written to record progress, errors etc.</para>

          <warning>
            <para>All known documentation on this switch mentions that the
            text should be <userinput>"suppress_output"</userinput> rather
            than <userinput>"suppress"</userinput>. This is an error in the
            documentation as the source code for
            <application>gbak</application> shows that the switch must be
            <userinput>"suppress</userinput>".</para>
          </warning>

          <warning>
            <para>The log file must not exist. If it does, the backup or
            recovery operation will fail:</para>

            <screen>tux&gt; rm employee.log
tux&gt; gbak -backup employee.fdb employee.fbk -y employee.log -v

tux&gt; ls -l employee.log
-rw-r--r-- 1 firebird firebird 21610 2010-08-04 10:22 employee.log

tux&gt; gbak -backup employee.fdb employee.fbk -y employee.log -v
gbak:cannot open status and error output file employee.log
</screen>
          </warning>
        </listitem>

        <listitem>
          <para><userinput>-Z</userinput></para>

          <para>This option displays some information about the version of
          <application>gbak</application> being used, and optionally, a
          database. To obtain the version of <application>gbak</application>
          only, run the command as follows:</para>

          <screen>tux&gt; gbak -z

gbak:gbak version LI-V2.5.0.26074 Firebird 2.5
gbak: ERROR:requires both input and output filenames
gbak:Exiting before completion due to errors

tux&gt; echo $?
1
</screen>

          <para>This displays the current version of
          <application>gbak</application>, and after displaying a couple of
          error messages, exits with an error code of 1 as shown above by the
          <command>echo</command> command. This method does not attempt to
          backup any databases and does not require a username and password to
          be defined or supplied.</para>

          <para>If you wish to display the version number of the
          <application>gbak</application> utility and also details of
          database, you must supply a valid database name
          <emphasis>and</emphasis> backup filename, as follows:</para>

          <screen>tux&gt; gbak -z employee employee.fbk -user sysdba -password secret

gbak:gbak version LI-V2.1.3.18185 Firebird 2.1
gbak:    Version(s) for database employee
Firebird/linux (access method),version LI-V2.1.3.18185 Firebird 2.1
Firebird/linux (remote server),version LI-V2.1.3.18185
Firebird 2.1/tcp (tux)/P11
Firebird/linux (remote interface), version LI-V2.1.3.18185
Firebird 2.1/tcp (tux)/P11
on disk structure version 11.1

tux&gt; echo $?
0
</screen>

          <para>You will note from the above that a valid username and
          password must be defined on the command line, or by the use of
          environment variables <envar>ISC_USER</envar> and
          <envar>ISC_PASSWORD</envar>. This version of the command will exit
          with a error code of zero.</para>

          <warning>
            <para>This method of calling <application>gbak</application>
            <emphasis>will</emphasis> make a backup of the database. If your
            database is large, this can take some time to complete and the
            backup file specified <emphasis>will</emphasis> be overwritten if
            it already exists. Beware.</para>
          </warning>

          <note>
            <para>The output above has been slightly abbreviated to allow it
            to fit the page width for a pdf.</para>
          </note>
        </listitem>

        <listitem>
          <para><userinput>-help</userinput></para>

          <para>Help is actually not a valid option, but can be used to
          display the following screen of information as output from
          <application>gbak</application> in Firebird 2.0:</para>
        </listitem>
      </itemizedlist>

      <screen>gbak:legal switches are:
        -B[ACKUP_DATABASE]    backup database to file
        -BU[FFERS]            override page buffers default
        -C[REATE_DATABASE]    create database from backup file
        -CO[NVERT]            backup external files as tables
        -E[XPAND]             no data compression
        -FA[CTOR]             blocking factor
        -G[ARBAGE_COLLECT)    inhibit garbage collection
        -I[NACTIVE]           deactivate indexes during restore
        -IG[NORE]             ignore bad checksums
        -K[ILL]               restore without creating shadows
        -L[IMBO]              ignore transactions in limbo
        -M[ETA_DATA]          backup metadata only
        -MO[DE] &lt;access&gt;      "read_only" or "read_write" access
        -N[O_VALIDITY]        do not restore database validity conditions
        -NOD[BTRIGGERS]       do not run database triggers
        -NT                   Non-Transportable backup file format
        -O[NE_AT_A_TIME]      restore one table at a time
        -OL[D_DESCRIPTIONS]   save old style metadata descriptions
        -P[AGE_SIZE]          override default page size
        -PAS[SWORD]           Firebird password
        -R[ECREATE_DATABASE]  [O[VERWRITE]] create (replace if O[VERWRITE] used)
                                database from backup file
        -REP[LACE_DATABASE]   replace database from backup file
        -RO[LE]               Firebird SQL role
        -SE[RVICE]            use services manager
        -T[RANSPORTABLE]      transportable backup -- data in XDR format
        -USE_[ALL_SPACE]      do not reserve space for record versions
        -USER                 Firebird user name
        -V[ERIFY]             report each action taken
        -Y  &lt;path&gt;            redirect/suppress status message output
        -Z                    print version number
</screen>

      <note>
        <para>The explanation of the <userinput>-m[eta_data]</userinput>
        switch implies that it is useful in a backup situation only. This is
        not the case as it can also be used on a restore.</para>
      </note>

      <para>From Firebird 2.5 onwards, there is a new
      <userinput>-?</userinput> switch to display the list of valid options.
      The output has slightly different layout and a couple of new options
      have been added:</para>

      <screen>gbak:legal switches are:
        -B(ACKUP_DATABASE)    backup database to file
        -C(REATE_DATABASE)    create database from backup file (restore)
        -R(ECREATE_DATABASE) [O(VERWRITE)] create (or replace if OVERWRITE used)
                                database from backup file (restore)
        -REP(LACE_DATABASE)   replace database from backup file (restore)

gbak:backup options are:
        -CO(NVERT)            backup external files as tables
        -E(XPAND)             no data compression
        -FA(CTOR)             blocking factor
        -G(ARBAGE_COLLECT)    inhibit garbage collection
        -IG(NORE)             ignore bad checksums
        -L(IMBO)              ignore transactions in limbo
        -NOD(BTRIGGERS)       do not run database triggers
        -NT                   Non-Transportable backup file format
        -OL(D_DESCRIPTIONS)   save old style metadata descriptions
        -T(RANSPORTABLE)      transportable backup -- data in XDR format

gbak:restore options are:
        -BU(FFERS)            override page buffers default
        -FIX_FSS_D(ATA)       fix malformed UNICODE_FSS data
        -FIX_FSS_M(ETADATA)   fix malformed UNICODE_FSS metadata
        -I(NACTIVE)           deactivate indexes during restore
        -K(ILL)               restore without creating shadows
        -MO(DE) &lt;access&gt;      "read_only" or "read_write" access
        -N(O_VALIDITY)        do not restore database validity conditions
        -O(NE_AT_A_TIME)      restore one table at a time
        -P(AGE_SIZE)          override default page size
        -USE_(ALL_SPACE)      do not reserve space for record versions

gbak:general options are:
        -FE(TCH_PASSWORD)     fetch password from file
        -M(ETA_DATA)          backup or restore metadata only
        -PAS(SWORD)           Firebird password
        -RO(LE)               Firebird SQL role
        -SE(RVICE)            use services manager
        -USER                 Firebird user name
        -V(ERIFY)             report each action taken
        -Y  &lt;path&gt;            redirect/suppress status message output
        -Z                    print version number
</screen>

      <para>The parentheses shown in the above indicates how much of the
      switch name you need to use in order to avoid ambiguity. Once you have
      specified the absolute minimum - the part before the opening '[' - you
      can use as much of what follows as you wish. For example, to use the
      <userinput>-b[ackup_database]</userinput> switch the minimum you must
      supply on the command line is <userinput>-b</userinput> but anything
      between <userinput>-b</userinput> and
      <userinput>-backup_database</userinput> will be accepted.</para>

      <para>Using the <userinput>-help</userinput> switch like this, or any
      other invalid switch, will cause <application>gbak</application> to exit
      with an error code of 1 on Linux and Windows.</para>
    </section>

    <section id="gbak-cmdline-backup">
      <title>Backup Switches</title>

      <note>
        <para>When running <application>gbak</application>, if the
        <emphasis>first</emphasis> filename is a database name, or database
        alias then <application>gbak</application> will default to taking a
        backup of the database in transportable format. The backup file will
        be named as per the second file name supplied on the command
        line.</para>
      </note>

      <para>When carrying out a backup of a database, the following switches,
      in addition to the common ones above, will be of use:</para>

      <itemizedlist spacing="normal">
        <listitem>
          <para><userinput>-B[ACKUP_DATABASE]</userinput></para>

          <para>This switch is used whenever you wish to take a backup of a
          database.</para>
        </listitem>

        <listitem>
          <para><userinput>-CO[NVERT]</userinput></para>

          <para>This switch causes any tables, defined as
          <database>external</database>, to be backed up as if they were
          normal (non-external) tables. When this dump file is used to restore
          a database, the tables that were external in the original database
          will no longer be external.</para>
        </listitem>

        <listitem>
          <para><userinput>-E[XPAND]</userinput></para>

          <para>Normally, <application>gbak</application> will compress the
          output file. This switch prevents that compression from taking
          place.</para>
        </listitem>

        <listitem>
          <para><userinput>-FA[CTOR] &lt;block size&gt;</userinput></para>

          <para>If backing up to a physical tape device, this switch lets you
          specify the tape's blocking factor.</para>
        </listitem>

        <listitem>
          <para><userinput>-G[ARBAGE_COLLECT]</userinput></para>

          <para>The use of this switch prevents Firebird's garbage collection
          from taking place while <application>gbak</application> is running.
          Normally <application>gbak</application> connects to the database as
          any other connection would and garbage collection runs normally.
          Using this switch prevents garbage collection from running during
          the course of the backup.</para>
        </listitem>

        <listitem>
          <para><userinput>-IG[NORE]</userinput></para>

          <para>This switch causes gbak to ignore bad checksums in the
          database. This can be used to attempt to backup a database that
          failed due to checksum errors. There is no guarantee that the data
          will be usable though, so it is best to take other precautions to
          preserve your data.</para>
        </listitem>

        <listitem>
          <para><userinput>-L[IMBO]</userinput></para>

          <para>If you have a two-phase transaction (across two different
          databases) that failed because a server died before the commit, but
          after the changes were made, you have a limbo transaction. This
          switch forces the backup to ignore data from such broken
          transactions. It should not be used for normal backups and only
          used, like the <userinput>-ig[nore]</userinput> switch to attempt to
          recover from a failure.</para>
        </listitem>

        <listitem>
          <para><userinput>-M[ETA_DATA]</userinput></para>

          <para>See above.</para>
        </listitem>

        <listitem>
          <para><userinput>-NT</userinput></para>

          <para>This switch turns off the
          <userinput>-t[ransportable]</userinput> switch (which is on by
          default) and causes the dump file to be created using platform
          dependent formats. If you use this switch to create a backup then
          you can only restore the backup on a similar platform. You cannot,
          for example, take a dump file from Linux over to a Windows
          server.</para>
        </listitem>

        <listitem>
          <para><userinput>-OL[D_DESCRIPTIONS]</userinput></para>

          <para>This switch is unlikely to be used. It has been deprecated.
          Its purpose is to force the backup to be made using the older
          InterBase versions' format of meta data descriptions.</para>
        </listitem>

        <listitem>
          <para><userinput>-PAS[SWORD] &lt;password&gt;</userinput></para>

          <para>See above.</para>
        </listitem>

        <listitem>
          <para><userinput>-RO[LE] &lt;role name&gt;</userinput></para>

          <para>See above.</para>
        </listitem>

        <listitem>
          <para><userinput>-SE[RVICE] &lt;servicename&gt;</userinput></para>

          <para>This switch causes <application>gbak</application> to backup a
          remote database via the service manager. This causes the backup file
          to be created on the remote server, so the path format and filename
          must be valid on the remote server. The servicename is currently
          always the text <userinput>service_mgr</userinput>.</para>
        </listitem>

        <listitem>
          <para><userinput>-T[RANSPORTABLE]</userinput></para>

          <para>The default dump file format is transportable. Transportable
          backup files are written in a format known as <emphasis>external
          data representation</emphasis> (XDR) format and it is this format
          which allows a dump taken on a server of one type to be successfully
          restored on a server of another type.</para>
        </listitem>

        <listitem>
          <para><userinput>-USER &lt;username&gt;</userinput></para>

          <para>See above.</para>
        </listitem>

        <listitem>
          <para><userinput>-V[ERIFY] </userinput></para>

          <para>See above.</para>
        </listitem>

        <listitem>
          <para><userinput>-Y &lt;full name of log file&gt; or the text
          "suppress"</userinput></para>

          <para>See above.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section id="gbak-cmdline-restore">
      <title>Restore Switches</title>

      <note>
        <para>When running a
        <application><application>gbak</application></application> command, if
        the <emphasis>first</emphasis> filename is a database backup file name
        then <application><application>gbak</application></application> will
        default to running a recovery of the database provided that you
        specify one of <userinput>-c[create database]</userinput>,
        <userinput>-rep[lace_database]</userinput> or
        <userinput>-r[ecreate_database]</userinput> in order to make your
        intentions clear. The database will be restored to whatever file name
        is specified as the second file name on the command line..</para>
      </note>

      <para>When carrying out a restore or replacement of a database, the
      following switches, in addition to the common ones above, will be of
      use:</para>

      <itemizedlist spacing="normal">
        <listitem>
          <para><userinput>-BU[FFERS] &lt;number of
          buffers&gt;</userinput></para>

          <para>This switch sets the default database cache size (in number of
          database pages) for the database being restored. If a database is
          being overwritten then this setting will overwrite the previous
          setting for the cache size.</para>
        </listitem>

        <listitem>
          <para><userinput>-C[REATE_DATABASE]</userinput></para>

          <para>This switch causes a new database to be created from the
          backup file. The database file must not exist or the restore will
          fail. Either this switch or
          <userinput>-rep[lace_database]</userinput> or
          <userinput>-r[ecreate_database]</userinput> must be
          specified.</para>
        </listitem>

        <listitem>
          <para><userinput>-FIX_FSS_D[ATA]</userinput></para>

          <para>This switch forces <application>gbak</application> to fix
          malformed UNICODE_FSS character data during a restore.</para>

          <para>This switch, and the following one, should not be required
          under normal circumstances. However, if a restore operation fails
          with a "malformed string" error, the message output from
          <application>gbak</application> will refer the user to one or both
          of these switches to fix the malformed UNICODE_FSS data or meta data
          as appropriate.</para>

          <note>
            <para>Firebird 2.5 onwards.</para>
          </note>
        </listitem>

        <listitem>
          <para><userinput>-FIX_FSS_M[ETADATA]</userinput></para>

          <para>This switch forces <application>gbak</application> to fix
          malformed UNICODE_FSS metadata during a restore.</para>

          <para>This switch, and the preceding one, should not be required
          under normal circumstances. However, if a restore operation fails
          with a "malformed string" error, the message output from
          <application>gbak</application> will refer the user to one or both
          of these switches to fix the malformed UNICODE_FSS data or meta data
          as appropriate.</para>

          <note>
            <para>Firebird 2.5 onwards.</para>
          </note>
        </listitem>

        <listitem>
          <para><userinput>-I[NACTIVE]</userinput></para>

          <para>This switch can be used to restore a database when a previous
          restore attempt failed due to index errors. All indexes in the
          restored database will be inactive.</para>
        </listitem>

        <listitem>
          <para><userinput>-K[ILL]</userinput></para>

          <para>This switch restores the database but doesn't recreate any
          shadow files that existed previously.</para>
        </listitem>

        <listitem>
          <para><userinput>-M[ETA_DATA]</userinput></para>

          <para>See above.</para>
        </listitem>

        <listitem>
          <para><userinput>-MO[DE] &lt;access&gt;</userinput></para>

          <para>This switch allows the database being restored to be set to
          the given access mode when opened. By default, the mode is taken
          from the database that was dumped.</para>
        </listitem>

        <listitem>
          <para><userinput>-N[O_VALIDITY]</userinput></para>

          <para>This switch is similar to the
          <userinput>-i[nactive]</userinput> switch above, except, it disabled
          all <emphasis>check</emphasis> constraints in the restored
          database.</para>
        </listitem>

        <listitem>
          <para><userinput>-NOD[BTRIGGERS]</userinput></para>

          <para>New switch from Firebird 2.1 which prevents the
          <emphasis>database triggers</emphasis> from firing on a restore.
          Database triggers are a new feature in Firebird 2.0 onwards and are
          different from <emphasis>table triggers</emphasis> which will
          continue to fire.</para>
        </listitem>

        <listitem>
          <para><userinput>-O[NE_AT_A_TIME]</userinput></para>

          <para>This switch causes the restore to restore one table at a time.
          This can be useful when a previous restore failed due to data
          errors. Normally, a restore takes place in a single transaction with
          a single commit at the end of the restore. If the restore is
          interrupted for any reason, an empty database is the end result.
          Using the <userinput>-o[ne_at_a_time]</userinput> option uses a
          transaction for each table and commits after each table has been
          restored.</para>
        </listitem>

        <listitem>
          <para><userinput>-P[AGE_SIZE] &lt;new page
          size&gt;</userinput></para>

          <para>Use this switch to change the default database page size. By
          default, the database is restored using a page size the same as the
          one that was in use when the database was dumped.</para>
        </listitem>

        <listitem>
          <para><userinput>-PAS[SWORD] &lt;password&gt;</userinput></para>

          <para>See above.</para>
        </listitem>

        <listitem>
          <para><userinput>-R[ECREATE_DATABASE]
          [O[VERWRITE]]</userinput></para>

          <para>New from Firebird 2.x. Create (or replace if
          <userinput>o[verwrite]</userinput> is used) the named database from
          the backup file. The database filename should not already exist or
          an error will occur. This is not the case if the
          <userinput>o[verwrite]</userinput> option is also used.</para>

          <para>This is a new switch and is deliberately abbreviated to
          <userinput>-r</userinput> to try to prevent unsuspecting DBAs from
          overwriting an existing database thinking that the
          <userinput>-r</userinput> was abbreviated from
          <userinput>-restore</userinput>. Now, it takes special effort to
          manage this especially as <userinput>-restore</userinput> was never
          actually a valid switch; <userinput>-r</userinput> was in fact an
          abbreviation of <userinput>-replace_database</userinput> and it did
          this by <emphasis>first</emphasis> deleting the existing database
          file and <emphasis>then</emphasis> recreating it from the
          backup.</para>

          <para>Using <userinput>-r[ecreate_database] o[verwrite]</userinput>
          is effectively the same as using
          <userinput>-rep[lace_database]</userinput>.</para>
        </listitem>

        <listitem>
          <para><userinput>-REP[LACE_DATABASE]</userinput></para>

          <para>Replace database from backup file. This switch used to be
          abbreviated to <userinput>-r</userinput> in previous (to Firebird
          2.x) versions. This switch will be removed in a version of Firebird
          later than 2.1.3 (where it still exists). You are advised to use the
          <userinput>-r[ecreate_database] o[verwrite]</userinput> switch
          instead.</para>
        </listitem>

        <listitem>
          <para><userinput>-SE[RVICE] &lt;servicename&gt;</userinput></para>

          <para>Use the services manager on a remote database to restore a
          remote database. The servicename is currently always the text
          <userinput>service_mgr</userinput>.</para>
        </listitem>

        <listitem>
          <para><userinput>-USE_[ALL_SPACE]</userinput></para>

          <para>This switch forces the restore to use 100% of each database
          page and thus not leave room for changes. By default, 80% of a page
          is used and 20% kept for changes. This switch is likely to be only
          of practical use where the database is created and used in read-only
          mode.</para>
        </listitem>

        <listitem>
          <para><userinput>-USER &lt;username&gt;</userinput></para>

          <para>See above.</para>
        </listitem>

        <listitem>
          <para><userinput>-V[ERIFY]</userinput></para>

          <para>See above.</para>
        </listitem>

        <listitem>
          <para><userinput>-Y &lt;name of log file&gt;</userinput></para>

          <para>See above.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section id="gbak-backup">
    <title>Backup Mode</title>

    <para>Before you consider using other tools to take a backup of your
    Firebird database, make sure that you know what the tools do and how a
    running database will be affected by them. For example, if you use
    <application>Winzip</application> to create a compressed copy of a
    database and you do it when users are accessing the system, the chances of
    a successful restore of that database are slim. You must either always use
    the <application>gbak</application> or <application>nbackup</application>
    tools which know how the database works, or, use
    <application>gfix</application> to shut the database down completely
    before you even attempt to backup the database file(s).</para>

    <para><application>Gbak</application> creates a consistent backup of the
    database by starting a transaction that spans the backup period. When the
    backup is complete, the transaction is ended and this means that the
    backup process can be run while users are working in the database.
    However, any transactions started after the backup process begins will not
    have any of the changed data written to the backup file. The backup will
    represent a copy of the entire database at the moment the backup
    began.</para>

    <para>The dump file created by a default <application>gbak</application>
    backup is cross platform (transportable) so a backup taken on a Windows
    server can be used to recreate the same database on a Linux server, or on
    any other platform supported by Firebird. This is not true of the copies
    of your database taken (while the database was closed!) with tools such as
    <application>Winzip</application> etc. Those copies should only ever be
    used to restore a database on the same platform as the one copied.</para>

    <important>
      <para>Always backup the database with the version of
      <application>gbak</application> supplied with the running database
      server.</para>
    </important>

    <para>And one final thought on backups, regardless of the fact that the
    backup finished with no errors, exited with an error code of zero and all
    appears to be well, how do you actually know that the backup file created
    is usable? The short answer is, you don't. Whenever you have a valuable
    database - and they all should be - you are strongly advised to take your
    backup files and use them to create a test restore of a database either on
    the same server or even better, on a different one. Only by doing this can
    you be certain of a successful backup.</para>

    <para>The following example shows a backup being taken on a server named
    <emphasis>linux</emphasis> and used to create a clone of the database on
    another Linux server named <emphasis>tux</emphasis> to make sure that all
    was well. First of all, the backup on <emphasis>linux</emphasis>:</para>

    <screen>linux&gt; gbak -backup -verify -y backup.log employee employee.fbk
linux&gt; gzip -9 employee.fbk
</screen>

    <note>
      <para>Note that the above <application>gbak</application> command can be
      written as follows, leaving out the <userinput>-b[ackup]</userinput>
      switch as <application>gbak</application> defaults to running a backup
      when no other suitable switches are specified:</para>

      <screen>linux&gt; gbak -verify -y backup.log employee employee.fbk</screen>
    </note>

    <para>Then, on the <emphasis>tux</emphasis> server:</para>

    <screen>tux&gt; scp norman@linux:employee.fbk.gz ./

Using keyboard-interactive authentication.
Password:
employee.fbk.gz           |         19 kB |  19.3 kB/s | ETA: 00:00:00 | 100%

tux&gt; gunzip employee.fbk.gz
tux&gt; gbak -replace -verify -y restore.log employee.fbk employee.restore.test
</screen>

    <para>At this point, the restore has worked and has overwritten the
    previous database known as
    <database>employee.restore.test</database>.</para>

    <para>The actual location of the database for the database
    <database>employee.restore.test</database> is defined in the
    <filename>aliases.conf</filename> file in <filename
    class="directory">/opt/firebird</filename> on the server. In this test, it
    resolves to
    <filename>/opt/firebird/databases/employee.restore.fdb</filename>.</para>

    <para>For further proof of reliability, the application may be tested
    against this clone of the live database to ensure all is well.</para>
  </section>

  <section id="gbak-restore">
    <title>Restore Mode</title>

    <para>Backups taken with the <application>gbak</application> application
    from one version of Firebird - or InterBase - can be used by later
    versions of Firebird to restore the database, however, while this may
    result in an upgrade to the On Disc Structure (ODS) for the database in
    question, the SQL Dialect will never be changed. If you backup an
    InterBase dialect 1 database and then use the dump file to recreate it
    under Firebird 2.1, for example, the ODS will be updated to 11.1 but the
    SQL Dialect will remain as 1.</para>

    <important>
      <para>Always restore the database with the version of
      <application>gbak</application> supplied with the database server you
      wish to run the (new) database under. However,
      <application>gbak</application> from Firebird 2.1 can be used to restore
      a database onto any version of Firebird.</para>
    </important>

    <para>You can change the SQL Dialect using
    <application>gfix</application>.</para>

    <para>Under normal circumstances, restoring a database takes place as a
    single transaction. If the restore is successful, a commit at the end
    makes the data permanent, if not, the database will be empty at the
    end.</para>

    <para>The restore option <userinput>-o[ne_at_a_time]</userinput> will use
    a transaction for each table and if the table is restored with no errors,
    a commit is executed rendering that table permanent regardless of what
    happens with subsequent tables.</para>

    <section id="gbak-restore-recreate">
      <title>Restore Or Recreate?</title>

      <para>Should a database be restored or replaced? Restoring a database is
      the process by which you take the existing file and delete prior to
      replacing it on disc with a backup copy. Gbak does this when you specify
      the <userinput>-r[ecreate_database] o[verwrite]</userinput> switch or
      the <userinput>-rep[lace_database]</userinput> switch. What is the
      difference?</para>

      <para>If a database exists on disc and you ask
      <application>gbak</application> to restore it using one of the two
      switches above, you might corrupt the database especially if the
      database is in use and has not been shut down using
      <application>gfix</application>. In addition, if you have only partially
      completed the restore of a database, and some users decide to see if
      they can login, the database may well be corrupted.</para>

      <para>Finally, if the restore process discovers that the dump file is
      corrupt, the restore will fail and your previously working database will
      be gone forever.</para>

      <para>It can be seen that restoring a database can be a fraught
      experience.</para>

      <para>For security, always recreate the database with a new name - a
      clone - and update the <filename>aliases.conf</filename> to reflect the
      new name. This way, your users will always refer to the database by the
      alias regardless of the actual filename on the server.</para>
    </section>

    <section id="gbak-restore-malformed-strings">
      <title>Malformed String Errors During Restores</title>

      <para>During a restore operation, most likely when restoring a backup
      taken using an older <application>gbak</application> version, it is
      possible to see failure messages, in <application>gbak</application>'s
      output, indicating malformed Unicode strings. The reason that these may
      occur is as explained by Helen Borrie:</para>

      <blockquote>
        <para>The source text of stored procedures (and several other types of
        object, such as CHECK constraints) is stored in a blob, as is the
        "compiled" BLR code. When you restore a database, the BLR is not
        recreated: the same BLR is used until next time you recreate or alter
        the object. </para>

        <para>Historically, the engine did not do the right thing regarding
        the transliteration of strings embedded in the source and the BLR. In
        v.2.1 and 2.5 a lot of work was done to address the international
        language issues, as you probably know. A side effect of this was that
        everything that was read from data and meta data became subject to
        "well-formedness" checks. Hence, on restoring, those previously stored
        source and BLR objects are throwing "malformed string" errors when
        <application>gbak</application> tries to read and write the data in
        these system table records. This very old bug affects user blobs, too,
        if they have been stored using character set NONE and the client is
        configured to read a specified character set to which the stored data
        could not be transliterated. </para>

        <para>In v.2.1 there were scripts in <filename
        class="directory">../misc</filename> that you could run to repair the
        meta data blobs and also use as a template for repairing the similar
        errors in blobs in your user data. The repair switches were added to
        the <application>gbak</application> restore code in v.2.5 to do the
        same corrections to meta data and data, respectively, during the
        process of restoring a database for upgrade. </para>
      </blockquote>
    </section>
  </section>

  <section id="gbak-security">
    <title>Security Of Backups</title>

    <para>As you have seen above anyone, with a valid username and password,
    can restore a <application>gbak</application> database dump file provided
    that they are not overwriting an existing database. This means that your
    precious data can be stolen and used by nefarious characters on their own
    servers, to create a copy of your database and see what your sales
    figures, for example, are like.</para>

    <para>To try and prevent this from happening, you are advised to take
    precautions. You should also try and prevent backups from being
    accidentally overwritten before they have expired. Some precautions you
    can take are:</para>

    <itemizedlist spacing="compact">
      <listitem>
        <para>Always set the dump file to be read-only after the backup is
        complete. This helps prevent the file from being overwritten.</para>
      </listitem>

      <listitem>
        <para>Alternatively, incorporate the date (and time?) in your backup
        filenames.</para>
      </listitem>

      <listitem>
        <para>Keep backups in a safe location on the server. Storing backups
        in a location with restricted access helps reduce the chances of your
        backup files 'escaping' into the wild.</para>
      </listitem>

      <listitem>
        <para>Keep tape copies of your backups very secure. A locked safe or
        off-site location with good security is advisable. The off-site
        location will also be of use after a total disaster as the backups are
        stored in a separate location to the server they are required
        on.</para>
      </listitem>

      <listitem>
        <para>Backup to a partition or disc that has encryption
        enabled.</para>
      </listitem>

      <listitem>
        <para>Make sure that only authorised staff have access to areas where
        backups are kept.</para>
      </listitem>

      <listitem>
        <para>Always test your backups by cloning a database from a recent
        backup.</para>
      </listitem>
    </itemizedlist>

    <para>In Firebird 2.1, there is an additional security feature built into
    <application>gbak and all the other command-line utilities</application>.
    This new feature automatically hides the password if it is supplied on the
    command line using the -password switch. <application>Gbak</application>
    replaces the password with spaces - one for each character in the
    password. This prevents other users on the system, who could run the
    <command>ps</command> command and view your command line and parameters,
    from viewing any supplied password. In this manner, unauthorised users are
    unable to obtain the supplied password.</para>

    <screen>tux&gt; gbak -b -user SYSDBA -passw secret employee /backups/employee.fbk</screen>

    <screen>tux&gt; ps efx| grep -i gba[k]
20724 ... gbak -backup -user SYSDBA -passw           employee employee.fbk 
... (lots more data here)</screen>

    <para>You can see from the above that the password doesn't show up under
    Firebird 2.1 as each character is replaced by a single space. This does
    mean that it is possible for someone to work out how
    <emphasis>long</emphasis> the password <emphasis>could</emphasis> be and
    that might be enough of a clue to a dedicated cracker. Knowing the length
    of the required password does make things a little easier, so for best
    results use a random number of spaces between
    <userinput>-passw</userinput> and the actual password. The more difficult
    you make things for the bad people on your network, the better.</para>
  </section>

  <section id="gbak-recipies">
    <title>Backup &amp; Restore Recipes</title>

    <para>The following recipes show examples of backup and restore tasks
    using <application>gbak</application>. These are probably the commonest
    cases that you will encounter as a DBA. All the examples use the
    <database>employee</database> database supplied with Firebird and the
    actual location is correctly configured in
    <filename>aliases.conf</filename>. Each of the following recipes is run
    with the assumption that the environment variables <envar>ISC_USER</envar>
    and <envar>ISC_PASSWORD</envar> have been given suitable values.</para>

    <section id="gbak-recipies-prereqs">
      <title>Backup &amp; Restore Prerequisites</title>

      <para>If you replace an open and running database, there is a good
      chance that you will corrupt it. For best results and minimal chance of
      corrupting a database, you should close it before replacing it. To close
      a database, use <application>gfix</application> as follows:<screen>tux&gt; gfix -shut -tran 60 employee</screen></para>

      <para>The example above prevents any new transaction from being started
      which prevents new queries being executed or new sessions connecting to
      the database. It will wait for up to 60 seconds for everyone to logout
      and for all current transactions to complete before shutting down the
      database. If any long running transactions have not completed by the end
      of 60 seconds, the shutdown will timeout and the database will remain
      open.</para>

      <para>After the restore of the database has completed, the database will
      automatically be opened again for use.</para>
    </section>

    <section id="gbak-recipies-simple">
      <title>A Simple Backup &amp; Restore</title>

      <screen>tux&gt; # Backup the database.
tux&gt; gbak -backup employee /backups/employee.fbk

tux&gt; # Restore the database.
tux&gt; gfix -shut -tran 60 employee
tux&gt; gbak -replace overwrite /backups/employee.fbk employee
</screen>
    </section>

    <section id="gbak-recipies-metadata">
      <title>Meta Data Only</title>

      <para>It is possible to use <application>gbak</application> to recreate
      an empty database containing only the various
      <database>domains</database>, <database>tables</database>,
      <database>indices</database> and so on, of the original database but
      none of the data. This can be useful when you have finished testing your
      application in a test environment and wish to migrate the system to a
      production environment, for example, but starting afresh with none of
      your test data.</para>

      <screen>tux&gt; #Backup only the database metadata.
tux&gt; gfix -shut -tran 60 employee
tux&gt; gbak -backup -meta_data employee employee.meta.fbk</screen>

      <para>When the above dump file is restored on the production server,
      only the meta data will be present.</para>

      <para>There is another way to create a database with no data and only
      the meta data. Simply restore from an existing dump which contains the
      data and supply the <userinput>-m[eta_data]</userinput> switch to the
      restore command line. The database will be restored but none of the
      original data will be present.</para>

      <screen>tux&gt; #Restore only the database metadata.
tux&gt; gbak -create employee.fbk mytest.fdb -meta_data</screen>

      <para>The <userinput>-m[eta_data]</userinput> switch can be used on
      either a backup or a restore to facilitate the creation of a clone
      database (or overwrite an existing one) with no actual data.</para>
    </section>

    <section id="gbak-recipies-splitting">
      <title>Splitting The Backup</title>

      <para>The <application>gsplit</application> filter application,
      documented in its own manual, doesn't actually work anymore. This filter
      was supplied with old versions of InterBase and Firebird to allow large
      database backups to be split over a number of files so that file system
      limits could be met. Such limits could be the size of a CD, the 2GB
      limit on individual file sizes on a DVD, where some Unix file systems
      have a 2 GB limit and so on.</para>

      <para><application>Gbak</application> allows the dump files to be split
      into various sizes (with a minimum of 2048 bytes) and will only create
      files it needs.</para>

      <screen>tux&gt; # Backup the database to multiple files.
tux&gt; gbak -backup employee /backups/emp.a.fbk 600m /backups/emp.b.fbk 600m 
</screen>

      <para>The sizes after each filename indicate how large that particular
      file is allowed to be. The default size is bytes, but you can specify a
      suffix of <userinput>k</userinput>, <userinput>m</userinput> or
      <userinput>g</userinput> to use units of kilo, mega or gigabytes.</para>

      <para>If the dump completes before writing to some files, then those
      files are not created. A dump file is only ever created when it must
      be.</para>

      <para>The size of the final dump file will be quietly ignored if the
      database has grown too large to allow a truncated backup to complete.
      If, in the example above, the backup needs a total of 1500M, then the
      last file would be written to a final size of 900m rather than the 600m
      specified.</para>

      <para>To restore such a multi-file backup requires that you specify all
      of the filenames in the dump and in <emphasis>the correct
      order</emphasis>. The following example shows the employee database
      above being restored from the two files dumped above:</para>

      <screen>tux&gt; # Restore the database from multiple files.
tux&gt; gfix -shut -tran 60 employee
tux&gt; gbak -replace /backups/employee.a.fbk /backups/employee.b.fbk employee
</screen>
    </section>

    <section id="gbak-recipies-ods">
      <title>Change The ODS</title>

      <para>Normally the ODS used is the one in force by the version of
      Firebird used to restore the database. So, the examples above will
      actually change the ODS when the database is restored. The backup should
      be taken using the <application>gbak</application> utility supplied by
      the old ODS version of InterBase or Firebird. The restore should be
      carried out using <application>gbak</application> from the newer version
      of Firebird.</para>

      <screen>tux&gt; setenv_firebird 2.0
Firebird environment set for version 2.0.

tux&gt; # Check current ODS version (as root user!)
tux&gt; gstat -h employee|grep ODS
        ODS version             11.0

tux&gt; # Backup the (old) database.
tux&gt; gbak -backup employee /backups/employee.2_0.fbk

tux&gt; setenv_firebird 2.1
Firebird environment set for version 2.1.

tux&gt; # Recreate the database and upgrade the ODS.
tux&gt; gfix -shut -tran 60 employee
tux&gt; gbak -replace overwrite /backups/employee.2_0.fbk employee

tux&gt; # Check new ODS version (as root user!)
tux&gt; gstat -h employee|grep ODS
        ODS version             11.1
</screen>

      <para>After the above, the old 2.0 Firebird database will have been
      recreated - wiping out the old database - as a Firebird 2.1 database
      with the corresponding upgrade to the ODS from 11.0 to 11.1.</para>

      <para>The script <filename>setenv_firebird</filename> is not supplied
      with Firebird and simply sets <envar>PATH</envar> etc to use the correct
      version of Firebird as per the supplied parameter.</para>
    </section>

    <section id="gbak-recipies-cache">
      <title>Change The Cache Size</title>

      <para>The default database cache is created when the database is
      created, or subsequently by using <application>gfix</application>.
      <application>Gbak</application> can restore a database and reset the
      default cache size as well. The process is as follows:</para>

      <screen>tux&gt; # Check current cache size (as root user!)
tux&gt; gstat -h employee | grep -i buffer
        Page buffers            0

tux&gt; # Restore the database &amp; change the cache size.
tux&gt; gfix -shut -tran 60 employee
tux&gt; gbak -replace overwrite -buffer 200 /backups/employee.fbk employee

tux&gt; # Check the new cache size (as root user!)
tux&gt; gstat -h employee | grep -i buffer
        Page buffers            200
</screen>

      <para>The default cache size is used when the number of buffers is zero,
      as in the first example above. <application>Gbak</application> allows
      this to be changed if desired. <application>Gbak</application>, however,
      cannot set the cache size back to zero. You must use
      <application>gfix</application> to do this.</para>
    </section>

    <section id="gbak-recipies-page">
      <title>Change The Page Size</title>

      <para>Similar to the example above to change the default database cache
      size, the database page size can also be changed using
      <application>gbak</application>.</para>

      <screen>tux&gt; # Check current page size (as root user!)
tux&gt; gstat -h employee | grep -i "page size"
        Page size               4096
 
tux&gt; # Restore the database &amp; change the page size.
tux&gt; gfix -shut -tran 60 employee
tux&gt; gbak -replace overwrite -page_size 8192 /backups/employee.fbk employee

tux&gt; # Check the new page size (as root user!)
tux&gt; gstat -h employee | grep -i "page size"
        Page size               8192
</screen>
    </section>

    <section id="gbak-recipies-read-only">
      <title>Create A Read-Only Database Clone</title>

      <para>Sometimes you do not want your reporting staff running intensive
      queries against your production database. To this end, you can quite
      easily create a clone of your production database on a daily basis, and
      make it read-only. This allows the reporting team to run as many
      intensive reports as they wish with no ill effects on the production
      database and it prevents them from inadvertently making changes.</para>

      <para>The following example shows the production employee database
      running on Linux server <emphasis>tux</emphasis>, being cloned to the
      reporting team's Linux server named <emphasis>tuxrep</emphasis>. First
      on the production <emphasis>tux</emphasis> server:</para>

      <screen>tux&gt; # Backup the production database.
tux&gt; gbak -backup employee /backups/employee.fbk
</screen>

      <para>Then on the reporting team's <emphasis>tuxrep</emphasis>
      server:</para>

      <screen>tuxrep&gt; # Scp the dump file from tux.
tuxrep&gt; scp fbuser@tux:/backups/employee.fbk ./
Using keyboard-interactive authentication.
Password:
employee.fbk              |         19 kB |  19.3 kB/s | ETA: 00:00:00 | 100%

tuxrep&gt; # Restore the employee database as read-only.
tuxrep&gt; gfix -shut -tran 60 employee
tuxrep&gt; gbak -replace overwrite -mode read_only employee.fbk employee

tuxrep&gt; # Check database mode (as root user)
tuxrep&gt; gstat -h employee|grep -i attributes
        Attributes              no reserve, read only
</screen>
    </section>

    <section id="gbak-recipies-shadows">
      <title>Backup &amp; Restore With &amp; Without Shadow Files.</title>

      <para>Databases can have shadow files attached in normal use.
      <application>Gbak</application> happily backs up and restores those as
      well and in normal use, shadow files will be recreated. Should you wish
      to restore the database only and ignore the shadows,
      <application>gbak</application> can do that for you as the following
      example shows.</para>

      <screen>tux&gt; # Check current shadows, use isql as gstat is broken.
tux&gt; isql employee

Database:  employee
SQL&gt; show database;
Database: employee
        Owner: SYSDBA
 Shadow 1: "/opt/firebird/shadows/employee.shd1" manual
 Shadow 2: "/opt/firebird/shadows/employee.shd2" manual
...

SQL&gt; quit;

tux&gt; # Restore the database preserving shadow files.
tux&gt; gfix -shut -tran 60 employee
tux&gt; gbak -replace overwrite /backups/employee.fbk employee

tux&gt; # Check shadows again, use isql as gstat is broken.
tux&gt; isql employee

Database:  employee
SQL&gt; show database;
Database: employee
        Owner: SYSDBA
 Shadow 1: "/opt/firebird/shadows/employee.shd1" manual
 Shadow 2: "/opt/firebird/shadows/employee.shd2" manual
...

SQL&gt; quit;


tux&gt; # Restore the database killing shadow files.
tux&gt; gfix -shut -tran 60 employee
tux&gt; gbak -replace overwrite -kill /backups/employee.fbk employee

tux&gt; # Check shadows again, use isql as gstat is broken.
tux&gt; isql employee

Database:  employee
SQL&gt; show database;
Database: employee
        Owner: SYSDBA
...

SQL&gt; quit;
</screen>

      <note>
        <para>I use <application>isql</application> in the above examples as
        <userinput>gstat -h</userinput> seems to get confused about how many
        shadows there are on a database. It reports zero when there are two,
        eventually it catches up and reports that there are two, then, if you
        kill a shadow, it reports that there are now three!</para>
      </note>
    </section>

    <section id="gbak-recipies-remote">
      <title>Remote Backups &amp; Restores</title>

      <para>Firebird's <application>gbak</application> utility can make
      backups of a remote database. To do this, you need to connect to the
      service manager running on the database, this is normally called
      <emphasis>service_mgr</emphasis>. The following example shows the
      Firebird <database>employee</database> database on server
      <emphasis>tuxrep</emphasis> being backed up from the server
      <emphasis>tux</emphasis>. The backup will be written to the remote
      server, in other words, the backup file will be created on the
      <emphasis>tuxrep</emphasis> server and not on the
      <emphasis>tux</emphasis> one. The network protocol in use is TCP.</para>

      <screen>tux&gt; # Backup the reporting database on remote server tuxrep.
tux&gt; gbak -backup -service tuxrep:service_mgr employee /backups/remote_backup.fbk
</screen>

      <para>The backup file will have the same owner and group as the Firebird
      database server - on Unix systems at least.</para>

      <para>It is also possible to restore a remote database in this manner as
      well, and <application>gbak</application> allows this.</para>

      <screen>tux&gt; # Restore the read-only reporting database on remote server tuxrep. 
tux&gt; gbak -replace -mode read_only -service tuxrep:service_mgr \
            /backups/remote_backup.fbk employee </screen>

      <note>
        <para>The above example uses the handy Unix ability to split a long
        line over many shorter ones using a back slash as the
        <emphasis>final</emphasis> character on the line.</para>
      </note>

      <para>As ever, you are advised to beware of replacing a database in case
      there are problems during the restore. The example above recreates the
      existing database in read-only mode but this need not always be the
      case.</para>

      <para>A remote backup can also be run on the database server itself! On
      Windows, this makes no difference, but on Unix systems, this
      local-remote method of backups and restores reduces network traffic. The
      'remote' server, in this case, is not actually remote it is just the
      method of running the backup - connecting to the service manager - that
      implies remoteness.</para>

      <screen>tux&gt; # Backup the employee database on this server, but pseudo-remotely! 
tux&gt; gbak -backup -service tux:service_mgr employee /backups/remote_backup.fbk </screen>

      <para>And corresponding restores can also be run 'remotely':</para>

      <screen>tux&gt; # Restore the employee database on this server, but pseudo-remotely! 
tux&gt; gbak -replace -service tux:service_mgr /backups/remote_backup.fbk employee </screen>

      <para>The format of the parameter used for the -service switch is
      different according to the nature of the network protocol in use:</para>

      <itemizedlist>
        <listitem>
          <para>TCP</para>

          <para>When using TCP networks, the parameter separator is a colon,
          as in <userinput>-service
          server_name:service_mgr</userinput>.</para>
        </listitem>

        <listitem>
          <para>Named pipes</para>

          <para>When using named pipes, the parameter requires two leading
          back slashes and the separator is another back slash, as in
          <userinput>-service \\server_name\service_mgr</userinput>.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section id="gbak-recipies-external-tools">
      <title>Using External Tools</title>

      <para><application>Gbak</application> and
      <application>nbackup</application> are the best tools to use when
      backing up and/or restoring Firebird databases. They have been
      extensively tested and know the internals of the database and how it
      works, so the chances of these tools corrupting your valuable data are
      very slim. However, some DBAs still like to use external tools (those
      not supplied with Firebird) to make backups for whatever reason.</para>

      <para>Because it is not possible for external tools to know where a
      database is to be found, given the alias name, the script writer and/or
      DBA must explicitly find out the correct location of the database
      file(s) and supply these to the external tool. To make this simpler for
      script writers, my own installation uses a standard in my
      <filename>aliases.conf</filename> file as follows:</para>

      <itemizedlist>
        <listitem>
          <para>The database alias must start in column one.</para>
        </listitem>

        <listitem>
          <para>There must be a single space before the equals sign
          (=).</para>
        </listitem>

        <listitem>
          <para>There must be a single space after the equals sign (=).</para>
        </listitem>

        <listitem>
          <para>Double quotes around the database filename is not permitted -
          it doesn't work for the Firebird utilities either.</para>
        </listitem>

        <listitem>
          <para>Databases are all single file databases.</para>
        </listitem>
      </itemizedlist>

      <para>The last rule applies to my installation only and means that the
      following simple backup script will work. If multiple file databases
      were used, more coding would be required to take a backup using external
      tools.</para>

      <screen>tux&gt; cat /opt/firebird/aliases.conf
# ---------------------------------------------------------
# WARNING: Backup Standards require that:
#          The database name starts in column 1.
#          There is a single space before the equals sign.
#          There is a single space after the equals sign.
#          The path has no double quotes (they don't work!)
# ----------------------------------------------------------
employee = /opt/firebird/examples/empbuild/employee.fdb
</screen>

      <para>The following shows the use of the <application>gzip</application>
      utility on a Linux server to take and compress a backup of a running
      database. The following is run as the root user due to the requirement
      to run <application>gfix</application> to shut down the database.</para>

      <screen>tux&gt; # Backup the production employee database using gzip.
tux&gt; gfix -shut -tran 60 employee
tux&gt; DBFILE=`grep -i "^employee =" /opt/firebird/aliases.conf | cut -d" " -f3`
tux&gt; gzip -9 --stdout $DBFILE &gt; /backups/employee.fdb.gz
</screen>

      <para>The restore process for this database would be the reverse of the
      above. Again, the following runs as root.</para>

      <screen>tux&gt; # Restore the production employee database from a gzip backup.
tux&gt; gfix -shut -tran 60 employee
tux&gt; DBFILE=`grep -i "^employee =" /opt/firebird/aliases.conf | cut -d" " -f3`
tux&gt; gunzip --stdout /backups/employee.fdb.gz &gt; $DBFILE

tux&gt; # Make sure firebird can see the file.
tux&gt; chown firebird:firebird $DBFILE</screen>
    </section>
  </section>

  <section id="gbak-caveats">
    <title>Gbak Caveats</title>

    <para>The following is a brief list of gotchas and funnies that I have
    detected in my own use of <application>gbak</application>. Some of these
    are mentioned above, others may not be. By collecting them all here in one
    place, you should be able to find out what's happening if you have
    problems.</para>

    <section id="gbak-caveats-defaults">
      <title>Gbak Default Mode</title>

      <para>If you do not specify a mode switch such as
      <userinput>-b[ackup]</userinput> or <userinput>-c[reate]</userinput>
      etc, then <application>gbak</application> will perform a backup as if
      the <userinput>-b[ackup]</userinput> switch had been specified -
      provided that the other switches specified are correct for a
      backup.</para>

      <warning>
        <para>This detection of whether you are attempting a backup or a
        restore means that if you use the <userinput>-z</userinput> command
        line switch to view <application>gbak</application> information, then
        you <emphasis>will</emphasis> create a backup - and overwrite the
        backup file you supply - if the command line also has a database name
        and a backup file name present. This assumes that there is a way for
        <application>gbak</application> to determine the username and password
        to be used - either as command line parameters or via defined
        environment variables.</para>
      </warning>
    </section>

    <section id="gbak-caveats-normal-privileged">
      <title>Normal Versus Privileged Users</title>

      <para>Only a SYSDBA or the owner of a database can take a backup of the
      database, however, <emphasis>any</emphasis> authenticated user can
      restore a database backup using the <userinput>-c[reate]</userinput>
      switch. This means that you must make sure you prevent your backup files
      from falling into the wrong hands because there is nothing then to stop
      unauthorised people from seeing your data by the simple process of
      restoring <emphasis>your</emphasis> backups onto
      <emphasis>their</emphasis> server.</para>

      <para>The database restore will fail, of course, if the user carrying it
      out is not the database owner and a database with the same filename
      already exists.</para>
    </section>

    <section id="gbak-caveats-silent">
      <title>Silent Running?</title>

      <para>The <userinput>-y suppress_output</userinput> switch is supposed
      to cause all output to be suppressed. Similar in fact to running with
      <userinput>-v[erify]</userinput> not specified. However, all it seems to
      do is cause the output (according to the
      <userinput>-v[erify]</userinput> switch setting) to be written to a file
      called <filename>suppress_output</filename>, however this only works
      once because the next run of gbak with <userinput>-y
      suppress_output</userinput> will fail because the file,
      <filename>suppress_output</filename>, already exists.</para>

      <para>It is possible that this problem was introduced at version 2 for
      Firebird, because both 2.0 and 2.1 versions actually use the
      <userinput>-y suppress</userinput> switch rather then <userinput>-y
      suppress_output</userinput>. Using this (shorter) option does work as
      intended and the output is indeed suppressed.</para>
    </section>

    <section id="gbak-caveats-logfile">
      <title>Gbak log file Cannot Be Overwritten</title>

      <para>If you specify a log file name with the <userinput>-y &lt;log
      file&gt;</userinput> switch, and the file already exists, then even
      though the firebird user owns the file, and has write permissions to it,
      <application>gbak</application> cannot overwrite it. You must always
      specify the name of a log file that doesn't exist. On Linux systems, the
      following might help:</para>

      <screen>tux&gt; # Generate unique dump and logfile name.
tux&gt; FILENAME=employee_`date "+%Y%m%d_%H%M%S"`

tux&gt; # Shut down and Backup the database
tux&gt; gfix -shut -tran 60 employee
tux&gt; gbak -backup employee /backups/${FILENAME}.fbk -y /logs/${FILENAME}.log -v
</screen>

      <para>The above is quite useful in as much as it prevents you from
      overwriting previous backups that may be required. The downside is that
      you now need to introduce a housekeeping system to tidy away old,
      unwanted backups to prevent your backup area filling up.</para>
    </section>
  </section>

  <appendix id="gbak-dochist">
    <title>Document history</title>

    <para>The exact file history is recorded in the <filename
    class="directory">manual</filename> module in our CVS tree; see <ulink
    url="http://sourceforge.net/cvs/?group_id=9028">http://sourceforge.net/cvs/?group_id=9028
    </ulink>. The full URL of the CVS log for this file can be found at <ulink
    url="http://firebird.cvs.sourceforge.net/viewvc/firebird/manual/src/docs/firebirddocs/fbutil_gbak.xml?view=log"
    userlevel="">http://firebird.cvs.sourceforge.net/viewvc/firebird/
    manual/src/docs/firebirddocs/fbutil_gbak.xml?view=log</ulink></para>

   <para><revhistory>
      <revision>
        <revnumber>1.0</revnumber>

        <date>10 October 2009</date>

        <authorinitials>ND</authorinitials>

        <revdescription>
          <para>Created as a chapter in the Command Line Utilities
          manual.</para>
        </revdescription>
      </revision>

      <revision>
        <revnumber>1.1</revnumber>

        <date>20 October 2009</date>

        <authorinitials>ND</authorinitials>

        <revdescription>
          <para>More minor updates and converted to a stand alone
          manual.</para>
        </revdescription>
      </revision>

      <revision>
        <revnumber>1.2</revnumber>

        <date>24 November 2009</date>

        <authorinitials>ND</authorinitials>

        <revdescription>
          <para>Corrected the section on <userinput>-y
          Suppress_output</userinput> plus corrected the formatting of various
          screen dumps. They had been reformatted as text at some
          point.</para>
        </revdescription>
      </revision>

      <revision>
        <revnumber>1.3</revnumber>

        <date>24 June 2010</date>

        <authorinitials>ND</authorinitials>

        <revdescription>
          <para>Added a bit more details to the
          <userinput>-o[ne_at_a_time]</userinput> restore option to explain
          transactions.</para>
        </revdescription>
      </revision>

      <revision>
        <revnumber>1.4</revnumber>

        <date>09 August 2010</date>

        <authorinitials>ND</authorinitials>

        <revdescription>
          <para>Noted that <application>gbak</application> defaults to running
          a backup or recover according to the first file name parameter
          supplied.</para>

          <para>A few minor formatting errors, URLs and some examples were
          corrected.</para>

          <para>Also added an example of a meta data only backup and
          restore.</para>
        </revdescription>
      </revision>

      <revision>
        <revnumber>1.5</revnumber>

        <date>31 March 2011</date>

        <authorinitials>ND</authorinitials>

        <revdescription>
          <para>Updated the <userinput>-z</userinput> option to indicate that
          it <emphasis>does</emphasis> carry out a backup.</para>
        </revdescription>
      </revision>

      <revision>
        <revnumber>1.6</revnumber>

        <date>11 October 2011</date>

        <authorinitials>ND</authorinitials>

        <revdescription>
          <para>Updated to cover Firebird 2.5 changes.</para>

          <para>Corrected description of
          <userinput>-g[arbage_collect]</userinput> switch.</para>

          <para>Lots of spelling mistakes corrected.</para>
        </revdescription>
      </revision>
  </revhistory></para>
  </appendix>

  <appendix id="gbak-license">
    <title>License notice</title>

    <para>The contents of this Documentation are subject to the Public
    Documentation License Version 1.0 (the <quote>License</quote>); you may
    only use this Documentation if you comply with the terms of this License.
    Copies of the License are available at <ulink
    url="http://www.firebirdsql.org/pdfmanual/pdl.pdf">http://www.firebirdsql.org/pdfmanual/pdl.pdf</ulink>
    (PDF) and <ulink
    url="http://www.firebirdsql.org/manual/pdl.html">http://www.firebirdsql.org/manual/pdl.html</ulink>
    (HTML).</para>

    <para>The Original Documentation is titled <citetitle>Firebird Backup
    &amp; Restore Utility</citetitle>.</para>

    <para>The Initial Writer of the Original Documentation is: Norman
    Dunbar.</para>

    <para>Copyright (C) 2009. All Rights Reserved. Initial Writer contact:
    NormanDunbar at users dot sourceforge dot net.</para>
  </appendix>
</article>
