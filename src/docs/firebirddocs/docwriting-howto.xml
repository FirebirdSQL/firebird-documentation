<?xml version="1.0" encoding="UTF-8"?>
<article id="docwritehowto">
  <articleinfo>
    <title>How to write documentation for Firebird</title>

    <author>
      <firstname>Paul</firstname>

      <surname>Vinkenoog</surname>
    </author>
  </articleinfo>

  <sect1 id="docwritehowto-introduction" xreflabel="Intro-section label">
    <title id="docwritehowto-intro-title" xreflabel="Intro-label">Introduction</title>

    <sect2 id="docwritehowto-purpose">
      <title>Purpose of this Howto</title>

      <para>This Howto discusses the various aspects of writing documentation
      for Firebird. It is intended for people who want to help write
      documentation for the Firebird project, or who at least strongly
      consider to do so. After reading this Howto, you&#39;ll have all the
      necessary knowledge to start writing Firebird docs in our chosen format
      DocBook XML.</para>
    </sect2>

    <sect2 id="docwritehowto-assumed-knowledge">
      <title>Assumed knowledge</title>

      <para>Before reading this Howto, check with yourself if you know:</para>

      <itemizedlist>
        <listitem>
          <para>What the Firebird manual module is.</para>
        </listitem>

        <listitem>
          <para>What CVS is, and how to use a CVS client to download the
          current manual module.</para>
        </listitem>

        <listitem>
          <para>How to build the current Firebird documentation from your
          downloaded manual module.</para>
        </listitem>
      </itemizedlist>

      <para>This knowledge is essential if you are going to contribute to our
      documentation project. If you feel unsure about one or more of these
      points, you should first read the <link linkend="docbuildhowto">Firebird
      Docbuilding Howto</link>, and then come back here.</para>
    </sect2>

    <sect2 id="docwritehowto-topics">
      <title>Topics discussed in this Howto</title>

      <para>We start off with some short chapters about:</para>

      <itemizedlist>
        <listitem>
          <para>The firebird-docs mailing list.</para>
        </listitem>

        <listitem>
          <para>Picking a subject.</para>
        </listitem>

        <listitem>
          <para>Making an outline for your document-to-be.</para>
        </listitem>
      </itemizedlist>

      <para>After that we&#39;ll take some time to explain the basics of
      DocBook XML, because that&#39;s the format we&#39;d like you to deliver
      your docs in. Topics discussed include:</para>

      <itemizedlist>
        <listitem>
          <para>DocBook XML - what is it?</para>
        </listitem>

        <listitem>
          <para>Reasons why we prefer DocBook so strongly to other formats.</para>
        </listitem>

        <listitem>
          <para>Tools you can use to produce DocBook texts.</para>
        </listitem>
      </itemizedlist>

      <para>Don&#39;t worry if DocBook doesn&#39;t mean anything to you yet:
      the required knowledge can be learned in less than an hour, and chances
      are that you will benefit from this knowledge in other projects too,
      whenever you have to write technical documentation.</para>

      <para>The next part is about the actual docwriting:</para>

      <itemizedlist>
        <listitem>
          <para>Setting up the document itself.</para>
        </listitem>

        <listitem>
          <para>Using DocBook elements.</para>
        </listitem>

        <listitem>
          <para>A word or two on language and writing style.</para>
        </listitem>
      </itemizedlist>

      <para>Finally, we will show you how to add your finished doc to the
      Firebird project. Main topics in this section are:</para>

      <itemizedlist>
        <listitem>
          <para>Commiting your finished document to the manual module.</para>
        </listitem>

        <listitem>
          <para>Where to ask for commit rights if you don&#39;t have them.</para>
        </listitem>

        <listitem>
          <para>What the dos and don&#39;ts are once you have received commit
          rights.</para>
        </listitem>
      </itemizedlist>
    </sect2>
  </sect1>

  <sect1 id="docwritehowto-firebird-docs">
    <title>Where the docmakers meet</title>

    <sect2 id="docwritehowto-fd-mailinglist">
      <title>The firebird-docs list</title>

      <para>If you&#39;re serious about writing docs for Firebird, the first
      thing you should do - if you haven&#39;t done so already - is subscribe
      to the mailing list where we discuss our plans and our work. This list
      is open to everybody, and subscribing commits you to nothing. Send an
      email to:</para>

      <blockquote>
        <para><email>firebird-docs-request@lists.sourceforge.net</email></para>
      </blockquote>

      <para>with the word <quote>subscribe</quote> either as subject or as the
      first and only line in the message body. Alternatively, you can fill in
      the form on this webpage:</para>

      <blockquote>
        <para><ulink
        url="http://lists.sourceforge.net/lists/listinfo/firebird-docs">http://lists.sourceforge.net/lists/listinfo/firebird-docs</ulink></para>
      </blockquote>

      <para>Whichever method you choose, you&#39;ll receive an email message
      from the list robot within minutes. Follow the instructions in that
      message and you&#39;re on the list.</para>
    </sect2>

    <sect2 id="docwritehowto-fd-newsinterface">
      <title>The Atkin news interface</title>

      <para>There&#39;s also a news interface for this and other
      Firebird-related mailing lists. Sometimes it works a little
      problematically - or not at all, although that&#39;s rare - and I
      wouldn&#39;t use it to post messages if I were you, but it&#39;s great
      for archiving and browsing purposes. The retention is pretty long too,
      so if you grab all messages that are on the server you&#39;ll have a
      nice piece of list history from before you joined.</para>

      <para>To access these newsgroups, point your favorite newsreader to:</para>

      <blockquote>
        <para>news.atkin.com</para>
      </blockquote>

      <para>and get the groups list. Subscribe to the groups you like. Notice
      that the firebird-docs list maps to the group sourceforge.firebird-doc
      (without s) on the Atkin news server.</para>

      <para>Depending on the newsreader or browser you use, this link may also
      get you straight to the group:</para>

      <blockquote>
        <para><ulink url="news://news.atkin.com/sourceforge.firebird-doc">news://news.atkin.com/sourceforge.firebird-doc</ulink></para>
      </blockquote>

      <para>You can post to the newsgroup even if you&#39;re not subscribed to
      the mailing list, but in that case your message will be held for
      approval by a human moderator. This means that your message will be
      delayed by up to a day (or more, on rare occasions).</para>
    </sect2>
  </sect1>

  <sect1 id="docwritehowto-picking-a-subject">
    <title>Picking a subject</title>

    <para>These guidelines may help you in finding a subject to write about:</para>

    <itemizedlist>
      <listitem>
        <para>First make sure you know what&#39;s already there - nobody&#39;s
        waiting for three MS-SQL-to-Firebird conversion guides.</para>
      </listitem>

      <listitem>
        <para>Then ask yourself what&#39;s missing, and what may be useful for
        Firebird users in general, or perhaps just for a specific group.</para>
      </listitem>

      <listitem>
        <para>Also ask yourself what you would <emphasis>like</emphasis> to
        write about. The most logical choice would be a topic you are familiar
        with, but you can also pick a subject you&#39;d have to learn more
        about first (this is much more work of course, but a great learning
        experience if you&#39;re willing to invest the time).</para>
      </listitem>

      <listitem>
        <para>You don&#39;t necessarily have to write an entire book, guide or
        article. Maybe there are already people working on a larger
        production, which you can contribute to. Maybe you can write one or
        more chapters for a book. Or maybe you can supply raw documentation
        material for a subject you know very well.</para>
      </listitem>

      <listitem>
        <para>Talk about your ideas - or your search for ideas - on the
        firebird-docs list. The posting frequency can be very low at times,
        but rest assured that if you post there, your message
        <emphasis>will</emphasis> be read, and replied to.</para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1 id="docwritehowto-preparing-to-write">
    <title>Preparing to write: make an outline!</title>

    <para>It&#39;s always a good idea to make an outline before you start to
    write the actual text. Setting up an outline will help you to
    <quote>get organized</quote>; it reduces the chance of forgetting
    something vital, and it will make the actual writing job a lot easier.</para>

    <para>You can follow these steps when making your outline:</para>

    <itemizedlist>
      <listitem>
        <para>Define exactly <emphasis>what</emphasis> you want your readers
        to learn from your work.</para>
      </listitem>

      <listitem>
        <para>Divide the subject matter into logical units - chapters and/or
        sections and/or subsections.</para>
      </listitem>

      <listitem>
        <para>Make sure the order of the units makes sense, especially for a
        howto, tutorial or user&#39;s guide. That is: arrange the units in
        such a way that whatever the user has to do first, or understand
        first, also comes first in your documentation.</para>
      </listitem>

      <listitem>
        <para>Present your outline on the firebird-docs list at
        sourceforge.net and ask for comments.</para>
      </listitem>
    </itemizedlist>

    <para>Once you are satisfied with your outline, look it over thoroughly
    and decide whether you have all the (raw) information you need to start
    writing. Ideally, you want to have all the information ready before you
    start to write, because sometimes a formerly unknown piece of information
    may lead you to choose a different document structure. You&#39;d better
    have that information while you&#39;re still in the outline phase, then.</para>
  </sect1>

  <sect1 id="docwritehowto-docbook-intro">
    <title>DocBook XML - an introduction</title>

    <para>The chosen format for the documentation in the Firebird manual
    module is <firstterm>DocBook XML</firstterm>. For those of you who are not
    familiar with XML and/or DocBook, short introductions to XML in general
    and DocBook XML in particular follow. Be aware that these introductions
    give a grossly oversimplified picture. But that&#39;s just fine: you
    don&#39;t have to be a DocBook XML expert in order to write Firebird docs.
    You only need some basic knowledge - which you can pick up in half an hour
    from the paragraphs below - and a little experience in applying DocBook
    XML tags to your texts (which you will gain soon enough once you start
    writing).</para>

    <para><link linkend="docwritehowto-docbook-xml-primer">Skip the general
    XML primer</link> if you know all about XML elements, tags, attributes,
    rendering, and multichannel publishing.</para>

    <para><link linkend="docwritehowto-docbook-authoring-tools">Skip both
    primers</link> if you&#39;re also an experienced DocBook author.</para>

    <sect2 id="docwritehowto-xml-primer">
      <title>A very general XML primer</title>

      <para>XML stands for <firstterm>Extensible Markup Language</firstterm>,
      which is, simply put, plain text with markup tags. A typical XML text
      fragment may look like this:</para>

      <programlisting>&#60;paragraph&#62;
&#60;loud&#62;&#39;No!&#39;&#60;/loud&#62; she screamed. &#60;scary&#62;But the bloody hand
&#60;italics&#62;kept on creeping&#60;/italics&#62; towards her.&#60;/scary&#62;
&#60;picture file=&#34;bloody_hand.png&#34;/&#62;
&#60;/paragraph&#62;</programlisting>

      <sect3 id="docwritehowto-tags-and-attributes">
        <title>Tags and attributes</title>

        <para>In the example given above, the words and phrases enclosed in
        angle brackets are the markup tags. <sgmltag class="starttag">italics</sgmltag>
        is a <firstterm>start tag</firstterm>, <sgmltag class="endtag">italics</sgmltag>
        is an <firstterm>end tag</firstterm>, and <sgmltag class="emptytag">picture
        file=&#34;bloody_hand.png&#34;</sgmltag> is a standalone tag,
        officially termed <firstterm>empty-element tag</firstterm>. XML tags
        are always formatted like this:</para>

        <table id="docwritehowto-table-XML-tags">
          <title>Format of XML tags</title>

          <tgroup cols="3">
            <thead>
              <row>
                <entry>Tag type</entry>

                <entry>Starts with</entry>

                <entry>Ends with</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Start tag</entry>

                <entry><literal>&#60;</literal></entry>

                <entry><literal>&#62;</literal></entry>
              </row>

              <row>
                <entry>End tag</entry>

                <entry><literal>&#60;/</literal></entry>

                <entry><literal>&#62;</literal></entry>
              </row>

              <row>
                <entry>Empty-element tag</entry>

                <entry><literal>&#60;</literal></entry>

                <entry><literal>/&#62;</literal></entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>Still referring to our example, the words <literal>paragraph</literal>,
        <literal>loud</literal>, <literal>scary</literal>, <literal>italics</literal>
        and <literal>picture</literal> are <firstterm>tag names</firstterm>.
        In the <sgmltag class="emptytag">picture...</sgmltag> tag, <sgmltag
        class="attribute">file=&#34;bloody_hand.png&#34;</sgmltag> is called
        an <firstterm>attribute</firstterm>, with <sgmltag class="attribute">file</sgmltag>
        the <firstterm>attribute name</firstterm> and <sgmltag
        class="attvalue">bloody_hand.png</sgmltag> the <firstterm>attribute
        value</firstterm>. Attribute values must always be quoted; both single
        and double quotes are allowed.</para>

        <para>XML allows you to define any tags you like, as long as you build
        them correctly. So <sgmltag class="starttag">thistag</sgmltag>,
        <sgmltag class="starttag">thattag</sgmltag>, and <sgmltag
        class="emptytag">this_is_not_a_tag</sgmltag> are all valid XML tags.</para>

        <para>Clearly the tags themselves are not meant to appear in the final
        document (that is, the document as it is presented to the readers).
        Rather, they contain instructions that affect its appearance. XML is a
        typical <firstterm>source format</firstterm>, intended to be processed
        by software to produce nicely formatted output documents. This
        processing is usually called <firstterm>rendering</firstterm>.</para>

        <!--Bovenstaande klopt niet helemaal: XML wordt ook vaak gebruikt voor gegevensopslag. Maar in ons geval is het 
inderdaad een bronformat, bedoeld om te verwerken tot presenteerbare docs. Misschien wat beter uitleggen.-->

        <para>Some tags are unmistakably makeup instructions:</para>

        <programlisting>&#60;italics&#62;kept on creeping&#60;/italics&#62;</programlisting>

        <para>means of course that the words <emphasis>kept on creeping</emphasis>
        must be displayed or printed in italics. However,</para>

        <programlisting>&#60;loud&#62;&#39;No!&#39;&#60;/loud&#62;</programlisting>

        <para>is a little less obvious. Should the word <literal>No!</literal>
        appear in boldface? Or underlined? Or again in italics? Or maybe this
        text is going to be read out aloud by a speech synthesizer, and the
        <sgmltag class="starttag">loud</sgmltag> tag instructs it to raise its
        voice? All these things are possible, and what&#39;s more: often a
        single XML source document is converted into several different output
        formats - say, a PDF document, an HTML web page, and a sound file.
        This is called <firstterm>multichannel publishing</firstterm>. With
        multichannel publishing, <sgmltag class="starttag">loud</sgmltag> may
        be translated to boldface for the PDF document; to a bold, red-colored
        font for the web page; and to a 50% volume increase for the
        synthesizer.</para>

        <para>Looking at the other tags, <sgmltag class="emptytag">picture...</sgmltag>
        is obviously an instruction to insert the image <filename>bloody_hand.png</filename>
        into the document, and <sgmltag class="starttag">scary</sgmltag>,
        well... this is even less clear then <sgmltag class="starttag">loud</sgmltag>.
        Maybe the phrase between the <sgmltag class="starttag">scary</sgmltag>
        tags has to drip with blood. Maybe frightening music must be played
        here. It all depends on the people who defined the tags, and the
        software they use to do the rendering.</para>

        <para>The <sgmltag class="starttag">paragraph</sgmltag> tag, finally,
        is a structural tag. It tells us something about the place that the
        lines have within the document&#39;s internal hierarchy. In the final
        document, paragraphs may or may not be separated by empty lines.
        Again, that depends on the rendering software and possibly also on
        user-configurable options. Other structural tags one might think of
        are e.g. <sgmltag class="starttag">chapter</sgmltag>, <sgmltag
        class="starttag">section</sgmltag>, and <sgmltag class="starttag">subdocument</sgmltag>.</para>
      </sect3>

      <sect3>
        <title>Special characters and Entities</title>

        <para>Because the character &#39;<literal>&#60;</literal>&#39; has a
        special meaning as the start of a tag, you can&#39;t include it
        directly as a literal value. Instead, if you want your readers to see
        an opening angle bracket, you type this:</para>

        <blockquote>
          <para><sgmltag class="genentity">lt</sgmltag></para>
        </blockquote>

        <para>That&#39;s an ampersand, followed by the letters
        <literal>l</literal> and <literal>t</literal> (for
        <emphasis>less than</emphasis>), followed by a semicolon. You can also
        use <sgmltag class="genentity">gt</sgmltag> (<emphasis>greater than</emphasis>)
        for the closing angle bracket, although that&#39;s not necessary.</para>

        <para>XML has lots of codes like this; they are called
        <firstterm>entities</firstterm>. Some represent characters, like
        <sgmltag class="genentity">lt</sgmltag> and <sgmltag class="genentity">auml</sgmltag>
        (lower a with umlaut) and some serve totally different purposes. But
        they all start with an ampersand and end with a semicolon.</para>

        <para>But wait a minute... if an ampersand marks the start of an
        entity, how do you include a literal ampersand in your text? Well,
        there&#39;s an entity for that too:</para>

        <blockquote>
          <para><sgmltag class="genentity">amp</sgmltag></para>
        </blockquote>

        <para>So this line of XML:</para>

        <programlisting>Kernigan &#38;amp; Ritchie chose &#39;&#38;lt;&#39; as the less-than operator for C.</programlisting>

        <para>will wind up in the final documents as:</para>

        <para><literal>Kernigan &#38; Ritchie chose &#39;&#60;&#39; as the
        less-than operator for C.</literal></para>

        <para>And here&#39;s some good news: if you use a dedicated XML editor
        to author your document, you can probably just type &#39;<literal>&#60;</literal>&#39;
        and &#39;<literal>&#38;</literal>&#39; anywhere you want to use them
        as literals. The editor will make sure that they end up as <sgmltag
        class="genentity">lt</sgmltag> and <sgmltag class="genentity">amp</sgmltag>
        in the XML as it is saved to disk. You&#39;ll find pointers to some
        XML/DocBook editors later in this Howto.</para>
      </sect3>

      <sect3 id="docwritehowto-elements">
        <title>Elements</title>

        <para>There&#39;s one more important XML concept you need to know
        about: the <firstterm>element</firstterm>. An element is the
        combination of a start tag, a matching end tag, and everything in
        between. This <quote>everything in between</quote> is called the
        element&#39;s <firstterm>content</firstterm>, and it may include other
        elements. Elements are named after their tags, so we can talk about
        paragraph elements, italics elements etc.</para>

        <note>
          <para>Actually, elements are a more basic concept than tags: tags
          just happen to be the things that identify the elements. So it would
          be better to say that tags are named after their elements. But
          because tags are easier to recognize than entire elements, I thought
          I&#39;d introduce you to them first.</para>
        </note>

        <para>This is an element:</para>

        <programlisting>&#60;loud&#62;&#39;No!&#39;&#60;/loud&#62;</programlisting>

        <para>This is also an element:</para>

        <programlisting>&#60;paragraph&#62;This is an element containing &#60;bold&#62;another&#60;/bold&#62; element!&#60;/paragraph&#62;</programlisting>

        <para>Empty-element tags constitute an element all by themselves.
        These elements can have no content of course, because they don&#39;t
        have a <emphasis>pair</emphasis> of tags:</para>

        <programlisting>&#60;picture file=&#34;bloody_hand.png&#34;/&#62;</programlisting>

        <important>
          <para>Don&#39;t confuse content with attributes. Content lives
          <emphasis>between</emphasis> tags, attributes <emphasis>within</emphasis>
          tags. The empty element in the last example has an attribute, but no
          content.</para>
        </important>

        <para>I&#39;m stressing the element concept here because most
        documentation tends to speak of <quote>chapter elements</quote>,
        <quote>title elements</quote> etc. rather than <quote>chapter tags</quote>
        and <quote>title tags</quote>. The terms are often used
        interchangeably, but there are cases where it&#39;s important to know
        the difference.</para>
      </sect3>

      <sect3>
        <title>XML Conclusion</title>

        <para>Good - that&#39;s about all you need to know about XML. By now
        you should have a general idea of what an XML text looks like, what
        tags and elements are, and what they are for. As said earlier, the
        picture is oversimplified but it&#39;s good enough for our purposes.</para>

        <para>It should also be understood that just writing away in plain,
        self-invented XML is pretty pointless unless you have processing
        software that understands <emphasis>your</emphasis> tags. How else are
        you going to turn your XML source into a nicely formatted, presentable
        document?</para>

        <para>Fortunately, we don&#39;t have to worry about developing our own
        element definitions and conversion software. There are a number of
        formalized XML types available, each defining a number of tags and,
        equally important, a number of rules on how to use them. DocBook XML
        is one of those types.</para>
      </sect3>
    </sect2>

    <sect2 id="docwritehowto-docbook-xml-primer">
      <title>A DocBook XML primer</title>

      <para>DocBook was designed to facilitate the writing of structured
      documents using SGML or XML (but don&#39;t worry about SGML - we use the
      XML strain). It is particularly fit for writing technical books and
      articles, especially on computer-related subjects. DocBook XML is
      defined in its <firstterm>Document Type Definition</firstterm> or
      <firstterm>DTD</firstterm>: a set of definitions and rules describing
      exactly how a DocBook document should be structured. DocBook is rapidly
      becoming a de facto standard for computer-technical documents, and it is
      supported by a growing number of tools and applications.</para>

      <sect3 id="docwritehowto-docbook-characteristics">
        <title>DocBook XML Characteristics</title>

        <para>Important characteristics of DocBook - as opposed to
        <quote>general</quote> XML - are:</para>

        <itemizedlist>
          <listitem>
            <para>The DocBook DTD defines a limited number of tags, and it
            gives exact rules on how to use them: what attributes are possible
            for a tag A, whether element B can be nested within element C, and
            so on. If you use undefined tags, or if you don&#39;t follow the
            rules, your document isn&#39;t DocBook anymore (and
            DocBook-supporting processing tools will probably break on it).</para>
          </listitem>

          <listitem>
            <para>DocBook tags always convey structure and semantics
            (meaning), <emphasis>never</emphasis> makeup. In DocBook,
            you&#39;ll find structural tags like <sgmltag class="starttag">book</sgmltag>,
            <sgmltag class="starttag">part</sgmltag>, <sgmltag
            class="starttag">chapter</sgmltag>, <sgmltag class="starttag">section</sgmltag>,
            <sgmltag class="starttag">para</sgmltag>, <sgmltag
            class="starttag">table</sgmltag>; and semantic tags like <sgmltag
            class="starttag">filename</sgmltag>, <sgmltag class="starttag">warning,</sgmltag>
            <sgmltag class="starttag">emphasis</sgmltag>, <sgmltag
            class="starttag">postcode</sgmltag>; but nothing like <sgmltag
            class="starttag">font</sgmltag>, <sgmltag class="starttag">bold</sgmltag>,
            <sgmltag class="starttag">center</sgmltag>, <sgmltag
            class="starttag">indent</sgmltag>, <sgmltag class="starttag">backgroundcolor</sgmltag>
            - nothing that has to do with layout or makeup.</para>
          </listitem>

          <listitem>
            <para>Because of this, a decision has to be taken somewhere on how
            the DocBook tags are translated into presentational makeup. This
            decision (or rather: the rendering rules) can be hardcoded in the
            tools but that would make things very inflexible. That&#39;s why
            the rules are mostly defined in <firstterm>stylesheets</firstterm>.
            A stylesheet is a document, usually in plaintext, that tells the
            tool stuff like:<blockquote><para><quote>Print chapter titles in a
            24-point black font; start each chapter on a new page; use italics
            for emphasis; render warnings in a bold, 12-point red font; use
            smallcaps for acronyms; etc. etc.</quote></para></blockquote>This
            approach enables the user to alter the stylesheets if he or she
            doesn&#39;t like the appearance of the final document. It would be
            a lot harder - if not impossible - to alter the tools themselves.</para>
          </listitem>
        </itemizedlist>
      </sect3>

      <sect3 id="docwritehowto-docbook-benefits">
        <title>Benefits of DocBook XML</title>

        <para>DocBook has a lot of advantages for anybody writing technical
        documentation. These are the most important ones for us:</para>

        <itemizedlist>
          <listitem>
            <para>The number one advantage of using a source format like
            DocBook, which has no presentational markup whatsoever, is that
            the source document consists of pure, unpolluted,
            <emphasis>content</emphasis>. That in turn means that we have all
            our options open when it comes to translating the source to
            different output formats like HTML and PDF.</para>
          </listitem>

          <listitem>
            <para>Another advantage is that DocBook is an open standard, not
            tied to any commercial application or even a particular OS. If you
            download the Firebird manual module, you can build the HTML and
            PDF docs from the DocBook source both under Linux and under
            Windows - and we can add support for more OS&#39;s if need be.</para>
          </listitem>

          <listitem>
            <para>Because DocBook is all about structure and meaning, it will
            be surprisingly easy to transform your outline into a DocBook
            skeleton.</para>
          </listitem>

          <listitem>
            <para>With DocBook, you never have to worry about the makeup of
            your text. You never have to ask yourself if an 18-pt font would
            be better than a 24-pt one for section headers; you don&#39;t have
            to decide on the colors used for chapter titles, or if chapters
            should always start at the top of an uneven page. All you have to
            care about is <emphasis>structure</emphasis> and
            <emphasis>informational content</emphasis>. If you are used to
            writing text in e.g. Word, where you take makeup decisions all the
            time (ususally without even realizing it), this may take a little
            getting used to, but I can promise you: you&#39;ll soon get the
            hang of it, and after a while you will find this absence of makeup
            instructions a relief instead of a burden.</para>
          </listitem>

          <listitem>
            <para>Many different people are producing docs for the manual
            module (well, actually that&#39;s a lie, but it may one day become
            true - let&#39;s remain optimistic). If all these people wrote in
            different formats, or even in one format like Word or HTML, their
            documents would all look very different because every contributor
            would make his or her own makeup decisions. Of course we could
            develop a set of makeup rules, but then every single docwriter
            would have to learn those rules, or at least have them handy while
            writing, and take care to apply them all the time. Nah... better
            put those rules in one central place: the stylesheets, and let the
            docmakers worry about documentation, not presentation. The
            stylesheets will ensure that all our documentation has the same
            look-and-feel.</para>
          </listitem>

          <listitem>
            <para>If we don&#39;t like the makeup of our documents, we can
            easily change it if the makeup rules are in a stylesheet. Nothing
            needs to be altered in the DocBook source documents; all we have
            to do, after changing the stylesheets, is re-render the docs.
            Newly developed docs will automatically get the new look. Try to
            achieve that if the makeup is scattered in a thousand places all
            over the documents themselves!</para>
          </listitem>

          <listitem>
            <para>A DocBook document is pure text, which is ideal for use in
            CVS. Yes, a CVS tree can also contain binary files, but many
            useful features that CVS offers (showing the difference between
            two versions of a file, for instance) only work with text files.</para>
          </listitem>
        </itemizedlist>

        <para>Admittedly, none of these benefits is unique to DocBook. But
        DocBook has them all, and it&#39;s widely supported. That makes it the
        perfect choice for our Firebird documentation.</para>
      </sect3>

      <sect3 id="docwritehowto-docbook-links">
        <title>DocBook documentation on the Internet</title>

        <para>Here are some links in case you want to find out more about
        DocBook:<itemizedlist><listitem><para><ulink
        url="http://opensource.bureau-cornavin.com/crash-course/">http://opensource.bureau-cornavin.com/crash-course/</ulink></para><para><citetitle>Writing
        Documentation Using DocBook - A Crash Course</citetitle> by David
        Rugge, Mark Galassi and Eric Bischoff. A very nice tutorial, even
        though most of the tools discussed are not the ones we use.</para></listitem><listitem><para><ulink
        url="http://docbook.org/tdg/en/">http://docbook.org/tdg/en/</ulink></para><para><citetitle>DocBook
        - The Definitive Guide</citetitle>, by Norman Walsh and Leonard
        Muellner. Don&#39;t expect it to be a beginner-friendly tutorial - in
        fact, the first part is quite intimidating if you&#39;re a DocBook
        newbie. The reason I mention it here is its great online element
        reference, which I often consult while I&#39;m writing.</para></listitem><listitem><para><ulink
        url="http://www.tldp.org/HOWTO/DocBook-Demystification-HOWTO/">http://www.tldp.org/HOWTO/DocBook-Demystification-HOWTO/</ulink></para><para>The
        <citetitle>DocBook Demystification Howto</citetitle> is interesting if
        you want to know a little more about XML and DocBook than what
        we&#39;ve told you here. It also contains quite a lot of material on
        SGML, and - again - on tools we don&#39;t use for the Firebird
        documentation subproject.</para></listitem><listitem><para><ulink
        url="http://sourceforge.net/projects/docbook">http://sourceforge.net/projects/docbook</ulink></para><para>The
        DocBook open source project at SourceForge.</para></listitem></itemizedlist></para>

        <para>If you know of some other great online resource, please let use
        know by posting a message to the firebird-docs list.</para>
      </sect3>
    </sect2>
  </sect1>

  <sect1 id="docwritehowto-docbook-authoring-tools">
    <title>DocBook XML authoring tools</title>

    <para>Because DocBook is a non-binary format, you can use any plaintext
    editor like <application>emacs</application>, <application>pico</application>,
    <application>Windows Notepad</application> or <application>vi</application>
    to write your documentation. And indeed, some docmakers prefer this
    approach to other more sophisticated tools because it gives them full
    control over their text, and the hand-typed tags are always visible. But
    the penalty is that text editors can not <emphasis>validate</emphasis>
    your DocBook document: you&#39;ll only notice your mistakes when a build
    goes wrong. And the structure of your document - especially a large
    document - is also difficult to see in text mode, although a consistent
    use of multi-level indentation can do a lot of good here.</para>

    <para>If you choose this approach or want to try it out, it would be a
    good idea to at least take an editor that&#39;s capable of XML syntax
    highlighting. A very good one, and free at that, is
    <application>ConText</application>. Get it at <ulink
    url="http://www.fixedsys.com/context/">http://www.fixedsys.com/context/</ulink>.</para>

    <para>But for most people a dedicated tool is preferable. XML authoring
    tools usually have graphical interfaces to make the tags stand out nicely
    (and sometimes irritatingly); many allow you to collapse and expand
    elements so you can view the structure of your document and at the same
    time zoom in on the element you&#39;re working on; they may also let you
    switch between different views. Some have a special DocBook mode so your
    document can be validated as not only correct XML, but also correct
    DocBook.</para>

    <para>The author of this Howto has tried out a number of these tools (free
    ones, cheap ones, and evaluation versions) and found
    <application>XMLMind XML Editor</application> to be the most useful. This
    is a personal opinion of course; your experience may differ.</para>

    <para>Some XML editors you may want to evaluate:</para>

    <itemizedlist>
      <listitem>
        <para><application>XMLMind XML Editor</application>, or
        <application>XXE</application> for short. The Standard Edition is
        free.</para>

        <para><ulink url="http://www.xmlmind.com/xmleditor/">http://www.xmlmind.com/xmleditor/</ulink></para>

        <para>Runs on: Linux, Windows, Mac OS X. Requires Java, but you need
        Java anyway or you won&#39;t be able to build the docs from the
        sources - see the <link linkend="docbuildhowto">Firebird Docbuilding
        Howto</link>.</para>

        <para>Features: Tree view (all elements collapsible) and Styled view
        (chapters and sections collapsible). The latter is what I usually work
        in: it shows the document in a basic but clear word-processor-like
        layout, defined in a stylesheet that comes with the program. Both
        views can be active simultaneously. DocBook mode won&#39;t let you
        enter anything non-DocBook. Element chooser. Attribute editor. Edit
        and Search functions. Spell checker. Special character picker.
        Speedbuttons to create frequently used elements like sections, lists,
        tables, etc. What I miss is a plaintext XML source view.</para>
      </listitem>

      <listitem>
        <para><application>epcEdit</application>. € 89 for non-comercial use.
        Free 60-day evaluation.</para>

        <para><ulink url="http://www.epcedit.com">http://www.epcedit.com</ulink></para>

        <para>Runs on: Linux, Windows, Solaris. Requires Tcl/Tk 8.1 or above
        (included in package).</para>

        <para>Features: Structure tree pane. Element chooser. Attribute
        editor. Document pane can switch between plaintext and graphic XML
        mode. No special DocBook mode, but can validate any XML document based
        upon its DTD.</para>
      </listitem>

      <listitem>
        <para><application>Altova XMLSpy Home Edition</application>. $ 49.
        Free 30-day evalution.</para>

        <para><ulink url="http://www.altova.com/products_ide.html">http://www.altova.com/products_ide.html</ulink></para>

        <para>Runs on: Windows. (Also reported to run on Linux using Wine, and
        on Mac OS X using Virtual PC 6.)</para>

        <para>Features: Text, Grid (boxes-in-boxes), and Browser views. All
        elements collapsible except in Text view. Browser view is read-only.
        Element chooser. Attribute editor. Edit and Search functions. Special
        character picker.</para>
      </listitem>

      <listitem>
        <para><application>Altova Authentic</application>. Free.</para>

        <para><ulink url="http://www.altova.com/products_doc.html">http://www.altova.com/products_doc.html</ulink></para>

        <para>Runs on, Features: same as <application>Altova XMLSpy</application>,
        but lacks Text and Grid views. Has <quote>Authentic</quote> view
        instead, and a spelling checker. <application>Altova Authentic</application>
        is actually a frontend; it uses a restricted version of
        <application>XMLSpy</application> as backend.</para>
      </listitem>
    </itemizedlist>

    <para>This list is not meant to be exhaustive, but if you know a
    <emphasis>good</emphasis> XML editor (good from the perspective of a
    Firebird docwriter) that you think should be in here, please let us know
    via the mailing list.</para>
  </sect1>

  <sect1 id="docwritehowto-writing-your-doc">
    <title>Writing your DocBook doc</title>

    <para>Hello - still with us? I know I spent quite some time explaining
    about XML and DocBook, but I really feel I had to do that because these
    are new concepts to a lot of people. Just giving them some links and
    telling them to go find out by themselves would probably lose us some
    otherwise valuable docwriters.</para>

    <para>Anyway, here we are: finally ready to start writing our doc. This
    section discusses setting up your DocBook document, and applying the right
    tags and attributes in the right places.</para>

    <para>Please read the <link linkend="docwritehowto-elements-hierarchical">subsection
    on hierarchical elements</link> even if you&#39;re a proficient DocBook
    writer, as it contains some guidelines specific to our project. After
    that, you can skip the rest of the DocBook subsections.</para>

    <sect2 id="docwritehowto-creating-the-doc">
      <title>Creating the document</title>

      <para>All our documentation is part of one big DocBook element: the
      <sgmltag class="starttag">set</sgmltag>. This is the topmost element in
      the DocBook hierarchy. Our set contains a number of <sgmltag
      class="starttag">book</sgmltag>&#39;s, which in turn contain <sgmltag
      class="starttag">chapter</sgmltag>&#39;s, and so on. The advantage of
      placing all the books in one set is that they can reference each other,
      i.e. you can insert links in your documentation pointing to an exact
      spot in another book.</para>

      <para>Fortunately, placing all the books in one big set does not imply
      that they also have to live in one big document. DocBook allows you to
      set up a main document as shown below. (Don&#39;t worry if you don&#39;t
      understand the section starting with &#34;<literal>&#60;!DOCTYPE</literal>&#34;
      - we already have a main document, you won&#39;t have to write horrible
      stuff like that yourself.)</para>

      <programlisting>&#60;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&#62;

&#60;!DOCTYPE set PUBLIC &#34;-//OASIS//DTD DocBook XML V4.1.2//EN&#34; &#34;file:docbookx.dtd&#34; [
    &#60;!ENTITY firebird-intro SYSTEM &#34;file:fbintro.xml&#34;&#62;
    &#60;!ENTITY firebird-sql-ref SYSTEM &#34;file:fbsqlref.xml&#34;&#62;
    &#60;!ENTITY ...&#62;
    &#60;!ENTITY ...&#62;
]&#62;

&#60;set id=&#34;firebird-books&#34;&#62;
  &#38;firebird-intro;
  &#38;firebird-sql-ref;
  ...
  ...
&#60;/set&#62;</programlisting>

      <para>With the main document set up like above, the various books can be
      in separate files: <filename>fbintro.xml</filename>,
      <filename>fbsqlref.xml</filename>, etc., which we can edit
      independently. Such a file - yours, for instance - is roughly structured
      like this:</para>

      <programlisting>&#60;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&#62;

&#60;book id=&#34;fbintro&#34;&#62;
  &#60;chapter id=&#34;fbintro-preface&#34;&#62;
    ...
    ...
  &#60;/chapter&#62;
  &#60;chapter id=&#34;fbintro-installing-firebird&#34;&#62;
    ...
    ...
  &#60;/chapter&#62;
  ...
  ...
&#60;/book&#62;    </programlisting>

      <para>Of course if you set up a new document it must be made known to
      the main set, but this is something we&#39;ll discuss with you when
      you&#39;re ready to start writing. (We don&#39;t give a general rule
      here because it depends on what you&#39;re going to write - a book, an
      article, a chapter, a couple of chapters... - and how your work fits in
      with the rest.)</para>

      <para>Every DocBook file must start with this line:</para>

      <programlisting>&#60;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&#62;</programlisting>

      <para>If you write your documentation <quote>by hand</quote>, i.e. in a
      text editor, you must type that line yourself. If you use a dedicated
      XML editor it will be inserted automatically when you create a new
      document.</para>

      <para>You should always place your document in the <filename
      class="directory">src\docs\firebirddocs</filename> subdirectory of the
      manual tree.</para>
    </sect2>

    <sect2>
      <title>Typing text</title>

      <para>If you type your DocBook XML text in an text editor like
      <application>Notepad</application>, <application>emacs</application> or
      <application>ConText</application>, you can use linebreaks, indentation
      and multiple spaces just as you please. Every occurrence of
      <firstterm>whitespace</firstterm> (a sequence of one or more
      <literal>space</literal>, <literal>tab</literal>, <literal>linefeed</literal>
      or <literal>formfeed</literal> characters) will be converted to a single
      space character in the output. So this:</para>

      <programlisting>&#60;section&#62;&#60;title&#62;Firebird Architectures&#60;/title&#62;&#60;para&#62;Now let&#39;s have a look at Firebird&#39;s
different architectures.&#60;/para&#62;&#60;itemizedlist&#62;&#60;listitem&#62;&#60;para&#62;First, there&#39;s the 
so-called &#60;firstterm&#62;Classic Server&#60;/firstterm&#62;.&#60;/para&#62;&#60;/listitem&#62;&#60;listitem&#62;&#60;para&#62;Then 
there is &#60;firstterm&#62;Superserver&#60;/firstterm&#62; architecture.&#60;/para&#62;&#60;/listitem&#62;&#60;listitem&#62;
&#60;para&#62;And finally, with the release of Firebird 1.5 we also have the &#60;firstterm&#62;embedded 
server&#60;/firstterm&#62;.&#60;/para&#62;&#60;/listitem&#62;&#60;/itemizedlist&#62;&#60;/section&#62;</programlisting>

      <para>will result in the same output as this:</para>

      <programlisting>&#60;section&#62;
  &#60;title&#62;Firebird Architectures&#60;/title&#62;
  &#60;para&#62;
    Now let&#39;s have a look at Firebird&#39;s different architectures.
  &#60;/para&#62;
  &#60;itemizedlist&#62;
    &#60;listitem&#62;
      &#60;para&#62;First, there&#39;s the so-called &#60;firstterm&#62;Classic Server&#60;/firstterm&#62;.&#60;/para&#62;
    &#60;/listitem&#62;
    &#60;listitem&#62;
      &#60;para&#62;Then there is &#60;firstterm&#62;Superserver&#60;/firstterm&#62; architecture.&#60;/para&#62;
    &#60;/listitem&#62;
    &#60;listitem&#62;
      &#60;para&#62;And finally, with the release of Firebird 1.5 we also
        have the &#60;firstterm&#62;embedded server&#60;/firstterm&#62;.&#60;/para&#62;
    &#60;/listitem&#62;
  &#60;/itemizedlist&#62;
&#60;/section&#62;</programlisting>

      <para>Needless to say, the second form is much easier to read and
      understand for a human. So if you type your XML by hand, format the text
      in such a way that the structure is as clear as possible. Like the
      prophets said: <quote>Indent! Indent! Indent!</quote> (Or was that
      repent? No, I&#39;m sure it was indent.)</para>

      <para>If, on the other hand, you use a dedicated XML editor, hitting
      <keycap>Enter</keycap> may close the current <sgmltag class="starttag">para</sgmltag>
      and open a new one. Make sure you know how your editor behaves in this
      respect, and use the Enter key accordingly. Also check what happens to
      multiple consecutive whitespace characters, as some XML editors may use
      special tricks to preserve them.</para>
    </sect2>

    <sect2 id="docwritehowto-frequently-used-elements">
      <title>Elements we use frequently</title>

      <para>This section discusses the DocBook elements we use most in our
      Firebird docs. It includes lots of examples in DocBook XML format. If
      you use an XML authoring tool, what you see on your screen may look
      nothing like the examples given here, but if you open your XML file in a
      text editor - or choose a text view in your XML tool - you will see the
      actual XML. You may also have a look at the XML sources that are already
      in the manual module, to see how the other authors build up their docs
      and apply tags.</para>

      <tip>
        <para>This is a very long section, but don&#39;t let that discourage
        you. My advice is that you <emphasis>carefully</emphasis> read the
        subsection on hierarchical elements, and skim the others. Don&#39;t
        worry if there are things you don&#39;t understand at once, and by no
        means try to learn the material by heart! Just have this Howto handy
        when you write your doc and revisit the element subsections from time
        to time (like when you need them).</para>
      </tip>

      <sect3 id="docwritehowto-elements-hierarchical">
        <title>Hierarchical elements</title>

        <para>The most common hierarchy is, starting at the top: <sgmltag
        class="starttag">set</sgmltag> - <sgmltag class="starttag">book</sgmltag>
        - <sgmltag class="starttag">chapter</sgmltag> - <sgmltag
        class="starttag">section</sgmltag> - <sgmltag class="starttag">para</sgmltag>.
        Section elements can be nested; that is: you can create subsections by
        inserting a section element in another.</para>

        <para>Books, chapters and top-level sections should always have an
        <firstterm>id</firstterm> and a <firstterm>title</firstterm>. The id
        allows an element to be referenced from another part of the document,
        and even from another document in the set. <sgmltag class="attribute">Id</sgmltag>
        is an attribute, which means that it appears within a tag; it&#39;s
        not visible in the rendered docs (except in the HTML source text).
        <sgmltag class="element">Title</sgmltag> is an element, often the
        first child element to be found in its parent. The content of the
        title element will appear in the output docs.</para>

        <para>If you write a book or an article, it&#39;s also a good idea to
        include a <sgmltag class="starttag">bookinfo</sgmltag> or <sgmltag
        class="starttag">articleinfo</sgmltag> element, where you can put
        author information (and more).</para>

        <para>The following example gives you an idea of how to structure your
        document:</para>

        <programlisting>&#60;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&#62;

&#60;book id=&#34;usersguide&#34;&#62;

  &#60;bookinfo&#62;
    &#60;title&#62;Firebird Users Guide&#60;/title&#62;
    &#60;author&#62;
      &#60;firstname&#62;William&#60;/firstname&#62;
      &#60;surname&#62;Shakespeare&#60;/surname&#62;
    &#60;/author&#62;
  &#60;/bookinfo&#62;

  &#60;chapter id=&#34;usersguide-intro&#34;&#62;
    &#60;title&#62;Introduction&#60;/title&#62;
    &#60;para&#62;
       Hello! This is the introductory text to the Firebird Users Guide.
    &#60;para&#62;
  &#60;/chapter&#62;

  &#60;chapter id=&#34;usersguide-download-install&#34;&#62;
    &#60;title&#62;Downloading and installing Firebird&#60;/title&#62;
    &#60;para&#62;
      In this chapter we&#39;ll demonstrate how to download and install Firebird.
    &#60;/para&#62;
    &#60;section id=&#34;usersguide-download&#34;&#62;
      &#60;title&#62;Downloading Firebird&#60;/title&#62;
      &#60;para&#62;
        To download Firebird from the Internet, first go to the following URL: etc. etc.
      &#60;/para&#62;
      ...more paragraphs, possibly subsections...
    &#60;/section&#62;
    &#60;section id=&#34;usersguide-install&#34;&#62;
      &#60;title&#62;Installing Firebird&#60;/title&#62;
      &#60;para&#62;
        Installing Firebird on your system goes like this: etc. etc.
      &#60;/para&#62;
      ...more paragraphs, possibly subsections...
    &#60;/section&#62;
  &#60;/chapter&#62;

  ...more chapters...

&#60;/book&#62;</programlisting>

        <para>Some rules and remarks:</para>

        <itemizedlist>
          <listitem>
            <para>First, notice again that attribute values must always be
            quoted. (But if you fill them in in an attribute editor, don&#39;t
            insert them: the editor will take care of the quotes.)</para>
          </listitem>

          <listitem>
            <para>The <sgmltag class="element">title</sgmltag> of a book or
            article may appear in the <sgmltag class="element">book</sgmltag>
            or <sgmltag class="element">article</sgmltag> element itself, but
            also in the <sgmltag class="element">bookinfo</sgmltag> or
            <sgmltag class="element">articleinfo</sgmltag> element. It is even
            legal to include it in both, but in that case the two <sgmltag
            class="element">title</sgmltag>&#39;s <emphasis>must</emphasis>
            have the same content. In other words: pick one or the other, not
            both, if you want to stay out of trouble.</para>
          </listitem>

          <listitem>
            <para>All <sgmltag class="attribute">id</sgmltag> attributes must
            be unique within the entire bookset.</para>
          </listitem>

          <listitem>
            <para>Within a book or article, all <sgmltag class="attribute">id</sgmltag>&#39;s
            should start with the same lowercase word, e.g.
            <literal>usersguide</literal>, followed by a dash, followed by one
            or more other lowercase words. Examples are <literal>usersguide-intro</literal>
            and <literal>usersguide-download-install</literal>. This is not a
            DocBook requirement, but our own convention.</para>
          </listitem>

          <listitem>
            <para>As you can see in the example, <sgmltag class="element">chapter</sgmltag>&#39;s
            and <sgmltag class="element">section</sgmltag>&#39;s can start
            directly with one or more <sgmltag class="element">para</sgmltag>
            elements. But once you include sections in a chapter, or
            subsections in a section, you can&#39;t add any more <sgmltag
            class="element">para</sgmltag> elements after them, only within
            them. Good DocBook-aware XML editors simply won&#39;t let you do
            such a thing, but if you type your DocBook XML by hand this is
            something you need to be aware of.</para>
          </listitem>

          <listitem>
            <para>If you use an XML editor, chances are that you rarely have
            to create <sgmltag class="element">para</sgmltag> elements
            explicitly. For instance, if I insert a <sgmltag class="element">chapter</sgmltag>
            or a <sgmltag class="element">section</sgmltag> in
            <application>XMLMind XML Editor</application>, the first - empty -
            <sgmltag class="element">para</sgmltag> is automatically created.
            And when I type text in a paragraph and hit <keycap>ENTER</keycap>,
            that paragraph is automatically closed with a <sgmltag
            class="endtag">para</sgmltag> and a next one created.</para>
          </listitem>
        </itemizedlist>

        <para><link linkend="docwritehowto-elements-end">Skip the rest of the
        DocBook elements subsections</link> if you already know everything
        about DocBook elements.</para>
      </sect3>

      <sect3>
        <title>Lists</title>

        <para>DocBook offers various list elements, of which three are used
        frequently:</para>

        <variablelist>
          <varlistentry>
            <term><sgmltag class="element">itemizedlist</sgmltag></term>

            <listitem>
              <para>An <sgmltag class="element">itemizedlist</sgmltag> is used
              to enumerate items whose order is not (very) important:</para>

              <programlisting>&#60;itemizedlist&#62;
  &#60;listitem&#62;&#60;para&#62;Oranges are juicy&#60;/para&#62;&#60;/listitem&#62;
  &#60;listitem&#62;&#60;para&#62;Apples are supposed to be healthy&#60;/para&#62;&#60;/listitem&#62;
  &#60;listitem&#62;&#60;para&#62;Most people find lemons way too sour&#60;/para&#62;&#60;/listitem&#62;
&#60;/itemizedlist&#62;</programlisting>

              <para>The items in the list are generally marked with a bullet
              in the rendered output docs:</para>

              <itemizedlist>
                <listitem>
                  <para>Oranges are juicy</para>
                </listitem>

                <listitem>
                  <para>Apples are supposed to be healthy</para>
                </listitem>

                <listitem>
                  <para>Most people find lemons way too sour</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><sgmltag class="element">orderedlist</sgmltag></term>

            <listitem>
              <para>Use an <sgmltag class="element">orderedlist</sgmltag> when
              you want to stress the order of the entries:</para>

              <programlisting>&#60;orderedlist numeration=&#34;loweralpha&#34;&#62;
  &#60;listitem&#62;&#60;para&#62;Pick the lock&#60;/para&#62;&#60;/listitem&#62;
  &#60;listitem&#62;&#60;para&#62;Rob the house&#60;/para&#62;&#60;/listitem&#62;
  &#60;listitem&#62;&#60;para&#62;Get arrested&#60;/para&#62;&#60;/listitem&#62;
&#60;/orderedlist&#62;</programlisting>

              <para>By default, arabic numerals will be placed before the
              items, but you can change this with the <sgmltag
              class="attribute">numeration</sgmltag> attribute. Here&#39;s how
              the above example is rendered:</para>

              <orderedlist numeration="loweralpha">
                <listitem>
                  <para>Pick the lock</para>
                </listitem>

                <listitem>
                  <para>Rob the house</para>
                </listitem>

                <listitem>
                  <para>Get arrested</para>
                </listitem>
              </orderedlist>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><sgmltag class="element">variablelist</sgmltag></term>

            <listitem>
              <para>A <sgmltag class="element">variablelist</sgmltag> consists
              of a number of terms and their descriptions or definitions:</para>

              <programlisting>&#60;variablelist&#62;
  &#60;varlistentry&#62;
    &#60;term&#62;Tag&#60;/term&#62;
    &#60;listitem&#62;&#60;para&#62;A piece of text enclosed in angle brackets&#60;/para&#62;&#60;/listitem&#62;
  &#60;/varlistentry&#62;
  &#60;varlistentry&#62;
    &#60;term&#62;Element&#60;/term&#62;
    &#60;listitem&#62;&#60;para&#62;A start tag, a matching end tag, and everything in between&#60;/para&#62;&#60;/listitem&#62;
  &#60;/varlistentry&#62;
  &#60;varlistentry&#62;
    &#60;term&#62;Content of an element&#60;/term&#62;
    &#60;listitem&#62;&#60;para&#62;Everything between the matching tags&#60;/para&#62;&#60;/listitem&#62;
  &#60;/varlistentry&#62;
&#60;/variablelist&#62;</programlisting>

              <para>The list you are looking at right now, enumerating the
              different types of lists, is a <sgmltag class="element">variablelist</sgmltag>.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect3>

      <sect3>
        <title>Links</title>

        <para>You can create hyperlinks to targets in your own document, in
        another document in the set, or on the Internet.</para>

        <variablelist>
          <varlistentry>
            <term><sgmltag class="element">link</sgmltag></term>

            <listitem>
              <para><sgmltag class="element">link</sgmltag> is the generic
              element to point to another location in the document or set. The
              <sgmltag class="attribute">linkend</sgmltag> attribute must
              always be present - its value should be the <sgmltag
              class="attribute">id</sgmltag> of the <firstterm>link target</firstterm>
              (the element to jump to).</para>

              <programlisting>Click &#60;link linkend=&#34;docwritehowto-introduction&#34;&#62;here&#60;/link&#62; to jump to the introduction.</programlisting>

              <para>In the rendered document, the word &#34;here&#34; will be
              <firstterm>hot</firstterm>, that is: a clickable link pointing
              to the introduction.</para>

              <para>[Advanced stuff follows, feel free to skip it and jump
              right to <sgmltag class="element">xref</sgmltag>:] There&#39;s
              also an empty-element version of <sgmltag class="element">link</sgmltag>
              (notice the <literal>/&#62;</literal> at the end):</para>

              <programlisting>&#60;link linkend=&#34;docwritehowto-introduction&#34; endterm=&#34;docwritehowto-intro-title&#34;/&#62;</programlisting>

              <para>This link points to the same location as the previous one,
              but now the hot text is determined automatically by the content
              of the element which has the id <sgmltag class="attvalue">docwritehowto-intro-title</sgmltag>.
              Why would we want to use this version? It&#39;s more work,
              because in cases like this we usually want the hot text to be
              the title of a chapter or section. This obliges us to give that
              title an id, which normally isn&#39;t necessary. But you reap
              the benefits when you - or someone else - later change the title
              of the targeted chapter: the hot text will automatically change
              with it, no action required on the maintainer&#39;s part. So
              yes, it&#39;s more work at first, but more powerful too, and
              less maintenance later. Of course this only goes for links where
              you want the hot text to be equal to the content of a certain
              (title) element.</para>

              <important>
                <para>Please understand that the hot text in the last example
                will not be &#34;docwritehowto-intro-title&#34;, but the
                <emphasis>content</emphasis> of the <emphasis>element</emphasis>
                whose <emphasis>id</emphasis> is <sgmltag class="attvalue">docwritehowto-intro-title</sgmltag>.
                That&#39;s why you&#39;ll almost always use the id of a
                <sgmltag class="element">title</sgmltag> element here: if
                you&#39;d specify a chapter&#39;s id, the entire content of
                that chapter would be copied into the hot text. Probably not
                what you want...</para>
              </important>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><sgmltag class="element">xref</sgmltag></term>

            <listitem>
              <para>An <sgmltag class="element">xref</sgmltag> is an empty
              element that you can use much like a <sgmltag class="element">link</sgmltag>.
              Here too, the linkend attribute is required to specify the
              target. In its most basic form, an xref looks like this:</para>

              <programlisting>&#60;xref linkend=&#34;docwritehowto-introduction&#34;/&#62;</programlisting>

              <para>The hot text is determined automatically by the processing
              software. Unfortunately, with our current build process this
              means that some awkward looking text like &#34;<literal>Section
              , How I killed my grandmother</literal>&#34; is generated, which
              is not exactly ideal.</para>

              <para>There are two ways to make the situation better. First,
              you can keep the <sgmltag class="element">xref</sgmltag> like in
              the example above and give the <emphasis>target element</emphasis>
              an <sgmltag class="attribute">xreflabel</sgmltag> attribute:</para>

              <programlisting>&#60;chapter id=&#34;docwritehowto-introduction&#34; xreflabel=&#34;Intro&#34;&#62; ... &#60;/chapter&#62;</programlisting>

              <para>The hot text will now be &#34;<literal>Intro</literal>&#34;.
              Xreflabels can be useful if you have long titles and you want
              something shorter for link texts.</para>

              <para>Second [advanced, feel free etc.], you can specify an
              <sgmltag class="attribute">endterm</sgmltag> in the <sgmltag
              class="starttag">xref</sgmltag> tag, just as with the empty
              <sgmltag class="element">link</sgmltag> element discussed above:</para>

              <programlisting>&#60;xref linkend=&#34;docwritehowto-introduction&#34; endterm=&#34;docwritehowto-intro-title&#34;/&#62;</programlisting>

              <para>Indeed this looks and works exactly as the empty-element
              version of <sgmltag class="element">link</sgmltag> - except that
              it now says xref instead of link. If an endterm is present it
              will always be used to determine the hot text, even if the
              target has an xreflabel.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><sgmltag class="element">ulink</sgmltag></term>

            <listitem>
              <para>Use a <sgmltag class="element">ulink</sgmltag> to link to
              an Internet resource. The <sgmltag class="attribute">url</sgmltag>
              attribute is mandatory:</para>

              <programlisting>Click &#60;ulink url=&#34;http://docbook.org/tdg/en/&#34;&#62;this link&#60;/ulink&#62; to read The Definitive Guide.</programlisting>

              <para>This makes the words &#34;<literal>this link</literal>&#34;
              a hyperlink pointing to the URL <literal>http://docbook.org/tdg/en/</literal></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><sgmltag class="element">email</sgmltag></term>

            <listitem>
              <para>You can make an email link with a <sgmltag class="element">ulink</sgmltag>,
              but it&#39;s easier to use the <sgmltag class="element">email</sgmltag>
              element. This will show the email address as a clickable link in
              the output. This line of XML:</para>

              <programlisting>Send mail to &#60;email&#62;firebird-docs-request@lists.sourceforge.net&#60;/email&#62; to subscribe.</programlisting>

              <para>results in the following output: &#34;Send mail to
              <email>firebird-docs-request@lists.sourceforge.net</email> to
              subscribe.&#34;</para>

              <para>If you want the hot text to be different from the email
              address itself, use a <sgmltag class="element">ulink</sgmltag>
              with a <literal>mailto:</literal> URL.</para>

              <warning>
                <para>If you include links to email addresses - whether with
                <sgmltag class="element">email</sgmltag> or with <sgmltag
                class="element">ulink</sgmltag> - or even if you only
                <emphasis>mention</emphasis> them in your text, and your
                document is subsequently published on the Internet, these
                email addresses will be exposed to harvesting robots used by
                spammers. This will likely increase the amount of spam sent to
                such addresses. Always make sure the owner of the address
                agrees with having it published on the Internet!</para>
              </warning>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><sgmltag class="element">anchor</sgmltag></term>

            <listitem>
              <para>An <sgmltag class="element">anchor</sgmltag> is an empty
              element marking an exact spot in the document. It doesn&#39;t
              show up in the text that your readers see, but it can be used as
              a link target. This is useful if you want to link to a place
              somewhere in the middle of a long paragraph:</para>

              <programlisting>&#60;para id=&#34;lost-at-sea&#34;&#62;
  Blah blah blah...
  and some more...
  and then some...
  Now here&#39;s an interesting place in the paragraph I want to be able to link to:
  &#60;anchor id=&#34;captain-haddock&#34;/&#62;There it is!
  Paragraph drones on...
  and on...
  and on...
&#60;/para&#62;</programlisting>

              <para>Having placed the anchor, you can create a link to it:</para>

              <programlisting>&#60;link linkend=&#34;captain-haddock&#34;&#62;Go to the interesting spot&#60;/link&#62; in that long, long paragraph.</programlisting>

              <para>If you link to a short element, or to the beginning of an
              element, it&#39;s easier to give the element itself an id and
              use that as linkend.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect3>

      <sect3>
        <title>Program listings, screens, literal layout, and examples</title>

        <variablelist>
          <varlistentry>
            <term><sgmltag class="element">programlisting</sgmltag></term>

            <listitem>
              <para>If you include code fragments in your doc, put them in a
              <sgmltag class="element">programlisting</sgmltag> element.
              Everything you type within a programlisting will be rendered
              verbatim, including line breaks, spaces etc. Also, a fixed-with
              font will be used in the rendered documents. The term
              <quote>program listing</quote> is to be interpreted loosely
              here: you should also use this element for SQL fragments and
              DocBook XML examples. This Howto - and especially the section
              about elements, which you are reading now - is littered with
              <sgmltag class="element">programlisting</sgmltag>&#39;s, so you
              already know what they look like.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><sgmltag class="element">screen</sgmltag></term>

            <listitem>
              <para>Use a <sgmltag class="element">screen</sgmltag> element to
              show what a user sees or might see on a computer screen in text
              mode, or in a terminal window. Here too, your layout will be
              preserved and a fixed-width font used, but the semantics are
              different. It may or may not look different from a
              programlisting in the output. Here&#39;s a short example,
              showing what happens if you try to build a non-existing target
              in the manual tree:</para>

              <programlisting>&#60;screen&#62;
D:\Firebird\manual_incl_howto\src\build&#62;build ugh
java version &#34;1.4.2_01&#34;
Java(TM) 2 Runtime Environment, Standard Edition (build 1.4.2_01-b06)
Java HotSpot(TM) Client VM (build 1.4.2_01-b06, mixed mode)

Buildfile: build.xml

BUILD FAILED
Target `ugh&#39; does not exist in this project.
&#60;/screen&#62;</programlisting>

              <para>And this is how it&#39;s rendered:</para>

              <screen>D:\Firebird\manual_incl_howto\src\build&#62;build ugh
java version &#34;1.4.2_01&#34;
Java(TM) 2 Runtime Environment, Standard Edition (build 1.4.2_01-b06)
Java HotSpot(TM) Client VM (build 1.4.2_01-b06, mixed mode)

Buildfile: build.xml

BUILD FAILED
Target `ugh&#39; does not exist in this project.</screen>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><sgmltag class="element">literallayout</sgmltag></term>

            <listitem>
              <para><sgmltag class="element">literallayout</sgmltag>, like
              <sgmltag class="element">screen</sgmltag> and <sgmltag
              class="element">programlisting</sgmltag>, keeps your layout
              intact, but it usually doesn&#39;t change the font (unless you
              set the <sgmltag class="attribute">class</sgmltag> attribute to
              <sgmltag class="attvalue">monospaced</sgmltag>. It&#39;s also
              more general than the previous two in the sense that there&#39;s
              no meaning attached to its content: you can put any kind of text
              here of which you want to preserve the layout.</para>

              <para>Unfortunately, at the time this Howto is written, the PDF
              rendering of non-monospaced <sgmltag class="element">literallayout</sgmltag>
              is broken. I&#39;ll give an example anyway; if you look at the
              PDF version you can see if the problem has been fixed or not:</para>

              <programlisting>&#60;literallayout&#62;
The Sick Rose

Oh Rose, thou art sick!
The invisible worm
That flies in the night,
In the howling storm,

Has found out thy bed
Of crimson joy,
And his dark secret love
Doth thy life destroy.

  -- William Blake
&#60;/literallayout&#62;</programlisting>

              <para>Output:</para>

              <literallayout>The Sick Rose

Oh Rose, thou art sick!
The invisible worm
That flies in the night,
In the howling storm,

Has found out thy bed
Of crimson joy,
And his dark secret love
Doth thy life destroy.

  -- William Blake</literallayout>

              <para>If the above output looks terrible in the PDF, with weird
              multiple spacing between the words, you know it&#39;s still
              broken and you probably shouldn&#39;t use non-monospaced
              <sgmltag class="element">literallayout</sgmltag> at all.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><sgmltag class="element">example</sgmltag></term>

            <listitem>
              <para>An <sgmltag class="element">example</sgmltag> is a formal
              example with a title. It is usually given an <sgmltag
              class="attribute">id</sgmltag> so it can be referred to from
              other places in the document. An index of examples is built
              automatically when the document is rendered. You&#39;ll often
              find <sgmltag class="element">programlisting</sgmltag>&#39;s in
              an <sgmltag class="element">example</sgmltag>, but it may also
              contain <sgmltag class="element">screen</sgmltag>&#39;s,
              <sgmltag class="element">para</sgmltag>&#39;s, lists, etc.</para>

              <para>Here&#39;s an example of an <sgmltag class="element">example</sgmltag>:</para>

              <programlisting>&#60;example id=&#34;docwritehowto-sql-example&#34;&#62;
  &#60;title&#62;An SQL example&#60;/title&#62;
  &#60;para&#62;With this command you can list all the records in the COUNTRY table:&#60;/para&#62;
  &#60;programlisting&#62;SELECT * FROM COUNTRY;&#60;/programlisting&#62;
&#60;/example&#62;</programlisting>

              <para>In the output this will look like:</para>

              <example id="docwritehowto-sql-example">
                <title>An SQL example</title>

                <para>With this command you can list all the records in the
                COUNTRY table:</para>

                <programlisting>SELECT * FROM COUNTRY;</programlisting>
              </example>

              <para>If you want an example without a mandatory title, use an
              <sgmltag class="element">informalexample</sgmltag>. Informal
              examples are also left out of the examples index</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect3>

      <sect3>
        <title>Tables</title>

        <para>If you have ever made an HTML table for a website, you won&#39;t
        have much difficulty creating tables in DocBook. There are differences
        though, and DocBook tables are vastly richer.</para>

        <para>A <sgmltag class="starttag">table</sgmltag> consists of a
        <sgmltag class="starttag">title</sgmltag> and one or more <sgmltag
        class="starttag">tgroup</sgmltag>&#39;s - usually one. The <sgmltag
        class="starttag">tgroup</sgmltag> element has one mandatory attribute:
        <sgmltag class="attribute">cols</sgmltag>. You must set this attribute
        to the number of columns in the <sgmltag class="starttag">tgroup</sgmltag>.
        Within a <sgmltag class="starttag">tgroup</sgmltag> you can place
        <sgmltag class="starttag">thead</sgmltag>, <sgmltag class="starttag">tfoot</sgmltag>
        and <sgmltag class="starttag">tbody</sgmltag> elements. Each of these
        has one or more <sgmltag class="starttag">row</sgmltag>&#39;s, which
        in turn have as many <sgmltag class="starttag">entry</sgmltag>&#39;s
        (cells) as you have specified in the <sgmltag class="attribute">cols</sgmltag>
        attribute. (You can combine cells by creating spans, but we won&#39;t
        go into that here.)</para>

        <para>So much for the basic structure. Now we&#39;ll show you an
        example; first in DocBook XML source text, and then the resulting
        table in the rendered output document. Don&#39;t worry about the
        <sgmltag class="starttag">colspec</sgmltag>&#39;s for now; these are
        non-mandatory subelements used for finetuning.</para>

        <programlisting>&#60;table id=&#34;docwritehowto-table-dboftheyear&#34;&#62;
  &#60;title&#62;LinuxQuestions.org poll: Database of the year 2003&#60;/title&#62;

  &#60;tgroup cols=&#34;3&#34;&#62;
    &#60;colspec align=&#34;left&#34; colname=&#34;col-dbname&#34; colwidth=&#34;2*&#34;/&#62;
    &#60;colspec align=&#34;right&#34; colname=&#34;col-votes&#34; colwidth=&#34;1*&#34;/&#62;
    &#60;colspec align=&#34;right&#34; colname=&#34;col-perc&#34; colwidth=&#34;1*&#34;/&#62;

    &#60;thead&#62;
      &#60;row&#62;
        &#60;entry align=&#34;center&#34;&#62;Database&#60;/entry&#62;
        &#60;entry align=&#34;center&#34;&#62;Votes&#60;/entry&#62;
        &#60;entry align=&#34;center&#34;&#62;Percentage&#60;/entry&#62;
      &#60;/row&#62;
    &#60;/thead&#62;

    &#60;tfoot&#62;
      &#60;row&#62;
        &#60;entry&#62;Total&#60;/entry&#62;
        &#60;entry&#62;1111&#60;/entry&#62;
        &#60;entry&#62;99.99&#60;/entry&#62;
      &#60;/row&#62;
    &#60;/tfoot&#62;

    &#60;tbody&#62;
      &#60;row&#62;
        &#60;entry&#62;MySQL&#60;/entry&#62;
        &#60;entry&#62;405&#60;/entry&#62;
        &#60;entry&#62;36.45&#60;/entry&#62;
      &#60;/row&#62;
      &#60;row&#62;
        &#60;entry&#62;Firebird&#60;/entry&#62;
        &#60;entry&#62;403&#60;/entry&#62;
        &#60;entry&#62;36.27&#60;/entry&#62;
      &#60;/row&#62;

      ... 5 more rows not shown here ....

    &#60;/tbody&#62;
  &#60;/tgroup&#62;
&#60;/table&#62;</programlisting>

        <para>And here&#39;s the resulting table:</para>

        <table id="docwritehowto-table-dboftheyear">
          <title>LinuxQuestions.org poll: Database of the year 2003</title>

          <tgroup cols="3">
            <colspec align="left" colname="col-dbname" colwidth="2*" />

            <colspec align="right" colname="col-votes" colwidth="1*" />

            <colspec align="right" colname="col-perc" colwidth="1*" />

            <thead>
              <row>
                <entry align="center">Database</entry>

                <entry align="center">Votes</entry>

                <entry align="center">Percentage</entry>
              </row>
            </thead>

            <tfoot>
              <row>
                <entry>Total</entry>

                <entry>1111</entry>

                <entry>99.99</entry>
              </row>
            </tfoot>

            <tbody>
              <row>
                <entry>MySQL</entry>

                <entry>405</entry>

                <entry>36.45</entry>
              </row>

              <row>
                <entry>Firebird</entry>

                <entry>403</entry>

                <entry>36.27</entry>
              </row>

              <row>
                <entry>Postgres</entry>

                <entry>269</entry>

                <entry>24.21</entry>
              </row>

              <row>
                <entry>Oracle</entry>

                <entry>25</entry>

                <entry>2.25</entry>
              </row>

              <row>
                <entry>Berkeley DB</entry>

                <entry>4</entry>

                <entry>0.36</entry>
              </row>

              <row>
                <entry>Sybase</entry>

                <entry>3</entry>

                <entry>0.27</entry>
              </row>

              <row>
                <entry>DB2</entry>

                <entry>2</entry>

                <entry>0.18</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>By the way, these are the actual results of a real poll at
        LinuxQuestions.org. As you can see, if only three more people had
        voted for Firebird we would have won. If you know who these three
        persons are, please report them to our Chief Inquisitor. He would like
        to have a little, er... <emphasis>talk</emphasis> with them :-)</para>

        <para>Tables are automatically indexed. An <sgmltag class="starttag">informaltable</sgmltag>
        has the same structure as a <sgmltag class="starttag">table</sgmltag>
        but doesn&#39;t require a title and is not included in the index.
        (This is exactly the same as with <sgmltag class="starttag">example</sgmltag>/<sgmltag
        class="starttag">informalexample</sgmltag>.) If you want to nest
        tables, either use a <sgmltag class="starttag">table</sgmltag>/<sgmltag
        class="starttag">informaltable</sgmltag> <emphasis>within</emphasis>
        an <sgmltag class="starttag">entry</sgmltag>, or an <sgmltag
        class="starttag">entrytbl</sgmltag> <emphasis>instead of</emphasis> an
        <sgmltag class="starttag">entry</sgmltag>.</para>

        <para>Tables have many more features than shown here, but we&#39;ll
        leave those for you to explore.</para>
      </sect3>

      <sect3>
        <title>Notes, warnings, and the like</title>

        <para>DocBook has several tags to mark a block of text as a note, a
        warning, a tip, etc. In the output documents such blocks typically
        appear indented, and marked with an icon or a word to denote their
        purpose. These tags are, in alphabetical order:</para>

        <blockquote>
          <para><sgmltag class="starttag">caution</sgmltag>, <sgmltag
          class="starttag">important</sgmltag>, <sgmltag class="starttag">note</sgmltag>,
          <sgmltag class="starttag">tip</sgmltag>, and <sgmltag
          class="starttag">warning</sgmltag></para>
        </blockquote>

        <para>I will give you a <sgmltag class="starttag">tip</sgmltag> as an
        example; the others are used in exactly the same way:</para>

        <programlisting>&#60;tip&#62;
  &#60;para&#62;
    If you insert a caution, important, note, tip, or warning element in your text, 
    don&#39;t start it with the word caution, important, note, tip, or warning, 
    because these words are usually automatically generated by the rendering engine.
  &#60;/para&#62;
&#60;/tip&#62;</programlisting>

        <para>And this is the result:</para>

        <tip>
          <para>If you insert a <sgmltag class="starttag">caution</sgmltag>,
          <sgmltag class="starttag">important</sgmltag>, <sgmltag
          class="starttag">note</sgmltag>, <sgmltag class="starttag">tip</sgmltag>,
          or <sgmltag class="starttag">warning</sgmltag> element in your text,
          don&#39;t start it with the word <literal>caution</literal>,
          <literal>important</literal>, <literal>note</literal>,
          <literal>tip</literal>, or <literal>warning</literal>, because these
          words are usually automatically generated by the rendering engine.</para>
        </tip>

        <para>You may have noticed that the words <literal>caution</literal>,
        <literal>important</literal> etc. look different from the rest of the
        tip&#39;s text. How come? Well, to tell you the truth, I&#39;ve
        surrounded them with special tags (first with <sgmltag
        class="starttag">sgmltag</sgmltag>&#39;s, the second time with
        <sgmltag class="starttag">literal</sgmltag>&#39;s) to make them look
        like that. But this made the source XML look very noisy, so I decided
        to remove those tags from the example source I presented to you.</para>

        <para>If you want to set off a block of text from its surroundings
        without marking it as a tip or whatever, use a <sgmltag
        class="starttag">blockquote</sgmltag>.</para>
      </sect3>

      <sect3>
        <title>Various inline elements</title>

        <para>To conclude the subsection on DocBook elements I will now
        briefly introduce a number of <firstterm>inline elements</firstterm>.
        They are called <quote>inline</quote> because they don&#39;t interrupt
        the flow of the text. If I use e.g. an <sgmltag class="element">emphasis</sgmltag>
        element:</para>

        <programlisting>Don&#39;t &#60;emphasis&#62;ever&#60;/emphasis&#62; call me fat again!</programlisting>

        <para>the result is this:</para>

        <blockquote>
          <para>Don&#39;t <emphasis>ever</emphasis> call me fat again!</para>
        </blockquote>

        <para>The word <quote>ever</quote> is emphasized, but it keeps its
        place in the sentence. We&#39;ve already encountered some inline
        elements before: the various link types. Other elements - like
        <sgmltag class="element">table</sgmltag>, <sgmltag class="element">warning</sgmltag>,
        <sgmltag class="element">blockquote</sgmltag> and <sgmltag
        class="element">programlisting</sgmltag> - are always displayed as a
        block, set apart from the surrounding text (even if you
        <quote>inline</quote> them in your XML source). Not surprisingly,
        these are called <firstterm>block elements</firstterm>. Block elements
        often contain inline elements; the reverse is not possible.</para>

        <para>OK, let&#39;s get started with those inline elements. I&#39;ll
        include examples - both XML source and rendered output - for most of
        them:</para>

        <variablelist>
          <varlistentry>
            <term><sgmltag class="element">filename</sgmltag> - <sgmltag
            class="element">command</sgmltag> - <sgmltag class="element">application</sgmltag>
            - <sgmltag class="element">envar</sgmltag></term>

            <listitem>
              <para>Use the <sgmltag class="element">filename</sgmltag> tag to
              mark file names in the broadest sense. Attributes can optionally
              indicate that the file is a header file, a directory, etc.</para>

              <programlisting>Place your doc in the &#60;filename class=&#34;directory&#34;&#62;src\docs\firebirddocs&#60;/filename&#62; subdirectory.</programlisting>

              <para>The output reads: Place your doc in the <filename
              class="directory">src\docs\firebirddocs</filename> subdirectory.</para>

              <para><sgmltag class="element">command</sgmltag> and <sgmltag
              class="element">application</sgmltag> are both used for
              executable programs. <sgmltag class="element">command</sgmltag>
              is usually chosen for smaller programs and internal commands;
              its content should be the exact command as given on a command
              line; <sgmltag class="element">application</sgmltag> is
              generally used for bigger programs and need not be the name of
              the executable file. Both can refer to the same program:</para>

              <programlisting>Type &#60;command&#62;netscape&#38;amp&#60;/command&#62; in a terminal window to start 
&#60;application&#62;Netscape Navigator&#60;/application&#62;.</programlisting>

              <para>This is rendered as: Type <command>netscape&#38;</command>
              in a terminal window to start <application>Netscape Navigator</application>.</para>

              <para><sgmltag class="element">envar</sgmltag> denotes an
              environment variable.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><sgmltag class="element">subscript</sgmltag> - <sgmltag
            class="element">superscript</sgmltag></term>

            <listitem>
              <para>Do the expected thing:</para>

              <programlisting>After inventing the formula e = mc&#60;superscript&#62;2&#60;/superscript&#62;, I really felt like a glass of 
liquid H&#60;subscript&#62;2&#60;/subscript&#62;O !</programlisting>

              <para><emphasis>Output:</emphasis> After inventing the formula e
              = mc<superscript>2</superscript>, I really felt like a glass of
              liquid H<subscript>2</subscript>O !</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><sgmltag class="element">varname</sgmltag> - <sgmltag
            class="element">constant</sgmltag> - <sgmltag class="element">database</sgmltag></term>

            <listitem>
              <para>The use of <sgmltag class="element">varname</sgmltag> and
              <sgmltag class="element">constant</sgmltag> should be obvious.
              The <sgmltag class="starttag">database</sgmltag> tag is not only
              meant for databases, but also for database objects:</para>

              <programlisting>The &#60;database class=&#34;table&#34;&#62;COUNTRY&#60;/database&#62; table has two fields:
&#60;database class=&#34;field&#34;&#62;COUNTRY&#60;/database&#62; and &#60;database class=&#34;field&#34;&#62;CURRENCY&#60;/database&#62;.</programlisting>

              <para><emphasis>Output:</emphasis> The <database class="table">COUNTRY</database>
              table has two fields: <database class="field">COUNTRY</database>
              and <database class="field">CURRENCY</database>.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><sgmltag class="element">function</sgmltag> - <sgmltag
            class="element">parameter</sgmltag> - <sgmltag class="element">returnvalue</sgmltag></term>

            <listitem>
              <para>These three speak for themselves, I trust.</para>

              <programlisting>The &#60;function&#62;log&#60;/function&#62; function takes parameters &#60;parameter&#62;a&#60;/parameter&#62; and &#60;parameter&#62;b&#60;/parameter&#62;.</programlisting>

              <para><emphasis>Output:</emphasis> The <function>log</function>
              function takes parameters <parameter>a</parameter> and
              <parameter>b</parameter>.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><sgmltag class="element">prompt</sgmltag> - <sgmltag
            class="element">userinput</sgmltag> - <sgmltag class="element">computeroutput</sgmltag></term>

            <listitem>
              <para><sgmltag class="element">prompt</sgmltag> is used for a
              string inciting the user to enter some text; <sgmltag
              class="element">userinput</sgmltag> refers to text entered by
              the user (not necessarily at a prompt!); <sgmltag
              class="element">computeroutput</sgmltag> is text displayed by
              the computer:</para>

              <programlisting>Type &#60;userinput&#62;guest&#60;/userinput&#62; at the &#60;prompt&#62;login:&#60;/prompt&#62; prompt and the server will 
greet you with a &#60;computeroutput&#62;Welcome, guest user&#60;/computeroutput&#62;.</programlisting>

              <para><emphasis>Output:</emphasis> Type <userinput>guest</userinput>
              at the <prompt>login:</prompt> prompt and the server will greet
              you with a <computeroutput>Welcome, guest user</computeroutput>.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><sgmltag class="element">keycap</sgmltag></term>

            <listitem>
              <para>The text on a keyboard key, or its common name:</para>

              <programlisting>Hit the &#60;keycap&#62;Del&#60;/keycap&#62; key to erase the message, or &#60;keycap&#62;SPACE&#60;/keycap&#62; to move on.</programlisting>

              <para><emphasis>Output:</emphasis> Hit the <keycap>Del</keycap>
              key to erase the message, or <keycap>SPACE</keycap> to move on.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><sgmltag class="element">sgmltag</sgmltag></term>

            <listitem>
              <para>This element is used extensively throughout this Howto: it
              marks SGML <emphasis>and</emphasis> XML tags, elements,
              attributes, entities etc.:</para>

              <programlisting>If it concerns a directory, set the &#60;sgmltag class=&#34;attribute&#34;&#62;class&#60;/sgmltag&#62; attribute of the 
&#60;sgmltag class=&#34;element&#34;&#62;filename&#60;/sgmltag&#62; element to &#60;sgmltag class=&#34;attvalue&#34;&#62;directory&#60;/sgmltag&#62;.</programlisting>

              <para><emphasis>Output:</emphasis> If it concerns a directory,
              set the <sgmltag class="attribute">class</sgmltag> attribute of
              the <sgmltag class="element">filename</sgmltag> element to
              <sgmltag class="attvalue">directory</sgmltag>.</para>

              <para>Other possible values for <sgmltag class="element">sgmltag</sgmltag>.<sgmltag
              class="attribute">class</sgmltag> are: <sgmltag class="attvalue">starttag</sgmltag>,
              <sgmltag class="attvalue">endtag</sgmltag>, <sgmltag
              class="attvalue">emptytag</sgmltag>, and <sgmltag
              class="attvalue">genentity</sgmltag> (for an entity).</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><sgmltag class="element">emphasis</sgmltag> - <sgmltag
            class="element">citetitle</sgmltag> - <sgmltag class="element">firstterm</sgmltag></term>

            <listitem>
              <para>Use <sgmltag class="element">emphasis</sgmltag> to stress
              words in general, <sgmltag class="element">citetitle</sgmltag>
              for book titles etc., and <sgmltag class="element">firstterm</sgmltag>
              if you introduce a new word or concept to your readers:</para>

              <programlisting>We use &#60;firstterm&#62;DocBook XML&#60;/firstterm&#62; for our Firebird documentation. A short introduction
follows; &#60;emphasis&#62;please&#60;/emphasis&#62; read it carefully! If you want to know more about the 
subject, buy &#60;citetitle&#62;DocBook - The Definitive Guide&#60;/citetitle&#62;.</programlisting>

              <para><emphasis>Output:</emphasis> We use
              <firstterm>DocBook XML</firstterm> for our Firebird
              documentation. A short introduction follows;
              <emphasis>please</emphasis> read it carefully! If you want to
              know more about the subject, buy <citetitle>DocBook - The
              Definitive Guide</citetitle>.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><sgmltag class="element">quote</sgmltag> - <sgmltag
            class="element">literal</sgmltag></term>

            <listitem>
              <para>Use <sgmltag class="element">quote</sgmltag> for an inline
              qutation (as opposed to a <sgmltag class="element">blockquote</sgmltag>).
              Quote characters will be inserted automatically. Using <sgmltag
              class="element">quote</sgmltag> instead of typing the quote
              characters yourself (which is also perfectly legal) has the
              advantage that we can alter the type of quotation marks through
              stylesheets if we want to.</para>

              <para>A <sgmltag class="element">literal</sgmltag> is a word or
              text fragment to be taken literally. It is a rather general
              element, often used to make certain words stand out
              typographically:</para>

              <programlisting>At all costs avoid using the word &#60;literal&#62;humongous&#60;/literal&#62; in your documentation.</programlisting>

              <para><emphasis>Output:</emphasis> At all costs avoid using the
              word <literal>humongous</literal> in your documentation.</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>Should you always use these inline elements wherever you can?
        Well, if you do, you will certainly make your document richer;
        you&#39;ll make it easier to scan for filenames for instance, or to
        generate an index of all the applications mentioned in your document.
        On the other hand, there are so many of these semantic elements (in
        fact we&#39;ve only discussed a <emphasis>few</emphasis> here) that if
        you apply them everywhere you can, you&#39;ll probably wind up in a
        straightjacket before you can finish your doc. This is not what we
        want of course: if you really have to go mad, please do so
        <emphasis>after</emphasis> you&#39;ve committed your document :-)</para>

        <para>So, as a general advice: go a bit easy on those inlines; use
        them wherever you think it makes sense, but don&#39;t overdo it.</para>
      </sect3>

      <sect3>
        <title>To wrap up the elements</title>

        <para>You may have noticed that in the rendered documents (you&#39;re
        reading one now, unless you opened the XML version) many different
        elements have the same appearance: a <sgmltag class="element">filename</sgmltag>,
        a <sgmltag class="element">literal</sgmltag> and an <sgmltag
        class="element">application</sgmltag> may have the exact same
        typography; the same goes for <sgmltag class="element">emphasis</sgmltag>,
        <sgmltag class="element">firstterm</sgmltag> and <sgmltag
        class="element">citetitle</sgmltag>.</para>

        <para>So what&#39;s the point of all these different tags? Why not use
        just a few, like <sgmltag class="element">emphasis</sgmltag> and
        <sgmltag class="element">literal</sgmltag>, if they&#39;re going to
        look the same anyway? Well, there are two very good reasons not to:</para>

        <itemizedlist>
          <listitem>
            <para>First, if we&#39;d drop most of our inlines in favor of say,
            <sgmltag class="element">emphasis</sgmltag> and <sgmltag
            class="element">literal</sgmltag>, the semantics would be lost.
            Remember that DocBook XML is all about structure and semantics.
            <sgmltag class="element">firstterm</sgmltag> and <sgmltag
            class="element">citetitle</sgmltag> may <emphasis>look</emphasis>
            the same as <sgmltag class="element">emphasis</sgmltag> once
            rendered, but they <emphasis>are</emphasis> not the same thing.
            The XML source knows that, even if it doesn&#39;t always show.
            This information is useful, and we don&#39;t want to lose it.</para>
          </listitem>

          <listitem>
            <para>Further, we can adapt our stylesheets for each type of
            element individually. As soon as we decide that a <sgmltag
            class="element">firstterm</sgmltag> should look different from a
            <sgmltag class="element">citetitle</sgmltag>, we can arrange for
            that - but <emphasis>only</emphasis> if they are indeed marked
            with different tags, not if they are both <sgmltag class="element">emphasis</sgmltag>&#39;s
            in the XML source.</para>
          </listitem>
        </itemizedlist>

        <para>This concludes the sections on DocBook. With the knowledge
        presented above, you should now be able to author DocBook XML
        documents for the Firebird project. Of course if you use a dedicated
        XML editor - which, again, is highly advisable - you must also consult
        its documentation to learn how to use it; that&#39;s one thing this
        Howto doesn&#39;t cover.</para>

        <anchor id="docwritehowto-elements-end" />
      </sect3>
    </sect2>

    <sect2 id="docwritehowto-language-style">
      <title>Language and style</title>

      <sect3>
        <title>Language</title>

        <para>The Firebird community is a very diverse one, and made up of
        people with many different mother tongues. If you write your
        documentation in a language other than your own, you&#39;ll probably
        make some mistakes. This is not catastrophical, but you should at
        least try to reduce the number of errors. Some strategies to help you
        with this are:</para>

        <itemizedlist>
          <listitem>
            <para>Use a dictionary! Simple, effective, and blissfully
            non-hightech.</para>
          </listitem>

          <listitem>
            <para>When hesitating between two spellings of a word, or between
            several possible versions of an expression, google for the
            alternatives and look at their frequencies. Also follow some of
            the result links to see how native speakers use the word or
            expression in their texts.</para>
          </listitem>

          <listitem>
            <para>Have a native speaker look over your text and correct it
            where necessary.</para>
          </listitem>
        </itemizedlist>
      </sect3>

      <sect3>
        <title>Style</title>

        <para>Don&#39;t expect a Style Guide here - I wouldn&#39;t know how to
        write one anyway. Just some guidelines and tips:</para>

        <itemizedlist>
          <listitem>
            <para>Try to write in plain, everyday language wherever possible.
            Avoid difficult words if there&#39;s a familiar, simple
            alternative.</para>
          </listitem>

          <listitem>
            <para>Avoid long sentences (over 25 words) if you can; especially
            avoid two or more long sentences immediately after each other.</para>
          </listitem>

          <listitem>
            <para>Be careful with constructs like double or triple negatives (<quote>I
            can&#39;t deny that I&#39;m not displeased</quote>) and passive
            voice (<quote>Care should be taken...</quote>). You don&#39;t have
            to avoid them at all costs, but they can make a sentence harder to
            understand. If so, use the positive (<quote>I am pleased</quote>)
            and the active voice (<quote>Take care...</quote>).</para>
          </listitem>

          <listitem>
            <para>Use lists to enumerate a number of parallel items, for
            instance:</para>

            <itemizedlist>
              <listitem>
                <para>A collection of hints and tips.</para>
              </listitem>

              <listitem>
                <para>A sequence of examples (like this one).</para>
              </listitem>

              <listitem>
                <para>Steps to be followed in a procedure.</para>
              </listitem>

              <listitem>
                <para>Alternative solutions to a problem.</para>
              </listitem>
            </itemizedlist>

            <para>But if there&#39;s only a small number of short items, use a
            plain sentence instead: <quote>My mother loves three men: John,
            Dick, and Dave.</quote></para>
          </listitem>

          <listitem>
            <para>Don&#39;t overuse exclamation marks. Never use multiple
            exclamation marks or question marks. This is annoying!!!!! Or
            don&#39;t you think so???</para>
          </listitem>
        </itemizedlist>

        <sect4>
          <title>Docwriter&#39;s block</title>

          <para>Sometimes you know what you want to write, and you have all
          the words ready, but you can&#39;t get the sentence started - you
          just don&#39;t get it to <emphasis>flow</emphasis>. This is very
          frustrating and it can sometimes block the advance of your text for
          many minutes. And it&#39;s all the more frustrating because you
          <emphasis>do</emphasis> know what you want to tell your readers, but
          you don&#39;t seem to be able to produce a decent sentence. After
          many painful experiences of this kind, I&#39;ve developed the
          following strategy (not that I think I&#39;m the first):</para>

          <orderedlist>
            <listitem>
              <para>Write down what you have to say in loose sentences and
              chunks of words. Never mind about style, never mind if it looks
              ugly. Just write down what you want to tell the reader; make
              sure it&#39;s all there, and in the right order. If, while doing
              this, you notice that you feel unsure about something, include a
              remark at exactly that point. Make your remarks stand out from
              the surrounding text, &#60;&#60;e.g. like this&#62;&#62; or
              !LIKE THAT!</para>

              <para>This may result in a text like:</para>

              <blockquote>
                <para>CVS means Concurrent Versions System
                (&#60;&#60;check!&#62;&#62;). Purpose: managing versions of
                software. You can use it alone or with a group. You need a CVS
                client to use it. A CVS client is a program with which you can
                access a CVS repository (&#60;&#60;explain this
                term?&#62;&#62;). To find out if a CVS client is installed on
                your system, type <quote>cvs</quote> on the command line. If
                it&#39;s not there, go to this URL to download it.... [etc.,
                etc.]</para>
              </blockquote>
            </listitem>

            <listitem>
              <para>If you have included any remarks, handle them first.
              <emphasis>Check</emphasis> if CVS really means Concurrent
              Versions System (it does). <emphasis>Decide</emphasis> whether
              you should really explain the term <quote>CVS repository</quote>
              at this point (you should).</para>
            </listitem>

            <listitem>
              <para>Now, go over the paragraph again and try to make the text
              flow more naturally wherever you can. Chances are that this will
              be a lot easier than you expected!</para>
            </listitem>

            <listitem>
              <para>If it still looks a little clumsy, never mind - better
              clumsy and clear than smooth-flowing and fuzzy. Maybe you can
              revisit this passage later and see if you can nice it up some
              more.</para>
            </listitem>
          </orderedlist>

          <para>This approach works well for me. So if you&#39;re stuck in
          this way, try it out; hopefully it will help you too.</para>
        </sect4>
      </sect3>
    </sect2>

    <sect2 id="docwritehowto-copyrights">
      <title>Copyrights</title>

      <sect3>
        <title>Copyrights of others</title>

        <para>As we write our manuals, we can consult all kinds of other
        documentation - and so we should, because we want to achieve the best
        possible result. Any information we find in publicly available
        third-party manuals, user&#39;s guides, tutorials etc. can be freely
        used in our own docs, but it is important not to confuse
        <emphasis>information</emphasis> with <emphasis>literal text</emphasis>.
        We cannot copy-and-paste text from other works into our own
        documentation, unless the author explicitly permits us to do so. Check
        the copyright notice of the work in question; if there isn&#39;t one,
        the work is automatically copyrighted under the Berne convention and
        you must assume that it&#39;s illegal to copy it - even partially.
        This is also the case if the work is freely available! Not having to
        pay for a document does not imply that you can freely copy portions of
        text and republish them in a work of your own.</para>

        <para>More specifically, the Borland InterBase 6 beta docs - although
        free - are not part of the InterBase package that was open-sourced in
        July 2000. We have asked Borland several times if we could use these
        docs <quote>as if they fell under the InterBase Public License</quote>,
        but they didn&#39;t even bother to answer. So feel free to use this
        documentation set as a source of information, but don&#39;t copy text
        from it.</para>
      </sect3>

      <sect3>
        <title>Your copyright</title>

        <para>If you contribute to the Firebird documention subproject, your
        work will become part of an open-source repository. This means that
        everybody can consult and download it in source form (i.e. as DocBook
        XML files), but not only that: everybody can also legally alter,
        re-use, republish, sell and/or give away your work, or works derived
        from it, albeit under certain conditions. It is important that you
        realize this before you commit anything to the project! The Firebird
        project as a whole is covered by the Mozilla Public License; as far as
        I understand you can apply another Open Source license to your own
        contributions, but I&#39;m not sure if you may choose a license
        that&#39;s more restrictive than the overall project license. If you
        want to know more about this, and about the conditions SourceForge
        imposes upon projects they host, consult the <ulink
        url="http://sourceforge.net/docman/display_doc.php?docid=778&#38;group_id=1">SourceForge
        documentation pages</ulink> on the subject. And please let me know if
        you find anything that contradicts what I wrote here :-)</para>
      </sect3>
    </sect2>
  </sect1>

  <sect1 id="docwritehowto-add-to-module">
    <title>Adding your document to the manual module</title>

    <para>When your doc is finished, and you have verified that it builds
    correctly, you want it added to the manual module. If this is your first
    contribution to the documentation project you&#39;ll probably have agreed
    with the coordinators that you first submit it to them for review, or that
    you temporarily put up the HTML version on a website so that it can be
    discussed on the list. After that - and maybe after some corrections are
    made - the document can be committed to the module. If you have commit
    rights you can do this yourself; if not, one of the coordinators will do
    it for you.</para>

    <sect2>
      <title>Asking for commit rights</title>

      <para>To receive commit rights you first need a SourceForge user
      account. If you haven&#39;t got one, register at <ulink
      url="http://sourceforge.net/account/register.php">http://sourceforge.net/account/register.php</ulink>.
      Then post a message to the firebird-docs mailing list stating your SF
      user name and asking to be added to the Firebird project. The manual
      subproject leader and several Firebird project admins follow the list;
      they will consider your request. As a general rule you should ask for
      commit rights <emphasis>after</emphasis> your first contribution,
      because the people who decide on your request need something to go by.</para>

      <para>The following phrases currently all mean the same, by the way:</para>

      <itemizedlist>
        <listitem>
          <para>Being a project member.</para>
        </listitem>

        <listitem>
          <para>Having commit rights.</para>
        </listitem>

        <listitem>
          <para>Having read-write access to the repository.</para>
        </listitem>
      </itemizedlist>
    </sect2>

    <sect2>
      <title>Dos and don&#39;ts if you have received commit rights</title>

      <para>Once you are accepted as a project member, you have write access
      to the entire Firebird repository, not only to the manual module. There
      is no technical barrier to keep you from committing changes to other
      modules - the <literal>firebird2</literal> core module for instance, or
      even the <literal>CVSROOT</literal> module where important project
      information is stored.</para>

      <para>You may already have guessed that this is <emphasis>NOT</emphasis>
      the idea. Keep to the following rules:</para>

      <itemizedlist>
        <listitem>
          <para>Don&#39;t <emphasis>ever</emphasis> commit to other modules
          unless the people in charge of those modules explicitly ask you to
          do so.</para>
        </listitem>

        <listitem>
          <para>Only commit work to the manual module if it concerns a task
          assigned to you. Even then, it&#39;s good practice to announce your
          changes and additions on the mailing list first, so the other
          doccers have a chance to comment on it. After all, this is a
          collective effort.</para>
        </listitem>

        <listitem>
          <para>If you think a new document or directory should be added,
          don&#39;t just create and commit it, but propose it on the list.</para>
        </listitem>
      </itemizedlist>

      <para>In practice, things may be a bit more relaxed than stated here,
      especially where it concerns your own tasks. We don&#39;t want you to
      feel unfree and you certainly shouldn&#39;t get the feeling that you
      have to ask permission for every minor change you make. But we do want
      you to act responsibly, and we want to know from each other what we are
      doing. Besides, keeping in touch with each other is often inspirational.
      Together we can make this thing work!</para>
    </sect2>

    <sect2>
      <title>Committing your work</title>

      <para>Even if you are a project member, you can only commit changes from
      a local copy if it was checked out with your SF login name. If
      you&#39;re still working with a copy you&#39;ve checked out anonymously
      you must first make a fresh SSH checkout, and then re-apply your changes
      and commit them. Refer to the <link linkend="docbuildhowto-ssh-checkout">Docbuilding
      Howto</link> if you don&#39;t remember how to perform an SSH checkout.</para>

      <para>If some time has passed since your last checkout or update,
      perform an update before committing. This will get your local copy in
      sync with the repository and reduce the possibility of conflicts.</para>

      <para>Once you are ready to commit, go to the manual directory. If you
      use command-line CVS, type:</para>

      <blockquote>
        <para><command>cvs update -d</command> [ if you want to update first ]</para>

        <para><command>cvs commit</command></para>
      </blockquote>

      <para>Give your SF password when prompted, and all the changes you have
      made - including those in subdirectories - will be committed. Your CVS
      client knows which server to contact; this and other information is
      stored in the <filename class="directory">CVS</filename> subdirectories
      that were created upon checkout.</para>

      <para>If you use another CVS client, refer to its documentation.</para>
    </sect2>
  </sect1>
</article>