<?xml version="1.0" encoding="UTF-8"?>
<article id="docwritehowto">
  <articleinfo>
    <title>Firebird Docwriting Guide</title>

    <author>
      <firstname>Paul</firstname>

      <surname>Vinkenoog</surname>
    </author>

    <edition>5 May 2007 – Document version 1.3</edition>
  </articleinfo>

  <!--TODO: 
Add a notice for translators (where?) explaining how they can diff two revisions using CVS.
Doing this is absolutely necessary, as not everything is detailed in the dochist.
Maybe there should be an entire section with info & tips for translators, and pointers to
parts of the guide that are of special importance to them.-->

  <section id="docwritehowto-introduction" xreflabel="Intro-section label">
    <title id="docwritehowto-intro-title"
    xreflabel="Intro-label">Introduction</title>

    <section id="docwritehowto-purpose">
      <title>Purpose of this guide</title>

      <para>This guide discusses the various aspects of writing documentation
      for Firebird. It is intended for people who want to help write
      documentation for the Firebird project, or who at least strongly
      consider to do so. After reading this guide, you'll have all the
      necessary knowledge to start writing Firebird docs in our chosen format
      DocBook XML.</para>
    </section>

    <section id="docwritehowto-assumed-knowledge">
      <title>Assumed knowledge</title>

      <para>Before reading this guide, check with yourself if you know:</para>

      <itemizedlist spacing="compact">
        <listitem>
          <para>What the Firebird manual module is.</para>
        </listitem>

        <listitem>
          <para>What CVS is, and how to use a CVS client to download the
          current manual module.</para>
        </listitem>

        <listitem>
          <para>How to build the current Firebird documentation from your
          downloaded manual module.</para>
        </listitem>
      </itemizedlist>

      <para>This knowledge is essential if you are going to contribute to our
      documentation project. If you feel unsure about one or more of these
      points, you should first read the <ulink
      url="http://www.firebirdsql.org/manual/docbuildhowto.html">Firebird
      Docbuilding Howto</ulink>, and then come back here.</para>
    </section>

    <section id="docwritehowto-topics">
      <title>Topics discussed in this guide</title>

      <para>We start off with some short chapters about:</para>

      <itemizedlist spacing="compact">
        <listitem>
          <para>The firebird-docs mailing list.</para>
        </listitem>

        <listitem>
          <para>Picking a subject.</para>
        </listitem>

        <listitem>
          <para>Making an outline for your document-to-be.</para>
        </listitem>
      </itemizedlist>

      <para>After that we'll take some time to explain the basics of DocBook
      XML, because that's the format we'd like you to deliver your docs in.
      Topics discussed include:</para>

      <itemizedlist spacing="compact">
        <listitem>
          <para>DocBook XML – what is it?</para>
        </listitem>

        <listitem>
          <para>Reasons why we prefer DocBook so strongly to other
          formats.</para>
        </listitem>

        <listitem>
          <para>Tools you can use to produce DocBook texts.</para>
        </listitem>
      </itemizedlist>

      <para>Don't worry if DocBook doesn't mean anything to you yet: the
      required knowledge can be learned in less than an hour, and chances are
      that you will benefit from this knowledge in other projects too,
      whenever you have to write technical documentation.</para>

      <para>The next part is about the actual docwriting:</para>

      <itemizedlist spacing="compact">
        <listitem>
          <para>Setting up the document itself.</para>
        </listitem>

        <listitem>
          <para>Using DocBook elements.</para>
        </listitem>

        <listitem>
          <para>A word or two on language and writing style.</para>
        </listitem>

        <listitem>
          <para>Copyrights and the Public Documentation License.</para>
        </listitem>
      </itemizedlist>

      <para>Finally, we will show you how to add your finished doc to the
      Firebird project. Main topics in this section are:</para>

      <itemizedlist spacing="compact">
        <listitem>
          <para>Commiting your finished document to the manual module.</para>
        </listitem>

        <listitem>
          <para>Where to ask for commit rights if you don't have them.</para>
        </listitem>

        <listitem>
          <para>Dos and don'ts once you have received commit rights.</para>
        </listitem>

        <listitem>
          <para>Publishing HTML and PDF versions on the Firebird
          website.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section id="docwritehowto-docmakers-hangouts">
    <title>Where the docmakers meet</title>

    <section id="docwritehowto-homepage">
      <title>The subproject homepage</title>

      <para>The homepage of the documentation subproject is here:</para>

      <blockquote>
        <para><ulink
        url="http://www.firebirdsql.org/index.php?op=devel&amp;sub=doc">http://www.firebirdsql.org/index.php?op=devel&amp;sub=doc</ulink></para>
      </blockquote>

      <para>It contains news about our activities, links to the docs we've
      already published, plans for the future, etc.</para>
    </section>

    <section id="docwritehowto-fd-mailinglist">
      <title>The firebird-docs list</title>

      <para>If you're serious about writing docs for Firebird, the first thing
      you should do is subscribe to the mailing list where we discuss our
      plans and our work. This list is open to everybody, and subscribing
      commits you to nothing. Send an email to:</para>

      <blockquote>
        <para><email>firebird-docs-request@lists.sourceforge.net</email></para>
      </blockquote>

      <para>with the word <quote>subscribe</quote> either as subject or as the
      first and only line in the message body. Alternatively, you can fill in
      the form on this webpage:</para>

      <blockquote>
        <para><ulink
        url="http://lists.sourceforge.net/lists/listinfo/firebird-docs">http://lists.sourceforge.net/lists/listinfo/firebird-docs</ulink></para>
      </blockquote>

      <para>Whichever method you choose, you'll receive an email message from
      the list robot within minutes. Follow the instructions in that message
      and you're on the list.</para>
    </section>

    <section id="docwritehowto-fd-newsinterface">
      <title>The Atkin news interface</title>

      <para>There's also a news interface for this and other Firebird-related
      mailing lists. Sometimes it works a little problematically – or not at
      all, although that's rare – and I wouldn't use it to post messages if I
      were you, but it's great for archiving and browsing purposes. The
      retention is pretty long too, so if you grab all messages that are on
      the server you'll have a nice piece of list history from before you
      joined.</para>

      <para>To access these newsgroups, point your favourite newsreader
      to:</para>

      <blockquote>
        <para>news.atkin.com</para>
      </blockquote>

      <para>and get the groups list. Subscribe to the groups you like. Notice
      that the firebird-docs list maps to the group sourceforge.firebird-doc
      (without s) on the Atkin news server.</para>

      <para>Depending on the newsreader or browser you use, this link may also
      get you straight to the group:</para>

      <blockquote>
        <para><ulink
        url="news://news.atkin.com/sourceforge.firebird-doc">news://news.atkin.com/sourceforge.firebird-doc</ulink></para>
      </blockquote>

      <para>You can post to the newsgroup even if you're not subscribed to the
      mailing list, but in that case your message will be held for approval by
      a human moderator. This means that your message will be delayed by up to
      a day (or more, on rare occasions).</para>
    </section>
  </section>

  <section id="docwritehowto-picking-a-subject">
    <title>Picking a subject</title>

    <para>These guidelines may help you in finding a subject to write
    about:</para>

    <itemizedlist>
      <listitem>
        <para>First make sure you know what's already there – nobody's waiting
        for three MS-SQL-to-Firebird conversion guides.</para>
      </listitem>

      <listitem>
        <para>Then ask yourself what's missing, and what may be useful for
        Firebird users in general, or perhaps just for a specific
        group.</para>
      </listitem>

      <listitem>
        <para>Also ask yourself what you would <emphasis>like</emphasis> to
        write about. The most logical choice would be a topic you are familiar
        with, but you can also pick a subject you'd have to learn more about
        first (this is much more work of course, but a great learning
        experience if you're willing to invest the time).</para>
      </listitem>

      <listitem>
        <para>You don't necessarily have to write an entire book, guide or
        article. Maybe there are already people working on a larger
        production, which you can contribute to. Maybe you can write one or
        more chapters for a book. Or maybe you can supply raw documentation
        material for a subject you know a lot about.</para>
      </listitem>

      <listitem>
        <para>Talk about your ideas – or your search for ideas – on the
        firebird-docs list. The posting frequency can be very low at times,
        but rest assured that if you post there, your message
        <emphasis>will</emphasis> be read, and replied to.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section id="docwritehowto-preparation">
    <title>Preparing to write: make an outline!</title>

    <para>It's always a good idea to make an outline before you start to write
    the actual text. Setting up an outline will help you to <quote>get
    organized</quote>; it reduces the chance of forgetting something vital,
    and it will make the actual writing job a lot easier.</para>

    <para>You can follow these steps when making your outline:</para>

    <itemizedlist>
      <listitem>
        <para>Define exactly what you want your readers to learn from your
        work.</para>
      </listitem>

      <listitem>
        <para>Divide the subject matter into logical units – chapters and/or
        sections and/or subsections.</para>
      </listitem>

      <listitem>
        <para>Make sure the order of the units makes sense, especially for a
        howto, tutorial or user's guide. That is: arrange the units in such a
        way that whatever the user has to do first, or understand first, also
        comes first in your documentation.</para>
      </listitem>

      <listitem>
        <para>Present your outline on the firebird-docs list at
        sourceforge.net and ask for comments.</para>
      </listitem>
    </itemizedlist>

    <para>Once you are satisfied with your outline, look it over thoroughly
    and decide whether you have all the (raw) information you need to start
    writing. Ideally, you want to have all the information ready before you
    start to write, because sometimes a formerly unknown piece of information
    may lead you to choose a different document structure. You'd better have
    that information while you're still in the outline phase, then.</para>
  </section>

  <section id="docwritehowto-docbook-intro">
    <title>DocBook XML – an introduction</title>

    <para>The chosen format for the documentation in the Firebird manual
    module is <firstterm>DocBook XML</firstterm>. For those of you who are not
    familiar with XML and/or DocBook, short introductions to XML in general
    and DocBook XML in particular follow. Be aware that these introductions
    give a grossly oversimplified picture. But that's just fine: you don't
    have to be a DocBook XML expert in order to write Firebird docs. You only
    need some basic knowledge – which you can pick up in half an hour from the
    paragraphs below – and a little experience in applying DocBook XML tags to
    your texts (which you will gain soon enough once you start
    writing).</para>

    <para><link linkend="docwritehowto-docbook-xml-primer">Skip the general
    XML primer</link> if you know all about XML elements, tags, attributes,
    rendering, and multichannel publishing.</para>

    <para><link linkend="docwritehowto-docbook-authoring-tools">Skip both
    primers</link> if you're also an experienced DocBook author.</para>

    <note>
      <para>While we strongly ask that you at least <emphasis>try</emphasis>
      to deliver your work in DocBook format, we also realise that some people
      just won't have the time to master it (or to convert their existing docs
      to DocBook). If this applies to you, please talk about it on the
      firebird-docs list. We surely don't want to refuse useful documentation
      just because it's not in the right format.</para>
    </note>

    <section id="docwritehowto-xml-primer">
      <title>A very general XML primer</title>

      <para>XML stands for <firstterm>Extensible Markup Language</firstterm>,
      which is, simply put, plain text with markup tags. A typical XML text
      fragment may look like this:</para>

      <programlisting>&lt;paragraph&gt;
&lt;loud&gt;'No!'&lt;/loud&gt; she screamed. &lt;scary&gt;But the bloody hand
&lt;italics&gt;kept on creeping&lt;/italics&gt; towards her.&lt;/scary&gt;
&lt;picture file="bloody_hand.png"/&gt;
&lt;/paragraph&gt;</programlisting>

      <section id="docwritehowto-tags-and-attributes">
        <title>Tags and attributes</title>

        <para>In the example given above, the words and phrases enclosed in
        angle brackets are the markup tags. <sgmltag
        class="starttag">italics</sgmltag> is a <firstterm>start
        tag</firstterm>, <sgmltag class="endtag">italics</sgmltag> is an
        <firstterm>end tag</firstterm>, and <sgmltag class="emptytag">picture
        file="bloody_hand.png"</sgmltag> is a standalone tag, officially
        termed <firstterm>empty-element tag</firstterm>. XML tags are always
        formatted like this:</para>

        <table id="docwritehowto-table-XML-tags">
          <title>Format of XML tags</title>

          <tgroup cols="3">
            <thead>
              <row>
                <entry>Tag type</entry>

                <entry>Starts with</entry>

                <entry>Ends with</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Start tag</entry>

                <entry><literal>&lt;</literal></entry>

                <entry><literal>&gt;</literal></entry>
              </row>

              <row>
                <entry>End tag</entry>

                <entry><literal>&lt;/</literal></entry>

                <entry><literal>&gt;</literal></entry>
              </row>

              <row>
                <entry>Empty-element tag</entry>

                <entry><literal>&lt;</literal></entry>

                <entry><literal>/&gt;</literal></entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>Still referring to our example, the words
        <literal>paragraph</literal>, <literal>loud</literal>,
        <literal>scary</literal>, <literal>italics</literal> and
        <literal>picture</literal> are <firstterm>tag names</firstterm>. In
        the <sgmltag class="emptytag">picture...</sgmltag> tag, <sgmltag
        class="attribute">file="bloody_hand.png"</sgmltag> is called an
        <firstterm>attribute</firstterm>, with <sgmltag
        class="attribute">file</sgmltag> the <firstterm>attribute
        name</firstterm> and <sgmltag
        class="attvalue">bloody_hand.png</sgmltag> the <firstterm>attribute
        value</firstterm>. Attribute values must always be quoted; both single
        and double quotes are allowed.</para>

        <para>XML allows you to define any tags you like, as long as you build
        them correctly. So <sgmltag class="starttag">thistag</sgmltag>,
        <sgmltag class="starttag">thattag</sgmltag>, and <sgmltag
        class="emptytag">this_is_not_a_tag</sgmltag> are all well-formed XML
        tags. (XML that follows the standard is called
        <firstterm>well-formed</firstterm>; the term
        <emphasis>valid</emphasis> is only used for specifically defined
        implementations – DocBook XML, for instance.)</para>

        <para>Clearly the tags themselves are not meant to appear in the final
        document (that is, the document as it is presented to the readers).
        Rather, they contain instructions that affect its appearance. XML,
        when used for writing documentation, is a typical <firstterm>source
        format</firstterm>, intended to be processed by software to produce
        nicely formatted output documents. This processing is usually called
        <firstterm>rendering</firstterm>.</para>

        <para>Some tags are unmistakably makeup instructions:</para>

        <programlisting>&lt;italics&gt;kept on creeping&lt;/italics&gt;</programlisting>

        <para>means of course that the words <emphasis>kept on
        creeping</emphasis> must be displayed or printed in italics.
        However,</para>

        <programlisting>&lt;loud&gt;'No!'&lt;/loud&gt;</programlisting>

        <para>is a little less obvious. Should the word <literal>No!</literal>
        appear in boldface? Or underlined? Or again in italics? Or maybe this
        text is going to be read out aloud by a speech synthesizer, and the
        <sgmltag class="starttag">loud</sgmltag> tag instructs it to raise its
        voice? All these things are possible, and what's more: often a single
        XML source document is converted into several different output formats
        – say, a PDF document, an HTML web page, and a sound file. This is
        called <firstterm>multichannel publishing</firstterm>. With
        multichannel publishing, <sgmltag class="starttag">loud</sgmltag> may
        be translated to boldface for the PDF document; to a bold, red-colored
        font for the web page; and to a 50% volume increase for the
        synthesizer.</para>

        <para>Looking at the other tags, <sgmltag
        class="emptytag">picture...</sgmltag> is obviously an instruction to
        insert the image <filename>bloody_hand.png</filename> into the
        document, and <sgmltag class="starttag">scary</sgmltag>, well... this
        is even less clear then <sgmltag class="starttag">loud</sgmltag>.
        Maybe the phrase between the <sgmltag class="starttag">scary</sgmltag>
        tags has to drip with blood. Maybe frightening music must be played
        here. It all depends on the people who defined the tags, and the
        software they use to do the rendering.</para>

        <para>The <sgmltag class="starttag">paragraph</sgmltag> tag, finally,
        is a structural tag. It tells us something about the place that the
        lines have within the document's internal hierarchy. In the final
        document, paragraphs may or may not be separated by empty lines.
        Again, that depends on the rendering software and possibly also on
        user-configurable options. Other structural tags one might think of
        are e.g. <sgmltag class="starttag">chapter</sgmltag>, <sgmltag
        class="starttag">section</sgmltag>, and <sgmltag
        class="starttag">subdocument</sgmltag>.</para>
      </section>

      <section>
        <title>Special characters and Entities</title>

        <para>Because the character <quote><literal>&lt;</literal></quote> has
        a special meaning as the start of a tag, you can't include it directly
        as a literal value. Instead, if you want your readers to see an
        opening angle bracket, you type this:</para>

        <blockquote>
          <para><sgmltag class="genentity">lt</sgmltag></para>
        </blockquote>

        <para>That's an ampersand, followed by the letters
        <literal>l</literal> and <literal>t</literal> (for <emphasis>less
        than</emphasis>), followed by a semicolon. You can also use <sgmltag
        class="genentity">gt</sgmltag> (<emphasis>greater than</emphasis>) for
        the closing angle bracket <quote><literal>&gt;</literal></quote>, but
        you don't have to.</para>

        <para>XML has lots of codes like this; they are called
        <firstterm>entities</firstterm>. Some represent characters, like
        <sgmltag class="genentity">lt</sgmltag> and <sgmltag
        class="genentity">auml</sgmltag> (lower a with umlaut) and some serve
        totally different purposes. But they all start with an ampersand and
        end with a semicolon.</para>

        <para>But wait a minute... if an ampersand marks the start of an
        entity, how do you include a literal ampersand in your text? Well,
        there's an entity for that too:</para>

        <blockquote>
          <para><sgmltag class="genentity">amp</sgmltag></para>
        </blockquote>

        <para>So this line of XML:</para>

        <programlisting>Kernigan &amp;amp; Ritchie chose '&amp;lt;' as the less-than operator for C.</programlisting>

        <para>will wind up in the final documents as:</para>

        <para><literal>Kernigan &amp; Ritchie chose '&lt;' as the less-than
        operator for C.</literal></para>

        <para>And here's some good news: if you use a dedicated XML editor to
        author your document, you can probably just type
        <quote><literal>&lt;</literal></quote> and
        <quote><literal>&amp;</literal></quote> anywhere you want to use them
        as literals. The editor will make sure that they end up as <sgmltag
        class="genentity">lt</sgmltag> and <sgmltag
        class="genentity">amp</sgmltag> in the XML as it is saved to disk.
        You'll find pointers to some XML/DocBook editors later in this
        guide.</para>
      </section>

      <section id="docwritehowto-elements">
        <title>Elements</title>

        <para>There's one more important XML concept you need to know about:
        the <firstterm>element</firstterm>. An element is the combination of a
        start tag, a matching end tag, and everything in between. This
        <quote>everything in between</quote> is called the element's
        <firstterm>content</firstterm>, and it may include other elements.
        Elements are named after their tags, so we can talk about paragraph
        elements, italics elements etc.</para>

        <note>
          <para>Actually, elements are a more basic concept than tags: tags
          just happen to be the things that identify the elements. So it would
          be better to say that tags are named after their elements. But
          because tags are easier to recognize than entire elements, I thought
          I'd introduce you to them first.</para>
        </note>

        <para>This is an element:</para>

        <programlisting>&lt;loud&gt;'No!'&lt;/loud&gt;</programlisting>

        <para>This is also an element:</para>

        <programlisting>&lt;paragraph&gt;This is an element containing &lt;bold&gt;another&lt;/bold&gt; 
  element!&lt;/paragraph&gt;</programlisting>

        <para>Empty-element tags constitute an element all by themselves.
        These elements can have no content of course, because they don't have
        a <emphasis>pair</emphasis> of tags:</para>

        <programlisting>&lt;picture file="bloody_hand.png"/&gt;</programlisting>

        <important>
          <para>Don't confuse content with attributes. Content lives
          <emphasis>between</emphasis> tags, attributes
          <emphasis>within</emphasis> tags. The empty element in the last
          example has an attribute, but no content.</para>
        </important>

        <para>I'm stressing the element concept here because most
        documentation tends to speak of <quote>chapter elements</quote>,
        <quote>title elements</quote> etc. rather than <quote>chapter
        tags</quote> and <quote>title tags</quote>. The terms are often used
        interchangeably, but there are cases where it's important to know the
        difference.</para>
      </section>

      <section>
        <title>XML Conclusion</title>

        <para>Good – that's about all you need to know about XML. By now you
        should have a general idea of what an XML text looks like, what tags
        and elements are, and what they are for. As said earlier, the picture
        is oversimplified but it's good enough for our purposes.</para>

        <para>It should also be understood that just writing away in plain,
        self-invented XML is pretty pointless unless you have processing
        software that understands <emphasis>your</emphasis> tags. How else are
        you going to turn your XML source into a nicely formatted, presentable
        document?</para>

        <para>Fortunately, we don't have to worry about developing our own
        element definitions and conversion software. There are a number of
        formalized XML types available, each defining a set of tags and,
        equally important, a set of rules on how to use them. DocBook XML is
        one of those types.</para>
      </section>
    </section>

    <section id="docwritehowto-docbook-xml-primer">
      <title>A DocBook XML primer</title>

      <para>DocBook was designed to facilitate the writing of structured
      documents using SGML or XML (but don't worry about SGML – we use the XML
      strain). It is particularly fit for writing technical books and
      articles, especially on computer-related subjects. DocBook XML is
      defined in its <firstterm>Document Type Definition</firstterm> or
      <firstterm>DTD</firstterm>: a set of definitions and rules describing
      exactly how a valid DocBook document is structured. DocBook is rapidly
      becoming a de facto standard for computer-technical documents, and it is
      supported by a growing number of tools and applications.</para>

      <section id="docwritehowto-docbook-characteristics">
        <title>DocBook XML Characteristics</title>

        <para>Important characteristics of DocBook – as opposed to
        <quote>general</quote> XML – are:</para>

        <itemizedlist>
          <listitem>
            <para>The DocBook DTD defines a limited number of tags, and it
            gives exact rules on how to use them: what attributes are possible
            for a tag A, whether element B can be nested within element C, and
            so on. If you use undefined tags, or if you don't follow the
            rules, your document isn't DocBook anymore (and DocBook-supporting
            processing tools may break on it).</para>
          </listitem>

          <listitem>
            <para>DocBook tags always convey structure and semantics
            (meaning), <emphasis>never</emphasis> makeup. In DocBook, you'll
            find structural tags like <sgmltag
            class="starttag">book</sgmltag>, <sgmltag
            class="starttag">part</sgmltag>, <sgmltag
            class="starttag">chapter</sgmltag>, <sgmltag
            class="starttag">section</sgmltag>, <sgmltag
            class="starttag">para</sgmltag>, <sgmltag
            class="starttag">table</sgmltag>; and semantic tags like <sgmltag
            class="starttag">filename</sgmltag>, <sgmltag
            class="starttag">warning,</sgmltag> <sgmltag
            class="starttag">emphasis</sgmltag>, <sgmltag
            class="starttag">postcode</sgmltag>; but nothing like <sgmltag
            class="starttag">font</sgmltag>, <sgmltag
            class="starttag">bold</sgmltag>, <sgmltag
            class="starttag">center</sgmltag>, <sgmltag
            class="starttag">indent</sgmltag>, <sgmltag
            class="starttag">backgroundcolor</sgmltag> – nothing that has to
            do with layout or makeup.</para>
          </listitem>

          <listitem>
            <para>Because of this, a decision has to be taken somewhere on how
            the DocBook tags are translated into presentational makeup. This
            decision (or rather: the rendering rules) can be hardcoded in the
            tools but that would make things very inflexible. That's why the
            rules are mostly defined in <firstterm>stylesheets</firstterm>. A
            stylesheet is a document that tells the tool stuff like:</para>

            <blockquote>
              <para><quote>Print chapter titles in a 24-point black font;
              start each chapter on a new page; use italics for emphasis;
              render warnings in a bold, 12-point red font; use smallcaps for
              acronyms; etc. etc.</quote></para>
            </blockquote>

            <para>This approach enables the user to alter the stylesheets if
            he or she doesn't like the appearance of the final document. It
            would be a lot harder – if not impossible – to alter the tools
            themselves.</para>

            <note>
              <para>Stylesheets that are used to convert DocBook XML to other
              formats are called <firstterm>transformation
              stylesheets</firstterm>. They are written in yet another type of
              XML, called <firstterm>XSLT</firstterm> (eXtensible Stylesheet
              Language for Transformations).</para>
            </note>
          </listitem>
        </itemizedlist>
      </section>

      <section id="docwritehowto-docbook-benefits">
        <title>Benefits of DocBook XML</title>

        <para>DocBook has a lot of advantages for anybody writing technical
        documentation. These are the most important ones for us:</para>

        <itemizedlist>
          <listitem>
            <para>A DocBook XML document consists of pure, unpolluted,
            <emphasis>content</emphasis>. You never have to worry about the
            presentational side of things while writing your doc; you can
            concentrate on structure and informational content. This practice
            may at first feel a little odd if you're used to writing text in
            e.g. <application>Word</application>, but I promise you: you'll
            soon get to love it.</para>
          </listitem>

          <listitem>
            <para>Because DocBook is all about structure and meaning, it will
            be surprisingly easy to transform your outline into a DocBook
            skeleton.</para>
          </listitem>

          <listitem>
            <para>Many people produce docs for the manual module. If they all
            used different formats, or even one single format like Word or
            HTML, their works would look very different because every
            contributor would make his or her own makeup decisions. Of course
            we could develop a set of makeup rules, but then every docwriter
            would have to be aware of those rules, and take care to apply them
            all the time. Nah... better put the rules in one central place:
            the stylesheets, and let the docmakers worry about documentation,
            not presentation. The stylesheets will ensure that all our
            documentation has the same look-and-feel.</para>
          </listitem>

          <listitem>
            <para>If we don't like the makeup of our documents, we can easily
            change it if the makeup rules are in a stylesheet. Nothing needs
            to be altered in the DocBook source documents; all we have to do,
            after changing the stylesheets, is re-render the docs. Newly
            developed docs will automatically get the new look. Try to achieve
            that if the makeup instructions are scattered all over the
            documents themselves!</para>
          </listitem>

          <listitem>
            <para>Another advantage is that DocBook is an open standard, not
            tied to any commercial application or even a particular OS. If you
            download the Firebird manual module, you can build the HTML and
            PDF docs from the DocBook source both under Linux and under
            Windows – and we can add support for more OS's if need be.</para>
          </listitem>

          <listitem>
            <para>A DocBook document is pure text, which is ideal for use in
            CVS. Yes, a CVS tree can also contain binary files, but many
            useful features that CVS offers (showing the difference between
            two versions of a file, for instance) only work with text
            files.</para>
          </listitem>
        </itemizedlist>

        <para>Admittedly, none of these benefits is unique to DocBook. But
        DocBook has them all, and it's widely supported. That makes it the
        perfect choice for our Firebird documentation.</para>
      </section>

      <section id="docwritehowto-docbook-links">
        <title>DocBook documentation on the Internet</title>

        <para>Here are some links in case you want to find out more about
        DocBook:<itemizedlist>
            <listitem>
              <para><ulink
              url="http://opensource.bureau-cornavin.com/crash-course/">http://opensource.bureau-cornavin.com/crash-course/</ulink></para>

              <para><citetitle>Writing Documentation Using DocBook – A Crash
              Course</citetitle> by David Rugge, Mark Galassi and Eric
              Bischoff. A very nice tutorial, even though most of the tools
              discussed are not the ones we use.</para>
            </listitem>

            <listitem>
              <para><ulink
              url="http://docbook.org/tdg/en/">http://docbook.org/tdg/en/</ulink></para>

              <para><citetitle>DocBook – The Definitive Guide</citetitle>, by
              Norman Walsh and Leonard Muellner. Don't expect it to be a
              beginner-friendly tutorial – in fact, the first part is quite
              intimidating if you're a DocBook newbie. The reason I mention it
              here is its great online element reference, which I often
              consult while I'm writing.</para>
            </listitem>

            <listitem>
              <para><ulink
              url="http://www.tldp.org/HOWTO/DocBook-Demystification-HOWTO/">http://www.tldp.org/HOWTO/DocBook-Demystification-HOWTO/</ulink></para>

              <para>The <citetitle>DocBook Demystification Howto</citetitle>
              is interesting if you want to know a little more about XML and
              DocBook than what we've told you here. It also contains quite a
              lot of material on SGML, and – again – on tools we don't use for
              the Firebird documentation subproject.</para>
            </listitem>

            <listitem>
              <para><ulink
              url="http://sourceforge.net/projects/docbook">http://sourceforge.net/projects/docbook</ulink></para>

              <para>The DocBook open source project at SourceForge.</para>
            </listitem>
          </itemizedlist></para>

        <para>If you know of some other great online resource, please let use
        know by posting a message to the firebird-docs list.</para>
      </section>
    </section>
  </section>

  <section id="docwritehowto-docbook-authoring-tools">
    <title>DocBook XML authoring tools</title>

    <section id="docwritehowto-docbook-authoring-tools-text">
      <title>Text editors</title>

      <para>Because DocBook is a non-binary format, you can use any plaintext
      editor like <application>emacs</application>,
      <application>pico</application>, <application>Windows
      Notepad</application> or <application>vi</application> to write your
      documentation. And indeed, some docmakers prefer this approach to other
      more sophisticated tools because it gives them full control over their
      text, and the hand-typed tags are always visible. But the drawback is
      that text editors can not <emphasis>validate</emphasis> your DocBook
      document: you'll only notice your mistakes when a build goes wrong. And
      the structure of your document – especially a large document – is also
      difficult to see in text mode, although a consistent use of multi-level
      indentation can do a lot of good here.</para>

      <para>If you choose this approach or want to try it out, it would be a
      good idea to at least take an editor that's capable of XML syntax
      highlighting. A good one, and free at that, is
      <application>ConText</application>, available at <ulink
      url="http://www.fixedsys.com/context/">http://www.fixedsys.com/context/</ulink>.
      Unfortunately, ConText can't save in UTF-8 format. This is no problem
      for US-ASCII documents (save as DOS or Unix and you're fine), but as
      soon as you use diacritical marks or anything else above ASCII 127,
      ConText becomes as good as useless. A good, free alternative is SciTE at
      <ulink
      url="http://scintilla.sourceforge.net/SciTEDownload.html">http://scintilla.sourceforge.net/SciTEDownload.html</ulink>.
      It's less intuitive, but very powerful.</para>

      <warning>
        <para>Don't save documents containing non-US-ASCII characters as
        8-bit, in ConText or any other editor! Anything other than US ASCII
        has to be saved in a Unicode encoding, such as UTF-8 (for most
        languages) or UTF-16 (for some languages, if the UTF-16 file length is
        smaller or at least not much bigger than UTF-8). Actually, these
        encoding issues are an additional good reason to use an XML editor:
        they will usually save in the right encoding automatically.</para>
      </warning>
    </section>

    <section id="docwritehowto-docbook-authoring-tools-xml">
      <title>XML editors</title>

      <para>Dedicated XML editors often have graphical interfaces to make the
      tags stand out nicely (and sometimes irritatingly); many allow you to
      collapse and expand elements so you can view the structure of your
      document and at the same time zoom in on the element you're working on;
      they may also let you switch between different views. Most of them can
      validate your document against the DocBook DTD, and some even have a
      special DocBook authoring mode which allows you to write more or less
      like in a word processor.</para>

      <para>The author of this guide has tried out a number of these tools
      (free ones, cheap ones, and evaluation versions) and found
      <application>XMLMind XML Editor</application> to be the most useful.
      This is a personal opinion of course; your experience may differ.</para>

      <para>Some XML editors you may want to evaluate:</para>

      <itemizedlist>
        <listitem>
          <para><application>XMLMind XML Editor</application>, or
          <application>XXE</application> for short. The Standard Edition is
          free.</para>

          <para><ulink
          url="http://www.xmlmind.com/xmleditor/">http://www.xmlmind.com/xmleditor/</ulink></para>

          <para>Runs on: Linux, Windows, Mac OS X. Requires Java, but you need
          Java anyway or you won't be able to build the docs from the sources
          – see the <ulink
          url="http://www.firebirdsql.org/manual/docbuildhowto.html">Firebird
          Docbuilding Howto</ulink>.</para>

          <para>Features: Tree view (all elements collapsible) and Styled view
          (chapters and sections collapsible). The latter is what I usually
          work in: it shows the document in a basic but clear
          word-processor-like layout, defined in a stylesheet that comes with
          the program. Both views can be active simultaneously. DocBook mode
          won't let you enter anything non-DocBook. Element chooser. Attribute
          editor. Edit and Search functions. Spell checker. Special character
          picker. Speedbuttons to create frequently used elements like
          sections, lists, tables, etc. What I miss is a plaintext XML source
          view.</para>
        </listitem>

        <listitem>
          <para>Oxygen XML Editor. $ 48 for non-commercial use. Free 30-day
          trial.</para>

          <para><ulink
          url="http://www.oxygenxml.com">http://www.oxygenxml.com</ulink></para>

          <para>Runs on: Windows, Mac OS X, Linux, Eclipse. Requires
          Java.</para>

          <para>Features: XML source editor. Tree editor. Attribute editor.
          Outline pane. DocBook tag tooltips. XSLT debugger (a powerful tool,
          irrelevant to docwriting but great if you're also going to work on
          our transformation stylesheets). Validation, refactoring,
          spell-checking, etc., etc. A very good XML editor.</para>
        </listitem>

        <listitem>
          <para><application>epcEdit</application>. € 89 for non-comercial
          use. Free 60-day evaluation.</para>

          <para><ulink
          url="http://www.epcedit.com">http://www.epcedit.com</ulink></para>

          <para>Runs on: Linux, Windows, Solaris. Requires Tcl/Tk 8.1 or above
          (included in package).</para>

          <para>Features: Structure tree pane. Element chooser. Attribute
          editor. Document pane can switch between plaintext and graphic XML
          mode. No special DocBook mode, but can validate any XML document
          based upon its DTD.</para>
        </listitem>

        <listitem>
          <para><application>Altova XMLSpy. The Home Edition</application> is
          now free.</para>

          <para><ulink
          url="http://www.altova.com/products_ide.html">http://www.altova.com/products_ide.html</ulink></para>

          <para>Runs on: Windows, Eclipse. (Also reported to run on Linux
          using Wine, and on Mac OS X using Virtual PC 6.)</para>

          <para>Features: Text and Browser views. All elements collapsible in
          Browser view. Browser view is read-only. Element chooser. Attribute
          picker. Edit and Search functions. Special character picker.</para>

          <para>There's a feature matrix comparing Home, Professional and
          Enterprise editions at <ulink
          url="http://www.altova.com/matrix_x.html">http://www.altova.com/matrix_x.html</ulink>.</para>
        </listitem>
      </itemizedlist>

      <para>This list is not meant to be exhaustive, but if you know a
      <emphasis>good</emphasis> XML editor (good from the perspective of a
      Firebird docwriter) that you think should be in here, please let us know
      via the mailing list.</para>
    </section>
  </section>

  <section id="docwritehowto-writing-docbook">
    <title>Setting up your DocBook doc</title>

    <para>Hello – still with us? I know I spent quite some time explaining
    about XML and DocBook, but I really feel I had to do that because these
    are new concepts to a lot of people. Just giving them some links and
    telling them to go find out by themselves would probably lose us some
    otherwise valuable docwriters.</para>

    <para>Anyway, here we are: finally ready to start writing our doc. This
    section discusses setting up your DocBook document; the next one is all
    about applying the right tags and attributes in the right places.</para>

    <section id="docwritehowto-creating-the-doc">
      <title>Creating the document</title>

      <para>Every piece of documentation in our manual module is part of a
      <sgmltag class="starttag">set</sgmltag>. This is the topmost element in
      the DocBook hierarchy. A set contains a number of <sgmltag
      class="starttag">book</sgmltag>s, which in turn contain <sgmltag
      class="starttag">chapter</sgmltag>s, and so on.</para>

      <para>One advantage of placing books in a set is that they can reference
      each other, i.e. you can insert links in your documentation pointing to
      an exact spot in another book. This advantage is limited however by the
      fact that such links don't work across PDF file boundaries (a
      restriction that doesn't apply to the HTML output). Another advantage is
      automatic ToC (Table of Contents) generation.</para>

      <para>Fortunately, placing books in the same set does not imply that
      they also have to live together in one big file. DocBook allows you to
      set up a main document as shown below. (Don't worry about the section
      starting with "<literal>&lt;!DOCTYPE</literal>" – you won't have to
      write horrible stuff like that yourself. At the very worst you will have
      to copy and edit it, if you translate an existing set.)</para>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;!DOCTYPE set PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
  "docbookx/docbookx.dtd" [
    &lt;!ENTITY preface SYSTEM "firebirddocs/preface.xml"&gt;
    &lt;!ENTITY fb-intro SYSTEM "firebirddocs/firebirdintro.xml"&gt;
    &lt;!ENTITY ...&gt;
    &lt;!ENTITY ...&gt;
]&gt;

&lt;set id="firebird-books"&gt;
  &amp;preface;
  &amp;fb-intro;
  ...
  ...
&lt;/set&gt;</programlisting>

      <para>With the main document set up like above, the various books can be
      in separate files: <filename>preface.xml</filename>,
      <filename>firebirdintro.xml</filename>, etc., which we can edit
      independently. Such a file – yours, for instance – is roughly structured
      like this:</para>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;book id="fbintro"&gt;
  &lt;chapter id="fbintro-preface"&gt;
    ...
    ...
  &lt;/chapter&gt;
  &lt;chapter id="fbintro-installing-firebird"&gt;
    ...
    ...
  &lt;/chapter&gt;
  ...
  ...
&lt;/book&gt;</programlisting>

      <para>Of course if you set up a new document it must be made known to
      the main set, but this is something we'll discuss with you when you're
      ready to start writing. (We don't give a general rule here because it
      depends on what you're going to write – a book, an article, a chapter, a
      couple of chapters... – and how your work fits in with the rest.)</para>

      <para>Every DocBook file must start with this line:</para>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;</programlisting>

      <para>(Note: for some languages, UTF-16 will be the better
      choice.)</para>

      <para>If you write your documentation <quote>by hand</quote>, i.e. in a
      text editor, you must type that line yourself. If you use a dedicated
      XML editor, it will be inserted automatically when you create a new
      document.</para>

      <section>
        <title>File locations for the different sets</title>

        <para>Files for the English user documentation set must be placed in
        the <filename
        class="directory">manual/src/docs/firebirddocs</filename> directory
        tree. Non-English docs go in trees like <filename
        class="directory">manual/src/docs/firebirddocs-fr</filename>,
        <filename
        class="directory">manual/src/docs/firebirddocs-es</filename>,
        etc.</para>

        <para>Since January 2006 we have the possibility of creating
        additional base sets, the first one added being
        <systemitem>rlsnotes</systemitem>, the Release Notes set. The same
        logic applies here: English Release Notes stuff goes into <filename
        class="directory">manual/src/docs/rlsnotes</filename>, French into
        <filename class="directory">manual/src/docs/rlsnotes-fr</filename>,
        and so on.</para>

        <para>Each of these directory trees – <filename
        class="directory">firebirddocs</filename>, <filename
        class="directory">firebirddocs-es</filename>, <filename
        class="directory">firebirddocs-nl</filename>, <filename
        class="directory">rlsnotes</filename>, <filename
        class="directory">rlsnotes-fr</filename>, etc. – houses a separate
        <sgmltag class="starttag">set</sgmltag>, with one master document and
        any number of include files.</para>
      </section>
    </section>

    <section id="docwritehowto-typing-text">
      <title>Typing text</title>

      <para>If you type your DocBook XML in a text editor like
      <application>Notepad</application>, <application>emacs</application> or
      <application>ConText</application>, you can use linebreaks, indentation
      and multiple spaces more or less as you please. Every occurrence of
      <firstterm>whitespace</firstterm> (a sequence of one or more
      <literal>space</literal>, <literal>tab</literal>,
      <literal>linefeed</literal> or <literal>formfeed</literal> characters)
      will be converted to a single space character in the output. So
      this:</para>

      <programlisting>&lt;section&gt;&lt;title&gt;Firebird Architectures&lt;/title&gt;&lt;para&gt;Now let's have a
look at Firebird's different architectures.&lt;/para&gt;&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;First, there's the so-called &lt;firstterm&gt;Classic Server
&lt;/firstterm&gt;.&lt;/para&gt;&lt;/listitem&gt;&lt;listitem&gt;&lt;para&gt;Then there is &lt;firstterm&gt;
Superserver&lt;/firstterm&gt; architecture.&lt;/para&gt;&lt;/listitem&gt;&lt;listitem&gt;&lt;para&gt;
And finally, with the release of Firebird 1.5 we also have the 
&lt;firstterm&gt;embedded server&lt;/firstterm&gt;.&lt;/para&gt;&lt;/listitem&gt;&lt;/itemizedlist&gt;
&lt;/section&gt;</programlisting>

      <para>will result in the same output as this:</para>

      <programlisting>&lt;section&gt;
  &lt;title&gt;Firebird Architectures&lt;/title&gt;
  &lt;para&gt;Now let's have a look at Firebird's different
    architectures.&lt;/para&gt;
  &lt;itemizedlist&gt;
    &lt;listitem&gt;
      &lt;para&gt;First, there's the so-called 
        &lt;firstterm&gt;Classic Server&lt;/firstterm&gt;.&lt;/para&gt;
    &lt;/listitem&gt;
    &lt;listitem&gt;
      &lt;para&gt;Then there is &lt;firstterm&gt;Superserver&lt;/firstterm&gt; 
        architecture.&lt;/para&gt;
    &lt;/listitem&gt;
    &lt;listitem&gt;
      &lt;para&gt;And finally, with the release of Firebird 1.5 we also
        have the &lt;firstterm&gt;embedded server&lt;/firstterm&gt;.&lt;/para&gt;
    &lt;/listitem&gt;
  &lt;/itemizedlist&gt;
&lt;/section&gt;</programlisting>

      <para>Needless to say, the second form is much easier to read and
      understand for a human. So if you type your XML by hand, format the text
      in such a way that the structure is as clear as possible. Like the
      prophets said: <quote>Indent! Indent! Indent!</quote> (Or was that
      repent? No, I'm sure it was indent.)</para>

      <para>If you use a dedicated XML editor, please be aware that hitting
      <keycap>Enter</keycap> may automatically close the current <sgmltag
      class="starttag">para</sgmltag> and open a new one. Make sure you know
      how your editor behaves in this respect, and use the Enter key
      accordingly. Also check what happens to multiple consecutive whitespace
      characters, as some XML editors may use special tricks to preserve
      them.</para>
    </section>
  </section>

  <section id="docwritehowto-frequently-used-elements">
    <title>Elements we use frequently</title>

    <para>This section discusses the DocBook elements we use most in our
    Firebird docs. It includes lots of examples in DocBook XML format. If you
    use an XML authoring tool, what you see on your screen may look nothing
    like the examples given here, but if you open your XML file in a text
    editor – or choose a text view in your XML tool – you will see the actual
    XML. You may also have a look at the XML sources that are already in the
    manual module, to see how the other authors build up their docs and apply
    tags.</para>

    <para>Please read the subsection on hierarchical elements even if you're a
    proficient DocBook writer, as it contains some guidelines specific to our
    project. After that, you can skip the rest of the DocBook
    subsections.</para>

    <para>If you're new to DocBook, don't be discouraged by the length of this
    section. My advice is that you <emphasis>carefully</emphasis> read the
    subsection on hierarchical elements, and skim the others. Don't worry if
    there are things you don't understand at once, and by no means try to
    learn the material by heart! Just have this guide handy when you write
    your doc, and revisit the element subsections from time to time (like when
    you need them).</para>

    <section id="docwritehowto-elements-hierarchical">
      <title>Hierarchical elements</title>

      <para>The most common hierarchy is, starting at the top: <sgmltag
      class="starttag">set</sgmltag> – <sgmltag
      class="starttag">book</sgmltag> – <sgmltag
      class="starttag">chapter</sgmltag> – <sgmltag
      class="starttag">section</sgmltag> – <sgmltag
      class="starttag">para</sgmltag>. A book may also contain <sgmltag
      class="starttag">article</sgmltag>s instead of <sgmltag
      class="starttag">chapter</sgmltag>s.</para>

      <para>The next subsections will discuss some of the issues related to
      the document structure.</para>

      <section>
        <title>The <sgmltag class="attribute">id</sgmltag> attribute</title>

        <para>Sets, books, chapters, articles and top-level sections should
        always have an <sgmltag class="attribute">id</sgmltag> attribute.
        Other elements may also have one. The id allows an element to be
        referenced from another part of the document, and even from another
        document in the set. Ids are not visible in the rendered docs (except
        in the HTML source text), but they are used to form the HTML file
        names.</para>

        <para>All <sgmltag class="attribute">id</sgmltag> attributes must be
        unique within the entire bookset. Note that the different language
        versions each live in their own <sgmltag
        class="element">set</sgmltag>, so it's OK to keep the original
        <sgmltag class="attribute">id</sgmltag>s in a translation.</para>

        <para>Within a book or article, all <sgmltag
        class="attribute">id</sgmltag>s should start with the same lowercase
        word, e.g. <literal>usersguide</literal>, followed by a dash, followed
        by one or more other lowercase words. Examples are
        <literal>usersguide-intro</literal> and
        <literal>usersguide-download-install</literal>. This is not a DocBook
        requirement, but our own convention.</para>
      </section>

      <section>
        <title>The <sgmltag class="attribute">lang</sgmltag> attribute on
        non-English sets</title>

        <para>If you create a new set, or translate one, you must set the
        <sgmltag class="attribute">lang</sgmltag> attribute on the root
        element:</para>

        <programlisting>&lt;set id="firebird-books-fr" lang="fr"&gt;</programlisting>

        <para>This will ensure that the right captions are generated for
        notes, warnings etc., and that localized quotation marks are used.
        It's also good practice to use this attribute on the individual docs,
        just in case they're ever build out of the context of your set.</para>

        <para>For English sets, the <sgmltag class="attribute">lang</sgmltag>
        attribute is optional.</para>
      </section>

      <section>
        <title>Titles</title>

        <para>Sets, books, chapters, articles and sections must always have a
        <sgmltag class="element">title</sgmltag> – either as a direct child,
        or within an <sgmltag
        class="element"><replaceable>xxx</replaceable>info</sgmltag> element
        (see below). It is even legal to include it in both, but in that case
        the two <sgmltag class="element">title</sgmltag>s
        <emphasis>must</emphasis> be the same. Unlike <sgmltag
        class="attribute">id</sgmltag>, which is an attribute, <sgmltag
        class="element">title</sgmltag> is an element. And unlike the id, the
        title will appear in the output docs.</para>

        <para>If the <sgmltag class="element">title</sgmltag> is long, you
        should add a <sgmltag class="element">titleabbrev</sgmltag> element
        immediately after it, containing a shortened form of the title. The
        main reason for this is that each generated HTML page contains a
        so-called hierarchy bar or <quote>you-are-here line</quote> at the top
        and bottom. This bar shows all the steps from the topmost element (the
        <sgmltag class="element">set</sgmltag>) down to the page you are on.
        The items are clickable so the bar doesn't only give you an insight in
        where you are in the hierarchy, but it also lets you navigate up to
        the higher-level elements easily. It looks best if all the items fit
        on one line, so for each item the <sgmltag
        class="element">titleabbrev</sgmltag> is shown if the element in
        question has one; if not, the <sgmltag class="element">title</sgmltag>
        is used. The same strategy is followed for the outline in the PDF
        documents (that's the navigation frame on the left).</para>
      </section>

      <section>
        <title>Info elements</title>

        <para>If you write a book or an article, you must include a <sgmltag
        class="element">bookinfo</sgmltag> or <sgmltag
        class="element">articleinfo</sgmltag> element at the start. Inside it
        you can put author information and more. Other <sgmltag
        class="element"><replaceable>xxx</replaceable>info</sgmltag> elements
        exist, but you will rarely need them.</para>

        <programlisting>&lt;book id='usersguide' lang='en'&gt;
  &lt;bookinfo&gt;
    &lt;title&gt;Firebird Users Guide&lt;/title&gt;
    &lt;author&gt;
      &lt;firstname&gt;William&lt;/firstname&gt;
      &lt;surname&gt;Shakespeare&lt;/surname&gt;
    &lt;/author&gt;
    &lt;edition&gt;25 January 2006 – Document version 1.2&lt;/edition&gt;
  &lt;/bookinfo&gt;
  ...
  ...
&lt;/book&gt;</programlisting>

        <para>If the author is a company or other organisation, or a group you
        want to refer to as a collective, use <sgmltag
        class="element">corpauthor</sgmltag> instead of <sgmltag
        class="element">author</sgmltag>:</para>

        <programlisting>&lt;corpauthor&gt;IBPhoenix Editors&lt;/corpauthor&gt;</programlisting>

        <para>If there are several authors and you want to name them
        separately, create an <sgmltag class="element">author</sgmltag> (or
        <sgmltag class="element">corpauthor</sgmltag>) element for each of
        them and wrap them together in an <sgmltag
        class="element">authorgroup</sgmltag> element – all within the
        <sgmltag class="element"><replaceable>xxx</replaceable>info</sgmltag>
        element.</para>
      </section>

      <section>
        <title>Types of sections</title>

        <para>Section elements are a bit different from the rest in that there
        are two flavors of them:</para>

        <itemizedlist>
          <listitem>
            <para>First, the <sgmltag class="starttag">section</sgmltag>
            element as mentioned earlier. It can be used recursively, i.e. you
            can have a <sgmltag class="starttag">section</sgmltag> in a
            <sgmltag class="starttag">section</sgmltag> in a <sgmltag
            class="starttag">section</sgmltag>... This type has the advantage
            that you can move entire subtrees up or down the hierarchy without
            having to change the tags.</para>
          </listitem>

          <listitem>
            <para>Then there's the <sgmltag class="starttag">sect1</sgmltag>,
            <sgmltag class="starttag">sect2</sgmltag> ... <sgmltag
            class="starttag">sect5</sgmltag> range. These elements must be
            properly nested, with <sgmltag class="starttag">sect1</sgmltag> at
            the top, <sgmltag class="starttag">sect2</sgmltag> within <sgmltag
            class="starttag">sect1</sgmltag> etc. You cannot put a <sgmltag
            class="starttag">sect3</sgmltag> directly in a <sgmltag
            class="starttag">sect1</sgmltag>. This is less flexible than
            <sgmltag class="starttag">section</sgmltag>, but in practice it
            rarely hurts. After all, the same <quote>rigidity</quote> applies
            to <sgmltag class="starttag">set</sgmltag>, <sgmltag
            class="starttag">book</sgmltag> and <sgmltag
            class="starttag">chapter</sgmltag> and we can live with that,
            too.</para>
          </listitem>
        </itemizedlist>

        <note>
          <para>In early versions of this guide, the <sgmltag
          class="starttag">sect<replaceable>N</replaceable></sgmltag> series
          was recommended for presentational reasons. Due to improvements in
          the stylesheets, this is no longer an issue. Pick whichever you
          want.</para>
        </note>
      </section>

      <section>
        <title>Appendices</title>

        <para>You can add one or more <sgmltag
        class="element">appendix</sgmltag> elements after the last chapter in
        a book, or after the last section in an article. Appendices can
        contain just about everything that a <sgmltag
        class="element">section</sgmltag> can contain, including other
        sections.</para>
      </section>

      <section>
        <title>Example structure</title>

        <para>The following example gives you an idea of how to structure your
        document:</para>

        <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;book id="usersguide"&gt;

  &lt;bookinfo&gt;
    &lt;title&gt;Firebird Users Guide&lt;/title&gt;
    &lt;author&gt;
      &lt;firstname&gt;William&lt;/firstname&gt;
      &lt;surname&gt;Shakespeare&lt;/surname&gt;
    &lt;/author&gt;
    &lt;edition&gt;25 January 2006 – Document version 1.2&lt;/edition&gt;
  &lt;/bookinfo&gt;

  &lt;chapter id="usersguide-intro"&gt;
    &lt;title&gt;Introduction&lt;/title&gt;
    &lt;para&gt;Hello! This is the introductory text to the Firebird
      Users Guide.&lt;/para&gt;
  &lt;/chapter&gt;

  &lt;chapter id="usersguide-download-install"&gt;
    &lt;title&gt;Downloading and installing Firebird&lt;/title&gt;
    &lt;para&gt;In this chapter we'll demonstrate how to download and
      install Firebird.&lt;/para&gt;
    &lt;section id="usersguide-download"&gt;
      &lt;title&gt;Downloading Firebird&lt;/title&gt;
      &lt;para&gt;To download Firebird from the Internet, first go to the
        following URL: etc. etc. etc.&lt;/para&gt;
      ...more paragraphs, possibly subsections...
    &lt;/section&gt;
    &lt;section id="usersguide-install"&gt;
      &lt;title&gt;Installing Firebird&lt;/title&gt;
      &lt;para&gt;Installing Firebird on your system goes like this:
        etc. etc.&lt;/para&gt;
      ...more paragraphs, possibly subsections...
    &lt;/section&gt;
  &lt;/chapter&gt;

  ...more chapters...

  &lt;appendix id="usersguide-dochist"&gt;
    &lt;title&gt;Document history&lt;/title&gt;
    ...to be discussed later!

  &lt;appendix id="usersguide-license"&gt;
    &lt;title&gt;License notice&lt;/title&gt;
    ...to be discussed later!
&lt;/book&gt;</programlisting>
      </section>

      <section>
        <title>Some points to note</title>

        <itemizedlist>
          <listitem>
            <para>First, notice again that attribute values must always be
            quoted. (But if you fill them in in an attribute editor, don't
            insert quotes: the editor will take care of them.)</para>
          </listitem>

          <listitem>
            <para>As you can see in the example, <sgmltag
            class="element">chapter</sgmltag>s and <sgmltag
            class="element">section</sgmltag>s can start directly with one or
            more <sgmltag class="element">para</sgmltag> elements. But once
            you include sections in a chapter, or subsections in a section,
            you can't add any more <sgmltag class="element">para</sgmltag>
            elements after them – only within them. Good DocBook-aware XML
            editors simply won't let you do such a thing, but if you type your
            DocBook XML by hand this is something you need to be aware
            of.</para>
          </listitem>

          <listitem>
            <para>If you use an XML editor, chances are that you rarely have
            to create <sgmltag class="element">para</sgmltag> elements
            explicitly. For instance, if I insert a <sgmltag
            class="element">chapter</sgmltag> or a <sgmltag
            class="element">section</sgmltag> in <application>XMLMind XML
            Editor</application>, a first – empty – <sgmltag
            class="element">para</sgmltag> is automatically created. And when
            I type text in a paragraph and hit <keycap>ENTER</keycap>, that
            paragraph is automatically closed with a <sgmltag
            class="endtag">para</sgmltag> and a next one created.</para>
          </listitem>
        </itemizedlist>

        <para><link linkend="docwritehowto-elements-end">Skip the rest of the
        elements subsections</link> if you already know everything about
        DocBook elements.</para>
      </section>
    </section>

    <section id="docwritehowto-elements-lists">
      <title>Lists</title>

      <para>DocBook offers various list elements, of which the following are
      used frequently:</para>

      <variablelist>
        <varlistentry>
          <term><sgmltag class="element">itemizedlist</sgmltag></term>

          <listitem>
            <para>An <sgmltag class="element">itemizedlist</sgmltag> is used
            to enumerate items whose order is not (very) important:</para>

            <programlisting>&lt;itemizedlist spacing="compact"&gt;
  &lt;listitem&gt;&lt;para&gt;Oranges are juicy&lt;/para&gt;&lt;/listitem&gt;
  &lt;listitem&gt;&lt;para&gt;Apples are supposed to be healthy&lt;/para&gt;&lt;/listitem&gt;
  &lt;listitem&gt;&lt;para&gt;Most people find lemons way too sour&lt;/para&gt;
    &lt;/listitem&gt;
&lt;/itemizedlist&gt;</programlisting>

            <para>The items in the list are generally marked with a bullet in
            the rendered output docs:</para>

            <itemizedlist spacing="compact">
              <listitem>
                <para>Oranges are juicy</para>
              </listitem>

              <listitem>
                <para>Apples are supposed to be healthy</para>
              </listitem>

              <listitem>
                <para>Most people find lemons way too sour</para>
              </listitem>
            </itemizedlist>

            <para>If you leave out the <sgmltag
            class="attribute">spacing</sgmltag> attribute, it will default to
            <constant>normal</constant>, which means that vertical whitespace
            (usually one line's height) will be inserted between the
            listitems.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><sgmltag class="element">orderedlist</sgmltag></term>

          <listitem>
            <para>Use an <sgmltag class="element">orderedlist</sgmltag> when
            you want to stress the order of the entries:</para>

            <programlisting>&lt;orderedlist spacing="compact" numeration="loweralpha"&gt;
  &lt;listitem&gt;&lt;para&gt;Sumerians 3300 BC – 1900 BC&lt;/para&gt;&lt;/listitem&gt;
  &lt;listitem&gt;&lt;para&gt;Assyrian Empire 1350 BC – 612 BC&lt;/para&gt;&lt;/listitem&gt;
  &lt;listitem&gt;&lt;para&gt;Persian Empire 6th century BC – 330 BC&lt;/para&gt;
  &lt;/listitem&gt;
&lt;/orderedlist&gt;</programlisting>

            <para>By default, arabic numerals (1, 2, 3, ...) will be placed
            before the items, but you can change this with the <sgmltag
            class="attribute">numeration</sgmltag> attribute. Output:</para>

            <orderedlist numeration="loweralpha" spacing="compact">
              <listitem>
                <para>Sumerians 3300 BC – 1900 BC</para>
              </listitem>

              <listitem>
                <para>Assyrian Empire 1350 BC – 612 BC</para>
              </listitem>

              <listitem>
                <para>Persian Empire 6th century BC – 330 BC</para>
              </listitem>
            </orderedlist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><sgmltag class="element">procedure</sgmltag></term>

          <listitem>
            <para>A <sgmltag class="element">procedure</sgmltag> is often
            rendered like an <sgmltag class="element">orderedlist</sgmltag>,
            but the semantics are different: a procedure denotes a sequence of
            <emphasis>steps</emphasis> to be performed in a given
            order:</para>

            <programlisting>&lt;procedure&gt;
  &lt;step&gt;&lt;para&gt;Pick the lock&lt;/para&gt;&lt;/step&gt;
  &lt;step&gt;&lt;para&gt;Rob the house&lt;/para&gt;&lt;/step&gt;
  &lt;step&gt;&lt;para&gt;Get arrested&lt;/para&gt;&lt;/step&gt;
&lt;/orderedlist&gt;</programlisting>

            <para>Here's how the above example is rendered:</para>

            <procedure>
              <step>
                <para>Pick the lock</para>
              </step>

              <step>
                <para>Rob the house</para>
              </step>

              <step>
                <para>Get arrested</para>
              </step>
            </procedure>

            <para>Within a <sgmltag class="element">step</sgmltag> you can
            include a <sgmltag class="element">substeps</sgmltag> element,
            which in turn contains more <sgmltag
            class="element">step</sgmltag>s.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><sgmltag class="element">variablelist</sgmltag></term>

          <listitem>
            <para>A <sgmltag class="element">variablelist</sgmltag> is made up
            of <sgmltag class="element">varlistentry</sgmltag>s, each of which
            contains a <sgmltag class="element">term</sgmltag> followed by a
            <sgmltag class="element">listitem</sgmltag>:</para>

            <programlisting>&lt;variablelist&gt;
  &lt;varlistentry&gt;
    &lt;term&gt;Tag&lt;/term&gt;
    &lt;listitem&gt;
      &lt;para&gt;A piece of text enclosed in angle brackets&lt;/para&gt;
    &lt;/listitem&gt;
  &lt;/varlistentry&gt;
  &lt;varlistentry&gt;
    &lt;term&gt;Element&lt;/term&gt;
    &lt;listitem&gt;
      &lt;para&gt;A start tag, a matching end tag, and everything in 
        between&lt;/para&gt;
    &lt;/listitem&gt;
  &lt;/varlistentry&gt;
  &lt;varlistentry&gt;
    &lt;term&gt;Content of an element&lt;/term&gt;
    &lt;listitem&gt;
      &lt;para&gt;Everything between the matching tags&lt;/para&gt;
    &lt;/listitem&gt;
  &lt;/varlistentry&gt;
&lt;/variablelist&gt;</programlisting>

            <para>The list you are reading right now, enumerating the
            different types of lists, is a <sgmltag
            class="element">variablelist</sgmltag> with the element names
            (<sgmltag class="element">itemizedlist</sgmltag>, <sgmltag
            class="element">orderedlist</sgmltag>, etc.) as terms. The next
            section – <citetitle>Links</citetitle> – also consists of one
            introductory sentence followed by a <sgmltag
            class="element">variablelist</sgmltag>.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="docwritehowto-elements-links">
      <title>Links</title>

      <para>You can create hyperlinks to targets in your own document, in
      another document in the set, or on the Internet.</para>

      <variablelist>
        <varlistentry>
          <term><sgmltag class="element">link</sgmltag></term>

          <listitem>
            <para><sgmltag class="element">link</sgmltag> is the generic
            element to point to another location in the document or set. The
            <sgmltag class="attribute">linkend</sgmltag> attribute must always
            be present; its value should be the <sgmltag
            class="attribute">id</sgmltag> of the element you link to (the
            <firstterm>link target</firstterm>).</para>

            <programlisting>Click &lt;link linkend="docwritehowto-introduction"&gt;here&lt;/link&gt; to jump
to the introduction.</programlisting>

            <para>In the rendered document, the word
            <quote><literal>here</literal></quote> will be <firstterm>hot
            text</firstterm>, that is: a clickable link pointing to the
            introduction:</para>

            <blockquote>
              <para>Click <link
              linkend="docwritehowto-introduction">here</link> to jump to the
              introduction.</para>
            </blockquote>

            <caution>
              <para>Although you can use <sgmltag
              class="element">link</sgmltag> to point to any element in the
              entire set, you should only do so if the link target will be in
              the same PDF document as the link itself. The HTML version is
              fully hyperlinked, but links in the PDF rendering don't work
              across documents. Our PDFs typically contain one <sgmltag
              class="element">book</sgmltag> or <sgmltag
              class="element">article</sgmltag>; if the target lies outside
              the current document, use a <sgmltag
              class="element">ulink</sgmltag> instead (see below).</para>
            </caution>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><sgmltag class="element">ulink</sgmltag></term>

          <listitem>
            <para>Use a <sgmltag class="element">ulink</sgmltag> to link to an
            Internet resource. The <sgmltag class="attribute">url</sgmltag>
            attribute is mandatory:</para>

            <programlisting>Click &lt;ulink url="http://docbook.org/tdg/en/"&gt;this link&lt;/ulink&gt; to
read The Definitive Guide on DocBook.</programlisting>

            <para>The words <quote><literal>this link</literal></quote> will
            rendered as a hyperlink to
            <literal>http://docbook.org/tdg/en/</literal>, like this:</para>

            <blockquote>
              <para>Click <ulink url="http://docbook.org/tdg/en/">this
              link</ulink> to read The Definitive Guide on DocBook.</para>
            </blockquote>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><sgmltag class="element">email</sgmltag></term>

          <listitem>
            <para>You can make an email link with a <sgmltag
            class="element">ulink</sgmltag>, but it's easier to use the
            <sgmltag class="element">email</sgmltag> element. This will show
            the email address as a clickable link in the output. This piece of
            XML:</para>

            <programlisting>Send mail to 
&lt;email&gt;firebird-docs-request@lists.sourceforge.net&lt;/email&gt; to 
subscribe.</programlisting>

            <para>results in the following output:</para>

            <blockquote>
              <para>Send mail to
              <email>firebird-docs-request@lists.sourceforge.net</email> to
              subscribe.</para>
            </blockquote>

            <para>If you want the hot text to be different from the email
            address itself, use a <sgmltag class="element">ulink</sgmltag>
            with a <literal>mailto:</literal> URL.</para>

            <warning>
              <para>If you include links to email addresses – whether with
              <sgmltag class="element">email</sgmltag> or with <sgmltag
              class="element">ulink</sgmltag> – or even if you only
              <emphasis>mention</emphasis> them in your text, and your
              document is subsequently published on the Internet, these email
              addresses will be exposed to harvesting robots used by spammers.
              This will likely increase the amount of spam sent to such
              addresses. Always make sure the owner of the address agrees
              before publishing it!</para>
            </warning>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><sgmltag class="element">anchor</sgmltag></term>

          <listitem>
            <para>An <sgmltag class="element">anchor</sgmltag> is an empty
            element marking an exact spot in the document. It doesn't show up
            in the text that your readers see, but it can be used as a link
            target. This is useful if you want to link to a place somewhere in
            the middle of a long paragraph:</para>

            <programlisting>&lt;para id="lost-at-sea"&gt;
  Blah blah blah...
  and some more...
  and then some...
  Now here's an interesting place in the paragraph I want to be able
  to link to:
  &lt;anchor id="captain-haddock"/&gt;There it is!
  Paragraph drones on...
  and on...
  and on...
&lt;/para&gt;</programlisting>

            <para>Having placed the anchor, you can create a link to
            it:</para>

            <programlisting>&lt;link linkend="captain-haddock"&gt;Go to the interesting spot&lt;/link&gt; in
that long, long paragraph.</programlisting>

            <para>If your link targets a short element, or the beginning of an
            element, it's easier to give the target element an <sgmltag
            class="attribute">id</sgmltag> and use that as linkend.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="docwritehowto-elements-proglistings-etc">
      <title>Program listings, screens, literal layout, and examples</title>

      <variablelist>
        <varlistentry>
          <term><sgmltag class="element">programlisting</sgmltag></term>

          <listitem>
            <para>If you include code fragments in your doc, put them in a
            <sgmltag class="element">programlisting</sgmltag> element.
            Everything you type within a programlisting will be rendered
            verbatim, including line breaks, spaces etc. Also, a fixed-width
            font will be used in the rendered documents. The term
            <quote>program listing</quote> is to be interpreted loosely here:
            you should also use this element for SQL fragments and DocBook XML
            examples. This guide – and especially the section about elements,
            which you are reading now – is littered with <sgmltag
            class="element">programlisting</sgmltag>s, so you already know
            what they look like:</para>

            <programlisting>Programlistings are rendered like this.</programlisting>

            <important>
              <para>In programlistings you should limit the line length to
              around 70 characters, otherwise the text will run off the right
              edges of the rendered PDF documents. The same goes for other
              layout-preserving elements like <sgmltag
              class="element">screen</sgmltag>, <sgmltag
              class="element">literallayout</sgmltag>, etc.</para>
            </important>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><sgmltag class="element">screen</sgmltag></term>

          <listitem>
            <para>Use a <sgmltag class="element">screen</sgmltag> element to
            show what a user sees or might see on a computer screen in text
            mode, or in a terminal window. Here too, your layout will be
            preserved and a fixed-width font used, but the semantics are
            different. It may or may not look different from a programlisting
            in the output. Here's a short example, showing what happens if you
            try to build a non-existing target in the manual tree:</para>

            <programlisting>&lt;screen&gt;
D:\Firebird\manual_incl_howto\src\build&gt;build ugh
java version "1.4.2_01"
Java(TM) 2 Runtime Environment, Standard Edition (build 1.4.2_01-b06)
Java HotSpot(TM) Client VM (build 1.4.2_01-b06, mixed mode)

Buildfile: build.xml

BUILD FAILED
Target `ugh' does not exist in this project.
&lt;/screen&gt;</programlisting>

            <para>And this is how it's rendered:</para>

            <screen>D:\Firebird\manual_incl_howto\src\build&gt;build ugh
java version "1.4.2_01"
Java(TM) 2 Runtime Environment, Standard Edition (build 1.4.2_01-b06)
Java HotSpot(TM) Client VM (build 1.4.2_01-b06, mixed mode)

Buildfile: build.xml

BUILD FAILED
Target `ugh' does not exist in this project.</screen>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><sgmltag class="element">literallayout</sgmltag></term>

          <listitem>
            <para><sgmltag class="element">literallayout</sgmltag>, like
            <sgmltag class="element">screen</sgmltag> and <sgmltag
            class="element">programlisting</sgmltag>, keeps your layout
            intact, but it usually doesn't change the font – unless you set
            the <sgmltag class="attribute">class</sgmltag> attribute to
            <sgmltag class="attvalue">monospaced</sgmltag>. It's also more
            general than the previous two in the sense that there's no meaning
            attached to its content: you can put any kind of text here of
            which you want to preserve the layout.</para>

            <para>Example source:</para>

            <programlisting>&lt;literallayout&gt;
The Sick Rose

Oh Rose, thou art sick!
The invisible worm
That flies in the night,
In the howling storm,

Has found out thy bed
Of crimson joy,
And his dark secret love
Doth thy life destroy.

  — William Blake
&lt;/literallayout&gt;</programlisting>

            <para>Output:</para>

            <literallayout>The Sick Rose

Oh Rose, thou art sick!
The invisible worm
That flies in the night,
In the howling storm,

Has found out thy bed
Of crimson joy,
And his dark secret love
Doth thy life destroy.

  — William Blake</literallayout>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><sgmltag class="element">example</sgmltag></term>

          <listitem>
            <para>An <sgmltag class="element">example</sgmltag> is a formal
            example with a title. It is usually given an <sgmltag
            class="attribute">id</sgmltag> so it can be referred to from other
            places in the document. An index of examples is built
            automatically when the document is rendered. You'll often find
            <sgmltag class="element">programlisting</sgmltag>'s in an <sgmltag
            class="element">example</sgmltag>, but it may also contain
            <sgmltag class="element">screen</sgmltag>'s, <sgmltag
            class="element">para</sgmltag>'s, lists, etc.</para>

            <para>Here's an example of an <sgmltag
            class="element">example</sgmltag>:</para>

            <programlisting>&lt;example id="docwritehowto-sql-example"&gt;
  &lt;title&gt;An SQL example&lt;/title&gt;
  &lt;para&gt;With this command you can list all the records in the COUNTRY 
    table:&lt;/para&gt;
  &lt;programlisting&gt;SELECT * FROM COUNTRY;&lt;/programlisting&gt;
&lt;/example&gt;</programlisting>

            <para>In the output this will look like:</para>

            <blockquote>
              <example id="docwritehowto-sql-example">
                <title>An SQL example</title>

                <para>With this command you can list all the records in the
                COUNTRY table:</para>

                <programlisting>SELECT * FROM COUNTRY;</programlisting>
              </example>
            </blockquote>

            <para>If you want an example without a mandatory title, use an
            <sgmltag class="element">informalexample</sgmltag>. Informal
            examples are also left out of the examples index.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="docwritehowto-elements-tables">
      <title>Tables</title>

      <para>If you have ever made an HTML table for a website, you won't have
      much difficulty creating tables in DocBook. There are differences
      though, and DocBook tables are vastly richer.</para>

      <para>A <sgmltag class="element">table</sgmltag> consists of a <sgmltag
      class="element">title</sgmltag> and one or more <sgmltag
      class="element">tgroup</sgmltag>s – usually one. The <sgmltag
      class="element">tgroup</sgmltag> element has one mandatory attribute:
      <sgmltag class="attribute">cols</sgmltag>. You must set this attribute
      to the number of columns in the <sgmltag
      class="element">tgroup</sgmltag>. Within a <sgmltag
      class="element">tgroup</sgmltag> you can place <sgmltag
      class="element">thead</sgmltag>, <sgmltag
      class="element">tfoot</sgmltag> and <sgmltag
      class="element">tbody</sgmltag> elements. Each of these has one or more
      <sgmltag class="element">row</sgmltag>s, which in turn have as many
      <sgmltag class="element">entry</sgmltag>s (cells) as you have specified
      in the <sgmltag class="attribute">cols</sgmltag> attribute. (You can
      combine cells by creating spans, but we won't go into that here.)</para>

      <para>So much for the basic structure. Now we'll show you an example;
      first in DocBook XML source text, and then the resulting table in the
      rendered output document. Don't worry about the <sgmltag
      class="starttag">colspec</sgmltag>s for now; these are non–mandatory
      subelements used for finetuning.</para>

      <programlisting>&lt;table id="docwritehowto–table–dboftheyear"&gt;
  &lt;title&gt;LinuxQuestions.org poll: Database of the year 2003&lt;/title&gt;

  &lt;tgroup cols="3"&gt;
    &lt;colspec align="left" colname="col–dbname" colwidth="2*"/&gt;
    &lt;colspec align="right" colname="col–votes" colwidth="1*"/&gt;
    &lt;colspec align="right" colname="col–perc" colwidth="1*"/&gt;

    &lt;thead&gt;
      &lt;row&gt;
        &lt;entry align="center"&gt;Database&lt;/entry&gt;
        &lt;entry align="center"&gt;Votes&lt;/entry&gt;
        &lt;entry align="center"&gt;Percentage&lt;/entry&gt;
      &lt;/row&gt;
    &lt;/thead&gt;

    &lt;tfoot&gt;
      &lt;row&gt;
        &lt;entry&gt;Total&lt;/entry&gt;
        &lt;entry&gt;1111&lt;/entry&gt;
        &lt;entry&gt;99.99&lt;/entry&gt;
      &lt;/row&gt;
    &lt;/tfoot&gt;

    &lt;tbody&gt;
      &lt;row&gt;
        &lt;entry&gt;MySQL&lt;/entry&gt;
        &lt;entry&gt;405&lt;/entry&gt;
        &lt;entry&gt;36.45&lt;/entry&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;entry&gt;Firebird&lt;/entry&gt;
        &lt;entry&gt;403&lt;/entry&gt;
        &lt;entry&gt;36.27&lt;/entry&gt;
      &lt;/row&gt;

      ... 5 more rows not shown here ....

    &lt;/tbody&gt;
  &lt;/tgroup&gt;
&lt;/table&gt;</programlisting>

      <para>And here's the resulting table:</para>

      <table id="docwritehowto-table-dboftheyear">
        <title>LinuxQuestions.org poll: Database of the year 2003</title>

        <tgroup cols="3">
          <colspec align="left" colname="col-dbname" colwidth="2*" />

          <colspec align="right" colname="col-votes" colwidth="1*" />

          <colspec align="right" colname="col-perc" colwidth="1*" />

          <thead>
            <row>
              <entry align="center">Database</entry>

              <entry align="center">Votes</entry>

              <entry align="center">Percentage</entry>
            </row>
          </thead>

          <tfoot>
            <row>
              <entry>Total</entry>

              <entry>1111</entry>

              <entry>99.99</entry>
            </row>
          </tfoot>

          <tbody>
            <row>
              <entry>MySQL</entry>

              <entry>405</entry>

              <entry>36.45</entry>
            </row>

            <row>
              <entry>Firebird</entry>

              <entry>403</entry>

              <entry>36.27</entry>
            </row>

            <row>
              <entry>Postgres</entry>

              <entry>269</entry>

              <entry>24.21</entry>
            </row>

            <row>
              <entry>Oracle</entry>

              <entry>25</entry>

              <entry>2.25</entry>
            </row>

            <row>
              <entry>Berkeley DB</entry>

              <entry>4</entry>

              <entry>0.36</entry>
            </row>

            <row>
              <entry>Sybase</entry>

              <entry>3</entry>

              <entry>0.27</entry>
            </row>

            <row>
              <entry>DB2</entry>

              <entry>2</entry>

              <entry>0.18</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>By the way, these are the actual results of a real poll at
      LinuxQuestions.org. As you can see, if only three more people had voted
      for Firebird we would have won. If you know who these three persons are,
      please report them to our Chief Inquisitor. He would like to have a
      little, er... <emphasis>talk</emphasis> with them :–)</para>

      <para>Tables are automatically indexed. An <sgmltag
      class="element">informaltable</sgmltag> has the same structure as a
      <sgmltag class="element">table</sgmltag> but doesn't require a title and
      is not included in the index. If you want to nest tables, either use a
      <sgmltag class="element">table</sgmltag>/<sgmltag
      class="element">informaltable</sgmltag> <emphasis>within</emphasis> an
      <sgmltag class="element">entry</sgmltag>, or an <sgmltag
      class="element">entrytbl</sgmltag> <emphasis>instead of</emphasis> an
      <sgmltag class="element">entry</sgmltag>.</para>

      <para>Tables have many more features than shown here, but we'll leave
      those for you to explore.</para>

      <section id="docwritehowto-elements-tables-html">
        <title>HTML tables</title>

        <para>DocBook versions 4.3 and up also allow you to fill a table the
        HTML way, with <sgmltag class="element">tr</sgmltag>s instead of
        <sgmltag class="element">row</sgmltag>s, and <sgmltag
        class="element">td</sgmltag>/<sgmltag class="element">th</sgmltag>
        instead of <sgmltag class="element">entry</sgmltag> elements. Why
        would you want to do that? There are two situations where it may be
        advantageous to use an HTML table:</para>

        <itemizedlist>
          <listitem>
            <para>You already have the HTML table available, and you'd rather
            not spend time converting it;</para>
          </listitem>

          <listitem>
            <para>You want to use several different background colors in the
            table. This can be done in a DocBook table too, but only with
            <firstterm>processing instructions</firstterm> – one for each
            target for every child element that needs an explicit color. In an
            HTML table you can use the children's <sgmltag
            class="attribute">bgcolor</sgmltag> attributes.</para>
          </listitem>
        </itemizedlist>

        <para>An HTML table can't have <sgmltag
        class="element">tgroup</sgmltag>s; you put the <sgmltag
        class="element">tr</sgmltag>s either directly in the table or in
        <sgmltag class="element">thead</sgmltag> / <sgmltag
        class="element">tfoot</sgmltag> / <sgmltag
        class="element">tbody</sgmltag> elements which are direct children of
        the table. Also, it has a <sgmltag class="element">caption</sgmltag>
        instead of a <sgmltag class="element">title</sgmltag>. (An <sgmltag
        class="element">informaltable</sgmltag> has neither caption nor
        title.)</para>

        <para>Here is the source of an HTML table:</para>

        <programlisting>&lt;table bgcolor="blue" border="1"&gt;
  &lt;caption align="bottom"&gt;An HTML-style table&lt;/caption&gt;

  &lt;tr bgcolor="#FFE080"&gt;
    &lt;th&gt;First column&lt;/th&gt;
    &lt;th bgcolor="#FFFF00"&gt;Second column&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr align="center"&gt;
    &lt;td bgcolor="orange" colspan="2"&gt;Table cell spanning two
      columns&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td bgcolor="#00FFC0"&gt;Yes, here I am&lt;/td&gt;
    &lt;td align="right" bgcolor="#E0E0E0" rowspan="2" valign="bottom"&gt;And
      there I go!&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td bgcolor="#FFA0FF"&gt;Another row...&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;</programlisting>

        <para>And here's the result:</para>

        <table bgcolor="blue" border="1" id="docwritehowto-table-htmlstyle">
          <caption align="bottom">An HTML-style table</caption>

          <tr bgcolor="#FFE080">
            <th>First column</th>

            <th bgcolor="#FFFF00">Second column</th>
          </tr>

          <tr align="center">
            <td bgcolor="orange" colspan="2">Table cell spanning two
            columns</td>
          </tr>

          <tr>
            <td bgcolor="#00FFC0">Yes, here I am</td>

            <td align="right" bgcolor="#E0E0E0" rowspan="2"
            valign="bottom">And there I go!</td>
          </tr>

          <tr>
            <td bgcolor="#FFA0FF">Another row...</td>
          </tr>
        </table>

        <para>Not all HTML table elements and attributes are supported by our
        stylesheets. For instance, properties specified in <sgmltag
        class="element">col</sgmltag> and <sgmltag
        class="element">colgroup</sgmltag> elements won't be picked up.
        Specify them in the <sgmltag class="element">td</sgmltag>/<sgmltag
        class="element">th</sgmltag> elements instead – or extend the
        stylesheets!<!--This still true with the new stylesheets?--></para>

        <note>
          <para>In XMLMind, you can only create an HTML table from the menu
          opened by the <quote>Add table</quote> button on the toolbar. From
          the Edit pane you can only add regular DocBook tables.</para>
        </note>
      </section>

      <section id="docwritehowto-elements-tables-large">
        <title>PDF rendering of large tables</title>

        <para>DocBook <sgmltag class="element">table</sgmltag>s belong to a
        group called <firstterm>formal elements</firstterm>. Formal elements
        are included in automatically generated indices (list of tables, list
        of figures etc.); if a formal element doesn't have an <sgmltag
        class="attribute">id</sgmltag> attribute, the stylesheets assign one.
        The templates that generate the XSL-FO output (this is the
        intermediate stage for the PDF) also give each formal object the
        attribute <sgmltag
        class="attribute">keep-together.within-page="always"</sgmltag> to
        prevent page breaks to occur within the object. This is usually fine,
        but what if the object doesn't fit on one page? Until recently, we
        used Apache FOP 0.20.5 to render the XSL-FO output to PDF. This
        processor simply ignored the <sgmltag
        class="attribute">keep-together</sgmltag> attribute if the object was
        too large. But the current version (0.93 or higher)
        <emphasis>always</emphasis> enforces it. The result is that if the
        object is too large, it is truncated (or wrecked in some other way) to
        make it fit on the page. This is a feature, not a bug, so there's no
        use complaining about it.</para>

        <para>There are two ways to work around this problem if a table grows
        too large to fit on a single page:</para>

        <orderedlist>
          <listitem>
            <para>If the table doesn't need a title and you don't mind that it
            won't be included in the List of Tables, use an <sgmltag
            class="element">informaltable</sgmltag> instead.</para>
          </listitem>

          <listitem>
            <para>Insert a <firstterm>processing instruction</firstterm> at
            the beginning of the table:</para>

            <programlisting>&lt;table frame="all" id="ufb-about-tbl-features"&gt;
  <emphasis role="bold">&lt;?dbfo keep-together='auto'?&gt;</emphasis>
  &lt;title&gt;Summary of features&lt;/title&gt;</programlisting>

            <para>In XMLMind, this is done as follows:</para>

            <procedure>
              <step>
                <para>Place the cursor somewhere in the title or select the
                entire title element.</para>
              </step>

              <step>
                <para>Choose <emphasis>Edit -&gt; Processing Instruction -&gt;
                Insert Processing Instruction Before</emphasis> from the menu.
                A green line will appear above the title.</para>
              </step>

              <step>
                <para>Type <literal>keep-together='auto'</literal> on that
                line.</para>
              </step>

              <step>
                <para>With the cursor still on the green line, choose
                <emphasis>Edit -&gt; Processing Instruction -&gt; Change
                Processing Instruction Target</emphasis> from the menu. A
                dialogue box pops up.</para>
              </step>

              <step>
                <para>In the dialogue box, change <literal>target</literal> to
                <literal>dbfo</literal> and click OK.</para>
              </step>
            </procedure>

            <para>Of course you can do the same for smaller tables if you want
            them to be breakable. The opposite instruction, <sgmltag
            class="pi">dbfo keep-together='always'</sgmltag>, will prevent
            page breaks in <sgmltag class="element">informaltable</sgmltag>s.
            Make sure that the element fits on one page before using
            this!</para>
          </listitem>
        </orderedlist>
      </section>
    </section>

    <section id="docwritehowto-elements-images">
      <title>Images</title>

      <para>To include an image, use a <sgmltag
      class="element">mediaobject</sgmltag> containing an <sgmltag
      class="element">imageobject</sgmltag> containing an <sgmltag
      class="element">imagedata</sgmltag> element:</para>

      <programlisting>&lt;mediaobject&gt;
  &lt;imageobject&gt;
    &lt;imagedata align="center" fileref="images/services.png"
      format="PNG"/&gt;
  &lt;/imageobject&gt;
&lt;/mediaobject&gt;</programlisting>

      <para>You may wonder why you need three nested elements to include a
      simple image. There's a good reason for this, but I'm not going to tell
      you ;-) — it's of no concern to us. All we have to know is that this is
      how it's done.</para>

      <para>Regardless of the location of the image relative to the DocBook
      source, the <sgmltag class="attribute">fileref</sgmltag> should
      <emphasis>always</emphasis> be of the form
      <filename>images/<replaceable>filename.ext</replaceable></filename>.
      This is because, both for the HTML and the FO output, the image files
      will be copied from their source locations to a subdirectory called
      <filename class="directory">images</filename> under the output
      directory. (The FO output is an intermediate form. Once converted to
      PDF, the image will be included in the file itself.)</para>

      <para>If the fileref is not <quote>correct</quote> from the source
      file's point of view, you won't see the image in XMLMind. If this
      bothers you, create a symlink to the images folder (Linux) or copy the
      images folder into the same folder as the source file (Windows).
      Creating a shortcut under Windows doesn't seem to do the trick. Only do
      this in your local copy – don't commit duplicated image folders to
      CVS!</para>

      <para>A <sgmltag class="element">mediaobject</sgmltag> is formatted as a
      separate block. If you want the image inlined with the text, use an
      <sgmltag class="element">inlinemediaobject</sgmltag> instead; the nested
      elements remain the same.</para>

      <note>
        <title>Note for translators</title>

        <para>Translators: Any images that you don't edit or replace by a
        localised version should not be copied into your language set. As from
        January 2006, the build tools first look in your language's image
        folder (e.g. <filename
        class="directory">manual/src/docs/firebirddocs-fr/images</filename>),
        and after that in <filename
        class="directory">manual/src/docs/firebirddocs/images</filename>. So,
        if you use the original image, there's no need to waste CVS space by
        duplicating it.</para>

        <para>The same behaviour applies to other base sets: if an image
        referenced from, say, the Spanish Release Notes sources is not in
        <filename class="directory">rlsnotes-es/images</filename>, the one in
        <filename class="directory">rlsnotes/images</filename> is used. It
        doesn't work <emphasis>across</emphasis> base sets, though.</para>
      </note>
    </section>

    <section id="docwritehowto-elements-admons">
      <title>Admonitions</title>

      <para>DocBook has several tags to mark a block of text as a note, a
      warning, a tip, etc. In the output documents such blocks typically
      appear indented, and marked with an icon or a word to denote their
      purpose. These tags are, in alphabetical order:</para>

      <blockquote>
        <para><sgmltag class="starttag">caution</sgmltag>, <sgmltag
        class="starttag">important</sgmltag>, <sgmltag
        class="starttag">note</sgmltag>, <sgmltag
        class="starttag">tip</sgmltag>, and <sgmltag
        class="starttag">warning</sgmltag></para>
      </blockquote>

      <para>I will give you a <sgmltag class="starttag">tip</sgmltag> as an
      example; the others are used in exactly the same way:</para>

      <programlisting>&lt;tip&gt;
  &lt;para&gt;If you insert a caution, important, note, tip, or warning
    element in your text, don't start it with the word caution, 
    important, note, tip, or warning, because these words are usually 
    automatically generated by the rendering engine.&lt;/para&gt;
&lt;/tip&gt;</programlisting>

      <para>And this is the result:</para>

      <tip>
        <para>If you insert a <sgmltag class="starttag">caution</sgmltag>,
        <sgmltag class="starttag">important</sgmltag>, <sgmltag
        class="starttag">note</sgmltag>, <sgmltag
        class="starttag">tip</sgmltag>, or <sgmltag
        class="starttag">warning</sgmltag> element in your text, don't start
        it with the word <literal>caution</literal>,
        <literal>important</literal>, <literal>note</literal>,
        <literal>tip</literal>, or <literal>warning</literal>, because these
        words are usually automatically generated by the rendering
        engine.</para>
      </tip>

      <para>You may have noticed that the words <literal>caution</literal>,
      <literal>important</literal> etc. look different from the rest of the
      tip's text. How come? Well, to tell you the truth, I've surrounded them
      with special tags (first with <sgmltag
      class="starttag">sgmltag</sgmltag>s, the second time with <sgmltag
      class="starttag">literal</sgmltag>s) to make them look like that. But
      this made the source XML look very noisy, so I decided to remove those
      tags from the example source I presented to you.</para>

      <para>You can optionally give the admonition a <sgmltag
      class="element">title</sgmltag>. If you don't, a default header (in the
      document language) will be generated in the output.</para>

      <para>If you want to set off a block of text from its surroundings
      without marking it as a tip or whatever, use a <sgmltag
      class="starttag">blockquote</sgmltag>.</para>
    </section>

    <section id="docwritehowto-elements-headers">
      <title>Paragraph headers</title>

      <para>If you want a paragraph header or title without creating a
      subsection, there are a few possibilities.</para>

      <variablelist>
        <varlistentry>
          <term><sgmltag class="element">bridgehead</sgmltag></term>

          <listitem>
            <para>A <sgmltag class="element">bridgehead</sgmltag> is a
            free-floating title between paragraphs, not associated with the
            start of a chapter or section. The <sgmltag
            class="attribute">renderas</sgmltag> attribute determines how it
            will be rendered.</para>

            <programlisting>&lt;para&gt;You may remember that Mr. Hardy started with this firm as
  elevator boy and with grim determination worked his way up to
  the top. And after the wedding today he becomes General Manager
  of this vast organisation.&lt;/para&gt;

&lt;bridgehead renderas="sect5"&gt;Mr. Laurel's comments&lt;/bridgehead&gt;

&lt;para&gt;We also spoke to his lifetime friend and companion Mr. Laurel.
  Mr. Laurel says that after viewing the situation from all sides,
  he is thoroughly reconciled to the fact that the moving picture
  industry is still in its infancy. Mr. Laurel also states that
  technology, whilst it may appear to be the center of all—&lt;/para&gt;</programlisting>

            <para>The above source is rendered as:</para>

            <blockquote>
              <para>You may remember that Mr. Hardy started with this firm as
              elevator boy and with grim determination worked his way up to
              the top. And after the wedding today he becomes General Manager
              of this vast organisation.</para>

              <bridgehead renderas="sect5">Mr. Laurel's comments</bridgehead>

              <para>We also spoke to his lifetime friend and companion Mr.
              Laurel. Mr. Laurel says that after viewing the situation from
              all sides, he is thoroughly reconciled to the fact that the
              moving picture industry is still in its infancy. Mr. Laurel also
              states that technology, whilst it may appear to be the center of
              all—</para>
            </blockquote>

            <para>You are free in your choice of <sgmltag
            class="attribute">renderas</sgmltag> level, but the logical choice
            would normally be the current section level plus (at least)
            one.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><sgmltag class="element">formalpara</sgmltag></term>

          <listitem>
            <para>A <sgmltag class="element">formalpara</sgmltag> is a
            paragraph with a title. Our stylesheets render the title as a
            run-in head.</para>

            <programlisting>&lt;formalpara&gt;
  &lt;title&gt;Motherly love:&lt;/title&gt;
  &lt;para&gt;This is the love your mother has for you, not to be
    confused with brotherly or otherly love.&lt;/para&gt;
&lt;/formalpara&gt;</programlisting>

            <para>In the output this looks like:</para>

            <blockquote>
              <formalpara>
                <title>Motherly love:</title>

                <para>This is the love your mother has for you, not to be
                confused with brotherly or otherly love.</para>
              </formalpara>
            </blockquote>

            <para>A period will be appended to the title, unless it already
            ends with a punctuation character.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="docwritehowto-elements-inlines">
      <title>Various inline elements</title>

      <para>To conclude the subsection on DocBook elements I will now briefly
      introduce a number of <firstterm>inline elements</firstterm>. They are
      called <quote>inline</quote> because they don't interrupt the flow of
      the text. If I use e.g. an <sgmltag class="element">emphasis</sgmltag>
      element:</para>

      <programlisting>Don't &lt;emphasis&gt;ever&lt;/emphasis&gt; call me fat again!</programlisting>

      <para>the result is this:</para>

      <blockquote>
        <para>Don't <emphasis>ever</emphasis> call me fat again!</para>
      </blockquote>

      <para>The word <quote>ever</quote> is emphasized, but it keeps its place
      in the sentence. We've already encountered some inline elements before:
      the various link types. Other elements – like <sgmltag
      class="element">table</sgmltag>, <sgmltag
      class="element">warning</sgmltag>, <sgmltag
      class="element">blockquote</sgmltag> and <sgmltag
      class="element">programlisting</sgmltag> – are always displayed as a
      block, set apart from the surrounding text (even if you
      <quote>inline</quote> them in your XML source). Not surprisingly, these
      are called <firstterm>block elements</firstterm>. Block elements often
      contain inline elements; the reverse is not possible.</para>

      <para>OK, let's get started with those inline elements. I'll include
      examples – both XML source and rendered output – for most of
      them:</para>

      <variablelist>
        <varlistentry>
          <term><sgmltag class="element">filename</sgmltag> – <sgmltag
          class="element">command</sgmltag> – <sgmltag
          class="element">application</sgmltag> – <sgmltag
          class="element">envar</sgmltag></term>

          <listitem>
            <para>Use the <sgmltag class="element">filename</sgmltag> tag to
            mark file names in the broadest sense. Attributes can optionally
            indicate that the file is a header file, a directory, etc.</para>

            <programlisting>Place your doc in the &lt;filename
class="directory"&gt;src/docs/firebirddocs&lt;/filename&gt; subdirectory.</programlisting>

            <para>The output reads:</para>

            <blockquote>
              <para>Place your doc in the <filename
              class="directory">src/docs/firebirddocs</filename>
              subdirectory.</para>
            </blockquote>

            <para><sgmltag class="element">command</sgmltag> and <sgmltag
            class="element">application</sgmltag> are both used for executable
            programs. <sgmltag class="element">command</sgmltag> is usually
            chosen for smaller programs and internal commands; its content
            should be the exact command as given on a command line; <sgmltag
            class="element">application</sgmltag> is generally used for bigger
            programs and need not be the name of the executable file. Both can
            refer to the same program:</para>

            <programlisting>Type &lt;command&gt;netscape&amp;amp;&lt;/command&gt; in a terminal window to start 
&lt;application&gt;Netscape Navigator&lt;/application&gt;.</programlisting>

            <para>This is rendered as:</para>

            <blockquote>
              <para>Type <command>netscape&amp;</command> in a terminal window
              to start <application>Netscape Navigator</application>.</para>
            </blockquote>

            <para><sgmltag class="element">envar</sgmltag> denotes an
            environment variable.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><sgmltag class="element">subscript</sgmltag> – <sgmltag
          class="element">superscript</sgmltag></term>

          <listitem>
            <para>These two do the expected thing:</para>

            <programlisting>After inventing the formula e = mc&lt;superscript&gt;2&lt;/superscript&gt;, I 
really felt like a glass of liquid H&lt;subscript&gt;2&lt;/subscript&gt;O !</programlisting>

            <para><emphasis>Output:</emphasis> After inventing the formula e =
            mc<superscript>2</superscript>, I really felt like a glass of
            liquid H<subscript>2</subscript>O !</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><sgmltag class="element">varname</sgmltag> – <sgmltag
          class="element">constant</sgmltag> – <sgmltag
          class="element">database</sgmltag></term>

          <listitem>
            <para>The use of <sgmltag class="element">varname</sgmltag> and
            <sgmltag class="element">constant</sgmltag> should be obvious. The
            <sgmltag class="starttag">database</sgmltag> tag is not only meant
            for databases, but also for database objects:</para>

            <programlisting>The &lt;database class="table"&gt;COUNTRY&lt;/database&gt; table has two fields:
&lt;database class="field"&gt;COUNTRY&lt;/database&gt; and
&lt;database class="field"&gt;CURRENCY&lt;/database&gt;.</programlisting>

            <para><emphasis>Output:</emphasis> The <database
            class="table">COUNTRY</database> table has two fields: <database
            class="field">COUNTRY</database> and <database
            class="field">CURRENCY</database>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><sgmltag class="element">function</sgmltag> – <sgmltag
          class="element">parameter</sgmltag> – <sgmltag
          class="element">returnvalue</sgmltag></term>

          <listitem>
            <para>These three speak for themselves, I trust.</para>

            <programlisting>The &lt;function&gt;log&lt;/function&gt; function takes parameters
&lt;parameter&gt;a&lt;/parameter&gt; and &lt;parameter&gt;b&lt;/parameter&gt;.</programlisting>

            <para><emphasis>Output:</emphasis> The <function>log</function>
            function takes parameters <parameter>a</parameter> and
            <parameter>b</parameter>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><sgmltag class="element">prompt</sgmltag> – <sgmltag
          class="element">userinput</sgmltag> – <sgmltag
          class="element">computeroutput</sgmltag></term>

          <listitem>
            <para><sgmltag class="element">prompt</sgmltag> is used for a
            string inciting the user to enter some text; <sgmltag
            class="element">userinput</sgmltag> refers to text entered by the
            user (not necessarily at a prompt!); <sgmltag
            class="element">computeroutput</sgmltag> is text displayed by the
            computer:</para>

            <programlisting>Type &lt;userinput&gt;guest&lt;/userinput&gt; at the &lt;prompt&gt;login:&lt;/prompt&gt;
prompt and the server will greet you with a &lt;computeroutput&gt;Welcome,
guest user&lt;/computeroutput&gt;.</programlisting>

            <para><emphasis>Output:</emphasis> Type
            <userinput>guest</userinput> at the <prompt>login:</prompt> prompt
            and the server will greet you with a <computeroutput>Welcome,
            guest user</computeroutput>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><sgmltag class="element">keycap</sgmltag></term>

          <listitem>
            <para>The text on a keyboard key, or its common name:</para>

            <programlisting>Hit the &lt;keycap&gt;Del&lt;/keycap&gt; key to erase the message, or
&lt;keycap&gt;SPACE&lt;/keycap&gt; to move on.</programlisting>

            <para><emphasis>Output:</emphasis> Hit the <keycap>Del</keycap>
            key to erase the message, or <keycap>SPACE</keycap> to move
            on.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><sgmltag class="element">sgmltag</sgmltag></term>

          <listitem>
            <para>This element is used extensively throughout this guide: it
            marks SGML <emphasis>and</emphasis> XML tags, elements,
            attributes, entities etc.:</para>

            <programlisting>If it concerns a directory, set the 
&lt;sgmltag class="attribute"&gt;class&lt;/sgmltag&gt; attribute of the 
&lt;sgmltag class="element"&gt;filename&lt;/sgmltag&gt; element to
&lt;sgmltag class="attvalue"&gt;directory&lt;/sgmltag&gt;.</programlisting>

            <para><emphasis>Output:</emphasis> If it concerns a directory, set
            the <sgmltag class="attribute">class</sgmltag> attribute of the
            <sgmltag class="element">filename</sgmltag> element to <sgmltag
            class="attvalue">directory</sgmltag>.</para>

            <para>Other possible values for <sgmltag
            class="element">sgmltag</sgmltag>.<sgmltag
            class="attribute">class</sgmltag> are: <sgmltag
            class="attvalue">starttag</sgmltag>, <sgmltag
            class="attvalue">endtag</sgmltag>, <sgmltag
            class="attvalue">emptytag</sgmltag>, and <sgmltag
            class="attvalue">genentity</sgmltag> (for an entity).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><sgmltag class="element">emphasis</sgmltag> – <sgmltag
          class="element">citetitle</sgmltag> – <sgmltag
          class="element">firstterm</sgmltag></term>

          <listitem>
            <para>Use <sgmltag class="element">emphasis</sgmltag> to stress
            words in general, <sgmltag class="element">citetitle</sgmltag> for
            book titles etc., and <sgmltag class="element">firstterm</sgmltag>
            if you introduce a new word or concept to your readers:</para>

            <programlisting>We use &lt;firstterm&gt;DocBook XML&lt;/firstterm&gt; for our Firebird 
documentation. A short introduction follows;
&lt;emphasis&gt;please&lt;/emphasis&gt; read it carefully! If you want to know
more about the subject, buy &lt;citetitle&gt;DocBook – The Definitive 
Guide&lt;/citetitle&gt;.</programlisting>

            <para><emphasis>Output:</emphasis> We use <firstterm>DocBook
            XML</firstterm> for our Firebird documentation. A short
            introduction follows; <emphasis>please</emphasis> read it
            carefully! If you want to know more about the subject, buy
            <citetitle>DocBook – The Definitive Guide</citetitle>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><sgmltag class="element">quote</sgmltag> – <sgmltag
          class="element">literal</sgmltag></term>

          <listitem>
            <para>Use <sgmltag class="element">quote</sgmltag> for an inline
            quotation (as opposed to a <sgmltag
            class="element">blockquote</sgmltag>). Quotation marks will be
            inserted automatically. Using <sgmltag
            class="element">quote</sgmltag> instead of typing the quote
            characters yourself (which is also perfectly legal) has the
            advantage that we can alter the type of quotation marks through
            stylesheets if we want to. Also, quotes differ per
            language:</para>

            <programlisting>&lt;para&gt;An &lt;quote lang="en"&gt;English quote&lt;/quote&gt;
  and a &lt;quote lang="fr"&gt;French quote&lt;/quote&gt;.&lt;/para&gt;</programlisting>

            <para><emphasis>Output:</emphasis> An <quote lang="en">English
            quote</quote> and a <quote lang="fr">French quote</quote>.</para>

            <para>Please note that you shouldn't use the <sgmltag
            class="attribute">lang</sgmltag> attribute on <sgmltag
            class="element">quote</sgmltag>s in your own docs. Your root
            element's <sgmltag class="attribute">lang</sgmltag> attribute will
            ensure that the right type of quotes are used. If someone
            translates your document – and changes the root <sgmltag
            class="attribute">lang</sgmltag> attrib – it will be rendered with
            the quotation marks for the target language. Of course I had to
            use the attribute here to show the difference, and to make sure
            that the different quotation marks survived any
            translation.</para>

            <para>A <sgmltag class="element">literal</sgmltag> is a word or
            text fragment to be taken literally. It is a rather general
            element, often used to make certain words stand out
            typographically:</para>

            <programlisting>At all costs avoid using the word &lt;literal&gt;humongous&lt;/literal&gt; in
your documentation.</programlisting>

            <para><emphasis>Output:</emphasis> At all costs avoid using the
            word <literal>humongous</literal> in your documentation.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Should you always use these inline elements wherever you can?
      Well, if you do, you will certainly make your document richer; you'll
      make it easier to scan for filenames for instance, or to generate an
      index of all the applications mentioned in your document. On the other
      hand, there are so many of these semantic elements (in fact we've only
      discussed a <emphasis>few</emphasis> here) that if you apply them
      everywhere you can, you'll probably wind up in a straightjacket before
      you can finish your doc. This is not what we want: if you really have to
      go mad, please do so <emphasis>after</emphasis> you've committed your
      document :–)</para>

      <para>So, as a general advice: go a bit easy on those inlines; use them
      wherever you think it makes sense, but don't overdo it.</para>
    </section>

    <section id="docwritehowto-elements-wrapup">
      <title>To wrap up the elements</title>

      <para>You may have noticed that in the rendered documents (you're
      reading one now, unless you opened the XML version) many different
      elements have the same appearance: a <sgmltag
      class="element">filename</sgmltag>, a <sgmltag
      class="element">literal</sgmltag> and an <sgmltag
      class="element">application</sgmltag> may have the exact same
      typography; the same goes for <sgmltag
      class="element">emphasis</sgmltag>, <sgmltag
      class="element">firstterm</sgmltag> and <sgmltag
      class="element">citetitle</sgmltag>.</para>

      <para>So what's the point of all these different tags? Why not use just
      a few, like <sgmltag class="element">emphasis</sgmltag> and <sgmltag
      class="element">literal</sgmltag>, if they're going to look the same
      anyway? Well, there are two very good reasons not to:</para>

      <itemizedlist>
        <listitem>
          <para>First, if we dropped most of our inlines in favor of say,
          <sgmltag class="element">emphasis</sgmltag> and <sgmltag
          class="element">literal</sgmltag>, the semantics would be lost.
          Remember that DocBook XML is all about structure and semantics.
          <sgmltag class="element">firstterm</sgmltag> and <sgmltag
          class="element">citetitle</sgmltag> may <emphasis>look</emphasis>
          the same as <sgmltag class="element">emphasis</sgmltag> once
          rendered, but they <emphasis>are</emphasis> not the same thing. The
          XML source knows that, even if it doesn't always show. This
          information is useful, and we don't want to lose it.</para>
        </listitem>

        <listitem>
          <para>Further, we can adapt our stylesheets for each type of element
          individually. As soon as we decide that a <sgmltag
          class="element">firstterm</sgmltag> should look different from a
          <sgmltag class="element">citetitle</sgmltag>, we can arrange for
          that – but <emphasis>only</emphasis> if they are indeed marked with
          different tags, not if they are both <sgmltag
          class="element">emphasis</sgmltag>'s in the XML source.</para>
        </listitem>
      </itemizedlist>

      <para>This concludes the sections on DocBook. With the knowledge
      presented above, you should now be able to author DocBook XML documents
      for the Firebird project. Of course if you use a dedicated XML editor –
      which, again, is highly advisable – you must also consult its
      documentation to learn how to use it; that's one thing this guide
      doesn't cover.</para>

      <anchor id="docwritehowto-elements-end" />
    </section>
  </section>

  <section id="docwritehowto-language-style">
    <title>Language and style</title>

    <para>After the flood of DocBook information in the previous sections, we
    now turn our attention to some other important docwriting aspects:
    language and style (in this section), and copyrights (in the next
    section).</para>

    <section id="docwritehowto-language">
      <title>Language</title>

      <para>The Firebird community is a very diverse one, and made up of
      people with many different mother tongues. If you write your
      documentation in a language other than your own, you'll probably make
      some mistakes. This is not catastrophical, but you should at least try
      to reduce the number of errors. Some strategies to help you with this
      are:</para>

      <itemizedlist>
        <listitem>
          <para>Use a dictionary! Simple, effective, and blissfully
          non-hightech.</para>
        </listitem>

        <listitem>
          <para>When hesitating between two spellings of a word, or between
          several possible versions of an expression, google for the
          alternatives and look at their frequencies. Also follow some of the
          result links to see how native speakers use the word or expression
          in their texts.</para>
        </listitem>

        <listitem>
          <para>Have a native speaker look over your text and correct it where
          necessary.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section id="docwritehowto-style">
      <title>Style</title>

      <para>Don't expect a Style Guide here – I wouldn't know how to write one
      anyway. Just some guidelines and tips:</para>

      <itemizedlist>
        <listitem>
          <para>Try to write in plain, everyday language wherever possible.
          Avoid difficult words if there's a familiar, simple
          alternative.</para>
        </listitem>

        <listitem>
          <para>Avoid long sentences (over 25 words) if you can; especially
          avoid two or more long sentences immediately after each
          other.</para>
        </listitem>

        <listitem>
          <para>Be careful with constructs like double or triple negatives
          (<quote>I can't deny that I'm not displeased</quote>) and passive
          voice (<quote>Care should be taken...</quote>). You don't have to
          avoid them at all costs, but they can make a sentence harder to
          understand. To prevent that, use the positive (<quote>I am
          pleased</quote>) and the active voice (<quote>Take
          care...</quote>).</para>
        </listitem>

        <listitem>
          <para>Use lists to enumerate a number of parallel items, for
          instance:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>A collection of hints and tips.</para>
            </listitem>

            <listitem>
              <para>A sequence of examples (like this one).</para>
            </listitem>

            <listitem>
              <para>Steps to be followed in a procedure.</para>
            </listitem>

            <listitem>
              <para>Alternative solutions to a problem.</para>
            </listitem>
          </itemizedlist>

          <para>But if there's only a small number of short items, use a plain
          sentence instead: <quote>My mother loves three men: John, Dick, and
          Dave.</quote></para>
        </listitem>

        <listitem>
          <para>Don't overuse exclamation marks. Never use multiple
          exclamation marks or question marks. This is annoying!!!!! Don't you
          agree???</para>
        </listitem>
      </itemizedlist>

      <section>
        <title>Docwriter's block</title>

        <para>Sometimes you know what you want to write, and you have all the
        words ready, but you can't get the sentence started – you just don't
        get it to <emphasis>flow</emphasis>. This is very frustrating and it
        can sometimes block the advance of your text for many minutes. And
        it's all the more frustrating because you <emphasis>do</emphasis> know
        what you want to tell your readers, but you don't seem to be able to
        produce a decent sentence. After many painful experiences of this
        kind, I've developed the following strategy (not that I think I'm the
        first):</para>

        <orderedlist>
          <listitem>
            <para>Write down what you have to say in loose sentences and
            chunks of words. Never mind about style, never mind if it looks
            ugly. Just write down what you want to tell the reader; make sure
            it's all there, and in the right order. If, while doing this, you
            notice that you feel unsure about something, include a remark at
            exactly that point. Make your remarks stand out from the
            surrounding text, e.g. &lt;&lt;like this&gt;&gt; or !LIKE
            THAT!</para>

            <para>This may result in a text like:</para>

            <blockquote>
              <para>CVS means Concurrent Versions System
              (&lt;&lt;check!&gt;&gt;). Purpose: managing versions of
              software. You can use it alone or with a group. You need a CVS
              client to use it. A CVS client is a program with which you can
              access a CVS repository (&lt;&lt;explain this term?&gt;&gt;). To
              find out if a CVS client is installed on your system, type
              <quote>cvs</quote> on the command line. If it's not there, go to
              this URL to download it.... [etc., etc.]</para>
            </blockquote>
          </listitem>

          <listitem>
            <para>If you have included any remarks, handle them first.
            <emphasis>Check</emphasis> if CVS really means Concurrent Versions
            System (it does). <emphasis>Decide</emphasis> whether you should
            really explain the term <quote>CVS repository</quote> at this
            point (you should).</para>
          </listitem>

          <listitem>
            <para>Now, go over the paragraph again and try to make the text
            flow more naturally wherever you can. Chances are that this will
            be a lot easier than you expected!</para>
          </listitem>

          <listitem>
            <para>If it still looks a little clumsy, never mind – better
            clumsy and clear than smooth-flowing and fuzzy. Maybe you can
            revisit this passage later and see if you can nice it up some
            more.</para>
          </listitem>
        </orderedlist>

        <para>This approach works well for me. So if you're stuck in this way,
        try it out; hopefully it will help you too.</para>
      </section>
    </section>
  </section>

  <section id="docwritehowto-copyrights">
    <title>Copyright issues</title>

    <para>Many people find legal issues boring, but this is an important
    section. Please read it thoroughly.</para>

    <section id="docwritehowto-copyrights-others">
      <title>Using material written by others</title>

      <para>As we write our manuals, we can consult all kinds of other
      documentation – and so we should, because we want to achieve the best
      possible result. Any information we find in publicly available
      third-party manuals, user's guides, tutorials etc. can be freely used in
      our own docs, but it is important not to confuse
      <emphasis>information</emphasis> with <emphasis>literal text</emphasis>.
      We cannot copy-and-paste text from other works into our own
      documentation, unless the author explicitly permits us to do so.</para>

      <para>If you would like to use a piece of text written by somebody else,
      check the copyright notice of the work in question. If there isn't one,
      the work is automatically copyrighted under the Berne convention and you
      must assume that it's <emphasis>illegal</emphasis> to copy it – even
      partially. This is also true if the work is freely available! Not having
      to pay for a document does not imply that you can freely copy portions
      of text and republish them in a work of your own.</para>

      <section>
        <title>Borland InterBase manuals</title>

        <para>The Borland InterBase 6 beta docs – although free – are not part
        of the InterBase package that was open-sourced in July 2000. We have
        asked Borland several times if we could use these docs <quote>as if
        they fell under the InterBase Public License</quote>, but they didn't
        even bother to answer. So feel free to use this documentation set as a
        source of information, but don't copy text from it.</para>
      </section>

      <section id="docwritehowto-postgresql">
        <title>PostgreSQL docs</title>

        <para>PostgreSQL is another major open source database, with (not
        surprisingly) many similarities to Firebird, but also many
        differences. Depending on the kind of documentation you are going to
        write, it may be beneficial to base it on existing PostgreSQL docs. Be
        aware though that if you use PostgreSQL material, you MUST include
        their copyright notice in your document!</para>

        <para>The PostgreSQL documentation homepage is here:</para>

        <blockquote>
          <para><ulink
          url="http://www.postgresql.org/docs/">http://www.postgresql.org/docs/</ulink></para>
        </blockquote>

        <para>The most recent PostgreSQL license is currently at:</para>

        <blockquote>
          <para><ulink
          url="http://www.postgresql.org/about/licence">http://www.postgresql.org/about/licence</ulink></para>
        </blockquote>

        <para>One nice thing about the PostgreSQL docs is that they are
        authored in DocBook, just like ours. However, they use DocBook SGML
        instead of XML, so some tweaking may be necessary. The DocBook SGML
        sources can be found here:</para>

        <blockquote>
          <para><ulink
          url="http://developer.postgresql.org/cvsweb.cgi/pgsql-server/doc/src/sgml/">http://developer.postgresql.org/cvsweb.cgi/pgsql-server/doc/src/sgml/</ulink></para>
        </blockquote>

        <para>Or check out the entire CVS tree, docs and all. For
        instructions, go to:</para>

        <blockquote>
          <para><ulink
          url="http://developer.postgresql.org/docs/postgres/cvs.html">http://developer.postgresql.org/docs/postgres/cvs.html</ulink></para>
        </blockquote>
      </section>
    </section>

    <section>
      <title>Your copyright and the PDL</title>

      <para>If you contribute to the Firebird documention subproject, your
      work will be included in the Open Source repository at SourceForge. In
      January 2005, the Firebird doc team decided to release the documentation
      it develops under the <firstterm>Public Documentation
      License</firstterm>. Licensing your work under the PDL means that you
      retain the copyright, but you grant others certain rights:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Free use</emphasis>: everyone may use and distribute
          your work, for free or for money, as long as the license notice is
          kept intact.</para>
        </listitem>

        <listitem>
          <para><emphasis>Right to modify</emphasis>: everyone may modify and
          redistribute your work, as long as any modified versions are
          PDL-licensed too, the original license notice is kept intact, and
          the modifications are documented.</para>
        </listitem>

        <listitem>
          <para><emphasis>Larger works</emphasis>: everyone may incorporate
          your documentation (modified or not) in a larger work. The larger
          work as a whole need not be released under the PDL, but the license
          requirements must be fulfilled for the PDL-licensed parts.</para>
        </listitem>
      </itemizedlist>

      <para>What's so nice about the PDL is that it provides the same rights
      and restrictions on the usage of our docs as the IPL and IDPL
      (Firebird's code licences) do for the Firebird source code. For the
      complete license text, see the links in the License Notice below; the
      DocBook source is in
      <filename>src/docs/firebirddocs/licenses.xml</filename></para>

      <section>
        <title>How to apply the PDL to your work</title>

        <para>In order to release your work under the PDL, add an <sgmltag
        class="element">appendix</sgmltag> titled <citetitle>License
        Notice</citetitle>, with this text:</para>

        <blockquote>
          <para>The contents of this Documentation are subject to the Public
          Documentation License Version 1.0 (the <quote>License</quote>); you
          may only use this Documentation if you comply with the terms of this
          License. Copies of the License are available at <ulink
          url="http://www.firebirdsql.org/pdfmanual/pdl.pdf">http://www.firebirdsql.org/pdfmanual/pdl.pdf</ulink>
          (PDF) and <ulink
          url="http://www.firebirdsql.org/manual/pdl.html">http://www.firebirdsql.org/manual/pdl.html</ulink>
          (HTML).</para>

          <para>The Original Documentation is <citetitle>_TITLE OF THE
          WORK_</citetitle>.</para>

          <para>The Initial Writer of the Original Documentation is _INITIAL
          AUTHOR'S NAME_.</para>

          <para>Copyright (C) _YEAR(S)_. All Rights Reserved. Initial Writer
          contact(s): _EMAIL OR OTHER CONTACT ADDRESS(ES)_.</para>
        </blockquote>

        <para>Everything that looks _LIKE THIS_ must of course be replaced. If
        you are not the original author, you should leave his or her notice
        intact and append the following:</para>

        <blockquote>
          <para>Contributor(s): _NAME(S) + SHORT DESCRIPTION (COUPLE OF WORDS)
          OF CONTRIBUTION_.</para>

          <para>Portions created by _CONTRIBUTOR'S NAME_ are Copyright (C)
          _YEAR(S)_. All Rights Reserved. Contributor contact(s): _EMAIL OR
          OTHER CONTACT ADDRESS(ES)_.</para>
        </blockquote>

        <para>There may be several Contributor's sections in the License
        Notice.</para>
      </section>

      <section>
        <title>Including a Document History</title>

        <para>If your contribution consists of more than a simple change or
        addition in one spot, also include an <sgmltag
        class="element">appendix</sgmltag> called <citetitle>Document
        History</citetitle> before or after the License Notice. If such an
        appendix already exists, always enter a description of your
        modification(s) in it. Please note that even if there's a Document
        History, you must still add a contributor's section to the License
        Notice – but then you can fill in <quote>see Document History</quote>
        in place of the short description.</para>

        <para>If you're the original author, it's also perfectly OK to include
        a Document History in the first version of a document, to serve as a
        starting point for future revisions. See the first <sgmltag
        class="element">revision</sgmltag> element in the example
        below.</para>

        <para>Centerpiece of the Document History is the <sgmltag
        class="element">revhistory</sgmltag> element with its children:</para>

        <programlisting>&lt;revhistory&gt;
  &lt;revision&gt;
    &lt;revnumber&gt;1.0&lt;/revnumber&gt;
    &lt;date&gt;12 Sep 2005&lt;/date&gt;
    &lt;authorinitials&gt;PV&lt;/authorinitials&gt;
    &lt;revdescription&gt;
      &lt;para&gt;First version&lt;/para&gt;
    &lt;/revdescription&gt;
  &lt;/revision&gt;
  &lt;revision&gt;
    &lt;revnumber&gt;1.1&lt;/revnumber&gt;
    &lt;date&gt;5 Dec 2005&lt;/date&gt;
    &lt;authorinitials&gt;PV&lt;/authorinitials&gt;
    &lt;revdescription&gt;
      &lt;para&gt;Added information on COALESCE&lt;/para&gt;
      &lt;para&gt;Corrected some spelling errors&lt;/para&gt;
    &lt;/revdescription&gt;
  &lt;/revision&gt;
&lt;/revhistory&gt;</programlisting>

        <para>Please abbreviate the month name in the <sgmltag
        class="element">date</sgmltag> element, as the date column in the PDF
        output is rather narrow.</para>

        <para>Below is a Document History example (output view, not source!)
        that uses a <sgmltag class="element">revhistory</sgmltag> element.
        Notice the referral to the CVS tree: we are legally obliged to
        identify and date all changes. But since CVS already does that, we can
        simply alert the user to it and give a less extensive but
        nicer-to-read history in the document itself.</para>

        <blockquote>
          <para>The exact file history is recorded in the <filename
          class="directory">manual</filename> module in our CVS tree; see
          <ulink
          url="http://sourceforge.net/cvs/?group_id=9028">http://sourceforge.net/cvs/?group_id=9028</ulink></para>

          <para><revhistory>
              <revision>
                <revnumber>1.0</revnumber>

                <date>2003</date>

                <authorinitials>IBP</authorinitials>

                <revdescription>
                  <para>First publication of the free Quick Start
                  Guide.</para>
                </revdescription>
              </revision>

              <revision>
                <revnumber>1.x</revnumber>

                <date>June 2004</date>

                <authorinitials>IBP</authorinitials>

                <revdescription>
                  <para>Donated to Firebird Project by IBPhoenix.</para>
                </revdescription>
              </revision>

              <revision>
                <revnumber>2.0</revnumber>

                <date>2004</date>

                <authorinitials>PV</authorinitials>

                <revdescription>
                  <para>Downgraded to Firebird 1.0</para>

                  <para>Added Classic vs. Superserver section.</para>

                  <para>Reorganised and corrected Disk Locations Table.</para>

                  <para>Added (new) screenshots.</para>

                  <para>Updated and completed information on Control Panel
                  applets.</para>

                  <para>Added extra examples to <quote>Expressions involving
                  <constant>NULL</constant></quote>.</para>

                  <para>Various other corrections and additions.</para>
                </revdescription>
              </revision>
            </revhistory></para>
        </blockquote>

        <para>If you open the DocBook source of this Guide
        (<filename>src/docs/firebirddocs/docwriting-howto.xml</filename>) in
        your favourite XML editor, you can easily copy-and-paste the Document
        History and License Notice into your own document. Don't copy the
        examples given above; copy the real appendices at the end of the
        document, and edit them to fit your work.</para>
      </section>

      <section>
        <title>A copyright notice at the start</title>

        <para>License Notice and Document History both appear at the end of
        the document. If you want to make your copyright obvious right from
        the start, you may also include a short copyright notice in the
        document's <sgmltag class="element">xxxinfo</sgmltag>, like
        this:</para>

        <programlisting>&lt;bookinfo&gt;
  &lt;title...
  &lt;author...
  &lt;edition...
  <emphasis role="bold">&lt;copyright&gt;
    &lt;year&gt;2003&lt;/year&gt;
    &lt;year&gt;2004&lt;/year&gt;
    &lt;holder&gt;Tootsie Griff&lt;/holder&gt;
  &lt;/copyright&gt;</emphasis>
&lt;/bookinfo&gt;</programlisting>

        <para>Such a notice does not replace the License Notice and/or
        Document History – it's an extra.</para>
      </section>

      <section>
        <title>Attaching the entire Pubic Documentation License</title>

        <para>Instead of providing the URL, you can also attach the entire PDL
        to your document. This may especially be useful if your work is a
        <sgmltag class="element">book</sgmltag> or long <sgmltag
        class="element">article</sgmltag> and you expect (or hope) that people
        will print it and distribute hardcopies. On a short document the PDL
        may be a little heavy, but it's your call.</para>

        <para>You can get the PDL's DocBook source from
        <filename>src/docs/firebirddocs/licenses.xml</filename>. Please note
        that only the section with the license text itself (including the
        generic license notice ) belongs to the PDL proper. The Introduction
        is not part of the license.</para>

        <para>If you include the PDL in your document, you can fill in the
        blanks in section 5.2 of the license. But you may also leave them as
        they are (provided your name is in the License Notice) or just fill in
        <quote>the Initial Writer</quote> or <quote>the Copyright
        holder</quote>.</para>
      </section>

      <section>
        <title>Translator's notices</title>

        <para>Translating a document is a form of modification. So, as a
        translator, you should:</para>

        <itemizedlist>
          <listitem>
            <para>List yourself as a Contributor in the License Notice, with a
            contribution description like e.g. "Translation into Russian". You
            may translate the License Notice into the target language if you
            wish, but you can also leave it in English or include it in both
            languages.</para>
          </listitem>

          <listitem>
            <para>Add a <sgmltag class="element">revision</sgmltag> element –
            in the target language – to the <sgmltag
            class="element">revhistory</sgmltag> in the Document History. For
            the <sgmltag class="element">revnumber</sgmltag>, you use the
            number of the revision that you've translated, followed by a
            hyphen and your language code, e.g.
            <quote><literal>2.0-es</literal></quote> or
            <quote><literal>1.1-fr</literal></quote>:</para>

            <programlisting>&lt;revhistory&gt;
  ...previous revisions...
  &lt;revision&gt;
    &lt;revnumber&gt;1.1&lt;/revnumber&gt;
    &lt;date&gt;5 Dec 2005&lt;/date&gt;
    &lt;authorinitials&gt;PV&lt;/authorinitials&gt;
    &lt;revdescription&gt;
      &lt;para&gt;Added information on COALESCE&lt;/para&gt;
      &lt;para&gt;Corrected some spelling errors&lt;/para&gt;
    &lt;/revdescription&gt;
  &lt;/revision&gt;
  <emphasis role="bold">&lt;revision&gt;
    &lt;revnumber&gt;1.1-fr&lt;/revnumber&gt;
    &lt;date&gt;13 Déc 2005&lt;/date&gt;
    &lt;authorinitials&gt;AM&lt;/authorinitials&gt;
    &lt;revdescription&gt;
      &lt;para&gt;Traduction en français&lt;/para&gt;
    &lt;/revdescription&gt;
  &lt;/revision&gt;</emphasis>
&lt;/revhistory&gt;</programlisting>
          </listitem>

          <listitem>
            <para>Add an <sgmltag class="element">othercredit</sgmltag>
            element to the <sgmltag
            class="element"><replaceable>xxx</replaceable>info</sgmltag> at
            the beginning of the document, like this:</para>

            <programlisting>&lt;articleinfo&gt;
  &lt;title&gt;Guía de NULL en Firebird&lt;/title&gt;
  &lt;author&gt;
    &lt;firstname&gt;Paul&lt;/firstname&gt;
    &lt;surname&gt;Vinkenoog&lt;/surname&gt;
  &lt;/author&gt;
 <emphasis role="bold"> &lt;othercredit&gt;
    &lt;firstname&gt;Víctor&lt;/firstname&gt;
    &lt;surname&gt;Zaragoza&lt;/surname&gt;
    &lt;contrib&gt;Traducción al castellano&lt;/contrib&gt;
  &lt;/othercredit&gt;
 </emphasis> &lt;edition&gt;22 de julio de 2005 - Versión de documento <emphasis
                role="bold">2.0-es</emphasis>&lt;/edition&gt;
&lt;/articleinfo&gt;</programlisting>

            <para>The <sgmltag class="element">contrib</sgmltag> element
            contains the same information as the contribution description in
            the License Notice, but it should always be in the target
            language.</para>

            <para>Also notice the document version in the <sgmltag
            class="element">edition</sgmltag> element – make sure it's the
            same as in the Document History.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Translating the PDL</title>

        <para>You don't have to translate the PDL itself. But if you
        do:</para>

        <itemizedlist>
          <listitem>
            <para>Add it as an independent document to your language's docset,
            in a book called <citetitle>Licenses</citetitle> (but translate
            <quote>Licenses</quote> into <emphasis>your</emphasis>
            language).</para>
          </listitem>

          <listitem>
            <para>In the translated Introduction to the PDL, explain that only
            the English version is legally binding, and include a link to the
            English version.</para>
          </listitem>

          <listitem>
            <para>In any License Notice where you link to the translated PDL,
            also provide a link to the original PDL and make clear that this
            is the one that's legally binding.</para>
          </listitem>
        </itemizedlist>

        <para>You can optionally also attach the translated PDL to the
        document itself, if you don't mind the extra load and bloat.</para>
      </section>
    </section>
  </section>

  <section id="docwritehowto-add-to-module">
    <title>Adding your document to the manual module</title>

    <titleabbrev>Adding your doc to the module</titleabbrev>

    <para>When your doc is finished, and you have verified that it builds
    correctly, you want it added to the manual module. If this is your first
    contribution to the documentation project you'll probably have agreed with
    the coordinators that you first submit it to them for review, or that you
    temporarily put up the HTML version on a website so that it can be
    discussed on the list. After that – and maybe after some corrections are
    made – the document can be committed to the module. If you have commit
    rights you can do this yourself; if not, one of the coordinators will do
    it for you.</para>

    <section id="docwritehowto-ask-commit-rights">
      <title>Asking for commit rights</title>

      <para>To receive commit rights you first need a SourceForge user
      account. If you haven't got one, register at <ulink
      url="http://sourceforge.net/account/register.php">http://sourceforge.net/account/register.php</ulink>.
      Then post a message to the firebird-docs mailing list stating your SF
      user name and asking to be added to the Firebird project. The manual
      subproject leader and several Firebird project admins follow the list;
      they will consider your request. As a general rule you should ask for
      commit rights <emphasis>after</emphasis> your first contribution,
      because the people who decide on your request need something to go
      by.</para>

      <para>The following phrases currently all mean the same, by the
      way:</para>

      <itemizedlist spacing="compact">
        <listitem>
          <para>Being a project member.</para>
        </listitem>

        <listitem>
          <para>Having commit rights.</para>
        </listitem>

        <listitem>
          <para>Having read-write access to the repository.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section id="docwritehowto-commit-dos-donts">
      <title>Dos and don'ts if you have received commit rights</title>

      <para>Once you are accepted as a project member, you have write access
      to the entire Firebird repository, not only to the manual module. There
      is no technical barrier to keep you from committing changes to other
      modules – the <literal>firebird2</literal> core module for instance, or
      even the <literal>CVSROOT</literal> module where important project
      information is stored.</para>

      <para>You may already have guessed that this is <emphasis>NOT</emphasis>
      the idea. Keep to the following rules:</para>

      <itemizedlist>
        <listitem>
          <para>Don't <emphasis>ever</emphasis> commit to other modules unless
          the people in charge of those modules explicitly ask you to do
          so.</para>
        </listitem>

        <listitem>
          <para>Only commit work to the manual module if it concerns a task
          assigned to you. Even then, it's good practice to announce your
          changes and additions on the mailing list first, so the other
          doccers have a chance to comment on it. After all, this is a
          collective effort.</para>
        </listitem>

        <listitem>
          <para>If you think a new document or directory should be added,
          don't just create and commit it, but propose it on the list.</para>
        </listitem>
      </itemizedlist>

      <para>In practice, things may be a bit more relaxed than stated here,
      especially where it concerns your own tasks. We don't want you to feel
      unfree and you certainly shouldn't get the feeling that you have to ask
      permission for every minor change you make. But we do want you to act
      responsibly, and we want to know from each other what we are doing.
      Besides, keeping in touch with each other is often inspirational.
      Together we can make this thing work!</para>
    </section>

    <section id="docwritehowto-commit-work">
      <title>Committing your work</title>

      <para>Even if you are a project member, you can only commit changes from
      a local copy if it was checked out with your SF login name. If you're
      still working with a copy you've checked out anonymously you must first
      make a fresh SSH checkout, and then re-apply your changes and commit
      them. Refer to the <ulink
      url="http://www.firebirdsql.org/manual/docbuildhowto-getting-the-module.html#docbuildhowto-ssh-checkout">Docbuilding
      Howto</ulink> if you don't remember how to perform an SSH
      checkout.</para>

      <para>If some time has passed since your last checkout or update,
      perform an update before committing. This will get your local copy in
      sync with the repository and reduce the possibility of conflicts.</para>

      <para>Once you are ready to commit, go to the manual directory. If you
      use command-line CVS, type:</para>

      <blockquote>
        <para><command>cvs update -d</command> [ only if you want to update
        first ]</para>

        <para><command>cvs add
        <replaceable>path/to/mydocument.xml</replaceable></command> [ only if
        it concerns a new document not yet in CVS ]</para>

        <para><command>cvs commit -m "<replaceable>Short informational message
        here</replaceable>"</command></para>
      </blockquote>

      <para>After the <literal>-m</literal>, and within quotes, you type a
      short message about this commit, e.g. <literal>"Added new functions to
      API Reference"</literal> or <literal>"Errors in isql tutorial
      fixed"</literal>.</para>

      <para>Give your SF password when prompted, and all the changes you have
      made – including those in subdirectories – will be committed. Your CVS
      client knows which server to contact; this and other information is
      stored in the <filename class="directory">CVS</filename> subdirectories
      that were created upon checkout.</para>

      <para>If you use another CVS client, refer to its documentation.</para>

      <important>
        <para>After adding a new document, you must still perform a separate
        commit. This goes for command-line CVS and most (if not all) other CVS
        clients.</para>
      </important>
    </section>
  </section>

  <section id="docwritehowto-publish">
    <title>Publishing your document on the Firebird website</title>

    <titleabbrev>Publishing your doc on the website</titleabbrev>

    <para>In order to publish your document, you first have to build the HTML
    and PDF output. This is documented in the <ulink
    url="http://www.firebirdsql.org/manual/docbuildhowto.html">Firebird
    Docbuilding Howto</ulink>. In the remainder of this section it is assumed
    that you have successfully built the HTML and PDF files.</para>

    <section id="docwritehowto-publish-pdfname">
      <title>Naming the PDF file</title>

      <para>The build tools automatically name each file after the ID of the
      topmost DocBook element it contains. We don't change the names of the
      multi-page HTML output – these pages are primarily intended for online
      browsing, and changing even a single file name would immediately break a
      number of links contained in the other pages. But PDFs are often
      downloaded by the reader, and having files called
      <filename>qsg2.pdf</filename> or <filename>ubusetup.pdf</filename> in a
      download directory or on ones desktop doesn't
      <emphasis>really</emphasis> help to identify them as Firebird manuals.
      So here are some guidelines for the file names:</para>

      <itemizedlist spacing="compact">
        <listitem>
          <para>Make sure the name contains the word
          <literal>Firebird</literal>, preferably at the beginning;</para>
        </listitem>

        <listitem>
          <para>Try to make it resemble the document title, but keep it
          short;</para>
        </listitem>

        <listitem>
          <para>Use hyphens (<quote>-</quote>) to separate words;</para>
        </listitem>

        <listitem>
          <para>If the title is long, omit parts like <quote>manual</quote>,
          <quote>guide</quote>, <quote>howto</quote> etc., unless leaving them
          out would cause confusion;</para>
        </listitem>

        <listitem>
          <para>Use the language of the document, but ASCII-only (no accents
          etc.)</para>
        </listitem>

        <listitem>
          <para>If (and <emphasis>only</emphasis> if) applying the above rules
          leads to a file name that already exists in another language, add
          the document language (or an abbreviation thereof) to the
          name.</para>
        </listitem>
      </itemizedlist>

      <para>To illustrate these guidelines, some of our existing file names
      are listed below:</para>

      <itemizedlist spacing="compact">
        <listitem>
          <para><filename>Firebird-2.0-QuickStart.pdf</filename></para>
        </listitem>

        <listitem>
          <para><filename>Firebird-Security.pdf</filename></para>
        </listitem>

        <listitem>
          <para><filename>MSSQL-to-Firebird.pdf</filename></para>
        </listitem>

        <listitem>
          <para><filename>Firebird-Generator-Guide.pdf</filename></para>
        </listitem>

        <listitem>
          <para><filename>Firebird-nbackup.pdf</filename></para>
        </listitem>

        <listitem>
          <para><filename>Firebird-2.0-Schnellanleitung.pdf</filename></para>
        </listitem>

        <listitem>
          <para><filename>Firebird-1.5-Arranque.pdf</filename></para>
        </listitem>

        <listitem>
          <para><filename>Firebird-et-Null.pdf</filename></para>
        </listitem>

        <listitem>
          <para><filename>Firebird-nbackup-fr.pdf</filename></para>
        </listitem>

        <listitem>
          <para><filename>Firebird-su-Ubuntu.pdf</filename></para>
        </listitem>

        <listitem>
          <para><filename>Firebird-nbackup-nl.pdf</filename></para>
        </listitem>

        <listitem>
          <para><filename>Guia-Escrita-Firebird.pdf</filename></para>
        </listitem>

        <listitem>
          <para><filename>Firebird-1.5-BystryjStart.pdf</filename></para>
        </listitem>

        <listitem>
          <para><filename>Firebird-Perehod-s-MSSQL.pdf</filename></para>
        </listitem>
      </itemizedlist>
    </section>

    <section id="docwritehowto-publish-monohtml">
      <title>Single-page HTML</title>

      <para>If and when we start publishing single-page HTML files on the
      website – produced with <command>build monohtml</command> – we should
      give them the same name as the corresponding PDF, but of course with an
      <filename class="extension">.html</filename> extension.</para>
    </section>

    <section id="docwritehowto-publish-pdfupload">
      <title>Uploading the PDF</title>

      <para>If you have write access to the Firebird web server, make an SFTP
      connection to <systemitem
      class="systemname">web.firebirdsql.org</systemitem> and upload your
      properly named file(s) to:</para>

      <itemizedlist spacing="compact">
        <listitem>
          <para><filename
          class="directory">/srv/www/htdocs/pdfmanual</filename> (English
          docs)</para>
        </listitem>

        <listitem>
          <para><filename
          class="directory">/srv/www/htdocs/pdfmanual/fr</filename> (French
          docs)</para>
        </listitem>

        <listitem>
          <para><filename
          class="directory">/srv/www/htdocs/pdfmanual/ja</filename> (Japanese
          docs)</para>
        </listitem>

        <listitem>
          <para>etc.</para>
        </listitem>
      </itemizedlist>

      <para>Release Notes however go to:</para>

      <itemizedlist spacing="compact">
        <listitem>
          <para><filename
          class="directory">/srv/www/htdocs/rlsnotes</filename></para>
        </listitem>

        <listitem>
          <para><filename
          class="directory">/srv/www/htdocs/rlsnotes/fr</filename></para>
        </listitem>

        <listitem>
          <para>etc.</para>
        </listitem>
      </itemizedlist>

      <para>If you don't have access to the server, ask someone else to upload
      the document(s) for you, or – if you are a project member – ask for a
      user name and password on the server.</para>
    </section>

    <section id="docwritehowto-publish-htmlupload">
      <title>Uploading the multi-page HTML files</title>

      <para>Make sure you upload all the necessary files: the HTML files that
      together form your manual(s), the stylesheet
      <filename>firebirddocs.css</filename> (if it has changed since the last
      upload), as well as the subdirectory <filename
      class="directory">images</filename> with any content that has changed or
      has been added. To keep all the links working, it may also be necessary
      to build and upload the parent <sgmltag class="element">book</sgmltag>
      of the document you have created or updated (or even the entire <sgmltag
      class="element">set</sgmltag>). Upload the whole shebang to:</para>

      <itemizedlist spacing="compact">
        <listitem>
          <para><filename class="directory">/srv/www/htdocs/manual</filename>
          (English docs)</para>
        </listitem>

        <listitem>
          <para><filename
          class="directory">/srv/www/htdocs/manual/fr</filename> (French
          docs)</para>
        </listitem>

        <listitem>
          <para>etc.</para>
        </listitem>
      </itemizedlist>

      <warning>
        <para>If the pages in question belong to another base set than the
        default <literal>firebirddocs</literal> (e.g.
        <literal>papers</literal> or <literal>rlsnotes</literal>) do not place
        them in the directories mentioned here. We haven't made any clear
        rules for this yet, but multi-page HTML builds from different sets
        should not be mixed. If this situation arises, bring it up on the
        firebird-docs list.</para>
      </warning>
    </section>

    <section id="docwritehowto-publish-updateindex">
      <title>Updating the Firebird Documentation Index</title>

      <para>The Firebird Documentation Index at <ulink
      url="http://www.firebirdsql.org/index.php?op=doc">http://www.firebirdsql.org/index.php?op=doc</ulink>
      is a PHP script that picks up most of its content from data files on the
      server. If you have updated existing documents that are already in the
      Index, you don't have to do anything here, unless you've changed the
      file name. But if you have created a new document or a new translation,
      you must add it to the Index. Here's how:</para>

      <variablelist>
        <varlistentry>
          <term>If you have created a completely new document</term>

          <listitem>
            <procedure>
              <step>
                <para>Look at the Documentation Index and decide which
                category is best suited for your document. (Categories are
                indicated with orange headers.)</para>
              </step>

              <step>
                <para>Connect to the server, cd to <filename
                class="directory">/srv/www/htdocs/doc</filename> and look at
                the files starting with <literal>Cat_</literal>. Open the one
                that corresponds to the chosen category.</para>
              </step>

              <step>
                <para>Read the instructions at the top of the file.</para>
              </step>

              <step>
                <para>Create a new section starting with the document title in
                English, followed by a specially formatted line for each
                available version. For a new document, such a section could
                look like this:</para>

                <programlisting>Firebird Uninstallation Howto
en:/manual/fb-uninstall.html
en:/pdfmanual/Firebird-Uninstall.pdf</programlisting>

                <para>Each version line starts with the language code,
                followed by a colon, followed by a URL. For documents on our
                own server, this URL is simply the <quote>absolute</quote>
                path from the server root. Sections are separated by empty
                lines. The order of the sections in the file determines the
                listing order of the documents within their category on the
                Documentation Index web page. The order of the version lines
                within a section is irrelevant.</para>
              </step>

              <step>
                <para>Save the file. If you've edited it on your own computer,
                upload it back to the server. Now refresh the Firebird
                Documentation Index page in your web browser and check if the
                document is listed where it should be, and if the links work
                well. Also verify that the links are in the right columns
                (HTML in the middle column, PDF and anything else in the
                rightmost column).</para>
              </step>

              <step>
                <para>The PHP script does a pretty good job of
                auto-determining the document type, but there are cases where
                it gets it wrong. If this happens, add the file type – between
                curly braces – immediately after the URL on the version
                line:</para>

                <programlisting>en:http://www.ibphoenix.com/main.nfs?a=ibphoenix&amp;page=ibp_60_sqlref<emphasis
                    role="bold">{html}</emphasis></programlisting>
              </step>

              <step>
                <para>Once everything works fine, commit the updated category
                file to CVS. If you've checked out the Firebird <systemitem
                class="resource">web</systemitem> module from SourceForge,
                you'll find the category files (and more) in the folder
                <filename class="directory">web/website/doc</filename>. Use
                your SF user name and password to check out, otherwise you
                won't be able to commit your changes. Working with CVS is
                described in the <ulink
                url="http://www.firebirdsql.org/manual/docbuildhowto.html">Firebird
                Docbuilding Howto</ulink>.</para>
              </step>
            </procedure>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>
        <varlistentry>
          <term>If you have translated an existing document into a new
          language, or added a new document type for it</term>

          <listitem>
            <procedure>
              <step>
                <para>Consult the Documentation Index to see which category
                the document belongs to. (Categories are indicated with orange
                headers.)</para>
              </step>

              <step>
                <para>Connect to the server, cd to <filename
                class="directory">/srv/www/htdocs/doc</filename> and look at
                the files starting with <literal>Cat_</literal>. Open the one
                that corresponds to the category.</para>
              </step>

              <step>
                <para>Read the instructions at the top of the file.</para>
              </step>

              <step>
                <para>Find the section for the document in question and add
                the version line(s) for your additions, e.g.:</para>

                <programlisting>Firebird Uninstallation Howto
en:/manual/fb-uninstall.html
en:/pdfmanual/Firebird-Uninstall.pdf
<emphasis role="bold">fr:/manual/fr/fb-uninstall-fr.html
fr:/pdfmanual/fr/Deinstaller-Firebird.pdf</emphasis></programlisting>

                <para>The order of the version lines within a section is
                irrelevant, but the title must stay on top.</para>
              </step>

              <step>
                <para>Steps 5, 6, and 7 are the same as for new
                documents.</para>
              </step>
            </procedure>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
  </section>

  <appendix id="docwritehowto-dochist">
    <title>Document History</title>

    <para>The exact file history is recorded in the <filename
    class="directory">manual</filename> module in our CVS tree; see <ulink
    url="http://sourceforge.net/cvs/?group_id=9028">http://sourceforge.net/cvs/?group_id=9028</ulink></para>

    <para><revhistory>
        <revision>
          <revnumber>0.1</revnumber>

          <date>17 Jan 2004</date>

          <authorinitials>PV</authorinitials>

          <revdescription>
            <para>First incomplete draft published under the title
            <citetitle>Writing Documentation for Firebird</citetitle> (aka
            <citetitle>Firebird Docwriting Howto</citetitle>).</para>
          </revdescription>
        </revision>

        <revision>
          <revnumber>0.2</revnumber>

          <date>27 Jan 2004</date>

          <authorinitials>PV</authorinitials>

          <revdescription>
            <para>First complete version. (Entered into CVS 31 Jan
            2004)</para>
          </revdescription>
        </revision>

        <revision>
          <revnumber>1.0</revnumber>

          <date>8 Mar 2004</date>

          <authorinitials>PV</authorinitials>

          <revdescription>
            <para>First official release on Firebird website.</para>
          </revdescription>
        </revision>

        <revision>
          <revnumber>1.1</revnumber>

          <date>26 Feb 2005</date>

          <authorinitials>PV</authorinitials>

          <revdescription>
            <para><emphasis>The following changes have accumulated between
            March 2004 and Feb. 2005:</emphasis></para>

            <para>Changed title to <citetitle>Firebird Docwriting
            Guide</citetitle>.</para>

            <para>Added section on PostgreSQL docs.</para>

            <para>Added note on non-DocBook contributions.</para>

            <para>Explained term well-formed XML.</para>

            <para>Made DocBook benefits list more concise.</para>

            <para>Changed recommendation on section vs. sectN elements.</para>

            <para>Dropped <sgmltag class="element">xref</sgmltag> and some
            other rarely-used stuff from element reference; added <sgmltag
            class="element">procedure</sgmltag>.</para>

            <para>Updated info on non-monospaced literallayout.</para>

            <para>Added section on PDL and how to include a License Notice and
            Document History.</para>

            <para>Numerous minor improvements.</para>

            <para>Added document history and revision number.</para>

            <para>Licensed this work under the Public Documentation
            License.</para>
          </revdescription>
        </revision>

        <revision>
          <revnumber>1.1.1</revnumber>

          <date>8 April 2005</date>

          <authorinitials>PV</authorinitials>

          <revdescription>
            <para>Added paragraph on <sgmltag
            class="element">titleabbrev</sgmltag> elements.</para>
          </revdescription>
        </revision>

        <revision>
          <revnumber>1.2</revnumber>

          <date>10 Feb 2006</date>

          <authorinitials>PV</authorinitials>

          <revdescription>
            <para>Changed all &lt;sectN&gt; elements in the source structure
            to &lt;section&gt;.</para>

            <para>Changed docbuildhowto <sgmltag
            class="element">link</sgmltag>s to <sgmltag
            class="element">ulink</sgmltag>s, as the articles will be in
            separate PDFs from now on.</para>

            <para><citetitle>DocBook XML Characteristics</citetitle>: removed
            <quote>plaintext</quote> remark. Added note about XSLT.</para>

            <para><citetitle>DocBook XML authoring tools</citetitle>: divided
            into two subsections; warned against ConText UTF-8 issue; added
            info on SciTE; added warning about saving as 8-bit; altered first
            para on dedicated XML tools; added Oxygen; removed Altova
            Authentic; updated/altered Altova XMLSpy information.</para>

            <para><citetitle>Writing your DocBook doc</citetitle>: renamed to
            <citetitle>Setting up your DocBook doc</citetitle>; changed 2nd
            para; moved 3rd para (<quote>Please read the
            subsection...</quote>) to <citetitle>Elements we use
            frequently</citetitle>; changed <quote>subsection on hierarchical
            elements</quote> link to normal text in the relocated para.</para>

            <para><citetitle>Creating the Document</citetitle>: changed
            set/book introduction; updated master doc example; added UTF-16
            note; added information on placement of files belonging to
            alternative base sets.</para>

            <para><citetitle>Typing text</citetitle>: minor changes to first
            and last para.</para>

            <para><citetitle>Elements we use frequently</citetitle>: promoted
            to top-level section, following <citetitle>Setting up your DocBook
            doc</citetitle>; changed tip before first subsection to normal
            para, altering its first sentence; split <citetitle>Hierarchical
            elements</citetitle> in subsections, and edited/added LOTS of
            stuff; added subsection on HTML tables; heavily edited the
            <quote>quote - literal</quote> section; added subsections on
            images and paragraph headers.</para>

            <para><citetitle>Non-DocBook aspects of the writing
            process</citetitle>: disappeared, all subsections have been
            promoted to top level; its first para is now in
            <citetitle>Language and style</citetitle>, and edited.</para>

            <para><citetitle>Copyrights</citetitle>: renamed
            <citetitle>Copyright issues</citetitle> and added an introductory
            para.</para>

            <para><citetitle>Respecting others' copyrights</citetitle>:
            renamed <citetitle>Using material written by others</citetitle>.
            The first para is split in two, and edited. The para about Borland
            docs is now in a subsection, with the first words removed.
            <citetitle>Using PostgreSQL docs</citetitle> is now also a
            subsection of <citetitle>Using material written by
            others</citetitle>, and renamed <citetitle>PostgreSQL
            docs</citetitle>.</para>

            <para><citetitle>Your copyright and the PDL</citetitle>: extensive
            editing, reorganisation of subsections, and additions.</para>

            <para><citetitle>Committing your work</citetitle>: included
            <command>cvs add</command> command line and
            <quote>Important</quote> note about committing after
            adding.</para>
          </revdescription>
        </revision>

        <revision>
          <revnumber>1.2.1</revnumber>

          <date>11 May 2006</date>

          <authorinitials>PV</authorinitials>

          <revdescription>
            <para>Corrected start tag in bridgehead example (removed
            /).</para>
          </revdescription>
        </revision>

        <revision>
          <revnumber>1.2.2</revnumber>

          <date>25 Jan 2007</date>

          <authorinitials>PV</authorinitials>

          <revdescription>
            <para><citetitle>Elements we use frequently</citetitle>: Mentioned
            <sgmltag class="element">title</sgmltag> option for admonitions.
            Moved instructions for translators regarding images into a
            <sgmltag class="element">note</sgmltag>.</para>
          </revdescription>
        </revision>

        <revision>
          <revnumber>1.3</revnumber>

          <date>5 May 2007</date>

          <authorinitials>PV</authorinitials>

          <revdescription>
            <para><citetitle>Topics discussed in this guide</citetitle>: Added
            new item to the last list.</para>

            <para><citetitle>Links</citetitle>: Removed note about offset hot
            zones (fixed in FOP 0.93).</para>

            <para><citetitle>Program listings, screens, literal layout, and
            examples</citetitle>: Removed note about non-monospaced <sgmltag
            class="element">literallayout</sgmltag>. Wrapped <sgmltag
            class="element">example</sgmltag> output in a blockquote.</para>

            <para><citetitle>HTML tables</citetitle>: Assigned id. Wrapped
            <firstterm>processing instructions</firstterm> in a <sgmltag
            class="element">firstterm</sgmltag>.</para>

            <para><citetitle>PDF rendering of large tables</citetitle>: New
            section.</para>

            <para><citetitle>Style</citetitle>: Slight rewording in 3rd list
            item.</para>

            <para><citetitle>Publishing your document on the Firebird
            website</citetitle>: New section.</para>

            <para><citetitle>License notice</citetitle>: (C) 2004–2006 -&gt;
            2004–2007.</para>
          </revdescription>
        </revision>
      </revhistory></para>
  </appendix>

  <appendix id="docwritehowto-license">
    <title>License notice</title>

    <para>The contents of this Documentation are subject to the Public
    Documentation License Version 1.0 (the <quote>License</quote>); you may
    only use this Documentation if you comply with the terms of this License.
    Copies of the License are available at <ulink
    url="http://www.firebirdsql.org/pdfmanual/pdl.pdf">http://www.firebirdsql.org/pdfmanual/pdl.pdf</ulink>
    (PDF) and <ulink
    url="http://www.firebirdsql.org/manual/pdl.html">http://www.firebirdsql.org/manual/pdl.html</ulink>
    (HTML).</para>

    <para>The Original Documentation is titled <citetitle>Firebird Docwriting
    Guide</citetitle>.</para>

    <para>The Initial Writer of the Original Documentation is: Paul
    Vinkenoog.</para>

    <para>Copyright (C) 2004–2007. All Rights Reserved. Initial Writer
    contact: paulvink at users dot sourceforge dot net.</para>
  </appendix>
</article>