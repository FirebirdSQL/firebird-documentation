<?xml version="1.0" encoding="UTF-8"?>
<!--
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
-->
<chapter id="fbutils-scripts">
  <title>Assorted Firebird Scripts On Linux/Unix Systems</title>

  <section id="fbutils-scripts-intro">
    <title>Introduction</title>

    <para>After a successful installation of Firebird 1.5, the <filename
    class="directory">/opt/firebird/bin</filename> directory will contain a
    number of useful shell scripts. This chapter gives details of what these
    scripts are for and how they are used.</para>

    <para>Coming up in this chapter, we have :</para>

    <itemizedlist spacing="compact">
      <listitem>
        <para>changeDBAPassword.sh</para>
      </listitem>

      <listitem>
        <para>createAliasDB.sh</para>
      </listitem>

      <listitem>
        <para>fb_config</para>
      </listitem>

      <listitem>
        <para>changeRunUser.sh</para>
      </listitem>

      <listitem>
        <para>restoreRootRunUser.sh</para>
      </listitem>

      <listitem>
        <para>changeGdsLibraryCompatibleLink.sh</para>
      </listitem>
    </itemizedlist>

    <note>
      <para>The above list is correct at the time of writing and applies to
      Firebird 1.5 Super Server installed on a Linux system. Other flavours of
      Unix may have different scripts. I am currently unable to discuss those
      potential changes as I do not have access to other Unix systems.</para>
    </note>
  </section>

  <section id="fbutils-scripts-dba-password">
    <title>Changing SYSDBA's Password</title>

    <para>The <filename>changeDBAPassword.sh</filename> script allows the
    password for the SYSDBA user to be changed and various startup scripts etc
    to have their ownership changed accordingly. The script is run in
    non-interactive mode as part of the installation process to create an
    initial randomly generated password which is stored in the
    <filename>/opt/firebird/SYSDBA.password</filename> file. The password is
    subsequently used in the startup script
    <filename>/etc/rc.d/init.d/firebird</filename>, which also has a symlink
    set up to point to <filename
    class="symlink">/etc/init.d/firebird</filename>. The security database
    <filename>/opt/firebird/security.fdb</filename> is also updated with the
    new password.</para>

    <caution>
      <para>The script must be run as the root user, and, when run,
      changeDBAPassword.sh will prompt you for the current SYSDBA password and
      then for a new password. Both of these will appear on the display so for
      enhanced security, don't allow anyone to look over your shoulder when
      you run the script.</para>

      <para>After the script has been run, the file
      <filename>/opt/firebird/SYSDBA.password</filename> will contain the
      password in plain text, so make sure that this file is not readable by
      anyone except root.</para>
    </caution>

    <para>The following is an example of running the script to change the
    SYSDBA password from 'masterkey' to 'biroguin' which being a made up word,
    should be less crackable or guessable.</para>

    <screen># cd /opt/firebird/bin
# ./changeDBAPassword.sh
Please enter current password for SYSDBA user : masterkey
Please enter new password for SYSDBA user : biroguin
GSEC&gt; GSEC&gt;

Running ed to modify /etc/init.d/firebird
#</screen>

    <caution>
      <para>Whenever you change the SYSDBA password using the
      <application>GSEC</application> utility, you should also change the
      startup script file as well. To ensure a complete update, always use
      this script when changing the SYSDBA user's password.</para>
    </caution>
  </section>

  <section id="fbutils-scripts-db-alias">
    <title>Creating Database Alias Names</title>

    <para>The <filename>createAliasDB.sh</filename> script allows the creation
    of a new database to be carried out, and an alias for that database to be
    created in the file
    <filename>/opt/firebird/aliases.conf</filename>.</para>

    <note>
      <para>The createAliasDB.sh script must be run as the root user.</para>
    </note>

    <para>If your system is not set up properly, the database creation step
    may fail but the alias will still be added to the aliases file. This could
    leave you subsequently unable to add the alias properly, as the script
    checks to ensure that you do not overwrite an existing alias. You will
    have to manually edit the alias file to remove the broken alias.</para>

    <para>To set up new databases, they must be owned by the firebird user,
    and also owned by the firebird group. The following shows a new directory
    being created by the root user to allow Firebird databases to be
    created.</para>

    <screen># cd /u01
# mkdir databases
# chown firebird:firebird databases
#</screen>

    <para>At this point the directory <filename>/u01/databases</filename> is
    available for use as a repository for one or more Firebird databases.
    Obviously, in the above example, the <filename
    class="directory">/u01</filename> directory already existed.</para>

    <section>
      <title>createAliasDB.sh Parameters</title>

      <para>To run the <filename>createAliasDP.sh</filename> script, use a
      commandline similar to the following :</para>

      <para><userinput># createAliasDB.sh &lt;new_alias&gt;
      &lt;database_name&gt;</userinput></para>

      <para>The script takes two parameters on the commandline, both of which
      are mandatory :</para>

      <itemizedlist>
        <listitem>
          <para><userinput>new_alias</userinput></para>

          <para>The first parameter is the new alias you wish to create. This
          alias must not already exist in the alias file, or an error will be
          displayed and no further action taken.</para>
        </listitem>

        <listitem>
          <para><userinput>database_filename</userinput></para>

          <para>The second parameter specifies the <emphasis>full
          path</emphasis> to the database file. You must not specify a
          relative path as this could lead to incorrect database filenames
          being used at connection time. The script will reject any attempt to
          pass a relative pathname instead of a full pathname.</para>

          <para>A brand new empty database will be created provided that the
          name passed to the script doesn't already exist. If the database
          already exists, only the alias will be created and added to the
          alias file.</para>

          <!--TODO : Chack that this is true !-->
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section id="fbutils-scripts-fb-config">
    <title>A Helping Hand With Makefiles</title>

    <para>The <filename>fb_config</filename> script is intended to be used
    from within a makefile to supply various settings and compiler options
    which are accurate and specific to the installation being used.</para>

    <note>
      <para>This script can be run by any user who has been given execute
      privileges to it. You do not need to be root to use this script.</para>
    </note>

    <section>
      <title>fb_config Options</title>

      <para>To run the <filename>fb_config</filename> script, use a
      commandline similar to the following :</para>

      <para><userinput>fb_config &lt;option&gt; [ &lt;option&gt;
      [...]]</userinput></para>

      <para>The script takes one or more options on the commandline :</para>

      <itemizedlist>
        <listitem>
          <para><userinput>--help</userinput></para>

          <para>This parameter displays the list of allowed options. It should
          not be supplied in addition to other options.</para>
        </listitem>

        <listitem>
          <para><userinput>--cflags</userinput></para>

          <para>This option returns the list of directories where Firebird
          include files are stored. This is required by the C and C++
          compilers to allow compiler #include directives to be correctly
          resolved. On my own system, this option returns
          '<computeroutput>-I/opt/firebird/include</computeroutput>'.</para>
        </listitem>

        <listitem>
          <para><userinput>--libs</userinput></para>

          <para>This option returns the list of directories where Firebird
          libraries are located and a list of those libraries that are
          required to be linked by the linker to create a client server
          Firebird application. This option returns
          '<computeroutput>-L/opt/firebird/lib -lfbclient</computeroutput>' on my system.</para>
        </listitem>

        <listitem>
          <para><userinput>--embedlibs</userinput></para>

          <para>This option returns the list of directories where Firebird
          libraries are located and a list of those libraries that are
          required to be linked by the linker to create an embedded Firebird
          application. This option returns
          '<computeroutput>-L/opt/firebird/lib
          -lfbembed</computeroutput>' on my system.</para>
        </listitem>

        <listitem>
          <para><userinput>--bindir</userinput></para>

          <para>On my system, this option returns
          '<computeroutput>/opt/firebird/bin</computeroutput>' as the full
          path to the Firebird <filename>/bin</filename> directory.</para>
        </listitem>

        <listitem>
          <para><userinput>--version</userinput></para>

          <para>This option returns a three part version string made up of the
          concatenation of the Firebird build version, a dash, the package
          version, a dot and the system architecture. My own laptop Linux
          system returns
          '<computeroutput>1.5.0.4290-0.i686</computeroutput>'.</para>
        </listitem>
      </itemizedlist>

      <para>The following is a brief excerpt from a makefile which shows how
      to define two macros, FBFLAGS and FBLIBS, and initialise them to the
      correct values using fb_config. Note the use of the back tick character
      (`) rather than a single quote character (').</para>

      <programlisting>...
FBFLAGS = `fb_config --cflags`
FBLIBS = `fb_config --libs`
...</programlisting>
    </section>
  </section>

  <section id="fbutils-scripts-run-user">
    <title>Changing The Firebird Server Run User</title>

    <para>There are two versions of the <filename>changeRunUser.sh</filename>
    script, the one prefixed 'SS' is for Super Server installations and the
    one prefixed 'CS' is for Classic Server installations. The following
    describes the Super Server version only.</para>

    <note>
      <para>This script should be run as root.</para>
    </note>

    <para>The <filename>SSchangeRunUser.sh</filename> script allows the user
    and group, under which the Super Server runs, to be changed. By default,
    this is now the firebird user and group, however, in previous versions the
    Firebird server ran as the root user which is undesirable from a system
    security point of view and allowed databases to be created all over the
    file system. With the new firebird user, restrictions can be placed on
    where databases can be created.</para>

    <para>The script changes the owing user and group of a number of files in
    the Firebird installation directory, the logfile and also the startup
    script <filename>/etc/rc.d.init.d/firebird</filename> which is used to
    start and stop the Firebird server.</para>

    <section>
      <title>SSchangeRunUser.sh Parameters</title>

      <para>To run the script, use a commandline similar to the following
      :</para>

      <para><userinput>SSchangeRunUser.sh &lt;username&gt;
      &lt;groupname&gt;</userinput></para>

      <para>The script takes two parameters on the commandline, both of which
      are optional as you will be prompted if both are omitted. If you only
      supply one parameter, it is assumed to be the username and you will be
      prompted for the groupname.</para>

      <itemizedlist>
        <listitem>
          <para><userinput>username</userinput></para>

          <para>This parameter sets the username under which the Super Server
          is to run. The supplied value is validated against entries in
          <filename>/etc/passwd</filename>.</para>
        </listitem>

        <listitem>
          <para><userinput>groupname</userinput></para>

          <para>This parameter sets the groupname under which the Super Server
          is to run. The supplied value is validated against entries in
          <filename>/etc/group</filename>.</para>
        </listitem>
      </itemizedlist>

      <para>The following example shows the use of
      <filename>SSchangeRunUser.sh</filename> to change the owning user and
      group to firebird. The firebird user and group is actually the default
      when Firebird is installed so there is no need for you to run the script
      unless you have changed these details already.</para>

      <screen># cd /opt/firebird/bin
# ./SSchangeRunUser.sh firebird firebird
Updating /opt/firebird
Updating startup script
Completed
#</screen>
    </section>
  </section>

  <section id="fbutils-scripts-root-user">
    <title>Restoring root As The Firebird Server Run User</title>

    <para>There are two versions of the
    <filename>restoreRootRunUser.sh</filename> script. The one prefixed 'SS'
    is for Super Server installations and the one prefixed 'CS' is for Classic
    Server installations. The following describes the Super Server version
    only.</para>

    <note>
      <para>This script must be run as root.</para>
    </note>

    <para>This script simply restores the old style installation format
    whereby the Firebird Super Server runs as the root user and group. This
    script is simply a wrapper around the
    <filename>SSchangeRunUser.sh</filename> script, passing root as the
    username and group name.</para>
  </section>

  <section id="fbutils-scripts-symlink">
    <title>Running Embedded Or Client Server Applications</title>

    <para>This script, <filename>changeGdsLibraryCompatibleLink.sh</filename>,
    is available with Classic Server installations only, and is used to change
    the symlink <filename class="symlink">libgds.so</filename> to point to the
    appropriate library for the installation. There are two possible libraries
    that the symlink can point to :</para>

    <itemizedlist>
      <listitem>
        <para><filename
        class="libraryfile">/opt/firebird/lib/libfbclient.so</filename> for
        client server applications</para>
      </listitem>

      <listitem>
        <para><filename
        class="libraryfile">/opt/firebird/lib/libfbembed.so</filename> for
        embedded server applications.</para>
      </listitem>
    </itemizedlist>

    <para>After installation, the <filename
    class="symlink">libgds.so</filename> symlink points to the client server
    library by default so if you are running an embedded application, you need
    to run this script to point <filename class="symlink">libgds.so</filename>
    at the embedded library instead.</para>

    <note>
      <para>This script must be run as root.</para>
    </note>

    <para>The following example shows how this script is used to change from
    embedded servfer to client server use :</para>

    <screen># cd /opt/firebird/bin
# ./changeGdsCompatibleLibraryLink.sh
For classic server there are two optional backward compatible client
libraries. These are libfbclient.so and libfbembed.so.

libfbclient.so) enables your client to be multithreaded but must
                connect to a database via a server.
libfbembed.so)  allows the client to directly open the database file,
                but does not support multithreaded access

Your current setting is:
/usr/lib/libgds.so -&gt; /opt/firebird/lib/libfbembed.so

Which option would you like to choose (client|embed|remove) 
                                                       [client] client
#</screen>

    <para>The default option is <userinput>client</userinput> which will
    recreate the symlink to the client server library,
    <userinput>embed</userinput> will recreate the symlink to the embedded
    server, while <userinput>remove</userinput> will remove the symlink
    altogether.</para>

    <para>There are no messages displayed to inform you of the success of the
    script, however, if you run it again, you will notice the current setting
    should be different to that displayed when you previously ran the
    script.</para>
  </section>
</chapter>