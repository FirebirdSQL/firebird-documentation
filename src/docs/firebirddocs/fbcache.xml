<?xml version="1.0" encoding="UTF-8"?>
<!--
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
-->
<article id="fbcache">
    <title>Firebird Database Cache Buffer</title>

    <titleabbrev>Firebird Database Cache Buffer - How It Works</titleabbrev>

    <articleinfo>
        <date>05 January 2010</date>

        <author>
            <firstname>Norman</firstname>

            <surname>Dunbar</surname>
        </author>

        <edition>21 June 2010 â€“ Document version 1.1</edition>
    </articleinfo>

    <section id="fbcache-intro">
        <title>Introduction</title>

        <para>Firebird uses a page cache to hold pages in memory. It is much quicker to
        retrieve pages from RAM than to go out onto the disc system and read them
        physically each time they are required. The following description of how Firebird
        uses its cache is taken from a posting by Ann Harrison on the Firebird Support
        mailing list.</para>

        <para>The posting was in response to a query asking <emphasis>if there is a way to
        reduce the memory cache without giving up too much performance?</emphasis> This
        was itself in respect of a system that was taking a long time to wake up from
        hibernation and the cause was thought to be the time required to load back all the
        cache pages from disc before the first query (after hibernation) could be
        processed. The cause was confirmed and the DBA responsible for the database asked,
        on the list, how he could reduce the buffer cache as much as possible but still
        have a responsive system.</para>

        <para>Ann has given her permission for this posting to be documented formally as
        part of the Firebird documentation project.</para>
    </section>

    <section id="fbcache-cache">
        <title>The Firebird Cache</title>

        <para>Everything in the database is organised as fixed sized pages of known
        structure - there are nine different types of pages. The page cache is the
        intermediate between the "working" parts of the database and the disk.</para>

        <para>When initially started, Firebird reads the database header page, then the
        first pointer page of a system table called RDB$PAGES from which it then knows
        where to find the pointer pages, amongst other things, for the system and user
        tables within the database.</para>

        <para>As soon as the <emphasis>application</emphasis> accesses the database and
        begins a transaction, Firebird reads the pointer pages telling it where to find
        the data pages for the tables involved in the application's transactions. All the
        pages go into the cache and stay there until the cache is completely full. When
        there's no place to put the next page, Firebird releases the <emphasis>least
        recently used</emphasis> page - <emphasis>not</emphasis> the first one read, but
        the one that has been referenced least recently and has not been modified.</para>

        <para>When a transaction commits - and at a few other times - Firebird writes the
        pages changed by that transaction to disk, but does not release them from the
        cache - this helps avoid an extra read if the page is required again soon.</para>

        <para>Over time and with luck, you end up with the most frequently changed and
        referenced pages resident in the cache - those would be transaction inventory
        pages, pointer pages for active tables, the header page, the top levels of
        indexes, etc. Data and lower level index pages swap in and out as required - but
        the cache will always be full.</para>

        <para>You can use the MON$ tables (in Firebird 2.1 onwards, especially
        <database>MON$IO_STATS</database>) to figure out how well your cache is being
        used. They will report on the number of Fetches vs. Reads which is the number of
        times pages were accessed versus the number of times they had to be read from
        disk. When the number of reads goes up dramatically, you've reduced the cache too
        much.</para>

        <para>The MON$ tables will also give you the number of Marks vs. Writes, which
        tells you the number of times pages are changed versus the number of times the
        pages were written to disk. When you see the disk writes go up, you've probably
        reduced the cache too much.</para>
    </section>

    <section id="fbcache-mon-io-stats">
        <title>Using MON$IO_STATS</title>

        <para>As mentioned above, the table <database>MON$IO_STATS</database> can be used
        to help you determine how well your buffer cache is performing. The table has the
        following structure:</para>

        <formalpara>
            <title>MONS$STAT_ID</title>

            <para>The statistic id.</para>
        </formalpara>

        <formalpara>
            <title>MONS$STAT_GROUP</title>

            <para>The statistic group. Statistics are gathered for the following
            groups:</para>
        </formalpara>

        <itemizedlist spacing="compact">
            <listitem>
                <para>0: The database as a whole.</para>
            </listitem>

            <listitem>
                <para>1: Attachments.</para>
            </listitem>

            <listitem>
                <para>2: Transactions.</para>
            </listitem>

            <listitem>
                <para>3: Statements.</para>
            </listitem>

            <listitem>
                <para>4: Calls.</para>
            </listitem>
        </itemizedlist>

        <formalpara>
            <title>MON$PAGE_READS</title>

            <para>The number of pages read. These are the pages read from the disc and not
            from the cache.</para>
        </formalpara>

        <formalpara>
            <title>MON$PAGE_WRITES</title>

            <para>The number of pages written back to disc.</para>
        </formalpara>

        <formalpara>
            <title>MON$PAGE_FETCHES</title>

            <para>The number of pages read from the cache as opposed to from disc.</para>
        </formalpara>

        <formalpara>
            <title>MON$PAGE_MARKS</title>

            <para>The number of pages changed while in the cache. It is possible that not
            all of these have been written back to disc.</para>
        </formalpara>

        <para>To inspect the current statistics for the database as a whole, we would use
        the following query in <application>isql</application>:</para>

        <screen>tux&gt; isql employee
Database:  employee

SQL&gt; SELECT MON$PAGE_READS, MON$PAGE_WRITES, MON$PAGE_FETCHES, MON$PAGE_MARKS
CON&gt; FROM MON$IO_STATS
CON&gt; WHERE MON$STAT_GROUP = 0;

     MON$PAGE_READS     MON$PAGE_WRITES    MON$PAGE_FETCHES      MON$PAGE_MARKS
=================== =================== =================== ===================
                134                 526               13851                 529
</screen>

        <para>The results of the above show that:</para>

        <itemizedlist spacing="compact">
            <listitem>
                <para>134 pages have had to be physically read from the disc into the
                cache so far.</para>
            </listitem>

            <listitem>
                <para>13,851 pages, on the other hand, have been read directly from the
                cache.</para>
            </listitem>

            <listitem>
                <para>529 pages, in the cache, have been changed in some way.</para>
            </listitem>

            <listitem>
                <para>526 changed pages have been copied from the cache to disc.</para>
            </listitem>
        </itemizedlist>

        <para>We can assume, therefore, that although a small number of pages have been
        read into the cache, there is nothing we can do to avoid that. When the database
        is started up the cache is empty, when applications connect and access the
        database, various pages must be read and the cache must be filled, so physical
        reads will be a necessity. In this example, it appears that once pages are in the
        cache they are being accessed quite frequently given that there have been
        approximately 103 cache reads for every physical read.</para>

        <para>Of the 529 updated pages - and these are system as well as user pages - 526
        have been written back to the physical discs but three still remain in cache, as
        yet, unwritten.</para>

        <para>The results shown above show the performance of the cache over the life of
        the database so far. We can narrow this down to our current attachments by
        modifying the query to select those rows where the
        <database>MON$STAT_GROUP</database> is 1.</para>

        <screen>SQL&gt; SELECT MON$PAGE_READS, MON$PAGE_WRITES, MON$PAGE_FETCHES, MON$PAGE_MARKS
CON&gt; FROM MON$IO_STATS
CON&gt; WHERE MON$STAT_GROUP = 1;

     MON$PAGE_READS     MON$PAGE_WRITES    MON$PAGE_FETCHES      MON$PAGE_MARKS
=================== =================== =================== ===================
                  0                   4                  87                   5
                134                 520               13619                 522
</screen>

        <para>Interpretation of the above statistics is exactly the same as for the
        database as a whole.</para>

        <para>We can further diagnose the statistics by individual transactions, as
        follows:</para>

        <screen>SQL&gt; SELECT MON$PAGE_READS, MON$PAGE_WRITES, MON$PAGE_FETCHES, MON$PAGE_MARKS
CON&gt; FROM MON$IO_STATS
CON&gt; WHERE MON$STAT_GROUP = 2;

     MON$PAGE_READS     MON$PAGE_WRITES    MON$PAGE_FETCHES      MON$PAGE_MARKS
=================== =================== =================== ===================
                  0                   0                  60                   0
                  0                   0                   1                   0
                  0                   0                   1                   0
                  0                   0                  69                   0
                  0                   0                  93                   0
                  0                   0                  85                   0
                  0                   0                   1                   0
                  0                   0                   1                   0
</screen>

        <para>And, by individual statements:</para>

        <screen>SQL&gt; SELECT MON$PAGE_READS, MON$PAGE_WRITES, MON$PAGE_FETCHES, MON$PAGE_MARKS
CON&gt; FROM MON$IO_STATS
CON&gt; WHERE MON$STAT_GROUP = 3;

     MON$PAGE_READS     MON$PAGE_WRITES    MON$PAGE_FETCHES      MON$PAGE_MARKS
=================== =================== =================== ===================
                  0                   0                   1                   0
                  0                   0                  38                   0
                  0                   0                   4                   0
                  0                   0                  18                   0
                  0                   0                 158                   0
                  0                   0                   1                   0
                  0                   0                   1                   0
                  0                   0                   1                   0
                  0                   0                   1                   0
                  0                   0                   1                   0
                  0                   0                   0                   0
                  0                   0                   1                   0
                  1                   0                  12                   0
                  0                   0                   2                   0
                  3                   0                1436                   0
                  0                   0                 101                   0
                  7                   0                 613                   0
</screen>

        <para>Finally, it is possible - and probably most useful - to determine the
        statistics for your own session. You can find your attachment id from
        <database>CURRENT_CONNECTION</database> and use that in a query that joins with
        <database>MON$IO_STATS</database> using the <database>MON$STAT_ID</database>
        column.</para>

        <screen>SQL&gt; SET LIST;

SQL&gt; SELECT T.MON$ATTACHMENT_ID, T.MON$TRANSACTION_ID,
CON&gt; IO.MON$PAGE_READS, IO.MON$PAGE_WRITES, 
CON&gt; IO.MON$PAGE_FETCHES, IO.MON$PAGE_MARKS
CON&gt; FROM MON$TRANSACTIONS AS T
CON&gt; JOIN MON$IO_STATS as IO
CON&gt; ON (IO.MON$STAT_ID = T.MON$STAT_ID)
CON&gt; WHERE T.MON$ATTACHMENT_ID = CURRENT_CONNECTION;

MON$ATTACHMENT_ID               12
MON$TRANSACTION_ID              218
MON$PAGE_READS                  5
MON$PAGE_WRITES                 0
MON$PAGE_FETCHES                66
MON$PAGE_MARKS                  0

MON$ATTACHMENT_ID               12
MON$TRANSACTION_ID              217
MON$PAGE_READS                  0
MON$PAGE_WRITES                 0
MON$PAGE_FETCHES                1
MON$PAGE_MARKS                  0
</screen>
    </section>

    <appendix id="fbcache-dochist">
        <title>Document history</title>

        <para>The exact file history is recorded in the <filename
        class="directory">manual</filename> module in our CVS tree; see <ulink
        url="http://sourceforge.net/cvs/?group_id=9028">http://sourceforge.net/cvs/?group_id=9028
        </ulink>. The full URL of the CVS log for this file can be found at <ulink
        url="http://firebird.cvs.sourceforge.net/viewvc/firebird/manual/src/docs/firebirddocs/ fbcache.xml?view=log"
        userlevel="">http://firebird.cvs.sourceforge.net/viewvc/firebird/
        manual/src/docs/firebirddocs/fbcache.xml?view=log</ulink></para>

        <para><revhistory>
                <revision>
                    <revnumber>1.0</revnumber>

                    <date>05 January 2010</date>

                    <authorinitials>ND</authorinitials>

                    <revdescription>
                        <para>Created a new manual based on a posting to Firebird-support
                        by Ann Harrison.</para>
                    </revdescription>
                </revision>

                <revision>
                    <revnumber>1.1</revnumber>

                    <date>21 June 2010</date>

                    <authorinitials>ND</authorinitials>

                    <revdescription>
                        <para>Amended to include the fact that it <emphasis>is</emphasis>
                        possible to extract the statistics for the current connection.
                        Contrary to what was said before.</para>
                    </revdescription>
                </revision>
            </revhistory></para>
    </appendix>

    <appendix id="fbcache-license">
        <title>License notice</title>

        <para>The contents of this Documentation are subject to the Public Documentation
        License Version 1.0 (the <quote>License</quote>); you may only use this
        Documentation if you comply with the terms of this License. Copies of the License
        are available at 
        <ulink url="http://www.firebirdsql.org/pdfmanual/pdl.pdf">
         http://www.firebirdsql.org/pdfmanual/pdl.pdf</ulink> (PDF) and 
        <ulink url="http://www.firebirdsql.org/manual/pdl.html">
         http://www.firebirdsql.org/manual/pdl.html</ulink> (HTML).</para>

        <para>The Original Documentation is titled <citetitle>Firebird Database Cache
        Buffer</citetitle>.</para>

        <para>The Initial Writer of the Original Documentation is: Norman Dunbar using
        data supplied by Ann Harrison.</para>

        <para>Copyright (C) 2010. All Rights Reserved. Initial Writer contact:
        NormanDunbar at users dot sourceforge dot net.</para>
    </appendix>
</article>
