<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../../tools/docbook-dtd/docbookx.dtd">
<article id="wireprotocol">
  <articleinfo>
    <title><application>Firebird</application> wire protocol</title>

    <author>
      <firstname>Carlos</firstname>

      <surname>Guzman Alvarez</surname>
    </author>

    <author>
      <firstname>Mark</firstname>

      <surname>Rotteveel</surname>
    </author>

    <edition>September 2014, document version 0.13</edition>
  </articleinfo>

  <sect1 id="wireprotocol-introduction">
    <title>Introduction</title>

    <para>This document describes the Firebird wire protocol. Most of the information was obtained by studying the
    <application>Firebird</application> source code and implementing the wire protocol in the <application>Firebird .NET
    provider</application> and <application>Jaybird</application> (Firebird JDBC driver).</para>

    <para>The protocol is described in the form of the message sent by the client and received from the server. The described protocol is
    <application>Firebird</application>/<application>Interbase</application> protocol version 10. Earlier (Interbase) versions of the
    protocol are not in scope for this document. Changes in later protocol versions are described in notes below the description of the
    relevant version 10 message <remark>(currently only version 11 is partially described)</remark>.</para>

    <para>This document is not complete. It is advisable to consult the <citetitle pubwork="book">Interbase 6.0 API Guide</citetitle> for
    additional information on subjects like parsing the status vector, information request items, and the meaning of operations.</para>

    <para>Unless otherwise indicated a client request must be flushed to the server for processing. For some operations the flush can be
    deferred so it is sent together with a different operation. Versions 11 and higher of the wire protocol explicitly support (or even
    require) deferring of operations, including deferring the read of the response.</para>
  </sect1>

  <sect1 id="wireprotocol-responses">
    <title>Responses</title>

    <para>The wire protocol has a limited set of responses. Some operations have a specific response, which is described together with the
    operation. Most operation however use one (or more) of the responses described in this section. The meaning and content depend on the
    operation that initiated the response.</para>

    <sect2 id="wireprotocol-responses-generic">
      <title id="wireprotocol-responses-generic-title">Generic response</title>

      <para><variablelist>
          <varlistentry>
            <term><type>Int32</type></term>

            <listitem>
              <para>Operation code</para>
            </listitem>
          </varlistentry>
        </variablelist></para>

      <para>If operation equals <constant>op_response</constant> :</para>

      <para><variablelist>
          <varlistentry>
            <term><type>Int32</type></term>

            <listitem>
              <para>Object handle</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><type>Int64</type></term>

            <listitem>
              <para>Object ID</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><type>Buffer</type></term>

            <listitem>
              <para>Data (meaning depends on the operation).</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><type>Byte[]</type></term>

            <listitem>
              <para>Status vector</para>

              <para><important>
                  <para>Information about parsing the status vector can be found in the <citetitle pubwork="book">Interbase 6.0 API
                  Guide</citetitle> in the documentation set. It might also be advantageous to look at the sources of the Firebird .NET
                  provider or Jaybird.</para>
                </important></para>
            </listitem>
          </varlistentry>
        </variablelist></para>
    </sect2>

    <sect2 id="wireprotocol-responses-sql">
      <title id="wireprotocol-responses-sql-title">SQL response</title>

      <variablelist>
        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Operation code</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>If operation equals <constant>op_sql_response</constant> :</para>

      <variablelist>
        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Message count</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Buffer</type></term>

          <listitem>
            <para>Response data (meaning depends on the operation).</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="wireprotocol-responses-fetch">
      <title id="wireprotocol-responses-fetch-title">Fetch response</title>

      <variablelist>
        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Operation code</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>If operation equals <constant>op_fetch_response</constant> :</para>

      <variablelist>
        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Status</para>

            <para><important>
                <para>A value of <constant>0</constant> is the success value.</para>

                <para>End of cursor is indicated with a non-zero status.</para>

                <para>A status with value of <constant>100</constant> means that there are no more rows.</para>
              </important></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Count of rows following response</para>

            <important>
              <para>The data rows are not in a buffer as described in <xref endterm="wireprotocol-appendix-types-title"
              linkend="wireprotocol-appendix-types"/>, but as a sequence of data rows, see <xref
              endterm="wireprotocol-reading-row-data-title" linkend="wireprotocol-reading-row-data"/>.</para>
            </important>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="wireprotocol-responses-slice">
      <title id="wireprotocol-responses-slice-title">Slice response</title>

      <variablelist>
        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Operation code</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>If operation equals <constant>op_slice</constant> :</para>

      <variablelist>
        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Slice length</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Slice length</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Buffer</type></term>

          <listitem>
            <para>Slice data</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <sect1 id="wireprotocol-databases">
    <title>Databases</title>

    <sect2 id="wireprotocol-databases-attach">
      <title>Attach</title>

      <para>Attachments to a database are done in two steps, first identification (connect) to the server, then attachment to a
      database.</para>

      <sect3 id="wireprotocol-databases-attach-identification">
        <title>Identification</title>

        <para>Performs the initial handshake and protocol selection.</para>

        <bridgehead renderas="sect4">Client</bridgehead>

        <variablelist>
          <varlistentry>
            <term><type>Int32</type></term>

            <listitem>
              <para>Operation code (<constant>op_connect</constant>)</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><type>Int32</type></term>

            <listitem>
              <para>Operation code (<constant>op_attach</constant>)</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><type>Int32</type></term>

            <listitem>
              <para>Version (<constant>CONNECT_VERSION2</constant>)</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><type>Int32</type></term>

            <listitem>
              <para>Architecture type (eg <constant>arch_generic</constant> = <literal>1</literal>).</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><type>String</type></term>

            <listitem>
              <para>Database path or alias</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><type>Int32</type></term>

            <listitem>
              <para>Count of protocol versions understood (eg <literal>1</literal>)</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><type>Buffer</type></term>

            <listitem>
              <para>User identification</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <important>
          <para>The next block of data declares the protocol(s) that the client is willing or able to support. It should be sent as many
          times as protocols are supported, values depend on the protocol.</para>
        </important>

        <variablelist>
          <varlistentry>
            <term><type>Int32</type></term>

            <listitem>
              <para>Protocol version (<constant>PROTOCOL_VERSION10</constant>)</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><type>Int32</type></term>

            <listitem>
              <para>Architecture type (eg <constant>arch_generic</constant> = <literal>1</literal>)</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><type>Int32</type></term>

            <listitem>
              <para>Minimum type (eg <constant>ptype_rpc</constant> = <literal>2</literal>)</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><type>Int32</type></term>

            <listitem>
              <para>Maximum type (eg <constant>ptype_batch_send</constant> = <literal>3</literal>)</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><type>Int32</type></term>

            <listitem>
              <para>Preference weight (eg <literal>2</literal>)</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <bridgehead renderas="sect4">Server</bridgehead>

        <variablelist>
          <varlistentry>
            <term><type>Int32</type></term>

            <listitem>
              <para>Operation code</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>If operation equals <constant>op_accept</constant> :</para>

        <variablelist>
          <varlistentry>
            <term><type>Int32</type></term>

            <listitem>
              <para>Protocol version number accepted by server</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><type>Int32</type></term>

            <listitem>
              <para>Architecture for protocol</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><type>Int32</type></term>

            <listitem>
              <para>Minumum type</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect3>

      <sect3 id="wireprotocol-databases-attach-attachment">
        <title id="wireprotocol-databases-attach-attachment-title">Attachment</title>

        <para>Attaches to a database.</para>

        <bridgehead renderas="sect4">Client</bridgehead>

        <variablelist>
          <varlistentry>
            <term><type>Int32</type></term>

            <listitem>
              <para>Operation code (<constant>op_attach</constant>)</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><type>Int32</type></term>

            <listitem>
              <para>Database object id (<literal>0</literal>)</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><type>String</type></term>

            <listitem>
              <para>Database path or alias</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><type>Buffer</type></term>

            <listitem>
              <para>Database parameter buffer</para>

              <para><table colsep="0" frame="bottom" id="wireprotocol-databases-attach-attachment-dpb-content" rowsep="0">
                  <title>Example of parameters sent in the DPB</title>

                  <tgroup cols="4">
                    <colspec colwidth="3*"/>

                    <colspec colwidth="2*"/>

                    <colspec colwidth="*"/>

                    <colspec colwidth="*"/>

                    <thead>
                      <row rowsep="1">
                        <entry>Parameter</entry>

                        <entry>Description</entry>

                        <entry>Value</entry>

                        <entry>Optional</entry>
                      </row>
                    </thead>

                    <tbody>
                      <row>
                        <entry><constant>isc_dpb_version1</constant></entry>

                        <entry>Version (must be first item!)</entry>

                        <entry/>

                        <entry/>
                      </row>

                      <row>
                        <entry><constant>isc_dpb_dummy_packet_interval</constant></entry>

                        <entry>Dummy packet interval</entry>

                        <entry>120</entry>

                        <entry>*</entry>
                      </row>

                      <row>
                        <entry><constant>isc_dpb_sql_dialect</constant></entry>

                        <entry>SQL dialect</entry>

                        <entry>3</entry>

                        <entry/>
                      </row>

                      <row>
                        <entry><constant>isc_dpb_lc_ctype</constant></entry>

                        <entry>Character set</entry>

                        <entry>UTF8</entry>

                        <entry/>
                      </row>

                      <row>
                        <entry><constant>isc_dpb_sql_role_name</constant></entry>

                        <entry>User role</entry>

                        <entry>RDB$ADMIN</entry>

                        <entry>*</entry>
                      </row>

                      <row>
                        <entry><constant>isc_dpb_connect_timeout</constant></entry>

                        <entry>Connection timeout</entry>

                        <entry>10</entry>

                        <entry>*</entry>
                      </row>

                      <row>
                        <entry><constant>isc_dpb_user_name</constant></entry>

                        <entry>User name</entry>

                        <entry>SYSDBA</entry>

                        <entry/>
                      </row>

                      <row>
                        <entry><constant>isc_dpb_password</constant></entry>

                        <entry>User password</entry>

                        <entry>masterkey</entry>

                        <entry/>
                      </row>
                    </tbody>
                  </tgroup>
                </table></para>
            </listitem>
          </varlistentry>
        </variablelist>

        <bridgehead renderas="sect4">Server</bridgehead>

        <para><xref endterm="wireprotocol-responses-generic-title" linkend="wireprotocol-responses-generic"/> - Where the object handle is
        the database handle.</para>
      </sect3>
    </sect2>

    <sect2 id="wireprotocol-databases-detach">
      <title id="wireprotocol-databases-detach-title">Detach</title>

      <para>Detaches from the database. After detach the connection is still open, to disconnect use <xref
      endterm="wireprotocol-databases-disconnect-title" linkend="wireprotocol-databases-disconnect"/>
      (<constant>op_disconnect</constant>).</para>

      <bridgehead renderas="sect4">Client</bridgehead>

      <variablelist>
        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Operation code (<constant>op_detach</constant>)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Database handle</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <bridgehead renderas="sect4">Server</bridgehead>

      <para><xref endterm="wireprotocol-responses-generic-title" linkend="wireprotocol-responses-generic"/></para>
    </sect2>

    <sect2 id="wireprotocol-databases-create">
      <title>Create</title>

      <para>Create a database. Create is similar to <xref endterm="wireprotocol-databases-attach-attachment-title"
      linkend="wireprotocol-databases-attach-attachment"/> (<constant>op_attach</constant>).</para>

      <bridgehead renderas="sect4">Client</bridgehead>

      <para><variablelist>
          <varlistentry>
            <term><type>Int32</type></term>

            <listitem>
              <para>Operation code (<constant>op_create</constant>)</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><type>Int32</type></term>

            <listitem>
              <para>Database object id (0)</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><type>String</type></term>

            <listitem>
              <para>Database path</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><type>Buffer</type></term>

            <listitem>
              <para>Database parameter buffer</para>
            </listitem>
          </varlistentry>
        </variablelist></para>

      <bridgehead renderas="sect4">Server</bridgehead>

      <para><xref endterm="wireprotocol-responses-generic-title" linkend="wireprotocol-responses-generic"/> - Where the Object handle is the
      database handle.</para>
    </sect2>

    <sect2 id="wireprotocol-databases-drop">
      <title>Drop</title>

      <para>Drops the currently attached database.</para>

      <bridgehead renderas="sect4">Client</bridgehead>

      <variablelist>
        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Operation code (<constant>op_drop_database</constant>)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Database handle</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <bridgehead renderas="sect4">Server</bridgehead>

      <para><xref endterm="wireprotocol-responses-generic-title" linkend="wireprotocol-responses-generic"/></para>
    </sect2>

    <sect2 id="wireprotocol-databases-information">
      <title id="wireprotocol-databases-information-title">Database information request</title>

      <para>Requests database or server information.</para>

      <bridgehead renderas="sect4">Client</bridgehead>

      <variablelist>
        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Operation code (<constant>op_info_database</constant>)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Database handle</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Incarnation of object (<literal>0</literal>)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Buffer</type></term>

          <listitem>
            <para>Requested information items</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Length of buffer available for receiving response (too small may lead to receiving a truncated buffer, which necessitates
            requesting information again).</para>

            <para>The buffer in the response is sized to the actual length of the response (upto the declared available length), so
            specifying a larger than necessary size does not inflate the response on the wire.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <bridgehead renderas="sect4">Server</bridgehead>

      <para><xref endterm="wireprotocol-responses-generic-title" linkend="wireprotocol-responses-generic"/> - Where Data holds the requested
      information.</para>
    </sect2>

    <sect2 id="wireprotocol-databases-disconnect">
      <title id="wireprotocol-databases-disconnect-title">Disconnect</title>

      <bridgehead>Client</bridgehead>

      <variablelist>
        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Operation code (<constant>op_disconnect</constant>)</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>No response, remote socket close.</para>
    </sect2>
  </sect1>

  <sect1 id="wireprotocol-transactions">
    <title>Transactions</title>

    <sect2 id="wireprotocol-transactions-start">
      <title>Start transaction</title>

      <para>Starts a transaction with the transaction options specified in the transaction parameter buffer.</para>

      <bridgehead renderas="sect4">Client</bridgehead>

      <variablelist>
        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Operation code (<constant>op_transaction</constant>)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Database handle</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Buffer</type></term>

          <listitem>
            <para>Transaction parameter buffer</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <bridgehead renderas="sect4">Server</bridgehead>

      <para><xref endterm="wireprotocol-responses-generic-title" linkend="wireprotocol-responses-generic"/> - Where Object handle is the new
      transaction handle.</para>
    </sect2>

    <sect2 id="wireprotocol-transactions-commit">
      <title>Commit transaction</title>

      <para>Commits an active or prepared transaction.</para>

      <bridgehead renderas="sect4">Client</bridgehead>

      <variablelist>
        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Operation code (<constant>op_commit</constant>)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Transaction handle</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <bridgehead renderas="sect4">Server</bridgehead>

      <para><xref endterm="wireprotocol-responses-generic-title" linkend="wireprotocol-responses-generic"/></para>
    </sect2>

    <sect2 id="wireprotocol-transactions-rollback">
      <title>Rollback transaction</title>

      <para>Rolls back an active or prepared transaction.</para>

      <bridgehead renderas="sect4">Client</bridgehead>

      <variablelist>
        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Operation code (<constant>op_rollback</constant>)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Transaction handle</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <bridgehead renderas="sect4">Server</bridgehead>

      <para><xref endterm="wireprotocol-responses-generic-title" linkend="wireprotocol-responses-generic"/></para>
    </sect2>

    <sect2 id="wireprotocol-transactions-commitretain">
      <title>Commit retaining</title>

      <para>Commits an active or prepared transaction, retaining the transaction context.</para>

      <bridgehead renderas="sect4">Client</bridgehead>

      <variablelist>
        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Operation code (<constant>op_commit_retaining</constant>)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Transaction handle</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <bridgehead renderas="sect4">Server</bridgehead>

      <para><xref endterm="wireprotocol-responses-generic-title" linkend="wireprotocol-responses-generic"/>.</para>
    </sect2>

    <sect2 id="wireprotocol-transactions-rollbackretain">
      <title>Rollback retaining</title>

      <para>Rolls back an active or prepared transaction, retaining the transaction context.</para>

      <bridgehead renderas="sect4">Client</bridgehead>

      <variablelist>
        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Operation code (<constant>op_rollback_retaining</constant>)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Transaction handle</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <bridgehead renderas="sect4">Server</bridgehead>

      <para><xref endterm="wireprotocol-responses-generic-title" linkend="wireprotocol-responses-generic"/></para>
    </sect2>

    <sect2 id="wireprotocol-transactions-prepare">
      <title>Prepare</title>

      <para>Performs the first stage of a two-phase commit. After prepare a transaction is <emphasis>in limbo</emphasis> until committed or
      rolled back.</para>

      <sect3 id="wireprotocol-transactions-prepare-simple">
        <title>Simple prepare</title>

        <bridgehead renderas="sect4">Client</bridgehead>

        <variablelist>
          <varlistentry>
            <term><type>Int32</type></term>

            <listitem>
              <para>Operation code (<constant>op_prepare</constant>)</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><type>Int32</type></term>

            <listitem>
              <para>Transaction handle</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <bridgehead renderas="sect4">Server</bridgehead>

        <para><xref endterm="wireprotocol-responses-generic-title" linkend="wireprotocol-responses-generic"/></para>
      </sect3>

      <sect3 id="wireprotocol-transactions-prepare-message">
        <title>Prepare with message</title>

        <para>Associates a message (byte data) with the prepared transaction. This information is stored in <database
        class="table">RDB$TRANSACTIONS</database> and can be used for recovery purposes.</para>

        <bridgehead>Client</bridgehead>

        <variablelist>
          <varlistentry>
            <term><type>Int32</type></term>

            <listitem>
              <para>Operation code (<constant>op_prepare2</constant>)</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><type>Int32</type></term>

            <listitem>
              <para>Transaction handle</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><type>Buffer</type></term>

            <listitem>
              <para>Recovery information</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <bridgehead renderas="sect4">Server</bridgehead>

        <para><xref endterm="wireprotocol-responses-generic-title" linkend="wireprotocol-responses-generic"/></para>
      </sect3>
    </sect2>

    <sect2 id="wireprotocol-transactions-info">
      <title>Transaction information request</title>

      <para>This is similar to <xref endterm="wireprotocol-databases-information-title"
      linkend="wireprotocol-databases-information"/>.</para>

      <bridgehead renderas="sect4">Client</bridgehead>

      <variablelist>
        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Operation code (<constant>op_transaction_info</constant>)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Database handle</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Incarnation of object (<literal>0</literal>)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Buffer</type></term>

          <listitem>
            <para>Requested information items</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Length of buffer available for receiving response (too small may lead to receiving truncated buffer).</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para><xref endterm="wireprotocol-responses-generic-title" linkend="wireprotocol-responses-generic"/> - Where Data holds the requested
      information.</para>
    </sect2>
  </sect1>

  <sect1 id="wireprotocol-statements">
    <title>Statements</title>

    <sect2 id="wireprotocol-statements-allocate">
      <title id="wireprotocol-statements-allocate-title">Allocate</title>

      <para>Allocates a statement handle on the server.</para>

      <bridgehead renderas="sect4">Client</bridgehead>

      <variablelist>
        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Operation code (<constant>op_allocate_statement</constant>)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Database handle</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <bridgehead renderas="sect4">Server</bridgehead>

      <para><xref endterm="wireprotocol-responses-generic-title" linkend="wireprotocol-responses-generic"/> - Where Object Handle is the
      allocated statement handle.</para>

      <sect3 id="wireprotocol-statements-allocate-v11">
        <title>Deviations for protocol version 11</title>

        <para>An allocate can only be sent together with a <xref endterm="wireprotocol-statements-prepare-title"
        linkend="wireprotocol-statements-prepare"/> operation.</para>
      </sect3>
    </sect2>

    <sect2 id="wireprotocol-statements-free">
      <title>Free</title>

      <para>Frees resources held by the statement.</para>

      <bridgehead renderas="sect4">Client</bridgehead>

      <variablelist>
        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Operation code (<constant>op_free_statement</constant>)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Statement handle</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para><segmentedlist>
                <?dbhtml list-presentation="table"?>

                <?dbfo list-presentation="table"?>

                <segtitle>Option</segtitle>

                <segtitle>Description</segtitle>

                <seglistitem>
                  <seg><constant>DSQL_close</constant></seg>

                  <seg>Closes the cursor opened after statement execute.</seg>
                </seglistitem>

                <seglistitem>
                  <seg><constant>DSQL_drop</constant></seg>

                  <seg>Releases the statement handle.</seg>
                </seglistitem>
              </segmentedlist></para>
          </listitem>
        </varlistentry>
      </variablelist>

      <bridgehead renderas="sect4">Server</bridgehead>

      <para><xref endterm="wireprotocol-responses-generic-title" linkend="wireprotocol-responses-generic"/></para>

      <sect3 id="wireprotocol-statements-free-v11">
        <title>Deviations for protocol version 11</title>

        <para>Request flushing and response processing must be deffered.</para>
      </sect3>
    </sect2>

    <sect2 id="wireprotocol-statements-prepare">
      <title id="wireprotocol-statements-prepare-title">Prepare</title>

      <bridgehead renderas="sect4">Client</bridgehead>

      <variablelist>
        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Operation code (<constant>op_prepare_statement</constant>)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Transaction handle</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Statement handle</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>SQL dialect</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>String</type></term>

          <listitem>
            <para>Statement to be prepared</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Buffer</type></term>

          <listitem>
            <para>Describe and describe bind information items</para>

            <para><itemizedlist mark="none" spacing="compact">
                <title>Example of requested information items :</title>

                <listitem>
                  <para><constant>isc_info_sql_select</constant></para>
                </listitem>

                <listitem>
                  <para><constant>isc_info_sql_describe_vars</constant></para>
                </listitem>

                <listitem>
                  <para><constant>isc_info_sql_sqlda_seq</constant></para>
                </listitem>

                <listitem>
                  <para><constant>isc_info_sql_type</constant></para>
                </listitem>

                <listitem>
                  <para><constant>isc_info_sql_sub_type</constant></para>
                </listitem>

                <listitem>
                  <para><constant>isc_info_sql_length</constant></para>
                </listitem>

                <listitem>
                  <para><constant>isc_info_sql_scale</constant></para>
                </listitem>

                <listitem>
                  <para><constant>isc_info_sql_field</constant></para>
                </listitem>

                <listitem>
                  <para><constant>isc_info_sql_relation</constant></para>
                </listitem>
              </itemizedlist></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Target buffer length (<literal>32768</literal>)</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <bridgehead renderas="sect4">Server</bridgehead>

      <para><xref endterm="wireprotocol-responses-generic-title" linkend="wireprotocol-responses-generic"/> - Where Data holds the statement
      description (matching the requested information items)</para>

      <sect3 id="wireprotocol-statements-prepare-v11">
        <title>Deviations for protocol version 11</title>

        <para>The statement handle can no longer be allocated separately. The initial <xref endterm="wireprotocol-statements-allocate-title"
        linkend="wireprotocol-statements-allocate"/> operation <emphasis role="strong">must</emphasis> be sent together with the first
        prepare operation. When allocating and preparing together, he value of the statement handle of the prepare must be
        <literal>0xFFFF</literal> (invalid object handle). The responses must be processed in order: first allocate response, then prepare
        response.</para>

        <para>Once a statement handle has been allocated, it can be reused by sending a prepare with the obtained statement handle.</para>
      </sect3>
    </sect2>

    <sect2 id="wireprotocol-statements-describe">
      <title>Describe</title>

      <para>Describe of output parameters of a query is done using the <link linkend="wireprotocol-statements-information">Statements
      information request message</link></para>

      <itemizedlist mark="none" spacing="compact">
        <title>Example of requested information items :</title>

        <listitem>
          <para><constant>isc_info_sql_select</constant></para>
        </listitem>

        <listitem>
          <para><constant>isc_info_sql_describe_vars</constant></para>
        </listitem>

        <listitem>
          <para><constant>isc_info_sql_sqlda_seq</constant></para>
        </listitem>

        <listitem>
          <para><constant>isc_info_sql_type</constant></para>
        </listitem>

        <listitem>
          <para><constant>isc_info_sql_sub_type</constant></para>
        </listitem>

        <listitem>
          <para><constant>isc_info_sql_length</constant></para>
        </listitem>

        <listitem>
          <para><constant>isc_info_sql_scale</constant></para>
        </listitem>

        <listitem>
          <para><constant>isc_info_sql_field</constant></para>
        </listitem>

        <listitem>
          <para><constant>isc_info_sql_relation</constant></para>
        </listitem>
      </itemizedlist>
    </sect2>

    <sect2 id="wireprotocol-statements-describe-bind">
      <title>Describe bind (input parameters)</title>

      <para>Describe of input parameters of a query is done using the <link linkend="wireprotocol-statements-information">Statements
      information request message</link></para>

      <itemizedlist mark="none" spacing="compact">
        <title>Example of requested information items :</title>

        <listitem>
          <para><constant>isc_info_sql_select</constant></para>
        </listitem>

        <listitem>
          <para><constant>isc_info_sql_describe_vars</constant></para>
        </listitem>

        <listitem>
          <para><constant>isc_info_sql_sqlda_seq</constant></para>
        </listitem>

        <listitem>
          <para><constant>isc_info_sql_type</constant></para>
        </listitem>

        <listitem>
          <para><constant>isc_info_sql_sub_type</constant></para>
        </listitem>

        <listitem>
          <para><constant>isc_info_sql_length</constant></para>
        </listitem>

        <listitem>
          <para><constant>isc_info_sql_scale</constant></para>
        </listitem>

        <listitem>
          <para><constant>isc_info_sql_field</constant></para>
        </listitem>

        <listitem>
          <para><constant>isc_info_sql_relation</constant></para>
        </listitem>
      </itemizedlist>
    </sect2>

    <sect2 id="wireprotocol-statements-execute">
      <title>Execute</title>

      <bridgehead renderas="sect4">Client</bridgehead>

      <variablelist>
        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Operation code</para>

            <para><segmentedlist>
                <?dbhtml list-presentation="table"?>

                <?dbfo list-presentation="table"?>

                <segtitle>Operation</segtitle>

                <segtitle>Usage</segtitle>

                <seglistitem>
                  <seg><constant>op_execute</constant></seg>

                  <seg>DDL and DML statements.</seg>
                </seglistitem>

                <seglistitem>
                  <seg><constant>op_execute2</constant></seg>

                  <seg>Stored procedures.</seg>
                </seglistitem>
              </segmentedlist></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Statement handle</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Transaction handle</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>If the statement has input parameters :</para>

      <variablelist>
        <varlistentry>
          <term><type>Buffer</type></term>

          <listitem>
            <para>Parameters in BLR format</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Message number (0) ??</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Number of messages (1) ??</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Buffer</type></term>

          <listitem>
            <para>Parameter values</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>If not :</para>

      <variablelist>
        <varlistentry>
          <term><type>Buffer</type></term>

          <listitem>
            <para>Empty (length only 0)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Message number (0) ??</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Number of messages (0) ??</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>If the statement is an stored procedure and there are output parameters :</para>

      <variablelist>
        <varlistentry>
          <term><type>Buffer</type></term>

          <listitem>
            <para>Output parameters in BLR format</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Output message number (0) ??</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <bridgehead renderas="sect4">Server</bridgehead>

      <variablelist>
        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Operation code</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>If operation equals <constant>op_sql_response</constant> :</para>

      <para><xref endterm="wireprotocol-responses-sql-title" linkend="wireprotocol-responses-sql"/></para>

      <para>if not :</para>

      <para><xref endterm="wireprotocol-responses-generic-title" linkend="wireprotocol-responses-generic"/></para>
    </sect2>

    <sect2 id="wireprotocol-statements-rowsaffected">
      <title>Rows affected by query execution</title>

      <para>Obtain the rows affected by a query is done using the <link linkend="wireprotocol-statements-information">Statements information
      request message</link></para>

      <itemizedlist mark="none" spacing="compact">
        <title>List of requested information items :</title>

        <listitem>
          <para><constant>isc_info_sql_records</constant></para>
        </listitem>
      </itemizedlist>
    </sect2>

    <sect2 id="wireprotocol-statements-fetch">
      <title>Fetch</title>

      <bridgehead renderas="sect4">Client</bridgehead>

      <variablelist>
        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Operation code (<constant>op_fetch</constant>)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Statement handle</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Buffer</type></term>

          <listitem>
            <para>Output parameters in BLR format</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Message number</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Message count/Fetch size (200)</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <bridgehead renderas="sect4">Server</bridgehead>

      <variablelist>
        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Operation code</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>If operation equals <constant>op_fetch_response</constant> :</para>

      <para><xref endterm="wireprotocol-responses-fetch-title" linkend="wireprotocol-responses-fetch"/>.</para>

      <para>If not :</para>

      <para><xref endterm="wireprotocol-responses-generic-title" linkend="wireprotocol-responses-generic"/>.</para>
    </sect2>

    <sect2 id="wireprotocol-statements-cursorname">
      <title>Set cursor name</title>

      <bridgehead renderas="sect4">Client</bridgehead>

      <para><variablelist>
          <varlistentry>
            <term><type>Int32</type></term>

            <listitem>
              <para>Operation code (<constant>op_set_cursor</constant>)</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><type>Int32</type></term>

            <listitem>
              <para>Statement handle</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><type>String</type></term>

            <listitem>
              <para>Cursor name (null terminated)</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><type>Int32</type></term>

            <listitem>
              <para>Cursor type (0).</para>

              <important>
                <para>Reserved for future use</para>
              </important>
            </listitem>
          </varlistentry>
        </variablelist></para>

      <bridgehead renderas="sect4">Server</bridgehead>

      <para><xref endterm="wireprotocol-responses-generic-title" linkend="wireprotocol-responses-generic"/></para>
    </sect2>

    <sect2 id="wireprotocol-statements-information">
      <title>Information request</title>

      <para>This is similar to <xref endterm="wireprotocol-databases-information-title"
      linkend="wireprotocol-databases-information"/>.</para>

      <bridgehead renderas="sect4">Client</bridgehead>

      <variablelist>
        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Operation code (<constant>op_info_sql</constant>)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Statement handle</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Incarnation of object (0)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Buffer</type></term>

          <listitem>
            <para>Requested information items</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Requested information items buffer length</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <bridgehead renderas="sect4">Server</bridgehead>

      <para><xref endterm="wireprotocol-responses-generic-title" linkend="wireprotocol-responses-generic"/> - Where Data holds the requested
      information.</para>

      <para><important>
          <para>Information about how to parse the information buffer sent by the Firebird server can be found in the Interbase 6.0
          documentation set</para>
        </important></para>
    </sect2>
  </sect1>

  <sect1 id="wireprotocol-blobs">
    <title>Blobs</title>

    <sect2 id="wireprotocol-blobs-create">
      <title>Create/Open</title>

      <bridgehead renderas="sect4">Client</bridgehead>

      <variablelist>
        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Operation code</para>

            <para><segmentedlist>
                <?dbhtml list-presentation="table"?>

                <?dbfo list-presentation="table"?>

                <segtitle>Operation</segtitle>

                <segtitle>Description</segtitle>

                <seglistitem>
                  <seg><constant>op_create_blob</constant></seg>

                  <seg>Creates a new blob</seg>
                </seglistitem>

                <seglistitem>
                  <seg><constant>op_create_blob2</constant></seg>

                  <seg>Creates a new blob with a blob parameter buffer</seg>
                </seglistitem>

                <seglistitem>
                  <seg><constant>op_open_blob</constant></seg>

                  <seg>Opens an existing blob</seg>
                </seglistitem>

                <seglistitem>
                  <seg><constant>op_open_blob2</constant></seg>

                  <seg>Opens an existing blob with a blob parameter buffer</seg>
                </seglistitem>
              </segmentedlist></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Buffer</type></term>

          <listitem>
            <para>Blob parameter buffer (<emphasis>not allowed with <constant>op_create_blob</constant> and
            <constant>op_open_blob</constant>, required with <constant>op_create_blob2</constant> and
            <constant>op_open_blob2</constant></emphasis>)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Transaction handle</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int64</type></term>

          <listitem>
            <para>Blob ID</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <bridgehead renderas="sect4">Server</bridgehead>

      <para><xref endterm="wireprotocol-responses-generic-title" linkend="wireprotocol-responses-generic"/> - Where :</para>

      <orderedlist numeration="loweralpha">
        <listitem>
          <para>Object handle is the blob handle</para>
        </listitem>

        <listitem>
          <para>Blob id is the blob id (<emphasis>only for <constant>op_create_blob</constant> / <constant>op_create_blob2</constant>,
          garbage for <constant>op_open_blob</constant> / <constant>op_open_blob2</constant></emphasis>)</para>
        </listitem>
      </orderedlist>
    </sect2>

    <sect2 id="wireprotocol-blobs-getsegment">
      <title>Get segment</title>

      <bridgehead renderas="sect4">Client</bridgehead>

      <variablelist>
        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Operation code (<constant>op_get_segment</constant>)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Blob handle</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Segment length (<emphasis>max length = 32768</emphasis>)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Data segment (0)</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <bridgehead renderas="sect4">Server</bridgehead>

      <para><xref endterm="wireprotocol-responses-generic-title" linkend="wireprotocol-responses-generic"/> - Where Data is the blob
      segment.</para>
    </sect2>

    <sect2 id="wireprotocol-blobs-putsegment">
      <title>Put segment</title>

      <bridgehead renderas="sect4">Client</bridgehead>

      <variablelist>
        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Operation code (<constant>op_batch_segments</constant>)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Blob handle</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Buffer</type></term>

          <listitem>
            <para>Blob Segments</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <bridgehead renderas="sect4">Server</bridgehead>

      <para><xref endterm="wireprotocol-responses-generic-title" linkend="wireprotocol-responses-generic"/></para>
    </sect2>

    <sect2 id="wireprotocol-blobs-seek">
      <title>Seek</title>

      <bridgehead renderas="sect4">Client</bridgehead>

      <variablelist>
        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Operation code (<constant>op_seek_blob</constant>)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Blob handle</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Seek mode (0)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Offset</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <bridgehead renderas="sect4">Server</bridgehead>

      <para><xref endterm="wireprotocol-responses-generic-title" linkend="wireprotocol-responses-generic"/> - Where ObjectHandle is the
      current position.</para>
    </sect2>

    <sect2 id="wireprotocol-blobs-cancel">
      <title>Cancel</title>

      <para>Cancels and invalidates the blob handle. If this was a newly created blob, the blob is disposed.</para>

      <bridgehead renderas="sect4">Client</bridgehead>

      <para><variablelist>
          <varlistentry>
            <term><type>Int32</type></term>

            <listitem>
              <para>Operation code (<constant>op_cancel_blob</constant>)</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><type>Int32</type></term>

            <listitem>
              <para>Blob handle</para>
            </listitem>
          </varlistentry>
        </variablelist></para>

      <bridgehead renderas="sect4">Server</bridgehead>

      <para><xref endterm="wireprotocol-responses-generic-title" linkend="wireprotocol-responses-generic"/> - No useful information in
      response</para>

      <sect3 id="wireprotocol-blobs-cancel-v11">
        <title>Deviations for protocol version 11</title>

        <para>Request flushing and response processing must be deffered.</para>
      </sect3>
    </sect2>

    <sect2 id="wireprotocol-blobs-close">
      <title>Close</title>

      <para>Closes and invalidates the blob handle.</para>

      <bridgehead renderas="sect4">Client</bridgehead>

      <para><variablelist>
          <varlistentry>
            <term><type>Int32</type></term>

            <listitem>
              <para>Operation code (<constant>op_close_blob</constant>)</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><type>Int32</type></term>

            <listitem>
              <para>Blob handle</para>
            </listitem>
          </varlistentry>
        </variablelist></para>

      <bridgehead renderas="sect4">Server</bridgehead>

      <para><xref endterm="wireprotocol-responses-generic-title" linkend="wireprotocol-responses-generic"/> - No useful information in
      response</para>

      <sect3 id="wireprotocol-blobs-close-v11">
        <title>Deviations for protocol version 11</title>

        <para>Request flushing and response processing must be deffered.</para>
      </sect3>
    </sect2>
  </sect1>

  <sect1 id="wireprotocol-arrays">
    <title>Arrays</title>

    <sect2 id="wireprotocol-arrays-getslice">
      <title>Get slice</title>

      <bridgehead renderas="sect4">Client</bridgehead>

      <variablelist>
        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Operation code (<constant>op_get_slice</constant>)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Transaction handle</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int64</type></term>

          <listitem>
            <para>Array handle</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Slice length</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Buffer</type></term>

          <listitem>
            <para>Slice descriptor (SDL)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>String</type></term>

          <listitem>
            <para>Slice parameters (Always an empty string)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Buffer</type></term>

          <listitem>
            <para>Slice (Always empty)</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <bridgehead renderas="sect4">Server</bridgehead>

      <para><xref endterm="wireprotocol-responses-slice-title" linkend="wireprotocol-responses-slice"/></para>
    </sect2>

    <sect2 id="wireprotocol-arrays-putslice">
      <title>Put slice</title>

      <bridgehead renderas="sect4">Client</bridgehead>

      <variablelist>
        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Operation code (<constant>op_put_slice</constant>)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>transaction handle</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int64</type></term>

          <listitem>
            <para>Array handle (0)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Slice length</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Buffer</type></term>

          <listitem>
            <para>Slice descriptor (SDL)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>String</type></term>

          <listitem>
            <para>Slice parameters (Always an empty string)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Slice length</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Buffer</type></term>

          <listitem>
            <para>Slice data</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <bridgehead renderas="sect4">Server</bridgehead>

      <para><xref endterm="wireprotocol-responses-generic-title" linkend="wireprotocol-responses-generic"/> - Where BlobId is the array
      handle.</para>
    </sect2>
  </sect1>

  <sect1 id="wireprotocol-services">
    <title>Services</title>

    <sect2 id="wireprotocol-services-attach">
      <title>Attach</title>

      <bridgehead renderas="sect4">Client</bridgehead>

      <variablelist>
        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Operation code (<constant>op_service_attach</constant>)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Database object ID (0)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>String</type></term>

          <listitem>
            <para>Service name</para>

            <para>For local connections : service_mgr</para>

            <para>For remote connections: HostName: service_mgr</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Buffer</type></term>

          <listitem>
            <para>Service parameter buffer</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <bridgehead renderas="sect4">Server</bridgehead>

      <para><xref endterm="wireprotocol-responses-generic-title" linkend="wireprotocol-responses-generic"/> - Where Object handle is the
      services manager attachement handle.</para>
    </sect2>

    <sect2 id="wireprotocol-services-detach">
      <title>Detach</title>

      <bridgehead renderas="sect4">Client</bridgehead>

      <variablelist>
        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Operation code (<constant>op_service_detach</constant>)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Services manager attachment handle</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <bridgehead renderas="sect4">Server</bridgehead>

      <para><xref endterm="wireprotocol-responses-generic-title" linkend="wireprotocol-responses-generic"/></para>
    </sect2>

    <sect2 id="wireprotocol-services-start">
      <title>Start</title>

      <bridgehead renderas="sect4">Client</bridgehead>

      <variablelist>
        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Operation code (<constant>op_service_start</constant>)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Services manager attachment handle</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Incarnation of object (0)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Buffer</type></term>

          <listitem>
            <para>Services parameter buffer</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <bridgehead renderas="sect4">Server</bridgehead>

      <para><xref endterm="wireprotocol-responses-generic-title" linkend="wireprotocol-responses-generic"/></para>
    </sect2>

    <sect2 id="wireprotocol-services-query">
      <title>Query service</title>

      <bridgehead renderas="sect4">Client</bridgehead>

      <variablelist>
        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Operation code (<constant>op_service_info</constant>)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Services manager attachment handle</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Incarnation of object (0)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Buffer</type></term>

          <listitem>
            <para>Services parameter buffer</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Buffer</type></term>

          <listitem>
            <para>Requested information items</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Requested information items buffer length</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <bridgehead renderas="sect4">Server</bridgehead>

      <para><xref endterm="wireprotocol-responses-generic-title" linkend="wireprotocol-responses-generic"/> - Where Data contains the
      requested information.</para>
    </sect2>
  </sect1>

  <sect1 id="wireprotocol-events">
    <title>Events</title>

    <sect2 id="wireprotocol-events-connect-request">
      <title>Connection request</title>

      <bridgehead renderas="sect4">Client</bridgehead>

      <variablelist>
        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Operation code (<constant>op_connect_request</constant>)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Connection type (<constant>P_REQ_async</constant>)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Partner identification (0)</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <bridgehead renderas="sect4">Server</bridgehead>

      <variablelist>
        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Attachment handle</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int16</type></term>

          <listitem>
            <para>Port number</para>

            <para><important>
                <para>This is part of the sockaddr_in structure.</para>

                <para>It is not in XDR format</para>
              </important></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int16</type></term>

          <listitem>
            <para>Socket family</para>

            <para><important>
                <para>This is part of the sockaddr_in structure.</para>

                <para>It is not in XDR format</para>
              </important></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Byte[4]</type></term>

          <listitem>
            <para>IP Address</para>

            <para><important>
                <para>This is part of the sockaddr_in structure.</para>

                <para>It is not in XDR format</para>
              </important></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Byte[8]</type></term>

          <listitem>
            <para>Zeroes</para>

            <para><important>
                <para>This is part of the sockaddr_in structure.</para>

                <para>It is not in XDR format</para>
              </important></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Byte[4]</type></term>

          <listitem>
            <para>Garbage</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="wireprotocol-events-que-events">
      <title>Queue events</title>

      <bridgehead renderas="sect4">Client</bridgehead>

      <variablelist>
        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Operation code (<constant>op_que_events</constant>)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Database handle</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Buffer</type></term>

          <listitem>
            <para>Events parameter buffer</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Ast function address</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Ast parameters function address</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Local event id</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <bridgehead renderas="sect4">Server</bridgehead>

      <para><xref endterm="wireprotocol-responses-generic-title" linkend="wireprotocol-responses-generic"/> - Where Object Handle holds the
      remote event id.</para>
    </sect2>

    <sect2 id="wireprotocol-events-cancel-events">
      <title>Cancel events</title>

      <bridgehead renderas="sect4">Client</bridgehead>

      <variablelist>
        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Operation code (<constant>op_cancel_events</constant>)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Database handle</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>Int32</type></term>

          <listitem>
            <para>Local event id</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <bridgehead renderas="sect4">Server</bridgehead>

      <para><xref endterm="wireprotocol-responses-generic-title" linkend="wireprotocol-responses-generic"/>.</para>
    </sect2>
  </sect1>

  <sect1 id="wireprotocol-reading-row-data">
    <title id="wireprotocol-reading-row-data-title">Reading row data</title>

    <para>TODO: Processing row data</para>
  </sect1>

  <appendix id="wireprotocol-appendix-xdr">
    <title>External Data Representation (XDR)</title>

    <para>The Firebird wire protocol uses XDR for exchange messages between client and server.</para>
  </appendix>

  <appendix id="wireprotocol-appendix-types">
    <title id="wireprotocol-appendix-types-title">Data types</title>

    <variablelist>
      <varlistentry>
        <term><type>Int32</type></term>

        <listitem>
          <para>Integer 32-bits</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><type>Int64</type></term>

        <listitem>
          <para>Integer 64-bits</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><type>Buffer</type></term>

        <listitem>
          <para><segmentedlist>
              <title>Composed by :</title>

              <?dbhtml list-presentation="table"?>

              <?dbfo list-presentation="table"?>

              <segtitle>Type</segtitle>

              <segtitle>Description</segtitle>

              <seglistitem>
                <seg><type>Int32</type></seg>

                <seg>Length.</seg>
              </seglistitem>

              <seglistitem>
                <seg><type>Byte[]</type></seg>

                <seg>Buffer data.</seg>
              </seglistitem>
            </segmentedlist></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><type>Byte[]</type></term>

        <listitem>
          <para>An array of bytes</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><type>String</type></term>

        <listitem>
          <para>A text string (<emphasis>Read/Written as a buffer</emphasis>)</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </appendix>

  <appendix id="wireprotocol-appendix-revhistory">
    <title>Revision history</title>

    <para><revhistory>
        <revision>
          <revnumber>0.1</revnumber>

          <date>31 May 2004</date>

          <revremark>First draft for review.</revremark>
        </revision>

        <revision>
          <revnumber>0.2</revnumber>

          <date>02 Jun 2004</date>

          <revremark>Fixed issues reported by Paul Vinkenoog.</revremark>
        </revision>

        <revision>
          <revnumber>0.3</revnumber>

          <date>03 Jun 2004</date>

          <revremark>Added new subsections to the Statements section.</revremark>
        </revision>

        <revision>
          <revnumber>0.4</revnumber>

          <date>05 Jun 2004</date>

          <revremark>Fixed issues reported by Paul Vinkenoog.</revremark>
        </revision>

        <revision>
          <revnumber>0.5</revnumber>

          <date>06 Jun 2004</date>

          <revremark>Fixed issues reported by Paul Vinkenoog.</revremark>
        </revision>

        <revision>
          <revnumber>0.6</revnumber>

          <date>07 Jun 2004</date>

          <revremark>Added events system documentation.</revremark>
        </revision>

        <revision>
          <revnumber>0.7</revnumber>

          <date>16 Jun 2004</date>

          <revremark>Modifed document ID to wireprotocol.</revremark>
        </revision>

        <revision>
          <revnumber>0.8</revnumber>

          <date>17 Jun 2004</date>

          <revremark>Added two new segmendted lists.</revremark>
        </revision>

        <revision>
          <revnumber>0.9</revnumber>

          <date>18 Jun 2004</date>

          <revdescription>
            <itemizedlist>
              <listitem>
                <para>Improved segmentedlist usage.</para>
              </listitem>

              <listitem>
                <para>Fixed rendering of important tags.</para>
              </listitem>
            </itemizedlist>
          </revdescription>
        </revision>

        <revision>
          <revnumber>0.10</revnumber>

          <date>19 Jun 2004</date>

          <revremark>Changed rendering of important tags using Paul Vinkenoog fix.</revremark>
        </revision>

        <revision>
          <revnumber>0.11</revnumber>

          <date>20 Jun 2004</date>

          <revdescription>
            <itemizedlist>
              <listitem>
                <para>Added new segmentedlist.</para>
              </listitem>

              <listitem>
                <para>Updated Statements.Prepare documentation.</para>
              </listitem>

              <listitem>
                <para>Updated Statements.Execute documentation.</para>
              </listitem>

              <listitem>
                <para>Updated Blobs.GetSegment documentation.</para>
              </listitem>

              <listitem>
                <para>Updated Blobs.Seek documentation.</para>
              </listitem>
            </itemizedlist>
          </revdescription>
        </revision>

        <revision>
          <revnumber>0.12</revnumber>

          <date>21 Jun 2004</date>

          <revremark>Updated services information.</revremark>
        </revision>

        <revision>
          <revnumber>0.13</revnumber>

          <date>13 Sep 2014</date>

          <revremark>Updated and expanded protocol information</revremark>
        </revision>
      </revhistory></para>
  </appendix>
</article>
