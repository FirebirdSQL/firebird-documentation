<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../../../tools/docbook-dtd/docbookx.dtd">
<chapter id="ufb-about">
  <title>About Firebird</title>

  <para>Firebird is a powerful, compact client/server SQL relational database
  management system which can run on a variety of server and client operating
  systems. Its officially supported platforms are Windows and Linux, but
  Firebird is also known to run on several other OS's, such as FreeBSD and
  Apple Macintosh OS/X.</para>

  <para>Firebird features a higher level of SQL standards compliance than most
  other industrial-strength client/server database management systems on the
  market today, while implementing some powerful language features in the
  vendor-specific sphere of procedure programming.</para>

  <section id="ufb-about-history">
    <title>Firebird's origins</title>

    <para>The product which today we call Firebird has been around, under a
    variety of names, for well over 20 years. An overview of its interesting
    and at times stormy history can be found at <ulink
    url="http://www.firebirdsql.org/index.php?op=history">http://www.firebirdsql.org/index.php?op=history</ulink>.</para>

    <para>Developed as an ongoing open source project, Firebird is a
    descendant of Borland's InterBase 6.0 Open Edition code which was released
    for open source development in July 2000 under the InterBase Public
    License (IPL).</para>

    <para>The Firebird source code tree is maintained on the international
    open source code foundry, Sourceforge, by a large team of professional
    developers who donate time and expertise voluntarily to fix, develop and
    enhance this popular and feature-rich database management software.</para>

    <para>The Firebird software products are distributed completely free of
    registration or deployment fees.</para>
  </section>

  <section id="ufb-about-foundation">
    <title>The Firebird Foundation</title>

    <para>The <orgname>Firebird Foundation</orgname> supports the development
    of Firebird in several ways, among other things by issuing grants to
    developers. Many people and companies who find Firebird useful have
    already become members or sponsors. If you like Firebird, please consider
    doing the same. Making a one-time donation is also possible. You can find
    more information at <ulink
    url="http://www.firebirdsql.org/index.php?op=ffoundation">http://www.firebirdsql.org/index.php?op=ffoundation</ulink>.</para>
  </section>

  <section id="ufb-about-features">
    <title>Overview of Features</title>

    <para>Firebird is true client/server software, architected for use in
    local and wide-area networks. Accordingly, its core consists of two main
    software programs:</para>

    <orderedlist>
      <listitem>
        <para>The database server, which runs on a network host
        computer.</para>
      </listitem>

      <listitem>
        <para>The client library, through which users on remote workstations
        connect to and communicate with databases managed by the
        server.</para>
      </listitem>
    </orderedlist>

    <para>TCP/IP is the network protocol of choice for Firebird on all
    platforms, although Windows Networking (NetBEUI) is supported too for
    networks having Firebird running on a Windows NT, 2000/2003 or XP host
    server.</para>

    <para>It is possible to run both server and client on the same physical
    machine and have the client connect to the server through TCP/IP local
    loopback. On Windows machines, a single local client can also connect to a
    database by sharing inter-process communications memory with the Firebird
    server. On Linux, even direct I/O to the database file is possible, but
    only with the so-called <firstterm>Classic Server</firstterm> – more on
    this later.</para>

    <section id="ufb-about-features-server">
      <title>Firebird Server</title>

      <para>Firebird server runs on a number of platforms, including:</para>

      <itemizedlist>
        <listitem>
          <para>Windows NT 4.0, 2000, and 2003 (Server or Workstation
          editions)</para>
        </listitem>

        <listitem>
          <para>Windows 95/98 and ME</para>
        </listitem>

        <listitem>
          <para>Windows XP (Home, Professional and .NET editions)</para>
        </listitem>

        <listitem>
          <para>Linux, FreeBSD and several other UNIX-like operating
          systems</para>
        </listitem>

        <listitem>
          <para>MacOS X (Darwin)</para>
        </listitem>
      </itemizedlist>

      <para>The <firstterm>Firebird Embedded Server</firstterm> is a special
      variant which contains both the client and the server functionality. You
      can ship it with your application, unpack it, and it's ready to roll.
      You'll learn more about its up- and downsides later on in this
      guide.</para>
    </section>

    <section id="ufb-about-features-clients">
      <title>Firebird clients</title>

      <para>A remote workstation or a local client requires only the shared
      client library – a dynamic link library on Windows and a shared object
      on other platforms – and an application program which can pass and
      receive parameters to and from the library's interface.</para>

      <para>Generally, you would also install a copy of the client library on
      the host server, for use with several of the Firebird command-line
      utilities and/or any server-based management programs you might use.
      Many of these utilities can also be run remotely, however. A remote
      system administrator can manage some of the essential services provided
      by these utilities by accessing them through a host service controller
      process.</para>

      <para>For Java connectivity, Firebird provides the JDBC/JCA-compliant
      Jaybird driver. Client applications written against Jaybird can run on
      any Java-enabled platform, even those that don't support Firebird
      server. The legacy InterClient Java driver is no longer maintained, due
      to its severe limitations.</para>
    </section>

    <section id="ufb-about-features-summary">
      <title>Summary of features</title>

      <table frame="all" id="ufb-about-tbl-features">
        <?dbfo keep-together='auto'?>

        <title>Summary of features</title>

        <tgroup cols="2">
          <colspec colname="colFeature" colwidth="1*" />

          <colspec colname="colDescription" colwidth="3*" />

          <thead valign="top">
            <row>
              <entry><para>Firebird Feature</para></entry>

              <entry><para>Description</para></entry>
            </row>
          </thead>

          <tbody valign="top">
            <row>
              <entry><para><emphasis>SQL compliance</emphasis></para></entry>

              <entry><para>Firebird conforms to entry-level SQL-92
              requirements. It has support for formal, cascading referential
              integrity constraints, updatable views, and full, left and right
              outer joins. Client applications can link to the Firebird API, a
              messenger function library for client-server
              communication.</para><para>The Firebird server supports
              development of dynamic SQL client applications. It also ships
              with a host-language precompiler and in-engine language support
              for embedded SQL development in host languages such as C/C++ and
              COBOL.</para><para>Several extended SQL features are also
              implemented. Some of them (e.g. stored procedures and triggers,
              SQL roles, and segmented blob support) anticipate SQL99
              extensions.</para></entry>
            </row>

            <row>
              <entry><para><emphasis>Multiuser database
              access</emphasis></para></entry>

              <entry><para>Firebird is designed to provide for many clients
              accessing a single database at the same time. In their turn,
              client applications can have active connections to several
              databases simultaneously. Firebird will automatically protect
              cross-database transactions through a two-phase commit
              mechanism. Triggers and stored procedures can post
              <firstterm>event messages</firstterm> to inform interested
              clients of specific events in the database.</para></entry>
            </row>

            <row>
              <entry><para><emphasis>User-defined
              functions</emphasis></para></entry>

              <entry><para>User-defined functions (UDFs) can be written and
              stored on the server machine in external shared object
              libraries. Once a UDF is declared to a Firebird database as an
              external function, it is available to any client application
              accessing the database, as if it were a native function of the
              SQL language.</para><para>This flexibility accounts for the very
              small footprint of the server engine: Firebird database
              application solutions are deployed without the extra cargo of a
              server that supports hundreds of unused functions natively in
              its engine.</para></entry>
            </row>

            <row>
              <entry><para><emphasis>Transactions</emphasis></para></entry>

              <entry><para>Firebird client applications have full control over
              the starting, committing, and rolling back of transactions.
              Every transaction exists in its own consistent context,
              determining isolation from other transactions and resolution of
              multi-user conflicts at commit time.</para><para>A transaction's
              uncommitted view of the state of the database is kept consistent
              with its initial view and any changes which are made within its
              own context.</para><para>Client applications can isolate
              multiple tasks in separate transactions simultaneously. A single
              transaction can bridge a task involving an unlimited number of
              connected databases, with an automatic two-phase commit
              mechanism to protect integrity, should a database become
              unavailable before the transaction completes.</para><!--<para>For more detailed information, see
  <link linkend="ufb-transactions">Transactions
   in Firebird</link>.</para>--></entry>
            </row>

            <row>
              <entry><para><emphasis>Multigenerational
              architecture</emphasis></para></entry>

              <entry><para>Firebird uses a multi-generational architecture, by
              which multiple versions of each data row can be created and
              stored as necessary if a transaction modifies the row. In a
              background thread, extinct versions are garbage-collected and
              the current and pending versions are managed, in order to give
              each transaction a persistent view and to resolve priorities
              when update conflicts occur.</para><para>The multi-generational
              architecture of Firebird means that readers never block writers.
              Firebird allows any row to be visible to any transaction, even
              if other transactions have updates pending for it. Readers may
              of course see another (older) <emphasis>version</emphasis> of
              the row than the writer.</para><para>The Firebird engine
              maintains version statistics which it uses, in conjunction with
              the isolation and lock response attributes of each transaction,
              to determine which transaction gets priority when conflicting
              updates are requested.</para></entry>
            </row>

            <row>
              <entry><para><emphasis>Optimistic row-level
              locking</emphasis></para></entry>

              <entry><para>In Firebird, user-initiated locking is unnecessary.
              The engine locks a row to other transactions only when a
              transaction signals that it is ready to update it. This is known
              as optimistic row-level locking. This style of locking has great
              advantages in increasing throughput and reducing serialisation
              for client tasks, when compared with systems that lock rows, or
              even entire tables, from the moment the transaction
              begins.</para></entry>
            </row>

            <row>
              <entry><para><emphasis>BLOB filters</emphasis></para></entry>

              <entry><para>Firebird provides the capability for the developer
              to supply filter code for converting stored BLOBs from one
              format to another. For example, a BLOB filter could be written
              to output a text BLOB, stored in RichText format, as XML or
              HTML; or to output a stored JPEG image in PNG format. The
              filters, written in the developer's language of choice and
              compiled for the server platform OS, are stored on the server
              machine in a shared object library and must be declared to
              databases that want to use them, exactly like UDF
              libraries.</para></entry>
            </row>

            <row>
              <entry><para><emphasis>Database
              administration</emphasis></para></entry>

              <entry><para>Firebird comes with various command-line utilities
              for managing databases and servers. Thanks to its open source
              character, Firebird is also abundantly supported by open source,
              freeware and commercial GUI database administration utilities.
              Using his or her preferred constellation of tools, the database
              administrator can<itemizedlist spacing="compact">
                  <listitem>
                    <para>manage server security;</para>
                  </listitem>

                  <listitem>
                    <para>make and restore database backups;</para>
                  </listitem>

                  <listitem>
                    <para>perform maintenance tasks;</para>
                  </listitem>

                  <listitem>
                    <para>produce database and lock manager statistics.</para>
                  </listitem>
                </itemizedlist></para></entry>
            </row>

            <row>
              <entry><para><emphasis>Security</emphasis></para></entry>

              <entry><para>Firebird maintains a security database storing user
              names and encrypted passwords. It is located in the root
              directory of the server installation and controls access to the
              server itself and all databases in its physical domain. The
              <database class="user">SYSDBA</database> account has full,
              destructive privileges to all databases on the
              server.</para><para>Firebird provides the capability to define
              <database>ROLE</database>s at database level. Within a database,
              only <database class="user">SYSDBA</database> and the database
              owner have full privileges; otherwise, all privileges must be
              granted explicitly to individual users and/or roles. It is
              possible – and recommended – to define a set of permissions for
              a role and then grant that role to specific users as
              required.</para><para><database class="user">SYSDBA</database>
              can add and delete users' accounts names and modify the details
              of an account, including the password. Passwords, once stored,
              are not human-readable, even by <database
              class="user">SYSDBA</database>.</para><para>Physical database
              paths can be shielded from the client using
              <firstterm>aliases</firstterm>. Access to database files,
              external tables, and UDFs can be restricted to explicitly
              specified filesystem trees only – or even tighter – by setting
              the appropriate parameters in the configuration file
              <filename>firebird.conf</filename>.</para><para>The Firebird
              server process can – and if possible, should – run as a user
              other than the system or superuser account (<systemitem
              class="username">root</systemitem>, <systemitem
              class="username">Administrator</systemitem> or <systemitem
              class="username">localsystem</systemitem>). This will limit the
              damage in the unfortunate event that the server should be
              hacked.</para></entry>
            </row>

            <row>
              <entry><para><emphasis>Backups and
              restores</emphasis></para></entry>

              <entry><para>Firebird comes with two command-line backup/restore
              tools, each with its own specific advantages and
              limitations.</para><para>The <firstterm>gbak</firstterm> utility
              backs up a database by dismantling it into a compact structure
              in which metadata, data and database-level configuration
              settings are stored separately. It also performs some important
              housekeeping tasks on the database during the backup
              process.</para><para>The generated backup is not readable as a
              database file; you need gbak again to restore it. In restore
              mode, gbak can create a new file or overwrite an existing
              database.</para><para>Because of the useful tasks it performs,
              experienced Firebird programmers often use a gbak backup-restore
              cycle to</para><itemizedlist spacing="compact">
                  <listitem>
                    <para>erase obsolete record versions;</para>
                  </listitem>

                  <listitem>
                    <para>change the database page size;</para>
                  </listitem>

                  <listitem>
                    <para>convert the database from single- to
                    multifile;</para>
                  </listitem>

                  <listitem>
                    <para>safely transfer a database to another operating
                    system;</para>
                  </listitem>

                  <listitem>
                    <para>upgrade InterBase or Firebird databases to a newer
                    version;</para>
                  </listitem>

                  <listitem>
                    <para>make a metadata-only backup in order to create a
                    new, empty database with the same structure.</para>
                  </listitem>
                </itemizedlist><para>Several user-friendly GUI front-ends are
              available for gbak, both as stand-alone tools and as utilities
              within some of the database administration programs. It is also
              very simple to set up OS-level scripts, batch files or daemons
              to perform backups.</para><para>A more recent tool by the name
              of <firstterm>nbackup</firstterm> lacks most of gbak's
              housekeeping and compaction features, but has the following
              advantages:</para><itemizedlist spacing="compact">
                  <listitem>
                    <para>Incremental backups, which save time and disk
                    space;</para>
                  </listitem>

                  <listitem>
                    <para>Backups at hardware speed;</para>
                  </listitem>

                  <listitem>
                    <para>Backups possible with your own preferred
                    (non-Firebird) tool.</para>
                  </listitem>
                </itemizedlist><para>Neither backup tool requires exclusive
              access to the database. Other clients can remain connected and
              perform operations on the database while the backup is in
              progress.</para><!--<para>For more information on this subject,
              see <link linkend="ufb-backup">Database Backup and
              Restore</link>.</para>--></entry>
            </row>

            <row>
              <entry><para><emphasis>Other tools</emphasis></para></entry>

              <entry><para>Firebird ships with several other command-line
              administration tools, including:</para><variablelist>
                  <varlistentry>
                    <term>isql</term>

                    <listitem>
                      <para>An SQL query utility which can run dynamic SQL
                      (DSQL) and several specialised statements interactively
                      or in batch from a script. This is the tool to use for
                      quick access to information about your metadata and for
                      running data definition scripts<!-- – see the <link
     linkend="ufb-isql">Interactive SQL Utility</link>
     chapter-->.</para>
                    </listitem>
                  </varlistentry>

                  <varlistentry>
                    <term>gfix</term>

                    <listitem>
                      <para>A database housekeeping and repair kit for minor
                      corruptions. This tool is often used in combination with
                      some of the utilities in the gbak program for
                      identifying and recovering damaged data<!-- – see <link
     linkend="ufb-gfix">Housekeeping &amp; Repair:
     gfix</link>-->.</para>
                    </listitem>
                  </varlistentry>

                  <varlistentry>
                    <term>gsec</term>

                    <listitem>
                      <para>A command-line interface to the security
                      database<!-- – see <link linkend="ufb-security">Managing
     Security</link>-->.</para>
                    </listitem>
                  </varlistentry>

                  <varlistentry>
                    <term>gstat</term>

                    <listitem>
                      <para>A utility for printing out the current
                      configuration and statistics of a running database.<!-- See <link linkend="ufb-stats">Server and Database
      Statistics</link>.--></para>
                    </listitem>
                  </varlistentry>

                  <varlistentry>
                    <term>fb_lock_print</term>

                    <listitem>
                      <para>A utility for printing out the Lock Manager report
                      on a running database.<!-- See <link linkend="ufb-stats">Server and Database
      Statistics</link>.--></para>
                    </listitem>
                  </varlistentry>
                </variablelist></entry>
            </row>

            <row>
              <entry><para><emphasis>Services API</emphasis></para></entry>

              <entry><para>Firebird provides a <firstterm>Services
              API</firstterm> which developers can use to perform a number of
              security and management tasks programmatically (and if needed,
              remotely). Strictly speaking, the Services API (part of the
              client library) is the interface to the <firstterm>Services
              Manager</firstterm> (part of the server), but the terms are
              often used interchangeably.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
  </section>

  <section id="ufb-about-arch">
    <title>Classic and Superserver architectures</title>

    <para>Firebird server comes in two distinct architectures for managing
    multiple client connections: <firstterm>Superserver</firstterm> and
    <firstterm>Classic Server</firstterm>. For Windows, both architectures are
    included in a single download. For Linux, there are separate download
    packages which have either CS or SS in their name, indicating the type of
    server.</para>

    <para>The Classic server starts a separate process for each connection to
    a database under its control. Each client is allocated its own database
    cache buffers. Superserver serves many clients simultaneously within a
    single process. Instead of separate server processes for each connection
    it uses threads of a single process and pools the database cache buffers
    for use by all connections.</para>

    <para>If you are upgrading from a previous version of Firebird or faced
    with the choice between Classic and Superserver, the information listed in
    the comparison table below will help to explain what the differences are
    and how they affect database operations.</para>

    <para>The server architecture does not affect the structure of databases
    or the way client applications work. Firebird databases built on a Classic
    server can be operated on by an equivalent Superserver server, and vice
    versa. The same client library can connect to either server.</para>

    <para>In other words, if you begin by installing the Superserver
    distribution of Firebird on your Linux host machine and, later, decide to
    change to Classic, any applications you wrote for your Superserver-hosted
    databases will work unmodified and the databases themselves will continue
    to behave as they did before.</para>

    <section id="ufb-about-arch-compare">
      <title>Comparison of characteristics</title>

      <para>The table below gives a quick overview of the main differences
      between Classic and Superserver. These differences will be discussed in
      more detail in the subsections that follow.</para>

      <!--Also look at the Firebird Enterprise Whitepaper for some Super-Classic differences.-->

      <table frame="all" id="ufb-about-tbl-arch">
        <title>Comparison of Classic and Superserver architectures</title>

        <tgroup cols="3">
          <colspec colname="colFeature" colwidth="2*" />

          <colspec colname="colClassic" colwidth="3*" />

          <colspec colname="colSuper" colwidth="3*" />

          <spanspec align="center" nameend="colSuper" namest="colClassic"
                    spanname="spanArch" />

          <thead valign="top">
            <row>
              <entry align="center" morerows="1"><para>FEATURE</para></entry>

              <entry spanname="spanArch"><para>ARCHITECTURE</para></entry>
            </row>

            <row>
              <entry align="center"><para>Classic</para></entry>

              <entry align="center"><para>Superserver</para></entry>
            </row>
          </thead>

          <tbody valign="top">
            <row>
              <entry><para><emphasis>Availability</emphasis></para></entry>

              <entry><para>Linux: All Firebird versions</para><para>Windows:
              Firebird 1.5 and higher</para></entry>

              <entry><para>All Firebird versions</para></entry>
            </row>

            <row>
              <entry><para><emphasis>Executable</emphasis></para></entry>

              <entry><para><filename>fb_inet_server(.exe)</filename></para></entry>

              <entry><para><filename>fbserver(.exe)</filename></para></entry>
            </row>

            <row>
              <entry><para><emphasis>Processes</emphasis></para></entry>

              <entry><para>Multiple, on demand, one instance per client
              connection.</para></entry>

              <entry><para>Single server process, each client request is
              handled in its own thread.</para></entry>
            </row>

            <row>
              <entry><para><emphasis>Lock management</emphasis></para></entry>

              <entry><para><systemitem
              class="process">gds_lock_mgr</systemitem>
              process.</para></entry>

              <entry><para>Implemented as a thread.</para></entry>
            </row>

            <row>
              <entry><para><emphasis>Local access on
              Linux</emphasis></para></entry>

              <entry><para>Fast, direct I/O to the database file is possible.
              But you can also connect network-style via <systemitem
              class="systemname">localhost</systemitem>.</para></entry>

              <entry><para>Network-style access only.</para></entry>
            </row>

            <row>
              <entry morerows="1"><para><emphasis>Local access on
              Windows</emphasis></para></entry>

              <entry><para>Versions 1.x: network-style access
              only.</para></entry>

              <entry><para>Versions 1.x: single (!) local connections can be
              made using IPC (IPServer). Network-style local connections are
              also supported.</para></entry>
            </row>

            <row>
              <entry spanname="spanArch"><para>Firebird 2 and higher: both
              architectures support safe, multiple local connections on
              Windows machines through XNET.</para></entry>
            </row>

            <row>
              <entry><para><emphasis>Resource use</emphasis></para></entry>

              <entry><para>One cache per process.</para></entry>

              <entry><para>One cache space for all clients.</para></entry>
            </row>

            <!--First find out more about locks
before re-including this:-->

            <!--
<row>
  <entry><para><emphasis>Security on
    Linux</emphasis></para></entry>
  <entry><para>Executable and Lock Manager
    must run as 
   <systemitem 
    class="username">root</systemitem>.</para>
  </entry>

  <entry><para>Can run as a non-root uid, 
    with access restrictions.</para></entry>
</row>
-->

            <!--
Executable runs as firebird alright.
Although it seems to be "bad" to setuid 
this...
Lock manager as root, despite being 
setuid+setgid and owner is firebird!-->

            <row>
              <entry><para><emphasis>Multiprocessor
              support</emphasis></para></entry>

              <entry><para>Yes.</para></entry>

              <entry><para>No. Performance may drop if not properly
              configured.</para></entry>
            </row>

            <row>
              <entry><para><emphasis>Services Manager +
              API</emphasis></para></entry>

              <entry><para>Partial in Firebird 1.5, full in 1.5.1 and
              up.</para></entry>

              <entry><para>Full.</para></entry>
            </row>

            <row>
              <entry><para><emphasis>Guardian on
              Windows</emphasis></para></entry>

              <entry><para>On Firebird 2 Classic/Win only, a bug prevents you
              from using the Guardian if you run Firebird as an
              <emphasis>application</emphasis>.</para></entry>

              <entry><para>The Guardian functions with all Windows
              Superservers, whether run as a service or as an
              application.</para></entry>
            </row>

            <row>
              <entry><para><emphasis>Guardian on
              Linux</emphasis></para></entry>

              <entry><para>You can't use the Guardian with
              <emphasis>any</emphasis> Firebird Classic version on Linux. This
              is by design.</para></entry>

              <entry><para>The Guardian functions with all Linux
              Superservers.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <section>
        <title>Executable and processes</title>

        <variablelist>
          <varlistentry>
            <term>Classic</term>

            <listitem>
              <para>Runs on demand as multiple processes. When a client
              attempts to connect to a Firebird database, one instance of the
              <filename>fb_inet_server</filename> executable is initiated and
              remains dedicated to that client connection for the duration of
              the connection.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Superserver</term>

            <listitem>
              <para>Runs as a single process, an invocation of the
              <filename>fbserver</filename> executable.
              <filename>fbserver</filename> is started once by the owning user
              or by a boot script. This process runs always, waiting for
              connection requests. Even when no client is connected to a
              database on the server, <filename>fbserver</filename> continues
              to run quietly. On Linux, the Superserver process does not
              depend on <systemitem class="process">inetd</systemitem>; it
              waits for connection requests to the <systemitem
              class="service">gds_db</systemitem> service itself.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section>
        <title>Lock management</title>

        <variablelist>
          <varlistentry>
            <term>Classic</term>

            <listitem>
              <para>For every client connection a separate server process is
              started to execute the database engine, and each server process
              has a dedicated database cache. The server processes contend for
              access to the database, so a Lock Manager subsystem is required
              to arbitrate and synchronise concurrent page access among the
              processes.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Superserver</term>

            <listitem>
              <para>The lock manager is implemented as a thread in the
              <filename>fbserver</filename> executable. It uses inter-thread
              communication mechanisms to resolve access issues. Therefore, an
              external process isn't needed.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section>
        <title>Resource use</title>

        <variablelist>
          <varlistentry>
            <term>Classic</term>

            <listitem>
              <para>Each instance of <filename>fb_inet_server</filename> keeps
              a cache of database pages in its memory space. While the
              resource use per client is greater than in Superserver, Classic
              uses fewer overall resources when the number of concurrent
              connections is low.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Superserver</term>

            <listitem>
              <para>Employs one single cache space which is shared by client
              attachments, allowing more efficient use and management of cache
              memory when the number of simultaneous connections grows
              larger.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section>
        <title>Local access on Linux</title>

        <variablelist>
          <varlistentry>
            <term>Classic</term>

            <listitem>
              <para>On Linux only, the Classic architecture permits
              application processes that are running on the same machine as
              the database and server to perform I/O on database files
              directly. Note that this is only possible if the client process
              has sufficient filesystem-level access rights to the database as
              well as some other files. Network-style access to the local
              server (via <systemitem
              class="systemname">localhost</systemitem> or equivalents) is
              supported on all systems.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Superserver</term>

            <listitem>
              <para>You can only connect to local databases via TCP/IP
              loopback, using <systemitem
              class="systemname">localhost</systemitem> or any other host name
              / IP number that points back to the local machine. (Many clients
              may let you get away with omitting the hostname though, and
              supply <systemitem class="systemname">localhost</systemitem> to
              the server automatically.)</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section>
        <title>Local access on Windows</title>

        <variablelist>
          <varlistentry>
            <term>Classic</term>

            <listitem>
              <para>In Windows Classic versions prior to Firebird 2, you can
              only connect to local databases via network loopback, using
              <systemitem class="systemname">localhost</systemitem> or an
              equivalent. Firebird 2 and higher support local access through
              the reliable XNET protocol, which permits multiple simultaneous
              connections in a safe way.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Superserver</term>

            <listitem>
              <para>Firebird 1.5 and earlier Superservers use the IPC
              (IPServer) protocol for single local connections on Windows.
              This method is not as fast and certainly not as robust as the
              direct I/O on Linux Classic. Furthermore, IPC needs an internal
              window to exchange messages. As a consequence, local access on
              these versions is only available if:</para>

              <itemizedlist>
                <listitem>
                  <para>the Firebird process runs as <systemitem
                  class="username">Localsystem</systemitem> (the default),
                  <emphasis>and</emphasis></para>
                </listitem>

                <listitem>
                  <para>the configuration parameter
                  <parameter>CreateInternalWindow</parameter> has not been set
                  to 0 (you would set this to 0 if you want to run multiple
                  servers simultaneously).</para>
                </listitem>
              </itemizedlist>

              <para>Firebird 2 uses a different local protocol – XNET – which
              doesn't suffer from these restrictions, and supports multiple
              connections.</para>

              <para>Of course if local protocol is disabled you can still
              connect to any local database via <systemitem
              class="systemname">localhost</systemitem>, provided TCP/IP is
              available on your system.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <!-- First find out more about locks etc.: -->

      <!--
      <section>
        <title>Security on Linux and UNIX platforms</title>

        <variablelist>
          <varlistentry>
            <term>Classic</term>

            <listitem>
              <para><filename>fb_lock_mgr</filename> must run as root. The
              lock manager must have the superuser privilege to send signals
              to the processes.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Superserver</term>

            <listitem>
              <para>Can be configured to run as a non-superuser uid for
              enhanced security. The permissions on database files can be
              restricted to allow only the Firebird server uid (or gid) to
              access the database.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
-->

      <!--Classic lockman DOES run as root (at least in 1.5), but MUST it?-->

      <!--How is Classic lock management implemented on Windows? No fb_lock_mgr there!-->

      <section>
        <title>Multiprocessor support</title>

        <variablelist>
          <varlistentry>
            <term>Classic</term>

            <listitem>
              <para>Supports SMP (symmetrical multi-processor) systems. This
              improves the performance in case of multiple unrelated
              connections.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Superserver</term>

            <listitem>
              <para>No SMP support. In fact, Superserver performance may drop
              significantly on multiprocessor Windows systems as a result of
              processor swapping. To prevent this from happening, set the
              <parameter>CpuAffinityMask</parameter> parameter in the
              configuration file <filename>firebird.conf</filename>.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section>
        <title>Services Manager and Services API</title>

        <variablelist>
          <varlistentry>
            <term>Classic</term>

            <listitem>
              <para>Versions up to and including 1.5 have a partially
              implemented Services Manager, supporting tasks like
              backup/restore, database shutdown etc. over the network. Other
              service tasks have to be performed locally using the client
              tools that come with Firebird. Versions 1.5.1 and up have a full
              Services Manager, just like Superserver.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Superserver</term>

            <listitem>
              <para>The Services Manager, present in all Firebird Superserver
              versions, allows you to perform management tasks
              (backup/restore, database shutdown, user management, stats,
              etc.) programmatically. You can connect to the Services Manager
              over the network and thus perform these tasks remotely.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section>
        <title>Use of the Firebird Guardian</title>

        <para>The Firebird Guardian is a utility which monitors the server
        process and attempts to restart the server if it terminates
        abnormally.</para>

        <variablelist>
          <varlistentry>
            <term>Classic</term>

            <listitem>
              <para>Due to a bug in the Guardian, it can't be used with
              Firebird 2 Classic on Windows if run as an application. If
              Firebird runs as a service, the Guardian works correctly. Since
              the Windows 9x–ME line doesn't support services, you can't use
              the Guardian with Firebird 2 Classic on those systems. This bug
              does not exist in Firebird 1.5 versions.</para>

              <para>(The Guardian can't be used <emphasis>at all</emphasis>
              with Firebird Classic on Linux, but that's by design, not by
              accident.)</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Superserver</term>

            <listitem>
              <para>The Guardian works fine with Superserver on both Linux and
              Windows, whether as a service or as an application.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>

    <section id="ufb-about-arch-which">
      <title>Which is better?</title>

      <para>In abstract terms, neither architecture is a clear winner. One
      architecture generally outshines the other under specific workload
      conditions:</para>

      <itemizedlist>
        <listitem>
          <para>A single application running on the same machine as the server
          is faster with the Classic architecture.</para>
        </listitem>

        <listitem>
          <para>For a Linux application embedded in an appliance, Classic is
          better, because it provides a single process from application to
          disk.</para>
        </listitem>

        <listitem>
          <para>On a single-processor machine, an application with larger
          numbers of frequently contending clients is faster with Superserver,
          because of the shared cache.</para>
        </listitem>

        <listitem>
          <para>On SMP machines, small numbers of clients whose data updates
          do not impact others' tasks work better in the Classic
          architecture.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section id="ufb-about-arch-embedded">
      <title>Embedded server</title>

      <para>Besides Superserver and Classic, there's Firebird Embedded Server
      for Windows, which you can download as a separate package. This is not
      really a different architecture, but a Firebird client plus Superserver
      rolled into one DLL for ease of deployment. Although it has a number of
      downsides, it may be an attractive option if you want to include
      Firebird with your Windows application. More on Embedded Server in the
      <link linkend="ufb-cs-embedded">client-server chapter</link>.</para>
    </section>
  </section>

  <section id="ufb-about-sysreq">
    <title>System Requirements</title>

    <para>Firebird makes efficient use of system resources. Both server and
    clients are modest in their disk space and memory requirements. Some
    specific details are provided below.</para>

    <section id="ufb-about-sysreq-memory">
      <title>Server Memory (all platforms)</title>

      <table frame="all" id="ufb-about-tbl-memreq">
        <title>Memory Requirements</title>

        <tgroup cols="2">
          <colspec colname="colItem" colwidth="1*" />

          <colspec colname="colResourceUsage" colwidth="3*" />

          <tbody valign="top">
            <row>
              <entry><para><emphasis>Firebird server
              process</emphasis></para></entry>

              <entry><para>When there are no connections, the Firebird server
              uses around 2–4 Mb of memory, depending on the
              version.</para></entry>
            </row>

            <row>
              <entry><para><emphasis>Client
              connections</emphasis></para></entry>

              <entry><para>Each client connection uses from 115 Kb to several
              Mb of additional memory on the server host. The exact load
              depends on the Firebird version, the structure of the database
              and the client characteristics.</para></entry>
            </row>

            <row>
              <entry><para><emphasis>Database cache</emphasis></para></entry>

              <entry><para>Memory is also needed for database page caching.
              The default cache size is configurable, in database pages.
              Superserver shares a single cache among all connections and
              increases cache automatically when required. Classic creates an
              individual cache per connection.</para></entry>
            </row>

            <row>
              <entry><para><emphasis>Other server
              tasks</emphasis></para></entry>

              <entry><para>The server uses additional memory for lock
              management, in-memory sorting, and so on. For some tasks the
              amount can be configured.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section id="ufb-about-sysreq-diskspace">
      <title>Disk space</title>

      <para>Disk space requirements vary somewhat according to platform,
      architecture and Firebird version.</para>

      <table frame="all" id="ufb-about-tbl-diskreq">
        <title>Approximate Disk Space Requirements</title>

        <tgroup cols="3">
          <colspec colname="colItem" colwidth="3*" />

          <colspec colname="colDiskspace15" colwidth="3*" />

          <colspec colname="colDiskspace2" colwidth="3*" />

          <thead valign="top">
            <row>
              <entry><para> </para></entry>

              <entry><para>Firebird 1.5.x</para></entry>

              <entry><para>Firebird 2</para></entry>
            </row>
          </thead>

          <tbody valign="top">
            <row>
              <entry><para><emphasis>Complete server
              installation</emphasis></para></entry>

              <entry><para>9–12 Mb</para></entry>

              <entry><para>12–14 Mb</para></entry>
            </row>

            <row>
              <entry><para><emphasis>Client library</emphasis></para></entry>

              <entry><para>350 Kb – 2 Mb <footnote id="ufb-libs-footnote"
                  label="*">
                  <para>The <quote>high end</quote> of the client library
                  range is occupied by Linux Classic clients, which contain a
                  complete Firebird engine.</para>
                </footnote></para></entry>

              <entry><para>380 Kb – 2.5 Mb <footnoteref
              linkend="ufb-libs-footnote" /></para></entry>
            </row>

            <row>
              <entry><para><emphasis>Command-line
              tools</emphasis></para></entry>

              <entry><para>1.5 Mb</para></entry>

              <entry><para>1.7–2.7 Mb</para></entry>
            </row>

            <row>
              <entry><para><emphasis>Temporary server
              space</emphasis></para></entry>

              <entry nameend="colDiskspace2"
              namest="colDiskspace15"><para>Additional disk space is required
              for temporary storage during operation, e.g. for sorting.
              Location(s) and maximum amount of space used can be configured
              according to performance demands and the likely volume and type
              of data to be handled.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>In addition, third-party database management utilities will
      require 1 Mb to several dozen Mb, depending on which one(s) you
      choose.</para>
    </section>

    <section id="ufb-about-sysreq-specs">
      <title>Minimum machine specifications</title>

      <note>
        <para>Wherever Intel processors are mentioned, the equivalent or
        better AMD processors can also be used.</para>
      </note>

      <!--Add figures for Firebird 2 to table. See release notes, install notes, scripts etc.-->

      <table align="left" frame="all" id="ufb-about-tbl-machreq">
        <title>Minimum machine specifications</title>

        <tgroup cols="4">
          <colspec colname="colOS" colwidth="1*" />

          <colspec colname="colCPU" colwidth="2*" />

          <colspec colname="colRAM" colwidth="2*" />

          <colspec colname="colVersion" colwidth="2*" />

          <thead valign="top">
            <row>
              <entry><para>OS</para></entry>

              <entry><para>Version</para></entry>

              <entry><para>CPU</para></entry>

              <entry><para>RAM</para></entry>
            </row>
          </thead>

          <tbody valign="top">
            <row>
              <entry><para><emphasis>Microsoft
              Windows</emphasis></para></entry>

              <entry><para>NT 4.0 with Service Pack 6a</para><para>Windows
              95/98/ME</para><para>Windows 2000 (SP1) /
              2003</para><para>Windows XP</para></entry>

              <entry><para>486DX2 66 MHz (Pentium 100
              recommended)</para></entry>

              <entry><para>16Mb for client</para><para>64Mb for multi-client
              server</para></entry>
            </row>

            <row>
              <entry><para><emphasis>Linux</emphasis></para></entry>

              <entry><para><emphasis>1.0:</emphasis></para><para>Red Hat 6.2,
              TurboLinux 6.0, SuSE 7.0, Mandrake
              7.2</para><para><emphasis>1.5:</emphasis></para><para>glibc
              2.2.5, libstdc++ 5.0</para><para>RedHat 8.0, Mandrake 9.0, SuSE
              8.0</para><para>On SuSE 7.3, <emphasis>first</emphasis> install
              <filename>libgcc-3.2-44.i586.rpm</filename> and
              <filename>libstdc++-3.2-44.i586.rpm</filename></para></entry>

              <entry><para>1.0: Intel 486</para><para>1.5:
              Pentium</para></entry>

              <entry><para>16Mb for client</para><para>64Mb for multi-client
              server</para></entry>
            </row>

            <row>
              <entry><para><emphasis>Solaris</emphasis></para></entry>

              <entry><para>2.6 or 2.7</para></entry>

              <entry><para>SPARC, UltraSPARC</para></entry>

              <entry><para>16Mb for client</para><para>64Mb for multi-client
              server</para></entry>
            </row>

            <row>
              <entry><para><emphasis>Solaris</emphasis></para></entry>

              <entry><para>?</para></entry>

              <entry><para>Intel</para></entry>

              <entry><para>32 Mb</para><para>64 Mb for multi-client
              server</para></entry>
            </row>

            <row>
              <entry><para><emphasis>Apple Macintosh</emphasis></para></entry>

              <entry><para>Mac OS/X (Darwin)</para></entry>

              <entry><para>See distribution notes</para></entry>

              <entry><para>See distribution notes</para></entry>
            </row>

            <row>
              <entry><para><emphasis>FreeBSD</emphasis></para></entry>

              <entry><para>v.4.x</para></entry>

              <entry><para>See distribution notes</para></entry>

              <entry><para>See distribution notes</para></entry>
            </row>

            <row>
              <entry><para><emphasis>HP-UX</emphasis></para></entry>

              <entry><para>10.0</para></entry>

              <entry><para>See distribution notes</para></entry>

              <entry><para>See distribution notes</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
  </section>
</chapter>