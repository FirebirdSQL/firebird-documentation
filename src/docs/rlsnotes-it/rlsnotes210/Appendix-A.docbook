<?xml version="1.0" encoding="UTF-8"?>
<appendix id="rnfb210-appx-A" xreflabel="Appendice A">
  <appendixinfo>
    <title>Le nuove funzioni integrate</title>
  </appendixinfo>

  <para>
    <emphasis role="bold">(Firebird 2.1)</emphasis>

    <!-- release versione FB 2.1.3 == traduzione allineata -->
  </para>

  <informaltable id="rnfb21-builtins">
    <tgroup cols="3">
      <colspec align="center" colname="col-func" colwidth="2*" />

      <colspec align="center" colname="col-fmt" colwidth="4*" />

      <colspec align="left" colname="col-desc" colwidth="6*" />

      <spanspec colsep="0" nameend="col-desc" namest="col-func"
                spanname="span-example" />

      <thead>
        <row>
          <entry align="center">Funzione</entry>

          <entry align="center">Formato</entry>

          <entry align="center">Descrizione</entry>
        </row>
      </thead>

      <tbody>
        <row>
          <entry>
            <emphasis>ABS</emphasis>
          </entry>

          <entry>ABS( &lt;number&gt; )</entry>

          <entry>Riporta il valore assoluto di un numero.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select abs(amount) from transactions;
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>ACOS</emphasis>
          </entry>

          <entry>ACOS( &lt;number&gt; )</entry>

          <entry>Riporta l'arco coseno di un numero . L'argomento deve essere
          compreso tra -1 e 1 e riporta un valore tra 0 e π (cioè
          3.1416...).</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select acos(x) from y;
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>ASCII_CHAR</emphasis>
          </entry>

          <entry>ASCII_CHAR( &lt;number&gt; )</entry>

          <entry>Riporta carattere ASCII specificato dal codice. L'argomento
          deve essere tra 0 e 255, il risultato è nel set di caratteri
          NONE.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select ascii_char(x) from y;
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>ASCII_VAL</emphasis>
          </entry>

          <entry>ASCII_VAL( &lt;string&gt; )</entry>

          <entry>
            <para>Riporta il codice ASCII del primo carattere della
            stringa.</para>

            <orderedlist>
              <listitem>
                <para>Vale 0 se la stringa è vuota</para>
              </listitem>

              <listitem>
                <para>Dà un errore se il primo carattere è multi-byte</para>
              </listitem>
            </orderedlist>
          </entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select ascii_val(x) from y;
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>ASIN</emphasis>
          </entry>

          <entry>ASIN( &lt;number&gt; )</entry>

          <entry>Riporta l'arco seno di un numero reale compreso tra -1 e 1.
          Riporta un risultato compreso tra -π/2 e π/2.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select asin(x) from y;
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>ATAN</emphasis>
          </entry>

          <entry>ATAN( &lt;number&gt; )</entry>

          <entry>Riporta l'arco tangente di un numero reale che è un valore
          compreso tra -π/2 e π/2.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select atan(x) from y;
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>ATAN2</emphasis>
          </entry>

          <entry>ATAN2( &lt;number1&gt;, &lt;number2&gt; )</entry>

          <entry>Riporta l'arco tangente del rapporto number1/number2. Ripora
          un valore tra -π e π.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select atan2(x, y) from z;
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>BIN_AND</emphasis>
          </entry>

          <entry>BIN_AND( &lt;number&gt; [, &lt;number&gt; ...] )</entry>

          <entry>Riporta l'AND binario effettuato su tutti gli argomenti
          presenti.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select bin_and(flags, 1) from x;
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>BIN_OR</emphasis>
          </entry>

          <entry>BIN_OR( &lt;number&gt; [, &lt;number&gt; ...] )</entry>

          <entry>Riporta l'OR binario effettuato su tutti gli argomenti
          presenti.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select bin_or(flags1, flags2) from x;
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>BIN_SHL</emphasis>
          </entry>

          <entry>BIN_SHL( &lt;n1&gt;, &lt;n2&gt; )</entry>

          <entry>Riporta lo shift left binario effettuato sugli argomenti
          interi (n1 &lt;&lt; n2).</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select bin_shl(flags1, 1) from x;
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>BIN_SHR</emphasis>
          </entry>

          <entry>BIN_SHR( &lt;n1&gt;, &lt;n2&gt; )</entry>

          <entry>Riporta lo shift right binario effettuato sugli argomenti
          interi (n1 &gt;&gt; n2).</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select bin_shr(flags1, 1) from x;
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>BIN_XOR</emphasis>
          </entry>

          <entry>BIN_XOR( &lt;number&gt; [, &lt;number&gt; ...] )</entry>

          <entry>Riporta lo XOR binario effettuato su tutti gli argomenti
          presenti.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select bin_xor(flags1, flags2) from x;
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>BIT_LENGTH</emphasis>
          </entry>

          <entry>BIT_LENGTH( &lt;string&gt; | &lt;string_expr&gt; )</entry>

          <entry>Riporta la lunghezza di una stringa in bit</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select
    rdb$relation_name,
    bit_length(rdb$relation_name),
    bit_length(trim(rdb$relation_name))
  from rdb$relations;
              </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>CEIL | CEILING</emphasis>
          </entry>

          <entry>{ CEIL | CEILING }( &lt;number&gt; )</entry>

          <entry>Riporta il più piccolo intero maggiore o uguale all'argomento
          dato.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example" title="Examples">
            <programlisting>
    1) select ceil(val) from x;
    2) select ceil(2.1), ceil(-2.1) from rdb$database;  -- riporta 3, -2
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>CHAR_LENGTH | CHARACTER_LENGTH</emphasis>
          </entry>

          <entry>CHAR_LENGTH( &lt;string&gt; | &lt;string_expr&gt; )</entry>

          <entry>Riporta il numero di caratteri in una stringa o
          un'espressione.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select
    rdb$relation_name,
    char_length(rdb$relation_name),
    char_length(trim(rdb$relation_name))
  from rdb$relations;
              </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>COS</emphasis>
          </entry>

          <entry>COS( &lt;number&gt; )</entry>

          <entry>Valuta il coseno di un angolo espresso in radianti riportando
          un valore compreso tra -1 ed 1.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select cos(x) from y;
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>COSH</emphasis>
          </entry>

          <entry>COSH( &lt;number&gt; )</entry>

          <entry>Riporta il coseno iperbolico di un numero.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select cosh(x) from y;
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>COT</emphasis>
          </entry>

          <entry>COT( &lt;number&gt; )</entry>

          <entry>Riporta la cotangente, cioè 1 / tan(argument).</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select cot(x) from y;
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>DATEADD</emphasis>
          </entry>

          <entry>Vedi sotto</entry>

          <entry>Riporta un valore date/time/timestamp aumentato o diminuito
          secondo quanto specificato.</entry>
        </row>

        <row rowsep="0">
          <entry colsep="0" spanname="span-example">Formato:</entry>
        </row>

        <row rowsep="0">
          <entry colsep="0" spanname="span-example">
            <programlisting>
DATEADD( &lt;number&gt; &lt;timestamp_part&gt; TO &lt;date_time&gt; )
DATEADD( &lt;timestamp_part&gt;, &lt;number&gt;, &lt;date_time&gt; )
timestamp_part ::= { YEAR | MONTH | DAY | HOUR | 
                     MINUTE | SECOND | MILLISECOND }
              </programlisting>
          </entry>
        </row>

        <row rowsep="0">
          <entry colsep="0" spanname="span-example">
            <literallayout>
1. YEAR, MONTH e DAY non possono essere usati con espression di tipo TIME.
2. HOUR, MINUTE, SECOND e MILLISECOND non possono essere usati con espressioni di tipo DATE.
3. Tutti i timestamp_part possono essere usati con espressioni TIMESTAMP.
              </literallayout>
          </entry>
        </row>

        <row rowsep="0">
          <entry colsep="0" spanname="span-example">Esempi</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
select dateadd(day, -1, current_date) as yesterday
  from rdb$database;
  
  /* oppure con la sintassi alternativa */
select dateadd(-1 day to current_date) as yesterday
  from rdb$database;
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>DATEDIFF</emphasis>
          </entry>

          <entry>Vedi sotto</entry>

          <entry>Riporta un valore numerico che rappresenta l'intervallo di
          tempo esistente fra i due valori date/time/timestamp.</entry>
        </row>

        <row rowsep="0">
          <entry colsep="0" spanname="span-example">Formato:</entry>
        </row>

        <row rowsep="0">
          <entry colsep="0" spanname="span-example">
            <programlisting>
DATEDIFF( &lt;timestamp_part&gt; FROM &lt;date_time&gt; TO &lt;date_time&gt; )
DATEDIFF( &lt;timestamp_part&gt;, &lt;date_time&gt;, &lt;date_time&gt; )
timestamp_part ::= { YEAR | MONTH | DAY |
                     HOUR | MINUTE | SECOND | MILLISECOND }
              </programlisting>
          </entry>
        </row>

        <row rowsep="0">
          <entry colsep="0" spanname="span-example">
            <literallayout>
1.  Il valore riportato è positivo quando il secondo termine è maggiore
del primo, zero se sono uguali, negativo viceversa.
2.  Il confronto di espressioni DATE con espressioni TIME non è valido.
3.  YEAR, MONTH, e DAY non possono essere usati con tipi TIME.
4.  HOUR, MINUTE, SECOND e MILLISECOND non possono essere usati con espressioni DATE.
5.  Tutti i valori timestamp_part possono essere usati con espressioni timestamp.
              </literallayout>
          </entry>
        </row>

        <row rowsep="0">
          <entry colsep="0" spanname="span-example">Esempio</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
select datediff(
  DAY, (cast('TOMORROW' as date) -10), current_date) 
    as datediffresult
from rdb$database;
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>DECODE</emphasis>
          </entry>

          <entry>Vedi sotto</entry>

          <entry>DECODE è un'abbreviazione per l'espressione CASE ... WHEN ...
          ELSE.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <para>Formato:</para>

            <programlisting>
DECODE( &lt;expression&gt;, &lt;search&gt;, &lt;result&gt;
  [ , &lt;search&gt;, &lt;result&gt; ... ] [, &lt;default&gt; ])
            </programlisting>

            <para>Esempio</para>

            <programlisting>
  select decode(state, 0, 'deleted', 1, 'active', 'unknown') from things;
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>EXP</emphasis>
          </entry>

          <entry>EXP( &lt;number&gt; )</entry>

          <entry>Riporta l'esponenziale dell'argomento.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select exp(x) from y;
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>FLOOR</emphasis>
          </entry>

          <entry>FLOOR( &lt;number&gt; )</entry>

          <entry>Riporta il maggiore intero che è minore o uguale
          all'argomento dato.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
    1) select floor(val) from x;
    2) select floor(2.1), floor(-2.1)
          from rdb$database;  -- riporta 2, -3
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>GEN_UUID</emphasis>
          </entry>

          <entry>GEN_UUID()</entry>

          <entry>Riporta un numero univoco del tipo UUID. Non ha
          argomenti.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
 insert into records (id) value (gen_uuid());
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>HASH</emphasis>
          </entry>

          <entry>HASH( &lt;string&gt; )</entry>

          <entry>Riporta il calcolo dell'HASH di una stringa.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select hash(x) from y;
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>LEFT</emphasis>
          </entry>

          <entry>LEFT( &lt;string&gt;, &lt;number&gt; )</entry>

          <entry>Riporta il numero specificato di caratteri della parte
          sinistra di una stringa data.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select left(name, char_length(name) - 10)
        from people
        where name like '% FERNANDES';
            </programlisting>

            <literallayout>
1. La prima posizione di una stringa è 1, non 0.
2. Se l'argomento &lt;number&gt; non è intero, si applica un arrotondamento di tipo bancario.
            </literallayout>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>LN</emphasis>
          </entry>

          <entry>LN( &lt;number&gt; )</entry>

          <entry>Riporta il logaritmo del numero dato.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select ln(x) from y;
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>LOG</emphasis>
          </entry>

          <entry>LOG( &lt;number&gt;, &lt;number&gt; )</entry>

          <entry>LOG(x, y) riporta il logaritmo in base x di y.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select log(x, 10) from y;
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>LOG10</emphasis>
          </entry>

          <entry>LOG10( &lt;number&gt; )</entry>

          <entry>Riporta il logaritmo in base decimale dell'argomento.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select log10(x) from y;
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>LOWER</emphasis>
          </entry>

          <entry>LOWER( &lt;string&gt; )</entry>

          <entry><emphasis role="bold">(v.2.0.x)</emphasis> Riporta la stringa
          data convertita tutta in caratteri minuscoli.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
isql -q -ch dos850

SQL&gt; create database 'test.fdb';
SQL&gt; create table t (c char(1) character set dos850);
SQL&gt; insert into t values ('A');
SQL&gt; insert into t values ('E');
SQL&gt; insert into t values ('Á');
SQL&gt; insert into t values ('É');
SQL&gt; select c, lower(c) from t;
C      LOWER
====== ======
A      a
E      e
Á      á
É      é
    </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>LPAD</emphasis>
          </entry>

          <entry>LPAD( &lt;string&gt;, &lt;number&gt; [, &lt;string&gt; ]
          )</entry>

          <entry>LPAD(string1, length, string2) aggiunge ripetutamente string2
          all'inizio di string1 finchè la lunghezza totale non raggiunge
          length.</entry>
        </row>

        <row rowsep="0">
          <entry colsep="0" spanname="span-example">
            <literallayout>
1.  Se la seconda stringa manca, si considera uno spazio.
2.  Se la stringa risultante supera la lunghezza data, viene troncata la seconda stringa.</literallayout>
          </entry>
        </row>

        <row rowsep="0">
          <entry rowsep="0" spanname="span-example">Esempio</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select lpad(x, 10) from y;
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>MAXVALUE</emphasis>
          </entry>

          <entry>MAXVALUE( &lt;value&gt; [, &lt;value&gt; ...] )</entry>

          <entry>Riporta il maggiore fra una lista di valori.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select maxvalue(v1, v2, 10) from x;
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>MINVALUE</emphasis>
          </entry>

          <entry>MINVALUE( &lt;value&gt; [, &lt;value&gt; ... )</entry>

          <entry>Riporta il minore di una lista di valori.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select minvalue(v1, v2, 10) from x;
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>MOD</emphasis>
          </entry>

          <entry>MOD( &lt;number&gt;, &lt;number&gt; )</entry>

          <entry>Modulo: MOD(X, Y) è il resto della divisione di X per
          Y.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select mod(x, 10) from y;
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>OCTET_LENGTH</emphasis>
          </entry>

          <entry>OCTET_LENGTH( &lt;string&gt; | &lt;string_expr&gt; )</entry>

          <entry>Riporta la lunghezza in bytes di una stringa o di
          un'espressione.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select
    rdb$relation_name,
    octet_length(rdb$relation_name),
    octet_length(trim(rdb$relation_name))
  from rdb$relations;
              </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>OVERLAY</emphasis>
          </entry>

          <entry>Vedi sotto</entry>

          <entry>Sostituisce in string1 i caratteri a partire da &lt;start&gt;
          per &lt;length&gt; con &lt;string2&gt; e la riporta.</entry>
        </row>

        <row rowsep="0">
          <entry colsep="0" spanname="span-example">Formato:</entry>
        </row>

        <row rowsep="0">
          <entry colsep="0" spanname="span-example">
            <programlisting>
OVERLAY( &lt;string1&gt; PLACING &lt;string2&gt; FROM &lt;start&gt; [ FOR &lt;length&gt; ] )
              </programlisting>
          </entry>
        </row>

        <row rowsep="0">
          <entry colsep="0" spanname="span-example">
            <literallayout>
La funzione OVERLAY è equivalente a:
              </literallayout>
          </entry>
        </row>

        <row rowsep="0">
          <entry colsep="0" spanname="span-example">
            <programlisting>
  SUBSTRING(&lt;string1&gt;, 1 FOR &lt;start&gt; - 1) || &lt;string2&gt; ||
  SUBSTRING(&lt;string1&gt;, &lt;start&gt; + &lt;length&gt;)
              </programlisting>

            <literallayout>
1. La prima posizione in una stringa è 1, e non 0.
2. Se gli argomenti &lt;start&gt; e/o &lt;length&gt; non sono interi, si applica l'arrotondamento bancario.
3. Se non si specifica &lt;length&gt;, si intende CHAR_LENGTH( &lt;string2&gt; ).
            </literallayout>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>PI</emphasis>
          </entry>

          <entry>PI()</entry>

          <entry>Non ha argomenti e riporta la costante π (3.1459...).</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  val = PI();
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>POSITION</emphasis>
          </entry>

          <entry>Vedi sotto</entry>

          <entry>Da' la posizione iniziale della prima stringa all'interno
          della seconda a partire dall'inizio. Nella seconda forma si può dare
          la posizione dalla quale far iniziare la ricerca, per cui i
          caratteri precedenti vengono ignorati.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  POSITION(  &lt;string&gt; IN &lt;string&gt;  )
  POSITION( &lt;string&gt;, &lt;string&gt; [, &lt;posizione-iniziale&gt;] )
            </programlisting>
          </entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select rdb$relation_name
    from rdb$relations
    where position('RDB$' IN rdb$relation_name) = 1;
/* */
SELECT position ( 'ser', 'Essere o non essere', 10 ) 
from rdb$database; -- riporta 16
            </programlisting>

            <para>Il secondo esempio riporta 16 perchè la prima occasione in
            cui la sottostringa 'ser' compare è precedente al decimo carattere
            e viene quindi ignorata.</para>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>POWER</emphasis>
          </entry>

          <entry>POWER( &lt;number&gt;, &lt;number&gt; )</entry>

          <entry>POWER(X, Y) riporta X elevato alla potenza Y.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select power(x, 10) from y;
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>RAND</emphasis>
          </entry>

          <entry>RAND()</entry>

          <entry>Non ha argomenti e riporta un numero casuale tra 0 and
          1.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select * from x order by rand();
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>REPLACE</emphasis>
          </entry>

          <entry>REPLACE( &lt;stringtosearch&gt;, &lt;findstring&gt;,
          &lt;replstring&gt; )</entry>

          <entry>Sostituisce &lt;findstring&gt; con &lt;replstring&gt; tutte
          le volte in cui compare in &lt;stringtosearch&gt;.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select replace(x, ' ', ',') from y;
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>REVERSE</emphasis>
          </entry>

          <entry>REVERSE( &lt;value&gt; )</entry>

          <entry>Rovescia i caratteri della stringa. Utile per creare
          espressioni indice per stringhe da destra a sinistra.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  create index people_email on people
    computed by (reverse(email));
  select * from people
    where reverse(email) starting with reverse('.br');
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>RIGHT</emphasis>
          </entry>

          <entry>RIGHT( &lt;string&gt;, &lt;number&gt; )</entry>

          <entry>Riporta il numero specificato di caratteri della parte destra
          di una stringa data.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select right(rdb$relation_name, char_length(rdb$relation_name) - 4)
    from rdb$relations
    where rdb$relation_name like 'RDB$%';
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>ROUND</emphasis>
          </entry>

          <entry>ROUND( &lt;number&gt;, [&lt;number&gt;] )</entry>

          <entry>Riporta il numero arrotondato alla scala specificata.</entry>
        </row>

        <row rowsep="0">
          <entry colsep="0" spanname="span-example">Esempio</entry>
        </row>

        <row rowsep="0">
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select round(salary * 1.1, 0) from people;
              </programlisting>
          </entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <literallayout>
Se la scala, cioè il secondo parametro, è negativo o omesso, si arrotonda la parte intera.
Ad esempio, ROUND(123.456, -1) riporta 120.000.
              </literallayout>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>RPAD</emphasis>
          </entry>

          <entry>RPAD( &lt;string1&gt;, &lt;length&gt; [, &lt;string2&gt; ]
          )</entry>

          <entry>Aggiunge &lt;string2&gt; alla fine di &lt;string1&gt; finchè
          la lunghezza della stringa risultante raggiunge
          &lt;length&gt;.</entry>
        </row>

        <row rowsep="0">
          <entry colsep="0" spanname="span-example">Esempio</entry>
        </row>

        <row rowsep="0">
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select rpad(x, 10) from y;
            </programlisting>
          </entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <literallayout>
1.  Se manca la seconda stringa si prende uno spazio.
2.  Se la stringa risultante supera la lunghezza data, si tronca
l'ultima ripetizione di &lt;string2&gt;.
            </literallayout>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>SIGN</emphasis>
          </entry>

          <entry>SIGN( &lt;number&gt; )</entry>

          <entry>Riporta 1, 0, o -1 in funzione del segno del parametro, cioè
          a seconda che sia rispettivamente positivo, zero o negativo.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select sign(x) from y;
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>SIN</emphasis>
          </entry>

          <entry>SIN( &lt;number&gt; )</entry>

          <entry>Riporta il seno di un angolo espresso in radianti.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select sin(x) from y;
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>SINH</emphasis>
          </entry>

          <entry>SINH( &lt;number&gt; )</entry>

          <entry>Riporta il seno iperbolico di un numero.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select sinh(x) from y;
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>SQRT</emphasis>
          </entry>

          <entry>SQRT( &lt;number&gt; )</entry>

          <entry>Riporta la radice quadrata di un numero.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select sqrt(x) from y;
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>TAN</emphasis>
          </entry>

          <entry>TAN( &lt;number&gt; )</entry>

          <entry>Riporta la tangente di un angolo espresso in
          radianti.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select tan(x) from y;
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>TANH</emphasis>
          </entry>

          <entry>TANH( &lt;number&gt; )</entry>

          <entry>Riporta la tangente iperbolica di un numero.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  select tanh(x) from y;
            </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>TRIM</emphasis>
          </entry>

          <entry>Vedi sotto</entry>

          <entry><emphasis role="bold">(V.2.0.x)</emphasis> Elimina i
          caratteri terminali (per default gli spazi) dalla fine sinistra e/o
          destra di una stringa secondo quanto specificato.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
TRIM &lt;left paren&gt; [ [ &lt;trim specification&gt; ] [ &lt;trim character&gt; ]
  FROM ] &lt;value expression&gt; &lt;right paren&gt;

   &lt;trim specification&gt; ::=  LEADING  | TRAILING  | BOTH

   &lt;trim character&gt; ::= &lt;value expression&gt;
              </programlisting>

            <para>
              <emphasis role="bold">Regole</emphasis>
            </para>

            <orderedlist>
              <listitem>
                <para>Se non si specifica &lt;trim specification&gt;, si
                assume BOTH.</para>
              </listitem>

              <listitem>
                <para>Se manca il &lt;trim character&gt;, si assume '
                '.</para>
              </listitem>

              <listitem>
                <para>Se sono specificati &lt;trim specification&gt; e/o
                &lt;trim character&gt;, deve esserci anche
                <token>FROM</token>.</para>
              </listitem>

              <listitem>
                <para>Se mancano sia &lt;trim specification&gt; che &lt;trim
                character&gt;, <token>FROM</token> non va aggiunto.</para>
              </listitem>
            </orderedlist>

            <para>Esempio A)</para>

            <programlisting>
  select
    rdb$relation_name,
    trim(leading 'RDB$' from rdb$relation_name)
  from rdb$relations
    where rdb$relation_name starting with 'RDB$';
              </programlisting>

            <para>Esempio B)</para>

            <programlisting>
  select
    trim(rdb$relation_name) || ' is a system table'
  from rdb$relations
    where rdb$system_flag = 1;
              </programlisting>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>TRUNC</emphasis>
          </entry>

          <entry>TRUNC( &lt;number&gt; [, &lt;number&gt; ] )</entry>

          <entry>Riporta la parte intera di un numero fino ad una scala
          specificata.</entry>
        </row>

        <row>
          <entry colsep="0" spanname="span-example">
            <programlisting>
  1) select trunc(x) from y;
  2) select trunc(-2.8), trunc(2.8)
       from rdb$database;  -- riporta -2, 2
  3) select trunc(987.65, 1), trunc(987.65, -1)
       from rdb$database;  -- riporta 987.60, 980.00
            </programlisting>
          </entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>
</appendix>