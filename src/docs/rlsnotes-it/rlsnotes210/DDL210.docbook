<?xml version="1.0" encoding="UTF-8"?>
<chapter id="rnfb210-ddl">
  <chapterinfo>
    <title>Novità sul Data Definition Language (DDL)</title>
  </chapterinfo>

  <title revisionflag="added">Novità del DDL</title>

  <para>In questo capitolo sono elencati le aggiunte ed i miglioramenti
  aggiunti alla parte relativa al linguaggio di definizione dei dati SQL (DDL)
  durante lo sviluppo di Firebird 2. Quelli evidenziati come introdotti nella
  versione 2.1 sono disponibili solo nei database con ODS 11.1 e
  successive.</para>

  <section id="rnfb210-ddl-links">
    <!-- Level 1 section == release versione 2.1.2 == traduzione allineata-->

    <title>Ricerca rapida</title>

    <itemizedlist spacing="compact">
      <listitem>
        <para><xref linkend="rnfb210-dbtriggers" /><!-- Database Triggers --></para>
      </listitem>

      <listitem>
        <para><xref linkend="rnfb210-globaltemp" /><!-- Global Temporary Tables --></para>
      </listitem>

      <listitem>
        <para><xref linkend="rnfb210-rnfb20x-ddl-views-aliases" /><!-- Column Aliases in CREATE VIEW --></para>
      </listitem>

      <listitem>
        <para><xref linkend="rnfb210-rnfb20x-ddl-crttrg" /><!-- CREATE TRIGGER SQL2003 Variant --></para>
      </listitem>

      <listitem>
        <para><xref linkend="rnfb210-rnfb20x-ddl-genalways" /><!--Alternative Syntax for Computed Fields --></para>
      </listitem>

      <listitem>
        <para><xref linkend="rnfb20x-ddl-syntax-create-sequence" /><!-- CREATE SEQUENCE --></para>
      </listitem>

      <listitem>
        <para><xref linkend="rnfb20x-ddl-syntax-revoke-admin" /><!-- REVOKE ADMIN OPTION --></para>
      </listitem>

      <listitem>
        <para><xref linkend="rnfb20x-ddl-syntax-setdrop" /><!-- SET/DROP DEFAULT Clauses --></para>
      </listitem>

      <listitem>
        <para><xref linkend="rnfb20x-ddl-syntax-exceptions" /><!-- Syntaxes for Changing Exceptions --></para>
      </listitem>

      <listitem>
        <para><xref linkend="rnfb20x-ddl-syntax-alter-ext-func" /><!-- ALTER EXTERNAL FUNCTION --></para>
      </listitem>

      <listitem>
        <para><xref linkend="rnfb20x-ddl-syntax-comment" /><!-- COMMENT Statement --></para>
      </listitem>

      <listitem>
        <para><xref linkend="rnfb20x-ddl-syntax-view-extension" /><!-- CREATE VIEW Extensions --></para>
      </listitem>

      <listitem>
        <para><xref linkend="rnfb20x-ddl-usage-foreign_keys" /><!-- Create FKs Without Exclusive Access --></para>
      </listitem>

      <listitem>
        <para><xref linkend="rnfb20x-ddl-usage-view-updates" /><!-- Changed Logic for View Updates --></para>
      </listitem>

      <listitem>
        <para><xref linkend="rnfb20x-ddl-usage-blob-symbols" /><!-- Descriptive Identifiers for BLOB Subtypes --></para>
      </listitem>

      <listitem>
        <para><xref linkend="rnfb210-intl-crtcolln" /><!-- CREATE COLLATION statement --></para>
      </listitem>
    </itemizedlist>

    <section id="rnfb210-dbtriggers" xreflabel="Trigger a livello di database">
      <!-- Level 2 section -->

      <sectioninfo>
        <title>Trigger a livello database</title>

        <author>
          <firstname>Adriano</firstname>

          <surname>dos Santos Fernandes</surname>
        </author>
      </sectioninfo>

      <para><emphasis role="bold">(v.2.1)</emphasis> Un <firstterm>trigger di
      database</firstterm> è un modulo scritto in PSQL che viene eseguito in
      associazione ad un evento di connessione o di transazione. Gli eventi e
      relativo ordine sono come segue.-</para>

      <variablelist>
        <varlistentry>
          <term>
            <filename>CONNECT</filename>
          </term>

          <listitem>
            <itemizedlist>
              <listitem>
                <para>Viene stabilita una connessione ad un database</para>
              </listitem>

              <listitem>
                <para>parte una transazione</para>
              </listitem>

              <listitem>
                <para>vengono eseguiti i trigger, le eccezioni non gestite
                fanno rollback della transazione e disconnettono il client e
                sono riportate al client</para>
              </listitem>

              <listitem>
                <para>la transazione è confermata</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <filename>DISCONNECT</filename>
          </term>

          <listitem>
            <itemizedlist>
              <listitem>
                <para>Parte una transazione</para>
              </listitem>

              <listitem>
                <para>Vengono eseguiti i trigger, le eccezioni non gestite
                fanno rollback della transazione e disconnettono la
                connessione e sono ignorate</para>
              </listitem>

              <listitem>
                <para>La transazione è confermata</para>
              </listitem>

              <listitem>
                <para>Si viene scollegati</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <filename>TRANSACTION START</filename>
          </term>

          <listitem>
            <para>I trigger sono eseguiti alla creazione della nuova
            transazione; le eccezioni non gestite sono riportate al client e
            fa rollback della transazione.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <filename>TRANSACTION COMMIT</filename>
          </term>

          <listitem>
            <para>I trigger sono eseguiti alla conferma della transazione; le
            eccezioni non gestite fanno roll back del punto di salvataggio del
            trigger, la conferma è abortita e l'eccezione riportata al
            client.</para>

            <note>
              <para>Per le transazioni <quote>two-phase</quote>, i trigger
              vengono lanciati in fase di <quote>preparazione</quote>, non in
              fase di conferma.</para>
            </note>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <filename>TRANSACTION ROLLBACK</filename>
          </term>

          <listitem>
            <para>I trigger sono eseguiti durante il rollback della
            transazione. Tutte le modifiche sono ovviamente cancellateinsieme
            al resto della transazione. Le eccezioni non gestite sono
            ignorate</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>
        <emphasis role="bold">Syntax</emphasis>
      </para>

      <programlisting>
&lt;database-trigger&gt; ::=
  {CREATE | RECREATE | CREATE OR ALTER}
    TRIGGER &lt;name&gt;
    [ACTIVE | INACTIVE]
    ON &lt;event&gt;
    [POSITION &lt;n&gt;]
  AS
    BEGIN
      ...
    END

&lt;event&gt; ::=
  CONNECT
    | DISCONNECT
    | TRANSACTION START
    | TRANSACTION COMMIT
    | TRANSACTION ROLLBACK
      </programlisting>

      <para>
        <emphasis role="bold">Regole e limitazioni</emphasis>
      </para>

      <orderedlist numeration="arabic">
        <listitem>
          <para>Il tipo di un trigger di database non può essere
          cambiato.</para>
        </listitem>

        <listitem>
          <para>Il permesso per i comandi CREATE, RECREATE, CREATE OR ALTER, o
          DROPsu un trigger di database è limitato al proprietario del
          database e a SYSDBA.</para>
        </listitem>
      </orderedlist>

      <section id="rnfb210-dbtriggers-utils">
        <!-- Level 3 section -->

        <title>Supporto ai trigger di database nei programmi di
        ultilità</title>

        <para>Sono stati aggiunti nuovi parametri a gbak, nbackup e isql per
        inibire l'esecuzione dei trigger di database. Sono disponibili solo al
        proprietario del database e a SYSDBA:</para>

        <programlisting>
  gbak -nodbtriggers
  isql -nodbtriggers
  nbackup -T
        </programlisting>
      </section>
    </section>

    <section id="rnfb210-globaltemp"
             xreflabel="Tabelle temporanee globali (Global Temporary Tables)">
      <!-- Level 2 section -->

      <sectioninfo>
        <title>Tabelle temporanee globali (Global Temporary Tables)</title>

        <author>
          <firstname>Vlad</firstname>

          <surname>Khorsun</surname>
        </author>
      </sectioninfo>

      <para><emphasis role="bold">(v.2.1)</emphasis> Le tabelle temporanee
      globali (GTT) sono tabelle memorizzate permanentemente nel metadata del
      sistema, ma con dati temporanei. I dati provenienti da differenti
      connessioni (o transazioni in funzione della definizione) sono isolati
      gli uni dagli altri, ma il metadata della GTT è condiviso fra tutte le
      connessioni e transazioni.</para>

      <para>Pertanto ci sono due tipi di GTT:</para>

      <itemizedlist>
        <listitem>
          <para>con dati persistenti per tutta la durata della connessione un
          cui è riferita la specifica GTT</para>
        </listitem>

        <listitem>
          <para>con dati persistenti per tutta la durata della transazione in
          cui si è utilizzata la GTT</para>
        </listitem>
      </itemizedlist>

      <section id="rnfb210-globaltemp-rules">
        <!-- Level 3 section -->

        <title>Sintassi e regole per le GTT</title>

        <programlisting>
CREATE GLOBAL TEMPORARY TABLE
  ...
  [ON COMMIT &lt;DELETE | PRESERVE&gt; ROWS]
	</programlisting>

        <para>Questo crea il metadata della tabella temporanea nel
        sistema.</para>

        <para>La clausola ON COMMIT imposta il tipo della tabella
        temporanea:</para>

        <variablelist>
          <varlistentry>
            <term>ON COMMIT PRESERVE ROWS</term>

            <listitem>
              <para>tutti i dati lasciati nella tabella alla fine della
              transazione restano a disposizione nel database fino al termine
              della connessione.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>ON COMMIT DELETE ROWS</term>

            <listitem>
              <para>tutti i dati nella tabella data sono eliminati dal
              database immediatamente alla fine della transazione. ON COMMIT
              DELETE ROWS è il default se non si usa la clausola opzionale ON
              COMMIT.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>CREATE GLOBAL TEMPORARY TABLE</term>

            <listitem>
              <para>è un comando DDL che è processato dal motore come una
              normale CREATE TABLE. Allo stesso modo, non è possibile la
              CREATE, o la DROP di una GTT all'interno di un trigger o di una
              procedura.</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>
          <emphasis role="bold">Tipo della relazione</emphasis>
        </para>

        <para>Le definizione delle GTT sono distinte nel catalogo di sistema
        l'una dall'altra e dalle tabelle permanenti, tramite il valore del
        campo <filename>RDB$RELATIONS.RDB$RELATION_TYPE</filename>:</para>

        <itemizedlist>
          <listitem>
            <para>Una GTT con l'opzione ON COMMIT PRESERVE ROWS ha
            RDB$RELATION_TYPE = 4</para>
          </listitem>

          <listitem>
            <para>Una GTT con l'opzione ON COMMIT DELETE ROWS ha
            RDB$RELATION_TYPE = 5.</para>
          </listitem>
        </itemizedlist>

        <note>
          <para>Per la completa lista dei valori, vedere RDB$TYPES.</para>
        </note>

        <para>
          <emphasis role="bold">Supporto alle caratteristiche del
          linguaggio</emphasis>
        </para>

        <para>Le stesse funzionalità che si possono utilizzare con le tabelle
        standard (indici, trigger, vincoli a livello di campo e di tabella)
        sono disponibili anche nelle GTT, con certe limitazioni sulle
        correlazioni tra GTT e tabelle normali.-</para>

        <orderedlist numeration="loweralpha">
          <listitem>
            <para>sono proibiti riferimenti tra GTT e tabelle regolari</para>
          </listitem>

          <listitem>
            <para>Una GTT con ON COMMIT PRESERVE ROWS non può avere
            riferimenti con una GTT con ON COMMIT DELETE ROWS</para>
          </listitem>

          <listitem>
            <para>Un vincolo di dominio non può riferirsi a nessuna
            GTT.</para>
          </listitem>
        </orderedlist>
      </section>

      <section id="rnfb210-globaltemp-impl">
        <!-- Level 3 section -->

        <title>Note di implementazione</title>

        <para>Un'istanza di una GTT, come insieme di record di dati creati e
        visibili all'interno una data transazione o connessione, è creata
        quando la GTT è utilizzata per la prima volta, di solito al momento di
        una <quote>prepare</quote>. Ogni istanza ha il suo insieme privato di
        pagine nel quale sono memorizzate i dati e gli indici. I record e gli
        indici hanno la stessa struttura fisica delle tabelle
        permanenti.</para>

        <para>Al termine della connessione o transazione, tutte le pagine
        dell'istanza di una GTT sono rilasciate immediatamente. Assomiglia a
        quanto accade quando si esegue una DROP TABLE, eccetto che la
        definizione del metadata non si perde, naturalmente. Questa però è
        molto più veloce della cancellazione tradizionale fatta record per
        record e successiva garbage collection delle versioni dei record
        deletati.</para>

        <note>
          <para>Questa cancellazione non fa scattare i trigger di DELETE,
          pertanto non siate tentati di definire trigger di Before o After
          Delete ritenendo di poter ottenere una qualche esecuzione
          <quote>post mortem</quote> dei vostri dati!</para>
        </note>

        <para>I dati e le pagine indice di tutte le istanze delle GTT sono
        messe in file temporanei separati. Ogni connessione ha il suo file
        temporaneo creato nel momento in cui la connessione fa riferimento a
        una qualche GTT.</para>

        <note>
          <para>Questi files temporanei sono sempre aperti con Forced Writes =
          OFF, indipendentemente dall'impostazione delle Forced Writes.</para>
        </note>

        <para>Non c'è nessun limite al numero di istanze di GTT che possono
        coesistere contemporaneamente. Avendo N transazioni attive
        simultaneamente e se ogni transazione ha un riferimento ad una certa
        GTT allora ci saranno N istanze della GTT.</para>
      </section>
    </section>

    <section id="rnfb210-rnfb20x-ddl-views">
      <!-- Level 2 section -->

      <sectioninfo>
        <title>Miglioramenti alle viste</title>

        <author>
          <firstname>D.</firstname>

          <surname>Yemanov</surname>
        </author>
      </sectioninfo>

      <para>In Firebird 2.1 sono stati fatti un paio di miglioramenti alle
      definizioni delle viste.-</para>

      <section id="rnfb210-rnfb20x-ddl-views-aliases"
               xreflabel="Uso degli alias di colonna in CREATE VIEW">
        <!-- Level 3 section -->

        <title>Uso degli alias di colonna in CREATE VIEW</title>

        <para>
          <ulink
          url="http://tracker.firebirdsql.org/browse/CORE-831">Caratteristica
          richiesta CORE-831</ulink>
        </para>

        <para><emphasis role="bold">(v.2.1)</emphasis> Gli alias di colonna
        possono essere utilizzati come nomi di colonna nelle definizioni di
        una vista.</para>

        <para>
          <emphasis role="bold">Esempio</emphasis>
        </para>

        <programlisting>
CREATE VIEW V_TEST AS
  SELECT ID,
         COL1 AS CODICE,
         COL2 AS NOME
  FROM TABELLA;
        </programlisting>
      </section>
    </section>

    <section id="rnfb210-rnfb20x-ddl-crttrg"
             xreflabel="CREATE TRIGGER standard SQL2003">
      <!-- Level 2 section -->

      <sectioninfo>
        <title>CREATE TRIGGER in accordo a SQL2003</title>

        <author>
          <firstname>A.</firstname>

          <surname>dos Santos Fernandes</surname>
        </author>
      </sectioninfo>

      <para>
        <ulink url="http://tracker.firebirdsql.org/browse/CORE-711">Richiesta
        CORE-711</ulink>
      </para>

      <para><emphasis role="bold">(v.2.1)</emphasis> È disponibile una
      sintassi alternativa per il CREATE TRIGGER che è in accordo a
      SQL2003.</para>

      <para>
        <emphasis role="bold">Schemi sintattici</emphasis>
      </para>

      <para>Forma esistente</para>

      <programlisting>
create trigger t1
  FOR atable
  [active] before insert or update
as
  begin
    ...
  end
      </programlisting>

      <para>Forma SQL2003</para>

      <programlisting>
create trigger t2 
  [active] before insert or update 
  ON atable
as 
  begin
    ...
  end
      </programlisting>

      <para>Notare la posizione differente della clausola identificante la
      tabella e le differenti parole chiave che precedeno il nome della
      tabella (esistente FOR; SQL2003: ON).</para>

      <para>Entrambe le sintassi sono valide e disponibili per tutti i CREATE
      TRIGGER, RECREATE TRIGGER e CREATE OR ALTER TRIGGER.</para>
    </section>

    <section id="rnfb210-rnfb20x-ddl-genalways"
             xreflabel="Sisntassi alternativa per i campi calcolati">
      <!-- Level 2 section -->

      <sectioninfo>
        <title>Alternativa conforme a SQL2003 per i campi calcolati</title>

        <author>
          <firstname>D.</firstname>

          <surname>Yemanov</surname>
        </author>
      </sectioninfo>

      <para>
        <ulink url="http://tracker.firebirdsql.org/browse/CORE-1386">Richiesta
        CORE-1386</ulink>
      </para>

      <para><emphasis role="bold">(v.2.1)</emphasis> Per definire un campo
      calcolato in una CREATE TABLE o ALTER TABLE, è stata resa disponibile la
      sintassi alternativa <command>GENERATED ALWAYS AS</command> conforme a
      SQL.</para>

      <para>
        <emphasis role="bold">Sintassi</emphasis>
      </para>

      <programlisting>
&lt;nome colonna&gt; [&lt;tipo&gt;] GENERATED ALWAYS AS ( &lt;espressione&gt; )
      </programlisting>

      <para>è completamente equivalente alla forma compatibile con le versioni
      precedenti:</para>

      <programlisting>
&lt;nome colonna&gt; [&lt;tipo&gt;] COMPUTED [BY] ( &lt;espressione&gt; )
      </programlisting>

      <para>
        <emphasis role="bold">Esempio</emphasis>
      </para>

      <programlisting>
CREATE TABLE T (PK INT, EXPR GENERATED ALWAYS AS (PK + 1))
      </programlisting>
    </section>

    <!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->

    <!-- V.2.0.X -->

    <!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->

    <section id="rnfb20x-ddl-syntax-create-sequence"
             xreflabel="CREATE SEQUENCE">
      <!-- Level 2 section -->

      <sectioninfo>
        <author>
          <firstname>D.</firstname>

          <surname>Yemanov</surname>
        </author>

        <title>CREATE SEQUENCE</title>
      </sectioninfo>

      <para>È stata introdotta la parola chiave SEQUENCE come sinonimo di
      GENERATOR, in accordo con lo standard SQL-99. SEQUENCE è un termine
      descritto nelle specifiche SQL, mentre GENERATOR è un termine
      compatibile InterBase. L'uso della sintassi standard SEQUENCE è
      raccomandata nelle applicazioni.</para>

      <para>Un generatore di sequenza è un meccanismo per generare valori
      numerici interi incrementali, uno alla volta. Un generatore di sequenza
      è un oggetto dello schema con nome, che in dialetto 3 è BIGINT, mentre
      in dialetto 1 è INTEGER.</para>

      <para>
        <emphasis role="bold">Sintassi</emphasis>
      </para>

      <programlisting>
    CREATE { SEQUENCE | GENERATOR } &lt;nome&gt;
    DROP { SEQUENCE | GENERATOR } &lt;nome&gt;
    SET GENERATOR &lt;nome&gt; TO &lt;valore_partenza&gt;
    ALTER SEQUENCE &lt;nome&gt; RESTART WITH &lt;valore_partenza&gt;
    GEN_ID (&lt;nome&gt;, &lt;valore_di_incremento&gt;)
    NEXT VALUE FOR &lt;nome&gt;
      </programlisting>

      <para>
        <emphasis role="bold">Esempi</emphasis>
      </para>

      <para>1.</para>

      <programlisting>
   CREATE SEQUENCE S_EMPLOYEE;
      </programlisting>

      <para>2.</para>

      <programlisting>
   ALTER SEQUENCE S_EMPLOYEE RESTART WITH 0;
      </programlisting>

      <para>Vedere anche le note su <xref
      linkend="rnfb20x-dml-nextvalue" />.</para>

      <warning>
        <para>ALTER SEQUENCE, come SET GENERATOR, è un bel modo per rovinare
        la generazione dei valori delle chiavi!</para>
      </warning>
    </section>

    <section id="rnfb20x-ddl-syntax-revoke-admin"
             xreflabel="REVOKE ADMIN OPTION">
      <!-- Level 2 section -->

      <sectioninfo>
        <author>
          <firstname>D.</firstname>

          <surname>Yemanov</surname>
        </author>

        <title>REVOKE ADMIN OPTION</title>
      </sectioninfo>

      <para>SYSDBA, il creatore del database ed il proprietario di un oggetto
      possono rilasciare i diritti su quell'oggetto ad altri utenti. Inoltre,
      tali diritti possono essere resi ereditabili con la clausola
      <command>WITH GRANT OPTION</command>. In tal caso il garante dà al
      garantito i diritti di diventare a sua volta garante per lo stesso
      oggetto. Il garante originale può rimuovere questa concessione al
      garantito con il comando <command>REVOKE GRANT OPTION FROM
      user</command>.</para>

      <para>Tuttavia, c'è una forma secondaria che coinvolge i ruoli. Invece
      di specificare gli stessi diritti per diversi utenti (che presto diventa
      un incubo nella manutenzione), si può creare un ruolo, assegnare a
      questo nuovo ruolo un insieme di diritti ed infine garantire quel ruolo
      ad uno o più utenti. Ogni modifica ai diritti del ruolo influenzerà i
      diritti di tutti gli utenti a cui è stato garantito quel ruolo. Si dice
      anche che tutti gli utenti <quote>appartenneti</quote> a quel ruolo
      hanno i medesimi diritti.</para>

      <para>Simmetricamente, con la clausola <command>WITH ADMIN
      OPTION</command>, il garante (di solito il creatore del ruolo)
      attribuisce ai garantiti la possibilità di diventare a loro volta
      garanti per lo stesso ruolo. Fino a FB v2, questa abilità non poteva
      essere rimossa senza mettere mano direttamente alle tabelle di sistema.
      Ora, il garante originale può rimuovere la concessione ad attribuire le
      garanzie del ruolo ad altri utenti con il comando <command>REVOKE ADMIN
      OPTION FROM user</command>.</para>
    </section>

    <section id="rnfb20x-ddl-syntax-setdrop"
             xreflabel="Clausola SET/DROP DEFAULT">
      <!-- Level 2 section -->

      <sectioninfo>
        <author>
          <firstname>C.</firstname>

          <surname>Valderrama</surname>
        </author>

        <title>Clausole di SET/DROP DEFAULT per il comando ALTER TABLE</title>
      </sectioninfo>

      <para>I domini permettono di modificare o rimuovere i loro default.
      Sembra naturale pertanto che anche i campi di tabella possano essere
      maneggiati allo stesso modo senza manipolazione delle tabelle di
      sistema.</para>

      <para>
        <emphasis role="bold">Sintassi</emphasis>
      </para>

      <programlisting>
  ALTER TABLE t ALTER [COLUMN] c SET DEFAULT default_value;
  ALTER TABLE t ALTER [COLUMN] c DROP DEFAULT;
      </programlisting>

      <note>
        <itemizedlist>
          <listitem>
            <para>I campi di tipo array non possono avere un valore di
            default.</para>
          </listitem>

          <listitem>
            <para>Cambiando il tipo del dato, si rischia di lasciare il suo
            valore di default precedente. Questo perchè ad un campo può essere
            assegnato il tipo di un dominio che ha un default ma il campo ha
            la possibilità di sovrascrivere tale dominio. D'altra parte ad un
            campo si può dare direttamente un nuovo tipo di dato nel qual caso
            il default appartiene logicamente al campo ed è mantenuto in un
            dominio creato e gestito in automatico dietro le quinte.</para>
          </listitem>
        </itemizedlist>
      </note>
    </section>

    <section id="rnfb20x-ddl-syntax-exceptions"
             xreflabel="Sintassi per modificare le eccezioni">
      <!-- Level 2 section -->

      <sectioninfo>
        <author>
          <firstname>D.</firstname>

          <surname>Yemanov</surname>
        </author>

        <title>Sintassi per modificare le eccezioni</title>
      </sectioninfo>

      <para>I comandi di DDL <command>RECREATE EXCEPTION</command> e
      <command>CREATE OR ALTER EXCEPTION</command> (richiesta SF #1167973)
      sono stati implementati permettendo di ricreare, oppure di creare o
      modificare una eccezione definita dall'utente, in funzione della sua
      attuale esistenza.</para>

      <section id="rnfb20x-ddl-syntax-recreate-exception">
        <!-- Level 3 section -->

        <title>RECREATE EXCEPTION</title>

        <para><command>RECREATE EXCEPTION</command> si comporta esattamente
        come <command>CREATE EXCEPTION</command> se l'eccezione non esiste
        ancora. Se esiste già la sua definizione viene completamente
        sostituita, a meno che non vi siano dipendenze che blocchino la
        modifica.</para>
      </section>

      <section id="rnfb20x-ddl-syntax-create-or-alter-exception">
        <!--Level 3 section -->

        <title>CREATE OR ALTER EXCEPTION</title>

        <para><command>CREATE OR ALTER EXCEPTION</command> crea un'eccezione
        se non esiste già, oppure la modifica, senza alcun effetto sulle sue
        dipendenze.</para>
      </section>
    </section>

    <section id="rnfb20x-ddl-syntax-alter-ext-func"
             xreflabel="ALTER EXTERNAL FUNCTION">
      <!-- Level 2 section -->

      <sectioninfo>
        <title>ALTER EXTERNAL FUNCTION</title>

        <author>
          <firstname>C.</firstname>

          <surname>Valderrama</surname>
        </author>
      </sectioninfo>

      <para>È stata implementato il comando <command>ALTER EXTERNAL
      FUNCTION</command> in modo da permettere la modifica
      dell'<function>entry_point</function> o del
      <function>module_name</function> della dichiarazione di una UDF, quando
      questa non può essere rimossa a causa di dipendenze attualmente
      insistenti sulla sua definizione.</para>
    </section>

    <section id="rnfb20x-ddl-syntax-comment" xreflabel="COMMENT Statement">
      <!-- Level 2 section -->

      <sectioninfo>
        <title>COMMENT ON</title>

        <author>
          <firstname>C.</firstname>

          <surname>Valderrama</surname>
        </author>
      </sectioninfo>

      <para>Il comando <command>COMMENT ON</command> è stato implementato per
      permettere l'inserimento di descrizioni e commenti nel metadata.</para>

      <para>
        <emphasis role="bold">Syntax Pattern</emphasis>
      </para>

      <programlisting>
  COMMENT ON DATABASE IS {'txt'|NULL};
  COMMENT ON &lt;basic_type&gt; name IS {'txt'|NULL};
  COMMENT ON COLUMN tblviewname.fieldname IS {'txt'|NULL};
  COMMENT ON PARAMETER procname.parname IS {'txt'|NULL};
        </programlisting>

      <para>Una stringa vuolta di commento, cioè '', equivale a NULL in quanto
      il codice interno (nel caso DYN) funziona in quel modo per i
      blob.</para>

      <programlisting>
  &lt;basic_type&gt;:
     DOMAIN
     TABLE
     VIEW
     PROCEDURE
     TRIGGER
     EXTERNAL FUNCTION
     FILTER
     EXCEPTION
     GENERATOR
     SEQUENCE
     INDEX
     ROLE
     CHARACTER SET
     COLLATION
     SECURITY CLASS<superscript>1</superscript></programlisting>

      <para><superscript>1</superscript>non implementato in quanto il tipo è
      nascosto.</para>
    </section>

    <section id="rnfb20x-ddl-syntax-view-extension"
             xreflabel="CREATE VIEW Extensions">
      <!-- Level 2 section -->

      <sectioninfo>
        <title>Estensioni alle specifiche di CREATE VIEW</title>

        <author>
          <firstname>D.</firstname>

          <surname>Yemanov</surname>
        </author>
      </sectioninfo>

      <para>Nelle specifiche di una vista si possono usare adesso anche le
      sintassi relative a <token>FIRST/SKIP</token> e <token>ROWS</token> e le
      clausole <token>PLAN</token> e <token>ORDER BY</token>.</para>

      <para>A partire da Firebird 2.0 in poi, le viste sono trattate come
      espressioni di <command>SELECT</command> complete di tutte le
      caratteristiche. Di conseguenza nelle viste adesso le clausole relative
      a <token>FIRST/SKIP</token>, <token>ROWS</token>, <token>UNION</token>,
      <token>ORDER BY</token> e <token>PLAN</token> sono permesse e funzionano
      come previsto.</para>

      <para>
        <emphasis role="bold">Sintassi</emphasis>
      </para>

      <para>Per i dettagli della sisntassi, fare riferimento a <xref
      linkend="rnfb20x-dml-select-syntax" /> nel capitolo relativo al
      DML.</para>
    </section>

    <section id="rnfb20x-ddl-syntax-recreate-trigger">
      <!-- Level 2 section -->

      <sectioninfo>
        <title>Implementata la frase RECREATE TRIGGER</title>

        <author>
          <firstname>D.</firstname>

          <surname>Yemanov</surname>
        </author>
      </sectioninfo>

      <para>La frase di DDL per ricreare un trigger è disponibile nella forma
      <token>RECREATE TRIGGER</token>. La sintassi è simile a quella di altre
      frasi di <token>RECREATE</token>.</para>
    </section>

    <section id="rnfb20x-ddl-usage">
      <!-- Level 1 section -->

      <title>Migliorie nell'uso</title>

      <para>Le modifichedescritte in seguito influenzano in vario modo
      l'utilizzo o l'esistenza di alcuni aggiramenti tecnici nelle
      applicazioni o nelle basi di dati delle versioni precedenti a Firebird
      2.</para>

      <section id="rnfb20x-ddl-usage-foreign_keys"
               xreflabel="Create FKs Without Exclusive Access">
        <!-- Level 2 section -->

        <sectioninfo>
          <title>L'accesso esclusivo non è più richiesto per creare vincoli di
          chiave esterna</title>

          <author>
            <firstname>V.</firstname>

            <surname>Horsun</surname>
          </author>
        </sectioninfo>

        <para>Ora si possono creare i vincoli di chiave esterna (foreign key
        constraints) senza la necessità di ottenere un accesso esclusivo
        all'intero database.</para>
      </section>

      <section id="rnfb20x-ddl-usage-view-updates"
               xreflabel="Changed Logic for View Updates">
        <!-- Level 2 section -->

        <title>Logica modificata per gli aggiornamenti delle viste</title>

        <para>Si consiglia di applicare i vincoli di <token>NOT NULL</token>
        soltanto alle tabelle di base, e di ignorare quelli che le colonne
        della vista ereditano dalle definizioni del dominio.</para>
      </section>

      <section id="rnfb20x-ddl-usage-blob-symbols"
               xreflabel="Identificatori descrittivi per i sottotipi dei BLOB">
        <!-- Level 2 section -->

        <sectioninfo>
          <title>Identificatori descrittivi per i sottotipi dei BLOB</title>

          <author>
            <firstname>A.</firstname>

            <surname>Peshkov, C. Valderrama</surname>
          </author>
        </sectioninfo>

        <para>Fino alla versione di Firebird 2.0 per dichiarare un filtro per
        i blob, l'unica sintassi possibile era:</para>

        <programlisting>
   declare filter &lt;name&gt; input_type &lt;number&gt; output_type &lt;number&gt;
     entry_point &lt;function_in_library&gt; module_name &lt;library_name&gt;;
      </programlisting>

        <para>In alternativa adesso c'è questa nuova sintassi:</para>

        <programlisting>
   declare filter &lt;name&gt; input_type &lt;mnemonic&gt; output_type &lt;mnemonic&gt;
     entry_point &lt;function_in_library&gt; module_name &lt;library_name&gt;;
      </programlisting>

        <para>dove &lt;mnemonic&gt; si riferisce ad un identificatore del
        sottotipo riconosciuto dal motore.</para>

        <para>Attualmente essi sono binary, text ed altri sopratutto di
        esclusivo uso interno, ma un utente con particolari necessità potrebbe
        aggiungere un nuovo codice mnemonico in rdb$types ed usarlo, poichè è
        controllato solo al momento della dichiarazione. Il motore prende e
        memorizza poi il solo valore numerico associato. Va ricordato che i
        valori definibili dall'utente per i codici mnemonici dei sottotipi
        blob possono essere soltanto negativi.</para>

        <para>Per ottenere la lista dei tipi predefiniti, lanciare:</para>

        <programlisting>select RDB$TYPE, RDB$TYPE_NAME, RDB$SYSTEM_FLAG
     from rdb$types
     where rdb$field_name = 'RDB$FIELD_SUB_TYPE';

   RDB$TYPE   RDB$TYPE_NAME                RDB$SYSTEM_FLAG
   ========= ============================ =================

           0 BINARY                                     1
           1 TEXT                                       1
           2 BLR                                        1
           3 ACL                                        1
           4 RANGES                                     1
           5 SUMMARY                                    1
           6 FORMAT                                     1
           7 TRANSACTION_DESCRIPTION                    1
           8 EXTERNAL_FILE_DESCRIPTION                  1
      </programlisting>

        <para>
          <emphasis role="bold">Esempi</emphasis>
        </para>

        <para>Dichiarazione originale:</para>

        <programlisting>
    declare filter pesh input_type 0 output_type 3
      entry_point 'f' module_name 'p';
      </programlisting>

        <para>Dichiarazione alternativa:</para>

        <programlisting>
    declare filter pesh input_type binary output_type acl
      entry_point 'f' module_name 'p';
      </programlisting>

        <para>Per dichiarare un nome per un sottotipo di blob definito
        dall'utente è necessario ricordarsi di effettuare il
        <command>COMMIT</command> dopo l'inserzione che viene effettuata come
        nell'esempio seguente da comandi
        <application>ISQL</application>:</para>

        <programlisting>
  SQL&gt; insert into rdb$types
  CON&gt; values('RDB$FIELD_SUB_TYPE', -100, 'XDR', 'test type', 0);
  SQL&gt; commit;
  SQL&gt; declare filter pesh2 input_type xdr output_type text
  CON&gt; entry_point 'p2' module_name 'p';
  SQL&gt; show filter pesh2;
  BLOB Filter: PESH2
          Input subtype: -100 Output subtype: 1
          Filter library is p
          Entry point is p2
        </programlisting>
      </section>
    </section>
  </section>

  <!-- End of DDL section -->
</chapter>