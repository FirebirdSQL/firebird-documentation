<?xml version="1.0" encoding="UTF-8"?>
<chapter id="rnfb210-psql">
  <chapterinfo>
    <title>SQL Procedurale (PSQL)</title>
  </chapterinfo>

  <!--MIMMO == versione 2.1.3: traduzione allineata-->

  <para>Una manciata di miglioramenti è stata aggiunta alle estensioni del
  PSQL di Firebird 2. In evidenza ci sono le nuove capacità ad usare i domini
  e gli ordinamenti alfabetici (collazioni) nella dichiarazione delle
  variabili e degli argomenti nelle procedure e nei trigger.</para>

  <section id="rnfb210-psql-links">
    <title>Quick Links</title>

    <itemizedlist spacing="compact">
      <listitem>
        <para>
          <xref linkend="rnfb210-domainspsql" />
        </para>
      </listitem>

      <listitem>
        <para>
          <xref linkend="rnfb210-psql-collt" />
        </para>
      </listitem>

      <listitem>
        <para>
          <xref linkend="rnfb210-psql-views-currof" />
        </para>
      </listitem>

      <listitem>
        <para>
          <xref linkend="rnfb20x-psql-context-rowcount" />
        </para>
      </listitem>

      <listitem>
        <para>
          <xref linkend="rnfb20x-psql-cursors" />
        </para>
      </listitem>

      <listitem>
        <para>
          <xref linkend="rnfb20x-psql-default-args" />
        </para>
      </listitem>

      <listitem>
        <para>
          <xref linkend="rnfb20x-psql-leave-label" />
        </para>
      </listitem>

      <listitem>
        <para>
          <xref linkend="rnfb20x-psql-old" />
        </para>
      </listitem>

      <listitem>
        <para>
          <xref linkend="rnfb20x-psql-stacktrace" />
        </para>
      </listitem>

      <listitem>
        <para>
          <xref linkend="rnfb20x-psql-udfcall" />
        </para>
      </listitem>
    </itemizedlist>

    <section id="rnfb210-domainspsql" xreflabel="Domini in PSQL">
      <sectioninfo>
        <title>Domini in PSQL</title>

        <author>
          <firstname>Adriano</firstname>

          <surname>dos Santos Fernandes</surname>
        </author>
      </sectioninfo>

      <para><emphasis role="bold">(V.2.1)</emphasis> Ora è possibile usare un
      dominio per dichiarare il tipo di dato degli argomenti e delle variabili
      nei moduli PSQL. In funzione dell'eigenza, si può dichiarare un
      argomento o una variabile usando in alternativa:</para>

      <itemizedlist>
        <listitem>
          <para>il solo identificatore di dominio, al posto del tipo di
          identificatore nativo, in modo che la variabile erediti tutti gli
          attributi del dominio.</para>
        </listitem>

        <listitem>
          <para>il solo tipo di dato del dominio, senza ereditare pertanto i
          vincoli di CHECK ed il valore di DEFAULT, se dichiarati nel dominio,
          preponendo le parole <filename>TYPE OF</filename> nella
          dichiarazione (vedi sintassi qui sotto)</para>
        </listitem>
      </itemizedlist>

      <para>
        <emphasis role="bold">Sintassi</emphasis>
      </para>

      <programlisting>
data_type ::=
    &lt;builtin_data_type&gt;
    | &lt;domain_name&gt;
    | TYPE OF &lt;domain_name&gt;
      </programlisting>

      <para>
        <emphasis role="bold">Esempi</emphasis>
      </para>

      <programlisting>
CREATE DOMAIN DOM AS INTEGER;

CREATE PROCEDURE SP (
  I1 TYPE OF DOM,
  I2 DOM)
RETURNS (
  O1 TYPE OF DOM,
  O2 DOM)
AS
  DECLARE VARIABLE V1 TYPE OF DOM;
  DECLARE VARIABLE V2 DOM;

BEGIN
  ...
END
      </programlisting>

      <note>
        <para>Il nuovo campo RDB$VALID_BLR è stato aggiunto alle tabelle
        RDB$PROCEDURES e RDB$TRIGGERS per indicare se la procedura o il
        trigger restano validi sopo una operazione di ALTER DOMAIN. Il valore
        di RDB$VALID_BLR viene mostrato in ISQL con i comandi SHOW PROCEDURE
        oppure SHOW TRIGGER.</para>
      </note>
    </section>

    <section id="rnfb210-psql-collt"
             xreflabel="COLLATE nelle STORED PROCEDURE">
      <sectioninfo>
        <title>COLLATE nelle STORED PROCEDURE e nei parametri</title>

        <author>
          <firstname>A.</firstname>

          <surname>dos Santos Fernandes</surname>
        </author>
      </sectioninfo>

      <para><emphasis role="bold">(V.2.1)</emphasis> Alle variabili PSQL e
      agli argomenti delle procedure, possono essere applicati gli ordinamenti
      (collazioni).</para>
    </section>

    <section id="rnfb210-psql-views-currof"
             xreflabel="WHERE CURRENT OF nelle viste">
      <title>Nelle viste può essere utilizzato <command>WHERE CURRENT
      OF</command></title>

      <para>
        <ulink url="http://tracker.firebirdsql.org/browse/CORE-1213">Richiesta
        CORE-1213</ulink>
      </para>

      <para><emphasis role="bold">(V.2.1)</emphasis> L'operatore sui cursori
      <command>WHERE CURRENT OF</command> può percorrere un cursore su un
      record set di una vista, come se fosse il cursore sul risultato di una
      SELECT su una tabella. Ad esempio:</para>

      <programlisting>
...
FOR SELECT ...
   FROM MY_VIEW INTO ... AS CURSOR VIEW_CURSOR DO
BEGIN
  ...
  DELETE FROM MY_VIEW
    WHERE CURRENT OF VIEW_CURSOR;
  ...
END
      </programlisting>
    </section>

    <section id="rnfb20x-psql-context-rowcount"
             xreflabel="ROW_COUNT riporta il numero di righe di una SELECT">
      <sectioninfo>
        <title>La variabile di contesto <command>ROW_COUNT</command></title>

        <author>
          <firstname>D.</firstname>

          <surname>Yemanov</surname>
        </author>
      </sectioninfo>

      <para><command>ROW_COUNT</command> è stata migliorata in modo tale che
      adesso riporta il numero di record recuperati da una frase
      SELECT.</para>

      <para>Per esempio, può essere usata per verificare se una SELECT INTO ha
      effettivamente assegnato qualcosa:</para>

      <programlisting>
  ..
  BEGIN
    SELECT COL FROM TAB INTO :VAR;

    IF (ROW_COUNT = 0) THEN
      EXCEPTION NO_DATA_FOUND;
  END
  ..
      </programlisting>

      <para>Vedere anche gli esempi più oltre sull'uso dei cursori espliciti
      in PSQL.</para>
    </section>

    <section id="rnfb20x-psql-cursors" xreflabel="Cursori esplicitati">
      <sectioninfo>
        <title>Cursori espliciti</title>

        <author>
          <firstname>D.</firstname>

          <surname>Yemanov</surname>
        </author>
      </sectioninfo>

      <para>In PSQL si possono ora dichiarare ed usare cursori multipli. I
      cursori espliiciti sono disponibili anche nelle strutture DSQL
      <command>EXECUTE BLOCK</command> oltre che nelle <command>STORED
      PROCEDURE</command> e nei <command>TRIGGER</command>.</para>

      <para>
        <emphasis role="bold">Sintassi</emphasis>
      </para>

      <programlisting>
    DECLARE [VARIABLE] &lt;cursor_name&gt; CURSOR FOR ( &lt;select_statement&gt; );
    OPEN &lt;cursor_name&gt;;
    FETCH &lt;cursor_name&gt; INTO &lt;var_name&gt; [, &lt;var_name&gt; ...];
    CLOSE &lt;cursor_name&gt;;
      </programlisting>

      <para>
        <emphasis role="bold">Esempi</emphasis>
      </para>

      <para>1.</para>

      <programlisting>
  DECLARE RNAME CHAR(31);
  DECLARE C CURSOR FOR ( 
    SELECT RDB$RELATION_NAME
    FROM RDB$RELATIONS 
  );
  BEGIN
    OPEN C;
    WHILE (1 = 1) DO
    BEGIN
      FETCH C INTO :RNAME;
      IF (ROW_COUNT = 0) THEN
        LEAVE;
      SUSPEND;
    END
    CLOSE C;
  END
      </programlisting>

      <para>2.</para>

      <programlisting>
  DECLARE RNAME CHAR(31);
  DECLARE FNAME CHAR(31);
  DECLARE C CURSOR FOR (
    SELECT RDB$FIELD_NAME
    FROM RDB$RELATION_FIELDS
    WHERE RDB$RELATION_NAME = :RNAME
    ORDER BY RDB$FIELD_POSITION
  );
  BEGIN
    FOR
      SELECT RDB$RELATION_NAME
      FROM RDB$RELATIONS
      INTO :RNAME
    DO
    BEGIN
      OPEN C;
      FETCH C INTO :FNAME;
      CLOSE C;
      SUSPEND;
    END
  END
      </programlisting>

      <note>
        <itemizedlist>
          <listitem>
            <para>La dichiarazione di un cursore è ammessa solo nella sezione
            delle dichiarazioni del PSQL (blocco, procedura o trigger che
            sia), come qualsiasi altra regolare dichiarazione di variabile
            locale.</para>
          </listitem>

          <listitem>
            <para>I nomi dei cursori devono essere univoci all'interno dello
            stesso contesto. Non devono entrare in conflitto con il nome di un
            altro cursore <quote>annunciato</quote> dalla clausola <command>AS
            CURSOR</command>, da un cursore <command>FOR SELECT</command>.
            Tuttavia un cursore può condividere il nome con ogni altro tipo di
            variabile nello stesso contesto, poichè le operazioni disponibili
            per ciascuno sono diverse.</para>
          </listitem>

          <listitem>
            <para>Si possono effettuare aggiornamenti e cancellazioni
            posizionali con i cursori attraverso la clausola <command>WHERE
            CURRENT OF</command>.</para>
          </listitem>

          <listitem>
            <para>Sono proibiti i tentativi di <command>FETCH</command> e
            <command>CLOSE</command> da un cursore <command>FOR
            SELECT</command>.</para>
          </listitem>

          <listitem>
            <para>Falliscono i tentativi di aprire un cursore già aperto e di
            recuperare i dati o chiudere un cursore già chiuso.</para>
          </listitem>

          <listitem>
            <para>Tutti i cursori non esplicitamente chiusi, verranno chiusi
            automaticamente all'uscita dall'attuale blocco/procedura/trigger
            PSQL.</para>
          </listitem>

          <listitem>
            <para>La variabile di sistema <command>ROW_COUNT</command> può
            essere usata dopo ogni frase FETCH per verificare se
            effettivamente è stata riportata una registrazione.</para>
          </listitem>
        </itemizedlist>
      </note>
    </section>

    <section id="rnfb20x-psql-default-args"
             xreflabel="Gli argomenti delle STORED PROCEDURE possono avere un default">
      <sectioninfo>
        <title>Argomenti di default nelle Stored Procedure</title>

        <author>
          <firstname>V.</firstname>

          <surname>Khorsun</surname>
        </author>
      </sectioninfo>

      <para>Si possono dichiarare valori di default per gli argomenti delle
      stored procedure.</para>

      <para>La sintassi è identica alla definizione di un valore default per
      una colonna o per un dominio, eccetto che si può usare '=' al posto
      della parola chiave 'DEFAULT'.</para>

      <para>Gli argomenti con valori di default devono venire per ultimi nella
      lista degli argomenti; cioè non si può dichiarare un argomento che non
      ha un default dopo un argomento che è stato dichiarato con un valore di
      default. Il chiamante deve comunque fornire tutti gli argomenti
      precedenti a quelli di cui vuole adoperare il proprio default.</para>

      <para>Pertanto non si possono fare cose come fornire il gli primo e
      secondo argomento, non fornire il terzo argomento e fornire il
      quarto<literal>...</literal></para>

      <para>La sostituzione dei valori di default avviene durante
      l'esecuzione. Se è definita una procedura con default P1 e la si chiama
      da un'altra procedura P2 saltando alcuni dei parametri finali che hanno
      il default, allora i valori di default per P1 verranno sostituiti dal
      motore solo al momento in cui inizia lìesecuzione di P1. Questo
      sognifica che, cambiando i valori di default non è necessario
      ricompilare P2.</para>

      <para>Tuttavia è sempre necessario scollegare tutte le connessioni
      client, come è descritto nel Borland InterBase 6 beta "Data Definition
      Guide" (DataDef.pdf), nella sezione "Altering and dropping procedures in
      use".</para>

      <para>
        <emphasis role="bold">Esempi</emphasis>
      </para>

      <programlisting>
   CONNECT ... ;
   SET TERM ^;
   CREATE PROCEDURE P1 (X INTEGER = 123)
   RETURNS (Y INTEGER)
   AS
   BEGIN
     Y = X;
     SUSPEND;
   END ^
   COMMIT ^
   SET TERM ;^

   SELECT * FROM P1;

              Y
   ============

            123

   EXECUTE PROCEDURE P1;

              Y
   ============
            123

   SET TERM ^;
   CREATE PROCEDURE P2
   RETURNS (Y INTEGER)
   AS
   BEGIN
     FOR SELECT Y FROM P1 INTO :Y
     DO SUSPEND;
   END ^
   COMMIT ^
   SET TERM ;^

   SELECT * FROM P2;

              Y
   ============

            123

   SET TERM ^;
   ALTER PROCEDURE P1 (X INTEGER = CURRENT_TRANSACTION)
            RETURNS (Y INTEGER)
   AS
   BEGIN
     Y = X;
    SUSPEND;
   END; ^
   COMMIT ^
   SET TERM ;^

   SELECT * FROM P1;

              Y
   ============

           5875

   SELECT * FROM P2;

              Y
   ============

            123

   COMMIT;

   CONNECT  ... ;

   SELECT * FROM P2;

              Y
   ============

           5880

      </programlisting>

      <note title="Comments">
        <orderedlist>
          <listitem>
            <para>Il sorgente ed il BLR per gli argomenti default sono
            memorizzati in RDB$FIELDS.</para>
          </listitem>

          <listitem>
            <para>Come è stato evidenziato in una <ulink
            url="http://tracker.firebirdsql.org/browse/DOC-29">Tracker
            entry</ulink>, gli esempi riportati sopra non devono essere presi
            come una raccomandazione per usare <command>SUSPEND</command> per
            avere i valori di ritorno da una STORED PROCEDURE di sola
            esecuzione (<emphasis>executable</emphasis> SP). L'autore ha usato
            <command>SUSPEND</command> qui al solo scopo esemplificativo per
            illustrare gli aspetti essenziali della nuova
            caratteristica.</para>
          </listitem>
        </orderedlist>
      </note>
    </section>

    <section id="rnfb20x-psql-leave-label"
             xreflabel="Operatore di controllo del flusso LEAVE &lt;label&gt;">
      <sectioninfo>
        <title>Nuova sintassi LEAVE &lt;label&gt;</title>

        <author>
          <firstname>D.</firstname>

          <surname>Yemanov</surname>
        </author>
      </sectioninfo>

      <para>La nuova sintassi <function>LEAVE &lt;label&gt;</function>
      permette di marcare i cicli PSQL con etichette e di uscirne in modo
      simile al linguaggio Java. Lo scopo è quello di terminare l'esecuzione
      del blocco corrente e riprendere dall'etichetta specificata. Dopodichè
      l'esecuzione prosegue dalla frase immediatamente successiva al ciclo
      terminato.</para>

      <para>
        <emphasis role="bold">Sintassi</emphasis>
      </para>

      <programlisting>
    &lt;nome_etichetta&gt;: &lt;ciclo&gt;
    ...
    LEAVE [&lt;nome_etichetta&gt;]
      </programlisting>

      <para>dove &lt;ciclo&gt; è uno fra: <command>WHILE</command>,
      <command>FOR SELECT</command>, <command>FOR EXECUTE
      STATEMENT</command>.</para>

      <para>
        <emphasis role="bold">Esempi</emphasis>
      </para>

      <para>1.</para>

      <programlisting>
   FOR
     SELECT COALESCE(RDB$SYSTEM_FLAG, 0), RDB$RELATION_NAME
       FROM RDB$RELATIONS
       ORDER BY 1
     INTO :RTYPE, :RNAME
     DO
     BEGIN
       IF (RTYPE = 0) THEN
         SUSPEND;
       ELSE
         LEAVE; -- esce dal ciclo corrente
     END
      </programlisting>

      <para>2.</para>

      <programlisting>
   CNT = 100;
   L1:
   WHILE (CNT &gt;= 0) DO
   BEGIN
     IF (CNT &lt; 50) THEN
       LEAVE L1; -- esce dal ciclo WHILE
     CNT = CNT - l;
   END
      </programlisting>

      <para>3.</para>

      <programlisting>
   STMT1 = 'SELECT RDB$RELATION_NAME FROM RDB$RELATIONS';
   L1:
   FOR
     EXECUTE STATEMENT :STMT1 INTO :RNAME
   DO
   BEGIN
     STMT2 = 'SELECT RDB$FIELD_NAME FROM RDB$RELATION_FIELDS
       WHERE RDB$RELATION_NAME = ';
     L2:
     FOR
       EXECUTE STATEMENT :STMT2 || :RNAME INTO :FNAME
     DO
     BEGIN
       IF (RNAME = 'RDB$DATABASE') THEN
         LEAVE L1; -- esce dal ciclo esterno
       ELSE IF (RNAME = 'RDB$RELATIONS') THEN
         LEAVE L2; -- esce dal ciclo interno
       ELSE
         SUSPEND;
     END
   END
      </programlisting>

      <note>
        <para>Notare che <command>LEAVE</command> senza una esplicita
        etichetta interrompe il ciclo attuale (il più interno).</para>
      </note>
    </section>

    <section id="rnfb20x-psql-old"
             xreflabel="Le variabili di contesto OLD ora sono in sola lettura">
      <sectioninfo>
        <title>Ora le variabili di contesto OLD sono in sola lettura</title>

        <author>
          <firstname>D.</firstname>

          <surname>Yemanov</surname>
        </author>
      </sectioninfo>

      <para>L'insieme delle variabili di contesto OLD disponibili nei trigger
      sono ora in sola lettura. Un tentativo di assegnare un valore a
      OLD.qualsiasicosa viene rifiutato.</para>

      <note>
        <para>Le variabili di contesto NEW sono anch'esse adesso in sola
        lettura nei trigger AFTER.</para>
      </note>
    </section>

    <section id="rnfb20x-psql-stacktrace"
             xreflabel="Stack Trace per le eccezioni PSQL">
      <sectioninfo>
        <title>PSQL Stack Trace</title>

        <author>
          <firstname>V.</firstname>

          <surname>Khorsun</surname>
        </author>
      </sectioninfo>

      <para>Le API client possono ora estrarre un semplice <firstterm>stack
      trace</firstterm> dallo Status Vector di errore quando avviene
      un'eccezione nell'esecuzione di un PSQL (stored procedure o trigger).
      Uno stack trace è rappresentato da ina stringa (massimo 2048 byte) e
      consiste di tutti i nomi di STORED PROCEDURE e TRIGGER, a partire dal
      punto in cui è avvenuta l'eccezione, risalendo fino alla chiamata più
      esterna. Se la traccia è più lunga di quanto specificato al momento
      viene troncata.</para>

      <para>Elementi aggiuntivi sono in coda allo Status Vector come
      segue:</para>

      <programlisting>
   isc_stack_trace, isc_arg_string, &lt;string length&gt;, &lt;string&gt;
      </programlisting>

      <para><function>isc_stack_trace</function> è un nuovo codice di errore
      con valore 335544842L.</para>

      <para>
        <emphasis role="bold">Esempi</emphasis>
      </para>

      <para>Creazione di metdata:</para>

      <programlisting>
  CREATE TABLE ERR (
    ID INT NOT NULL PRIMARY KEY,
    NAME VARCHAR(16));

  CREATE EXCEPTION EX '!';
  SET TERM ^;

  CREATE OR ALTER PROCEDURE ERR_1 AS
  BEGIN
    EXCEPTION EX 'ID = 3';
  END ^

  CREATE OR ALTER TRIGGER ERR_BI FOR ERR
    BEFORE INSERT AS
  BEGIN
    IF (NEW.ID = 2)
    THEN EXCEPTION EX 'ID = 2';

    IF (NEW.ID = 3)
    THEN EXECUTE PROCEDURE ERR_1;

    IF (NEW.ID = 4)
    THEN NEW.ID = 1 / 0;
  END ^

  CREATE OR ALTER PROCEDURE ERR_2 AS
  BEGIN
    INSERT INTO ERR VALUES (3, '333');
  END ^
      </programlisting>

      <para>1. Eccezione utente da un trigger:</para>

      <programlisting>
  SQL" INSERT INTO ERR VALUES (2, '2');
  Statement failed, SQLCODE = -836
  exception 3
  -ID = 2
  -At trigger 'ERR_BI'
      </programlisting>

      <para>2. Eccezione utente da una procedura chiamata da un
      trigger:</para>

      <programlisting>
  SQL" INSERT INTO ERR VALUES (3, '3');
  Statement failed, SQLCODE = -836
  exception 3
  -ID = 3
  -At procedure 'ERR_1'
  At trigger 'ERR_BI'
      </programlisting>

      <para>3. Eccezione in esecuzione in un trigger (divisione per
      zero):</para>

      <programlisting>
  SQL" INSERT INTO ERR VALUES (4, '4');
  Statement failed, SQLCODE = -802
  arithmetic exception, numeric overflow, or string truncation
  -At trigger 'ERR_BI'
      </programlisting>

      <para>4. Eccezione utente da una procedura:</para>

      <programlisting>
  SQL" EXECUTE PROCEDURE ERR_1;
  Statement failed, SQLCODE = -836
  exception 3
  -ID = 3
  -At procedure 'ERR_1'
      </programlisting>

      <para>5. Eccezione utente da una procedura ad un livello più profondo
      dello stack:</para>

      <programlisting>
  SQL" EXECUTE PROCEDURE ERR_2;
  Statement failed, SQLCODE = -836
  exception 3
  -ID = 3
  -At procedure 'ERR_1'
  At trigger 'ERR_BI'
  At procedure 'ERR_2'
      </programlisting>
    </section>

    <section id="rnfb20x-psql-udfcall"
             xreflabel="UDF utilizzabili come procedure">
      <sectioninfo>
        <title>Chiamare una UDF come una procedura</title>

        <author>
          <firstname>N.</firstname>

          <surname>Samofatov</surname>
        </author>
      </sectioninfo>

      <para>In PSQL, le UDF supportate, ad esempio RDB$SET_CONTEXT, possono
      esere chiamate come se fossero funzioni che non riportano nulla, come le
      <quote>procedure</quote> dell'Object Pascal. Ad esempio:</para>

      <programlisting>
  BEGIN
     ...
     RDB$SET_CONTEXT('USER_TRANSACTION', 'MY_VAR', '123');
     ...
  END
      </programlisting>
    </section>
  </section>
</chapter>