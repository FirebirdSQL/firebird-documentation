<?xml version="1.0" encoding="UTF-8"?>
<chapter id="rnfb20x-udf">
  <chapterinfo>
    <title>Funzioni esterne (UDF)</title>
  </chapterinfo>

  <section id="rnfb20x-udf-nullpointer" xreflabel="Signal SQL NULL in UDFs">
    <sectioninfo>
      <title>Segnalare un valore SQL NULL attraverso un puntatore Null</title>

      <author>
        <firstname>C.</firstname>

        <surname>Valderrama</surname>
      </author>
    </sectioninfo>

    <!--MIMMO == versione 2.1.3 : traduzione allineata-->

    <para>Prima di Firebird 2, gli autori delle UDF potevano ipotizzare che le
    loro UDF riportassero un NULL, ma non avevano possibilità di verificarlo.
    Questo provocava una serie di problemi con le UDF. Spesso si è ritenuto di
    poter interpretare come se fossero NULL nel passaggio dei parametri
    rispettivamente una stringa vuota, il valore numerico zero e la data di
    origine delle date.</para>

    <para>L'autore non può sempre ritenere un particolare valore numerico NULL
    se l'UDF viene compilata per un contesto in cui sarebbe stato noto che
    normalmente il NULL non viene riconosciuto.</para>

    <para>Molte UDF, inclusa la libreria <filename>ib_udf</filename>
    distribuita con Firebird, hanno sempre ritenuto che una stringa vuota
    servisse a segnalare più probabilmente un parametro a NULL invece che una
    stringa di lunghezza zero. Il trucchetto potrebbe funzionare con parametri
    di tipo CHAR, poiché la lunghezza minima dichiarabile di un CHAR è uno, e
    dovrebbe contenere un carattere di spazio: pertanto uno zero binario nella
    prima posizione avrebbe l'effetto desiderato di segnalare il NULL.</para>

    <para>Tuttavia non è applicabile ai VARCHAR o CSTRING, dove invece la
    lunghezza zero è valida.</para>

    <para>Un'altra soluzione sarebbe stata fare affidamento sui descrittori,
    ma questo avrebbe imposto molte più cose da controllare di quante se ne
    potevano affrontare. Il problema più spinoso è che il motore non rispetta
    il tipo dichiarato per il parametro: semplicemente invia ciò che ha per
    quel parametro, così che è l'UDF a dover decidere se rifiutare il dato o
    cercare di convertirlo nel tipo di dato previsto.</para>

    <para>Poiché le UDF non hanno un meccanismo formale per segnalare un
    errore, il valore riportato deve essere utilizzato anche come
    indicatore.</para>

    <para>Il problema di fondo è mantenere la semplicità tipica delle
    dichiarazioni (senza descrittori) ed al tempo stesso essere in grado di
    segnalare il NULL.</para>

    <para>Il motore normalmente passava i parametri alle UDF per riferimento.
    In pratica, ciò significa passare un puntatore al dato per indicare che
    abbiamo un NULL. Tuttavia non si può correre il rischio di rompere un
    imprecisato numero di UDF esistenti pubbliche e private che al momento non
    si aspettano un NULL. Era necessario migliorare la sintassi per far
    richiedere esplicitamente la gestione del NULL.</para>

    <para>La soluzione, pertanto, è restringere la richiesta per segnalare il
    NULL alle sole UDF che sono in grado di interagire col nuovo scenario. Per
    evitare di aggiungere nuove parole chiave, la parola NULL viene aggiunta
    al tipo del parametro dell'UDF senza effettuare altre modifiche.</para>

    <para>
      <emphasis role="bold">Esempio</emphasis>
    </para>

    <programlisting>
  declare external function sample
    int null
    returns int by value...;
    </programlisting>

    <para>Usando già le funzioni della ib_udf e per sfruttare segnalazione e
    riconoscimento del NULL in alcune funzioni, ci si può connettere al
    database e lanciare lo script
    <function>../misc/upgrade/ib_udf_upgrade.sql</function> che è nella
    cartella di Firebird, ed effettuare il commit.</para>

    <caution>
      <para>Si raccomanda di fare questo quando non ci sono altri utenti
      connessi al database.</para>
    </caution>

    <para>Il codice nelle funzioni elencate in quello script è stato
    modificato per riconoscere has il NULL solo quando viene segnalato dal
    motore. Pertanto, a partire da FB v2,le funzioni
    <function>rtrim()</function>, <function>ltrim()</function> ed altre
    funzioni sulle stringhe non ritengono che una stringa vuota sia una
    stringa NULL.</para>

    <para>Le funzioni continuano a funzionare anche se non si effettua lo
    script di aggiornamento: semplicemente non sono in grado di decifrare
    l'arrivo di un NULL.</para>

    <para>Se non si è mai usata ib_udf in un database ed avendone la
    necessità, ci si deve collegare al database, lanciare lo script
    <function>../udf/ib_udf2.sql</function>, preferibilmente sempre quando non
    vi sono altri utenti connessi al database e subito dopo fare il
    commit.</para>

    <note>
      <itemizedlist>
        <listitem>
          <para>Notare il "2" alla fine del nome.</para>
        </listitem>

        <listitem>
          <para>Lo script originale per FB v1.5 è ancora disponibile nella
          stessa cartella.</para>
        </listitem>
      </itemizedlist>
    </note>
  </section>

  <section id="rnfb20x-udf-diagnostics">
    <sectioninfo>
      <title>Miglioramenti dei messaggi diagnostici delle librerie UDF</title>

      <author>
        <firstname>A.</firstname>

        <surname>Peshkov</surname>
      </author>
    </sectioninfo>

    <para>La diagnostica per una UDF mancante o inutilizzabile era poco
    chiara, per cui non si capiva se mancava il modulo o era impossibile
    accedervi a causa della configurazione di UDFAccess in firebird.conf.
    Adesso ci sono messaggi distinti e comprensibili per entrambi i
    casi.</para>
  </section>

  <section id="rnfb20x-udf-func">
    <title>UDF aggiunte e modificate</title>

    <para>Le UDF aggiunte o migliorate nelle librerie di Firebird 2.0
    sono:</para>

    <section id="rnfb20x-udf-func-ibudfsrand">
      <sectioninfo>
        <title>IB_UDF_rand() e IB_UDF_srand()</title>

        <author>
          <firstname>F.</firstname>

          <surname>Schlottmann-Goedde</surname>
        </author>
      </sectioninfo>

      <para>Nelle precedenti versioni, la funzione esterna
      <function>rand()</function> imposta il punto di partenza per il
      generatore di numeri casuali basandolo sull'ora corrente e poi generava
      un valore pseudo-casuale.</para>

      <programlisting>
   srand((unsigned) time(NULL));
   return ((float) rand() / (float) RAND_MAX);
 </programlisting>

      <para>Questo algoritmo, se si effettuano due chiamate al'interno dello
      stesso secondo, ha il problema che entrambe riportano lo stesso
      valore.</para>

      <para>Per risolvere il problema, la funzione <function>rand()</function>
      è stata cambiata in Firebird 2.0 in modo tale che il punto di partenza
      non sia impostato esplicitamente. Questo fa in modo che vengano ottenuti
      sempre valori diversi.</para>

      <para>Per ottenere il comportamento compatibile a disposizione in caso
      fosse necessario, è stata aggiunta la funzione
      <firstterm>srand()</firstterm>. Fa esattamente quello che faceva la
      versione precedente della <function>rand()</function>.</para>
    </section>

    <section id="rnfb20x-udf-func-ibudflower">
      <title>IB_UDF_lower</title>

      <para>La funzione <function>IB_UDF_lower()</function> nella libreria
      IB_UDF era in conflitto con la nuova funzione interna
      <function>lower()</function>, cercandola di definire in un database con
      lo script <filename>ib_udf.sql</filename> di una versione precedente di
      Firebird.</para>

      <programlisting>
  /* ib_udf.sql declaration that now causes conflict */
  DECLARE EXTERNAL FUNCTION lower
      CSTRING(255)
      RETURNS CSTRING(255) FREE_IT
      ENTRY_POINT 'IB_UDF_lower' MODULE_NAME 'ib_udf';
      </programlisting>

      <para>Il problema è stato risolto nell'ultima versione del nuovo script
      <filename>ib_udf2.sql</filename>, dove la vecchia UDF è dichiarata
      usando un identificatore quotato fra doppi apici.</para>

      <programlisting>
  /* New declaration in ib_udf2.sql */
  DECLARE EXTERNAL FUNCTION "LOWER"
    CSTRING(255) NULL
    RETURNS CSTRING(255) FREE_IT
    ENTRY_POINT 'IB_UDF_lower' MODULE_NAME 'ib_udf';
      </programlisting>

      <tip>
        <para>È preferibile utilizzare la funzione interna LOWER() piuttosto
        che chiamare la UDF.</para>
      </tip>
    </section>
  </section>

  <section id="rnfb20x-udf-general">
    <title>Altre modifiche alle UDF</title>

    <section id="rnfb20x-udf-general-fbudf">
      <sectioninfo>
        <title>Modifiche nella compilazione</title>

        <author>
          <firstname>C. Valderrama</firstname>

          <surname>Contributor</surname>
        </author>
      </sectioninfo>

      <para>La libreria FBUDF non dipende più dalla libreria
      <filename>[lib]fbclient</filename> per essere compilata.</para>
    </section>
  </section>
</chapter>