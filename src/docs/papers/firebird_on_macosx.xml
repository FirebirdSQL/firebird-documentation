<?xml version="1.0" encoding="UTF-8"?>
<!-- For standalone validation, uncomment the following DOCTYPE declaration. -->
<!-- DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"> "file:../docs/docbookx/docbookx.dtd" -->
<article id="paper-fb-macosx">
  <articleinfo>
    <title>Firebird Database Server on Mac OSX</title>

    <titleabbrev>Firebird MacOSX Whitepaper</titleabbrev>

    <authorgroup>
      <author>
        <firstname>David</firstname>
        <surname>Pugh</surname>
      </author>

      <para>David Pugh, who hails from Christchurch, New Zealand, wrote the original version of this
      paper during October-December, 2004.  For some time, it was available at the Apple
      Mac open source developer homepages but it disappeared some time around the middle of 2006.</para>

      <para>In December, 2006, David contributed the document sources, along with those for a companion
      document, <citetitle>The Rough Guide to Building Firebird 1.5 on MacOSX</citetitle>, an extract
      from the document you are reading now.</para>
    </authorgroup>

    <edition>6 December 2006</edition>
  </articleinfo>

  <section id="paper-fb-macosx-intro">
    <sectioninfo>
      <title>Introduction</title>
    </sectioninfo>
    <para>In July 2000, Borland (then Inprise) released the source code of their database product,
     Interbase, under the Interbase Public License. Firebird is the Open Source direct descendent of
     that database. For more information about Interbase and Firebird, there is an excellent
    description of the history of events leading up to the release of Interbase to the Open Source
    community, and the subsequent development of Firebird.</para>
    
    <section id="paper-fb-macosx-intro-why">
      <title>Why Am I Writing This ?</title>
      <para>Until now, my database of choice has been PostgreSQL running on Linux, and more recently 
      on OSX. Our company was commisioned to build a Java application targeted at the Windows 
      platform. Firebird was chosen as the database because of it's wide platform availability 
      (Windows, Linux, BSD etc) . In particular, Firebird is regarded as mature and stable on 
      Windows, the main target market for the application.</para>
      
      <para>To perform my QA tasks for this project, I elected to install Firebird on my Powerbook. 
      While downloading and installing the MacOSX Firebird package was relatively straightforward, 
      I found myself scrabbling around the net looking for information on how to put my installed 
      Firebird to use under MacOSX.</para>
      
      <para>It is my hope that this document will give others a headstart with Firebird on OSX.</para>
    </section>
    
    <section id="paper-fb-macosx-intro-caveats">
      <title>Copyright and Caveats</title>
      
      <para>The structure and content of this document is based on the document entitled 
      <citetitle>Firebird Database on Linux</citetitle> prepared by Pascal Chong on March 9 2003 [URL
      link now lost]. An annotation pertaining to the licensing of that document appears in the
      Appendix at the end of this one.</para>

      <para>Thank you Pascal, for your original document, even though it was targetted at Linux,
      helped me up and running with Firebird under OSX !!!</para>
    </section>

    <section id="paper-fb-macosx-intro-whyuse">
      <title>Why Should I Use Firebird ?</title>
      <para>Open Source databases generally suffer from 2 common deficiencies : either they are 
      large, such as PostgreSQL and MySQL, or they lack features and documentation, such as 
      HypersonicSQL or McKoi.</para>
      
      <para>Firebird has a relatively tiny footprint. At about 10MB for the MacOSX 'packaged' 
      version. If your requirement is for an <quote>embedded database</quote>, bundled with an 
      application server and/or an application, then it is possible to slim down the required files 
      by approx 5Mb. Firebird has all the common features of more mature databases, such as support 
      for transactions, stored procedures, SQL-compliance, etc. If your background is in DB2 and 
      PostgreSQL, the syntax is very similar, and the data types and data handling may seem very 
      familiar, such as the mandatory <quote>single-quotes</quote> for strings.</para>
      
      <para>The design emphasis for Firebird seems to be on small, fast and minimum management. 
      This is ideal for developers who need a database for storage, but do not want to spend too much 
      time on tuning the database for performance. In many situations you may not even need stored 
      procedures, or do complex table joins. In such cases, Firebird is the ideal compromise between 
      size and functionality.</para>
    </section>
  </section>
  
  <section id="paper-fb-macosx-install">
    <title>Installing Firebird</title>

    <section id="paper-fb-macosx-install-getfb">
      <title>Where can I get Firebird ?</title>
      <para>The Firebird website can be reached at <ulink url="http://www.firebirdsql.org">www.
      firebirdsql.org</ulink>.  At the time this document was written, the download site for Firebird
      was at <ulink url="http://sourceforge.net/project/showfiles.php?group_id=9028">the Firebird
      Project's production download page on Sourceforge.net</ulink>.  For simplest access, it is
      advisable to go to the Firebird website and click on the <quote>Download</quote> link.</para>
    </section>

    <section id="paper-fb-macosx-install-which">
      <title>Which version should I get ?</title>
      <para>For MacOSX, the download site only has a pre-built binary for the Firebird Classic
      Server, version 1.5.1. There is no binary available for the Firebird Superserver, however,
      a method for building and installing the Superserver version is included in section 4 of this
      document.</para>

      <para>As I was completing this document [ December 2004 ], a point release 1.5.2 was released.
      There are no pre-built binaries for OSX yet, but the procedure for building 1.5.2 from source
      is in a later section of this document.</para>

      <para>The difference between the Classic Server and the Superserver lies in the design
      approach. The Superserver uses threads to service multiple clients connecting to it at the same
      time, while the Classic Server was the original approach used in Interbase, which spawns a
      separate server process for every connection.</para>

      <para>Under MacOSX, xinetd is used to spawn a new process for each client connection to a
      database. A White Paper comparing the two approaches can be found <ulink
      url="http://www.ibphoenix.com/main.nfs?a=ibphoenix&amp;page=ibp_ss_vs_classic">here</ulink>.</para>

      <para>On MacOSX, the question of which server version to use does not arise as there is only
      one version available (unless you compile firebird yourself from source). For <quote>embedded
      databases</quote> with few concurrent users, it should not make much of a difference which one
      you choose. Theoretically, for applications with a wider audience, the Superserver should
      perform better by reducing process startup times and better sharing of resources.</para>

      <para>I have done some limited testing with our application and there is a noticeble increase
      in performance when the Superserver version of Firebird is used. This most likely due to the
      overhead of xinetd having to start new processes when using the Classic version.</para>
    </section>

    <section id="paper-fb-macosx-install-sysreq">
      <title>System Requirements</title>
      <para>The default 1.5.1 package, when installed, occupies just over 10 MB of disk space, and
      should run well on any system capable of running OSX.</para>

      <para>The only requirements are:</para>
      <itemizedlist>
        <listitem>
          <para>OSX 10.2 or above</para>
        </listitem>
      </itemizedlist>

      <para>These instructions were tested on OSX 10.3.4, 10.3.5 and 10.3.6 (panther). It should
      work on any OSX version 10.2 or above, though, as always, your mileage may vary.</para>
    </section>

    <section id="paper-fb-macosx-install-installing">
      <title>Installing Firebird</title>

      <para>In this example, I will assume you have created a directory called temp located in your
      home directory and all work will be performed in there.</para>

      <para>After you have successfully downloaded the zip file from the website, save it into your
      temp directory.</para>

      <para>Open a Terminal window, change into the temp directory and execute the following
      command:</para>
      <programlisting>
$ cd temp
~/temp $ unzip Firebird-CS-1.5.1-MacOS.zip
      </programlisting>

      <para>This will extract the Firebird insaller package into a directory
      named <firstterm>Firebird-CS-1.5.pkg</firstterm> inside your temp directory.</para>

      <para>To launch the MacOSX Installer program and process this package, you can use the
      <emphasis>open</emphasis> command in your Terminal window as follows:</para>

      <programlisting>~/temp $ open Firebird-CS-1.5.pkg</programlisting>

      <para>Alternatively, you can use the Finder to navigate to your temp directory.</para>

      <itemizedlist>
        <listitem>
          <para>Double-click on the Firebird-CS-1.5.pkg directory to launch the MacOSX
          Installer.</para>
        </listitem>
        <listitem>
          <para>Follow the installer dialogs to complete installation of the Firebird software.
          This will install Firebird into the
          directory <emphasis>/Library/Frameworks/Firebird.framework</emphasis>.</para>
        </listitem>
      </itemizedlist>

      <para>In order to use the command-line Firebird Administration programs such
      as <emphasis>gsec</emphasis> and <emphasis>isql</emphasis>, you must run them from the Terminal.
      We need to make these binary files available to our Terminal sessions by adding them to our
      PATH.  I did this by editing the .bash_profile file in my home directory, appending the
      following lines:</para>

      <programlisting>
export FIREBIRD_HOME=/Library/Frameworks/Firebird.framework/Resources
export PATH=$PATH:$FIREBIRD_HOME/bin
      </programlisting>

      <tip>
        <para>Unix people will feel comfortable using an editor such as vim or pico to make these
        changes.  Alternatively, if you would prefer to use TextEdit, you can just type</para>

        <programlisting> open ~/.bash_profile</programlisting>
        <para>at the command prompt and the file will appear in a TextEdit window.</para>
      </tip>

      <para>Add the above export statements to the end of the file, then save your changes.</para>

      <para>To verify that your changes have worked, open a new Terminal window,
      type <emphasis>isql</emphasis> then press enter. You should see the following:</para>
      <screen>
      ~/temp $ isql

Use CONNECT or CREATE DATABASE to specify a database

SQL&gt; quit;
      </screen>
      <para>Type quit; (dont forget the semi-colon!) to exit the <emphasis>isql</emphasis> program
      and return to your command prompt.</para>

      <para><emphasis role="bold">Congratulations. If you have gotten this far, you now have a
      working Firebird installation running on OSX.</emphasis></para>
    </section>
  </section>

  <section id="paper-fb-macosx-getstart">
    <title>Getting Started with Firebird</title>
    <para>We will now walk through setting up a sample database and familiarizing ourselves with the
    operations and administration tools of this database software.</para>

    <section id="paper-fb-macosx-getstart-admin">
      <title>Administration Tools</title>
      <para>The default system administration account has the username SYSDBA (this username does
      not appear to be case-sensitive, when I tested it) and the case-sensitive password
      <emphasis>masterkey</emphasis>. For users of previous versions of Interbase (and people who
      worked through the Fish Catalog tutorial for Delphi), this will seem very familiar.
      You will use this account to create another user and the sample database initially.</para>

      <important>
      <para>Editor note :: Official POSIX builds for Firebird v.1.5 and higher do not use 'masterkey'
      as the default password.  Instead, a password is randomly created during the running of the
      installation scripts and written into a text file named <command>SYSDBA.password</command>.
      If 'masterkey' returns a 'user name and password not defined' error, it is likely you are using a
      build that conforms to the POSIX build rules in this respect.</para>
      </important>

      <para>The administrative tools that are available with the software are:</para>
      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">gsec</emphasis> - This is the security administrator. You will use this command-line tool for
          creating, modifying and deleting database users, changing passwords, etc.</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">isql</emphasis> - This is the interactive SQL tool, similar to
          Oracle's SQL*Plus and Postgresql's psql command. You can use this to test or run SQL
          queries. [Ed.- along with several other jobs!] </para>
        </listitem>
      </itemizedlist>

      <section id="paper-fb-macosx-getstart-admin-gsec">
        <title>gsec Security Administrator</title>
        <para>You will need to run gsec as SYSDBA. To invoke it, execute the following in your
        Terminal session:</para>
        <programlisting>
~/temp $  gsec -user sysdba -password masterkey
        </programlisting>
        <para>This will bring up the GSEC> prompt. You can display current users by
        typing <quote>display</quote> at the prompt, like so:</para>
        <programlisting>
GSEC> display
        </programlisting>
        <para>It is a good idea to change the SYSDBA password, because the default is so well-known.
        To change it, we modify the SYSDBA account using the following command:</para>
        <programlisting>
GSEC> modify SYSDBA -pw newpasswd
        </programlisting>

        <para>Ok, newpassword is not exactly a strong password. You should generate your own, which
        should contain both numbers and letters, and they should be changed frequently. But we will
        not go into that here. </para>

        <warning>
          <para>Editor note:  Only the first 8 characters of a password are meaningful.  Hence, for
          example, a password like 'password01' is authenticated to be identical to 'password02'.</para>
        </warning>
      </section>

      <section id="paper-fb-macosx-getstart-admin-isql">
        <title>isql Interactive SQL Processor</title>
        <para>As mentioned previously, isql is analogous to psql for PostgreSQL and SQL*Plus for
        Oracle. You can type in an SQL command and get the query results from the database.</para>
        <para>Firebird comes with an example EMPLOYEE database, and we will use it to test our SQL
        commands. To begin, execute the following command:</para>
        <programlisting>
~/temp $ isql localhost:/Library/Frameworks/Firebird.framework/Resources/examples/employee.fdb
        </programlisting>
        <para>This will connect you to the sample EMPLOYEE database and display an SQL&gt; prompt.
        You can type in your SQL commands at the prompt. Remember to put a semicolon (;) at the end
        of every statement to terminate it, before pressing <keycap>ENTER</keycap> to execute it.</para>

        <para>To test, type the following SQL command and press <keycap>ENTER</keycap>:</para>
        <programlisting>
SQL&gt; SELECT emp_no, full_name, job_code, job_country FROM employee;
        </programlisting>

        <para>This should give you output similar to the following:</para>
        <screen>
 EMP_NO FULL_NAME                             JOB_CODE JOB_COUNTRY

======= ===================================== ======== ===============

      2 Nelson, Robert                        VP       USA

      4 Young, Bruce                          Eng      USA

      5 Lambert, Kim                          Eng      USA

      8 Johnson, Leslie                       Mktg     USA

      9 Forest, Phil                          Mngr     USA

     11 Weston, K. J.                         SRep     USA

     12 Lee, Terri                            Admin    USA

     14 Hall, Stewart                         Finan    USA

     15 Young, Katherine                      Mngr     USA

     20 Papadopoulos, Chris                   Mngr     USA

     24 Fisher, Pete                          Eng      USA

     28 Bennet, Ann                           Admin    England

     29 De Souza, Roger                       Eng      USA

     34 Baldwin, Janet                        Sales    USA
        </screen>
        <para>If you wish to see all the tables in the database, type the following:</para>
        <programlisting>
SQL&gt; SHOW TABLES;
        </programlisting>
        <para>This will give you all the tables in that database:</para>
        <screen>
       COUNTRY                                CUSTOMER
       DEPARTMENT                             EMPLOYEE

       EMPLOYEE_PROJECT                       JOB

       PHONE_LIST                             PROJECT

       PROJ_DEPT_BUDGET                       SALARY_HISTORY

       SALES
        </screen>

        <para>To exit from isql, simply type quit; and press <keycap>ENTER</keycap>.</para>

      </section>
    </section>

    <section id="paper-fb-macosx-getstart-firstdb">
      <title>Creating Your First Database</title>
      <para>So far, we have executed our commands as SYSDBA, and used the default examples provided
      with the software. Now, we are going to create a database of our own, create a user that will
      have rights to view and modify the database, and try operating on the database.</para>

      <para>To create our database, we will need to use the <emphasis>isql</emphasis> tool. Firebird
      saves its databases under discrete files, and, by convention, the extension is .fdb.
      Note that this is just a convention, and that you can save the database as any extension you
      wish. For this demonstration, we will first create a database using the SYSDBA user.</para>

      <para>We first make sure we are in our temp directory, then run the isql tool as follows:</para>
      <programlisting>
$ cd ~/temp

~/temp $ isql
      </programlisting>

      <para>Then we execute the CREATE DATABASE command:</para>
      <programlisting>
SQL&gt; CREATE DATABASE 'firstdb.fdb' USER 'sysdba' PASSWORD 'masterkey';
      </programlisting>
      <para>This creates a file called firstdb.fdb inside the current directory (our temp directory).
      The database is owned by SYSDBA. We will now create a very rudimentary Sales catalog and fill
      it with data. If you are already familiar with SQL, the following commands should be
      easily understood. If not, you should probably read up on the ANSI SQL-92 standard.</para>
      <programlisting>
SQL&gt; CREATE TABLE sales_catalog (
CON&gt; item_id varchar(10) not null primary key,
CON&gt; item_name varchar(40) not null,
CON&gt; item_desc varchar(50)
CON&gt; );

SQL&gt; INSERT INTO sales_catalog VALUES('001',
CON&gt; 'Aluminium Wok', 'Chinese wok used for stir fry dishes');
SQL&gt; INSERT INTO sales_catalog
CON&gt; VALUES('002', 'Chopsticks extra-long', '60-cm chopsticks');
SQL&gt; INSERT INTO sales_catalog
CON&gt; VALUES('003', 'Claypot', 'Pot for stews');
SQL&gt; INSERT INTO sales_catalog
CON&gt; VALUES('004', 'Charcoal Stove', 'For claypot dishes');
SQL&gt; SELECT * FROM sales_catalog;
      </programlisting>

      <screen>
ITEM_ID    ITEM_NAME                   ITEM_DESC
======== =========================== ================================

001     Aluminium Wok                Chinese wok used for stir fry dishes
002     Chopsticks extra-long        60-cm chopsticks
003     Claypot                      Pot for stews
004     Charcoal Stove               For claypot dishes
      </screen>
      <para>To exit isql, simply type quit; and press <keycap>ENTER</keycap>.</para>
    </section>

    <section id="paper-fb-macosx-getstart-usrsroles">
      <title>Adding Users and Roles</title>
      <para>We now have a database, but it may not be a good idea to create and administer all
      databases using the SYSDBA account. In some cases, for example, if I am running multiple
      databases belonging to different people or groups, I may want each user or group to own their
      respective database, with no rights to view other databases. Another scenario may be a
      requirement to create a proxy user that will execute all database operations, but which may
      not have all the superuser rights of SYSDBA.</para>

      <para>In this section we will create a database user, and assign the account viewing and
      updating rights.</para>
      <para>We will need to use the gsec utility for this operation. So, supposing we want to
      create a user called TestAdmin with password testadmin (I know, I know, another weak password)
      and give him viewing, modification and deletion rights to firstdb.fdb, we will execute the
      following commands. Note that only the first 8 characters are used for the password.</para>

      <programlisting>
$ gsec -user SYSDBA -password masterkey
GSEC> add TestAdmin -pw testadmin -fname FirstDB -lname Administrator
Warning - maximum 8 significant bytes of password used
GSEC> quit
      </programlisting>

      <para>Next, we open the database, create a <emphasis>firstdbadmin</emphasis> ROLE for the
      database, assign the appropriate rights to that role, then add TestAdmin to the role.</para>
      <programlisting>
$ isql firstdb.fdb -user SYSDBA -password masterkey
Database:  firstdb.fdb, User: SYSDBA
SQL&gt; CREATE ROLE firstdbadmin;
SQL&gt; GRANT SELECT, UPDATE, INSERT, DELETE ON sales_catalog
CON&gt; TO ROLE firstdbadmin;
SQL&gt; GRANT firstdbadmin TO TestAdmin;
SQL&gt; quit;
      </programlisting>

      <para>Now, we are ready to test our database.</para>
    </section>

    <section id="paper-fb-macosx-getstart-testdb">
      <title>Testing the Database</title>
      <para>First, exit gsec and isql, if you have not already done so.</para>
      <para>We will login to firstdb.fdb as user TestAdmin with the role firstdbadmin, run some 
      queries, then exit. The commands, and the results are shown below:</para>

      <programlisting>
$ isql firstdb.fdb -user TestAdmin -password testadmin -role firstdbadmin
SQL&gt; DELETE FROM sales_catalog;
SQL&gt; INSERT INTO sales_catalog 
CON&gt; VALUES('001', 'Aluminum Wok', 'Chinese wok');
SQL&gt; INSERT INTO sales_catalog 
CON&gt; VALUES('002', 'Microwave Oven', '300W Microwave oven');
SQL&gt; INSERT INTO sales_catalog 
CON&gt; VALUES('003', 'Chopsticks extra-long', '60cm chopsticks');
SQL&gt; SELECT * FROM sales_catalog;
      </programlisting>
      <screen>
ITEM_ID    ITEM_NAME                       ITEM_DESC
=========  ============================= ========================

001        Aluminum Wok                   Chinese wok
002        Microwave Oven                 300W Microwave oven
003        Chopsticks extra-long          60cm chopsticks
      </screen>
      <para>If you encounter any SQL errors at any point, you will need to check with the additional
      references section at the end of this doc for sources of Firebird info.</para>
      <para>If everything worked, congratulations ! Your Firebird is now ready to fly !</para>
    </section>
  </section>

  <section id="paper-fb-macosx-adv">
    <title>Advanced Topics</title>
    <para>These are my observations/fixes/kludges that address some more advanced areas of Firebird
    on OSX. I'm no OSX or Firebird guru so while these worked for me, ... your mileage may vary ...
    if you have a more elegant or even the correct solution, please share it so this document can
    be improved.</para>

    <section id="paper-fb-macosx-adv-udf">
      <title>User Defined Functions (UDFs)</title>
      <para>[Ed. - more correctly called <emphasis>External Functions</emphasis>. ]  Our development
      project uses a UDF library called UUIDLIB to generate UUID and GUID unique id strings. This
      UDF library can be downloaded
      <ulink url="http://www.ibphoenix.com/main.nfs?a=ibphoenix&amp;page=ibp_udf_libs">here</ulink>
      and comes with source code, plus out-of-the-box binaries for Windows and Linux. In order for me
      to develop/test our project under OSX, I would need to build the UUIDLIB library from source,
      and then configure Firebird-OSX to use my library.</para>

      <para>This led me on a voyage of discovery which ultimately ended in success, but first
      some background info ....</para>

      <para>In <ulink url="http://www.ibphoenix.com/main.nfs?a=ibphoenix&amp;page=ibp_howto6">this
      article</ulink>, Roy Nelson describes UDFs as follows ....</para>

      <para><quote>A User Defined Function (UDF) is a mechanism provided to extend the built-in
      functions InterBase provide. A UDF is written in a &quot;host language&quot; i.e. a language
      which compiles to libraries usable by InterBase on the host platform. UDF's can be written
      to provide custom statistical, string, date or performance monitoring functions. Once a UDF
      is created, it can be used in a database application anywhere that a built-in SQL function
      can be used. On the NT and Windows 95 platforms native libraries normally take the form of
      Dynamic Link Libraries or simply DLL's these libraries are loaded by the operating system
      on a &quot;as needed&quot; basis.</quote></para>

      <para>In summary, a UDF library is a shared library, dynamically loaded by Firebird at runtime.
      Under Windows, shared libraries have a .DLL extension. Under Linux, shared libraries have a .so
      extension. However, under OSX, the type of shared library we want
      has a <firstterm>.dylib</firstterm> extension.</para>

      <para>The MacOSX Firebird package ships two UDF libraries installed in the directory
      <command>/Library/Frameworks/Firebird.framework/Versions/Current/Resources/English.lproj/var/UDF</command>.
      These libraries are contained in the files  fbudf.dylib and ib_udf.dylib.</para>

      <para>Based on documentation for other platforms, I should be able to load and use the
      <function>rpad()</function> function from the supplied ib_udf library by entering the following SQL
      fragment into ISQL ..</para>
      <programlisting>
DECLARE EXTERNAL FUNCTION rpad
        CSTRING(80), INTEGER, CSTRING(1)
        RETURNS CSTRING(80) FREE_IT
        ENTRY_POINT 'IB_UDF_rpad' MODULE_NAME 'ib_udf';
      </programlisting>
      <para>This command appears to succeed and no error messages are printed.  However, when trying to
      use the newly installed <function>rpad()</function> function, the following output is produced:</para>
      <programlisting>
SQL&gt; select rpad('test',10,'.') from RDB$DATABASE;

Statement failed, SQLCODE = -902
Access to UDF library &quot;ib_udf.so&quot; is denied by server administrator
SQL&gt;
      </programlisting>

      <para>Not the result we expected! This error message is a bit misleading and seems to be a
      generic message produced whenever there is a problem with a UDF. It suggests a permission problem
      but in our case, it is because Firebird couldn't load the UDF library because it simply
      does not exist. </para>

      <para>Recall that our library file is called <function>ib_udf.dylib</function>. Firebird is
      looking for a file called <function>ib_udf.so</function> which it cannot find.</para>

      <para>OK, so the first quick fix we try is to copy or rename the ib_udf.dylib file to ib_udf.so
      and then try again... Strangely, we get exactly the same error message ...</para>

      <screen>
Access to UDF library &quot;ib_udf.so&quot; is denied by server administrator
SQL&gt;
      </screen>

      <para>This had me puzzled ... There does now exist a file called ib_udf.so in the UDF directory
      yet still Firebird insists that it cannot be loaded.. To cut a long story short, the solution
      was found in a configuration file called firebird.conf located in the directory
      <function>/Library/Frameworks/Firebird.framework/Versions/Current/Resources/English.lproj/var
      </function>.</para>

      <para>Within this file, there is a section that defines the location and access level of UDF
      libraries. The access level can be one of  'None, Restrict or Full'. In the case of Restrict,
      a list of paths, seperated by semi-colons is required to indicate the search locations for
      UDF libraries.  In the MacOSX Firebird install, the default setting is ...</para>

      <programlisting>
UdfAccess = Restrict UDF
      </programlisting>

      <para>... which tells Firebird that access to UDF functions is to be Restricted to the
      directory UDF.  The intention seems to be that this path is relative to the Firebird
      Install directory;  however, under OSX, this does not seem to work.</para>
      <para>So,  I tried adding the full path of the UDF directory as follows:</para>

      <programlisting>
UdfAccess = Restrict UDF;
        /Library/Frameworks/Firebird.framework/Resources/English.lproj/var/UDF;
      </programlisting>

      <para>Now, when we try and use the rpad() function we get the following results:</para>
      <programlisting>
SQL> select rpad('test',10,'.') from RDB$DATABASE;

RPAD
==========================================================

test......
      </programlisting>
      <para>SUCCESS !! We can now use UDF's under MacOSX.</para>

      <section id="paper-fb-macosx-adv-udf-more">
        <title>Further Information on UDFs</title>
        <para>Some further information on UDFs can be found at these places:</para>
        <itemizedlist>
          <listitem>
            <para>A PDF document on
            <ulink url="http://bdn.borland.com/article/26126">Extending Interbase with User
            Defined Functions</ulink></para>
          </listitem>
          <listitem>
            <para>A page with
            <ulink url="http://www.ibphoenix.com/main.nfs?a=ibphoenix&amp;page=ibp_udf_libs">links
            to a number of UDF Libraries</ulink>.  However, the pre-built binaries are generally for
            Windows and/or Linux only.</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>
    <section id="paper-fb-macosx-adv-aliases">
      <title>Database Aliases</title>
      <para>Whenever you connect to a Firebird database, the full path and filename of the database file
      must be specified. Apart from being inconvenient and non-intuitive, when accessing a database
      on a remote server, it presents a bit of a security risk.</para>
      
      <para>You can make life a lot easier if you use the 'Alias' capability of Firebird as follows:</para>
      
      <para>Use your editor to create the plain text file 
      <function>/Library/Frameworks/Firebird.framework/Resources/English.lproj/var/aliases.conf</function>.</para>
      
      <para>Then add lines of the format</para>
      <programlisting>
    alias = full_path_to_database_file
      </programlisting>
      <para>For example ...</para>
      <programlisting>
    testdb=/Users/dwp/fbdata/testdb.fdb
      </programlisting>
      
      <para>Now, when using isql to access the testdb database, instead of ...</para>
      <programlisting>
SQL&gt; connect '/Users/dwp/fbdata/testdb.fdb'
      </programlisting>
      <para>you can use ...</para>
      <programlisting>
SQL&gt; connect 'testdb'
      </programlisting>
      <para>or to connect via the network socket ...</para>
      <programlisting>
SQL&gt; connect 'localhost:testdb'
      </programlisting>
    </section>
  </section>

  <section id="paper-fb-macosx-build">
    <title>Building Firebird from Source on MacOSX</title>
    <para>The next three sections record how I have built various models and versions of Firebird on MacOSx (eMac).
    </para>

    <section id="paper-fb-macosx-build-151classic">
      <title>Firebird Classic 1.5.1</title>
      <para>To build from source, you will have to have the XCode Tools (which includes GCC) installed
      on your Mac. These are freely available from the Apple Developer Connection site.
      Create a free membership account in order to download the developer tools.</para>

      <para>My current build environment is:</para>
      <itemizedlist>
        <listitem>
          <para>Mac OSX Panther (10.3.7)</para>
        </listitem>
        <listitem>
          <para>XCode 1.5</para>
        </listitem>
        <listitem>
          <para>gcc (GCC) 3.3 20030304 (Apple Computer, Inc. build 1671)</para>
        </listitem>
      </itemizedlist>

      <para>In order to build Firebird Classic1.5.1 from Source Code on MacOSX, the following steps
      are required:</para>

      <procedure>
        <step>
          <para>Download the latest source code package from the SourceForge Firebird page.
          In this example, we have downloaded firebird-1.5.1.4481.tar.bz2</para>
        </step>

        <step>
          <para>Create a work directory and copy the source package into it.  Our work
          directory is called firebird151</para>
        </step>

        <step>
          <para>Open a Terminal window and change to our work directory</para>
        </step>

        <step>
          <para>Unpack the source code archive using the following command</para>
          <programlisting>
 $ tar -jxvf firebird-1.5.1.4481.tar.bz2
          </programlisting>
          <para>This will unpack the contents into a subdirectory called firebird-1.5.1.4481.
          Change to the source directory using cd firebird-1.5.1.4481 before continuing.</para>
        </step>

        <step>
          <para>You need to set a couple of environment variables before proceeding as the default
          build process looks for the programs <function>libtoolize</function> and
          <function>libtool</function>. Under OSX, the gnu versions of these programs, glibtoolize and
          glibtool must be used instead:</para>
          <programlisting>
      $ export LIBTOOLIZE=glibtoolize
      $ export LIBTOOL=glibtool
         </programlisting>
        </step>

        <step>
          <para>Now run the autogen.sh shell script which automagically creates and runs the
          configure script to generate the required Makefile.</para>
          <programlisting>
      $ ./autogen.sh
          </programlisting>
          <para>This will take a wee while to complete. Once it is finished, you should see
          something like this at the end of the output:</para>
          <screen>
      The Firebird2 package has been configured with the following options:

      Architecture : ClassicServer
             Debug : disabled
        64 bit I/O : enabled
       Raw devices : disabled
      Lock manager : enabled
      Service name : gds_db
      Service port : 3050
      GPRE modules : c_cxx.cpp

       Install Dir : /usr/local/firebird

      Now type `make' to compile Firebird2
          </screen>
        </step>

        <step>
          <para>As the last line in the previous step says, run <command>make</command>
          to build the software:</para>
          <programlisting>
      $ make
          </programlisting>
          <para>The build takes a while to run ... make a cup of coffee. At the completion
          of the build process, you should see ...</para>
          <screen>
      **********************************************************

      Build Successful!!

      You can find the installer packages in gen/firebird, and the raw
      frameworks in gen/firebird/frameworks

      Run "make install" as root (or via sudo) to install your binary.

      Enjoy
          </screen>
        </step>

        <step>
          <para>If you look in the gen/firebird directory, you should see something like the following:</para>
          <screen>
 ahost:~/projects/Firebird/firebird-1.5.1.4481 $ ls -l gen/firebird/
 total 2880
 drwxr-xr-x  20 dwp  dwp     680 28 Dec 17:27 .
 drwxr-xr-x  60 dwp  dwp    2040 28 Dec 17:13 ..
 drwxr-xr-x   3 dwp  dwp     102 28 Dec 17:27 Firebird-CS-1.5.pkg
 drwxr-xr-x   6 dwp  dwp     204 28 Dec 17:21 Firebird.framework
 drwxr-xr-x   4 dwp  dwp     136 28 Dec 17:27 UDF
 drwxr-xr-x  28 dwp  dwp     952 28 Dec 17:26 bin
 -rw-rw-rw-   1 dwp  dwp  145272 28 Dec 17:21 de_DE.msg
 drwxr-xr-x   3 dwp  dwp     102 28 Dec 17:12 examples
 -rw-rw-rw-   1 dwp  dwp  132796 28 Dec 17:21 firebird.msg
 -rw-rw-rw-   1 dwp  dwp  144216 28 Dec 17:21 fr_FR.msg
 drwxr-xr-x   3 dwp  dwp     102 28 Dec 17:27 frameworks
 drwxr-xr-x   3 dwp  dwp     102 28 Dec 17:20 help
 drwxr-xr-x   8 dwp  dwp     272 28 Dec 17:21 include
 drwxr-xr-x   3 dwp  dwp     102 28 Dec 17:21 intl
 -rw-rw-rw-   1 dwp  dwp       0 28 Dec 17:20 isc_init1.PBBear.local
 -rw-rw-rw-   1 dwp  dwp  262144 28 Dec 17:20 isc_lock1.PBBear.local
 -rw-rw-rw-   1 dwp  dwp  135656 28 Dec 17:21 ja_JP.msg
 drwxr-xr-x  12 dwp  dwp     408 28 Dec 17:27 lib
 drwxr-xr-x   3 dwp  dwp     102 28 Dec 17:21 misc
 -rw-rw-rw-   1 dwp  dwp  643072 28 Dec 17:27 security.fdb
          </screen>

          <para>The first entry shows that we have successfully built a MacOSX Installer Package
          called <command>Firebird-CS-1.5.pkg</command>.</para>

          <para>You can install this package either by double-clicking it in the Finder, or
          from the commandline by typing</para>
          <programlisting>
   open gen/firebird/Firebird-CS-1.5.pkg
          </programlisting>
        </step>
      </procedure>
    </section>

    <section id="paper-fb-macosx-build-152classic">
      <title>Updated :: Firebird Classic 1.5.2</title>
      <para>My initial attempts to build FB 1.5.2 failed with a variety of error messages.
      After hacking around a bit, the following steps worked for me.</para>

      <procedure>
        <step>
          <para>Unpack the source tarball and then change into the firebird source directory.</para>
          <programlisting>
      $ tar -jxvf firebird-1.5.2.4731.tar.bz2
      $ cd firebird-1.5.2.4731
          </programlisting>
        </step>

        <step>
          <para>Run the clean script to ensure we start from the base build tree.</para>
          <programlisting>
      $ yes | . ./clean.sh
          </programlisting>
        </step>

        <step>
          <para>Export these environment variables so that the build uses the gnu libtools
          installed on OSX:</para>
          <programlisting>
      $ export LIBTOOLIZE=glibtoolize
      $ export LIBTOOL=glibtool
          </programlisting>
        </step>

        <step>
          <para>Now, edit the builds/posix/make.defaults and configure.in.</para>
          <important>
            <para>The Darwin Linker does not recognize the <command>--version-script</command>
            flag for attaching symbols to generated libs.  To prevent errors, edit the
            <command>builds/posix/prefix.darwin</command> file and add the following lines
            to the end of the file:</para>
            <programlisting>
    LIB_LINK_MAPFILE=
    LINK_FIREBIRD_SYMBOLS=
    LINK_FBINTL_SYMBOLS=
            </programlisting>
          </important>
        </step>

        <step>
          <para>Next, some OS-specific directories are not created by the supplied configure
          file. This will cause the build to fail.</para>
          <para>You should edit the configure file and add the following lines at approximately
          line number 21277 in the appropriate sections:</para>
          <programlisting>
      mkdir -p temp/client.qli/jrd/os/darwin
      mkdir -p temp/client.util/jrd/os/darwin
      mkdir -p temp/client.gdef/jrd/os/darwin
      mkdir -p temp/embed.util/jrd/os/darwin
      mkdir -p temp/embed.gdef/jrd/os/darwin
      mkdir -p temp/embed.qli/jrd/os/darwin
          </programlisting>

          <note>
            <para>The configure file is a generated file. If you run autogen.sh again, this
            file will be overwritten. To make this change permanent, add the lines to the
            <command>configure.in</command> file before running autogen.sh.</para>
          </note>
        </step>

        <step>
          <para>Now run the configure script to produce the platform-specific Makefile(s):</para>
          <programlisting>
      $ ./configure
          </programlisting>
        </step>

        <step>
          <para>When the script completes, you will see the following output:</para>
          <screen>
      The Firebird2 package has been configured with the following options:

      Architecture : ClassicServer
      Debug : disabled
      64 bit I/O : enabled
      Raw devices : disabled
      Lock manager : enabled
      Service name : gds_db
      Service port : 3050
      GPRE modules : c_cxx.cpp

      Install Dir : /usr/local/firebird

      Now type `make' to compile Firebird2
      </screen>
        </step>

        <step>
          <para>So, now do as it says and run make:</para>
          <programlisting>
      $ make
          </programlisting>

          <para>The build will chug away for a while before displaying the completion message:</para>

          <screen>
      **********************************************************
      Build Successful!!

      You can find the installer packages in gen/firebird, and the raw
      frameworks in gen/firebird/frameworks

      Run "make install" as root (or via sudo) to install your binary.

      Enjoy
          </screen>
        </step>

        <step>
          <para>You will find the Firebird-CS-1.5.pkg OSX Installer Package in the gen/firebird
          directory.</para>
        </step>
      </procedure>
      <note>
        <para>On a couple of occasions, the build failed with an error relating to ranlib and the
        libeditline.a  being out of date.  If you receive this error, you need to run the ranlib
        program against the libeditline.a file, then continue the make process as follows:</para>
        <programlisting>
$ ranlib gen/firebird/lib/libeditline.a
$ make
        </programlisting>
      </note>
    </section>

    <section id="paper-fb-macosx-build-152sserver">
      <title>Firebird Superserver 1.5.2</title>
      <para>To build the SuperServer Installer Package, you should first successfully build the 
      CS version as described above. Then, </para>
      
      <procedure>
        <step>
          <para>In the firebird source directory, run the configure script with the superserver 
          switch as follows:</para>
          <programlisting>
      $ ./configure --enable-superserver
          </programlisting>
          <para>At the end of the script execution, you will see the following output:</para>
          <screen>
      The Firebird2 package has been configured with the following options:

      Architecture : SuperServer
             Debug : disabled
        64 bit I/O : enabled
       Raw devices : disabled
      Service name : gds_db
      Service port : 3050
      GPRE modules : c_cxx.cpp

       Install Dir : /usr/local/firebird
          </screen>
        </step>


        <step>
          <para>Now run the make command to build the package:</para>
          <programlisting>
      $ make
          </programlisting>
          <para>When the build is complete, you should have a new Installer Package in the
          gen/firebird directory called Firebird-SS-1.5.pkg:</para>
          <programlisting>
      $ ls gen/firebird/F*

      Firebird-CS-1.5.pkg     Firebird-SS-1.5.pkg     Firebird.framework
          </programlisting>
        </step>

        <step>
          <para>Now, run the installer package, either by locating it in the Finder and
          double-clicking, or by using the open utility from the commandline as follows:</para>
          <programlisting>
      $ open gen/firebird/Firebird-SS-1.5.pkg
          </programlisting>
        </step>

        <step>
          <para>Upon completion of the installation, a StartupItem for the Firebird SuperServer 
          daemon has been installed in /System/Library/StartupItems/Firebird.</para>
          <para>Start the Firebird SuperServer using the following commandline:</para>
          <programlisting>
      $ sudo SystemStarter start &quot;Firebird Server&quot;
          </programlisting>
          <para>You can check that it is running using the ps command as follows:</para>
          <screen>
$ ps aux | grep fb
root ... /Library/Frameworks/Firebird.framework/Resources/English.lproj/var/bin/fbguard -f
root ... /Library/Frameworks/Firebird.framework/Resources/English.lproj/var/bin/fbserver
          </screen>
          <para>You should see running processes called fbguard and fbserver.</para>
        </step>

        <step>
          <para>From now on, whenever you restart your machine, the Firebird Superserver will
          be started automatically.</para>
          <para>You can manually stop, start and restart the Firebird Superserver using
          the SystemStarter command in a Terminal as follows:</para>
          <screen>
          $ sudo SystemStarter stop &quot;Firebird Server&quot;
          $ sudo SystemStarter start &quot;Firebird Server&quot;
          $ sudo SystemStarter restart &quot;Firebird Server&quot;
          </screen>
        </step>
      </procedure>

      <note>
        <itemizedlist>
          <listitem>
            <para>If you have already installed either the Classic or Superserver package,
            running the installer again will 'Upgrade' it. Whilst this should be safe, I recommend
            that you backup your existing installation by copying
            the /Library/Frameworks/Firebird.framework directory tree to another location
            before proceeding with installation.</para>
            <para>I have safely flipped between Classic/SuperServer operation just by 'upgrading'
            with the required package. Note that during an upgrade, the Firebird Security
            database is preserved, so any users/password changes you have made remain in effect.</para>
          </listitem>

          <listitem>
            <para>Installation of both the Classic and Superserver packages is not a problem.
            However, operationally,  only the last installed version will be used at runtime.</para>
            <para>For instance, when you install Classic,  Firebird is configured to listen for
            database connections on port 3050 via the xinetd daemon. If you later install
            Superserver, Firebird is removed from the xinetd configuration. You must use
            SystemStarter (or restart your machine) to start the Firebird SuperServer daemon,
            which will then listen for database connections on port 3050.</para>
          </listitem>

          <listitem>
            <para>To cleanup before a totally fresh install (ie. during development or testing),
            the following directories must be removed:</para>
            <programlisting>
            /Library/Frameworks/Firebird.framework
            /System/Library/StartupItems/Firebird
            /Library/Receipts/Firebird-XX-1.5.pkg
            </programlisting>
            <para>The next installation of the package will then ask you to Install instead of Upgrade.</para>
          </listitem>

          <listitem>
            <para>In order for other machines to connect to your Firebird databases, in your
            System Preferences, go to the Sharing/Firewall page and open port 3050 to inbound
            connections. Assess your own security policy before doing this.</para>
          </listitem>

          <listitem>
            <para>The SuperServer installation installs a SystemStarter script in the location
            /System/Library/StartupItems/Firebird/.  According to the docs I have read,
            the /System/Library/StartupItems directory is reserved for use by Mac OSX startup
            processing. User daemons should instead be installed in /Library/StartupItems directory.</para>
          </listitem>

          <listitem>
            <para>The SuperServer startup script /System/Library/StartupItems/Firebird/Firebird
            contains the SYSDBA password hard-coded in it to enable the Firebird shutdown
            command to succeed.</para>
            <itemizedlist>
              <listitem><para>This may be regarded by some as a security hole</para></listitem>
              <listitem>
                <para>If you change the default SYSDBA password (masterkey) as recommended in
                the install docs, then you will also have to edit the startup script and replace
                the default password with your new SYSDBA password.</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>The SuperServer startup script runs the Firebird SuperServer processes under
            the root profile.</para>
            <itemizedlist>
              <listitem><para>This may be regarded by some as a security risk</para></listitem>
              <listitem><para>During installation of the Firebird package, a user called firebird was
              created, however, this user profile is not used.</para></listitem>
              <listitem><para>You can modify the startup script to run the SuperServer under the firebird
              profile as follows:</para>
              <procedure>
                <step>
                  <para>Edit the script /System/Library/StartupItems/Firebird/Firebird</para>
                </step>

                <step>
                  <para>Change the StartService code to use the su -c  command as follows:</para>
                  <programlisting>
su firebird 
 -c &quot;/Library/Frameworks/Firebird.framework/Resources/bin/fbmgr.bin 
 -start&quot;
                  </programlisting>
                </step>

                <step>
                  <para>Change StopService, so:</para>
                  <programlisting>
su firebird 
 -c &quot;/Library/Frameworks/Firebird.framework/Resources/bin/fbmgr.bin
 -shut -password masterkey&quot;
                  </programlisting>
                </step>

                <step>
                  <para>and RestartService, so:</para>
                  <programlisting>
su firebird 
 -c &quot;/Library/Frameworks/Firebird.framework/Resources/bin/fbmgr.bin
 -shut -password masterkey&quot;
su firebird 
 -c &quot;/Library/Frameworks/Firebird.framework/Resources/bin/fbmgr.bin
 -start&quot;
                  </programlisting>
                </step>

                <step>
                  <para>Save your changes.</para>
                </step>
              </procedure>
            </listitem>

            <listitem>
              <para>Then you must ensure that the contents
              of /Library/Frameworks/Firebird.framework are owned by the user firebird:</para>
              <programlisting>
                  $ sudo chown -R firebird:firebird  /Library/Frameworks/Firebird.framework/
              </programlisting>
            </listitem>

            <listitem>
              <para>Finally, you must ensure that any database you wish to create and/or access
              must be in a location to which the firebird user has read/write privileges.
              The easiest way to do this is to create a special directory to hold all your
              Firebird databases and assign its ownership to the firebird user.</para>
              <programlisting>
 $ cd ~
 $ mkdir fbdata
 $ sudo chown firebird:firebird fbdata

 $ isql -u SYSDBA -p masterkey
   Use CONNECT or CREATE DATABASE to specify a database
 SQL&gt; CREATE DATABASE '/Users/dwp/fbdata/testdb.fdb';
 SQL&gt; quit;
              </programlisting>

              <para>If we now look in the fbdata directory, we will see our new database has
              been created by the Firebird Superserver process and that it is owned by the
              firebird user (ie. the user who owns the Superserver process):</para>
              <programlisting>
 $ ls -l fbdata
     total 1168
     drwxr-xr-x   3 firebird  firebird     102  2 Jan 20:26 .
     drwxr-xr-x  77 dwp       dwp         2618  2 Jan 20:25 ..
     -rw-------   1 firebird  firebird  598016  2 Jan 20:28 testdb.fdb
              </programlisting>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
    </note>
  </section>
  </section>

  <!-- Appendices -->

  <appendix id="paper-fb-macosx-refs">
  <title>Additional References</title>
  <para>For more information about Firebird operations or SQL commands that it accepts, you can
  refer to the Interbase v6.0 beta manuals which can be linked to from the Firebird website
  <ulink url="http://www.firebirdsql.org/index.php?op=doc&amp;id=userdoc">at this page</ulink>.</para>
  <itemizedlist>
    <listitem><para>API Guide</para></listitem>
    <listitem><para>Data Definition Guide</para></listitem>
    <listitem><para>Developers Guide</para></listitem>
    <listitem><para>Embedded SQL Guide</para></listitem>
    <listitem><para>Operations Guide</para></listitem>
    <listitem><para>Language Reference</para></listitem>
    <listitem><para>Getting Started</para></listitem>
  </itemizedlist>
  
  <para>There are altogether 7 manuals and the information seems to have been quite reliable 
  for Firebird 1.0.  The Operations Guide and the Language Reference provided information for 
  the original version of this HowTo.</para>
  <para>[ Added by editor :: The release notes for all Firebird release versions must be included 
  in your resource set.  They are usually included with binary kits, although they may be missing 
  from kits built outside the control of the project.  You can always find them at the Download 
  pages of the Firebird website. ]</para>

  <para>The Firebird website contains many pointers to interesting articles related to the history 
  of Firebird as well as several White Papers which may be interesting to technology managers.</para>
  <para>The awesome <ulink url="http://www.ibphoenix.com">IBPhoenix website </ulink> has a large 
  amount of reference information and links relating to Interbase and Firebird.</para>
  
  <para>A detailed description of the Firebird User and Role based Security Model can be found 
  in <ulink url="http://www.ibphoenix.com/main.nfs?a=ibphoenix&amp;page=ibp_sqlroles">this 
  document</ulink>.</para>
  
  <para>Helen Borrie, a member of the the Firebird Project Team (and fellow Kiwi  ... kia ora
  Helen :-) has written <citetitle>The Firebird Book</citetitle>, at 1100+ pages, 
  <ulink url="http://www.ibphoenix.com/main.nfs?a=ibphoenix&amp;page=ibp_firebird_book">this
  hefty tome</ulink> contains a huge amount of detail on the Firebird database and is an essential
  resource for anyone using Firebird in the real world. I don't have a copy of this book, but I
  did manage to thumb through a copy at Foyles bookshop in London, and I will definitely
  purchase it on my next UK trip!</para>
  </appendix>

  <appendix id="paper-fb-macosx-dochist">
  <title>Document History</title>

  <para>The exact file history is recorded in the <filename
    class="directory">manual/src/docs/papers</filename> module in our CVS tree; see <ulink
    url="http://sourceforge.net/cvs/?group_id=9028">http://sourceforge.net/cvs/?group_id=9028</ulink></para>

  <para>
    <revhistory>
      <revision>
        <revnumber>1.0</revnumber>

          <date>06 Dec 2006</date>

          <authorinitials>DP</authorinitials>

          <revdescription>
            <para>Entered sources in CVS under Firebird standard open documentation licensing (see
            below) with some editorial modifications to facilitate correct document layout for use with
            Firebird documentation project tools.</para>
          </revdescription>
        </revision>

      </revhistory>
    </para>
  </appendix>

  <appendix id="paper-fb-macosx-license">
    <title>License Notice</title>
    <para>The contents of this Documentation are subject to the Public
    Documentation License Version 1.0 (the <quote>License</quote>); you may
    only use this Documentation if you comply with the terms of this License.
    Copies of the License are available at <ulink
    url="http://www.firebirdsql.org/pdfmanual/pdl.pdf">http://www.firebirdsql.org/pdfmanual/pdl.pdf</ulink>
    (PDF) and <ulink
    url="http://www.firebirdsql.org/manual/pdl.html">http://www.firebirdsql.org/manual/pdl.html</ulink>
    (HTML).</para>

    <para>The original HTML documentation was published under
    a <ulink url="http://creativecommons.org/licenses/by-sa/2.0/">Creative Commons Licence</ulink>
    under the title <citetitle>Firebird Relational Database on MacOSX</citetitle> and previously under
    the terms of the GNU GPL.</para>

    <para>The Initial Writer of the Original Documentation is: David Pugh.</para>

    <para>Copyright (C) 2004-2006. Some Rights Reserved. Initial Writer contact:
    david AT bootstrap DOT co DOT nz</para>

    <para>The following copyright notice is reproduced verbatim from the original document by Pascal
    Chong from which the author derived the structure of this one:</para>

    <para><quote>This document is free documentation; you can redistribute it and/or modify it under
    the terms of the GNU General Public License as published by the Free Software Foundation;
    either version 2 of the License, or (at your option) any later version. This document is
    distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
    implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
    Public License for more details.</quote></para>

  </appendix>

</article>