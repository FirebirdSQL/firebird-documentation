  <chapter id="rnfb25-apiods">
    <chapterinfo>
      <title>Changes to the Firebird API and ODS</title>
      <para><emphasis role="bold">as at Release 2.5</emphasis></para>
    </chapterinfo>

    <section id="rnfb25-apiods-ods" xreflabel="ODS Changes"><!-- Level 1 section -->
      <title>ODS (On-Disk Structure) Changes</title>
      <para>On-disk structure (ODS) changes include the following:</para>

      <section id="rnfb25-apiods-ods-number"><!-- Level 2 section -->
        <title>New ODS Number</title>
        <para>Firebird 2.5 creates databases with an ODS (On-Disk Structure) version of 11.2</para>
      </section>

      <section id="rnfb25-apiods-page_size"><!-- Level 2 section -->
        <title>Maximum Page Size</title>
        <para>The maximum page size remains 16 KB (16384 bytes).</para>
      </section>

      <section id="rnfb25-apiods-num_buffers"><!-- Level 2 section -->
        <title>Maximum Number of Page Buffers in Cache</title>
        <para>The maximum number of pages that can be configured for the database cache
        depends on whether the database is running under 64-bit or 32-bit Firebird:</para>
        <itemizedlist>
          <listitem>
            <para>64-bit :: 2^31 -1 (2,147,483,647) pages</para>
          </listitem>
          <listitem>
            <para>32-bit :: 128,000 pages, i.e., unchanged from V.2.1</para>
          </listitem>
        </itemizedlist>
      </section>  
    </section>

    <!-- API -->
    <section id="rnfb25-apiods-api" xreflabel="API Extensions"><!-- Level 1 section -->
      <title>API (Application Programming Interface) Extensions</title>
      <para>Additions to the Firebird API include.-</para>

      <section id="rnfb25-apiods-api-conncharset"><!-- Level 2 -->
        <sectioninfo>
          <title>Connection Strings &amp; Character Sets</title>
          <author><firstname>A.</firstname><surname>dos Santos Fernandes</surname></author>
        </sectioninfo>
        <para>Previous versions had no way to interoperate with the character set(s) used by the
        operating system and its filesystem.  Firebird 2.5 has been made <quote>environmentally
        aware</quote> with regard to the file names of databases, other files and string parameters 
        generally, when accessed through and/or passed in API connection requests.  This change 
        significantly improves Firebird's ability to accept and work with file names and other parameters 
        containing characters that are not in the ASCII subset.</para>
        <important>
          <title>Only DPB Connections Support this Feature</title>
          <para>In the current implementation, only connections made through the
          DPB (database parameter block) support this feature.  It is not
          supported for Services API (<emphasis>isc_spb*</emphasis>) functions.</para>
        </important>

        <section id="rnfb25-apiods-api-conncharset01"><!-- Level 3 -->
          <title>isc_dpb_utf8_filename</title>
          <para>The new connection option <command> isc_dpb_utf8_filename</command> has been
          introduced, to enable Firebird to be specifically informed that the file name or other 
          character item being passed is in the UTF8 (UTF-8) character set.  If the option is not 
          used, the character set defaults to the codepage of the operating system.</para>

          <section id="rnfb25-apiods-api-conncharset01a"><!-- Level 4 -->
            <title>Client-Server Compatibility</title>
            <variablelist>
              <varlistentry>
                <term>New client, older server</term>
                <listitem>
                  <para>If the client is V.2.5 or newer and it is connecting to a
                  pre-V.2.5 remote server, using the <command> isc_dpb_utf8_filename</command>
                  option causes the <emphasis>client</emphasis> to convert the file name from
                  UTF-8 to the <emphasis>client codepage</emphasis> before passing it to the
                  server.  It removes the <command> isc_dpb_utf8_filename</command> option from
                  the DPB.</para>
                  <para>Compatibility is assured when the same codepage is being used
                  on both the the client and server stations.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>New client, new server, without isc_dpb_utf8_filename</term>
                <listitem>
                  <para>If the client is V.2.5 or newer and it is connecting to a
                  V.2.5 or newer remote server without using the
                  <command>isc_dpb_utf8_filename</command>, the client converts the
                  file name from the OS codepage to UTF-8 and inserts the
                  <command>isc_dpb_utf8_filename</command> option into the DPB.</para>

                  <para>The file name received on the server is not subject to any special
                  treatment.  However, unlike older clients, the V.2.5 client may convert the
                  file name automatically and insert the <command> isc_dpb_utf8_filename</command>
                  option into the DPB. Compatibility is guaranteed, regardless, when the
                  host and client are using the same code page.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>New client, new server, with isc_dpb_utf8_filename</term>
                <listitem>
                  <para>Whenever the <command>isc_dpb_utf8_filename</command> option is
                  used, the client passes the unmodified filename to the server. The client
                  thus always passes a UTF-8 file name to the server along with
                  the <command>isc_dpb_utf8_filename</command> option. </para>
                </listitem>
              </varlistentry>
            </variablelist>
          </section><!-- sect4 -->
        </section><!-- sect3 -->

        <section id="rnfb25-apiods-api-conncharset02"><!-- Level 3 -->
          <title>Code Page Conversions</title>
          <para>On Windows the code page used for conversions is Windows ANSI.  On all other
          platforms, UTF-8 is used.</para>

          <para>The operating system codepage and UTF-8 may not be the best choice for file
          names. For example, if you had a script or other text file for processing in
          <emphasis>isql</emphasis> or some other script-running tool that used another
          connection character set, it would not be possible to edit the file correctly
          using multiple character sets (code pages).</para>

          <para>There is a solution:  the <firstterm>Unicode code point</firstterm>.  If
          used correctly, it enables correct interpretation of a character even if the
          client is older than V.2.5.</para>

          <section id="rnfb25-apiods-api-conncharset02a"><!-- Level 4 -->
            <title>Using Unicode Code Points</title>
            <para>Any Unicode character may now now be encoded on the connection string
            file name as though it were an ASCII character. It is accomplished by using
            the symbol <firstterm>#</firstterm> as a prefix for a Unicode code point
            number (in hexadecimal format, similar to U+XXXX notation).</para>

            <para>Write it as <command>#XXXX</command> with X being 0-9, a-f, A-F.</para>

            <para>If one of the characters happens to be the literal #, you could either
            <quote>double</quote> the hash character (&nbsp;##&nbsp;) or use the code point
            number for it, <command>#0023</command>.</para>
            <note>
              <para>The hash character is interpreted at the server with these new semantics,
              even if the client is older than v2.5.</para>
            </note>
          </section><!-- sect4 -->
        </section><!-- sect3 -->
      </section><!-- sect2 -->

      <section id="rnfb25-apiods-api-sqlstate">
        <sectioninfo>
          <title>Support for SQLSTATE Completion Codes</title>
          <authorgroup>
            <author><firstname>W.</firstname><surname>Oliver</surname></author>
            <author><firstname>D.</firstname><surname>Yemanov</surname></author>
          </authorgroup>
        </sectioninfo>

        <para>Tracker reference <ulink url="http://tracker.firebirdsql.org/browse/CORE-1761">CORE-1761</ulink>.</para>
        <para>A new client-side API function, <command>fb_sqlstate()</command> is available to convert the status
        vector item for an error into the corresponding SQL-2003 standard 5-alphanumeric SQLSTATE.</para>
        <itemizedlist>
          <listitem>
            <para>The SQLSTATE code represents the concatenation of a 2-character SQL CLASS and a 3-character
            SQL SUBCLASS.</para>
          </listitem>
          <listitem>
            <para>Statements now return an SQLSTATE completion code.</para>
          </listitem>
          <listitem>
            <para>The <emphasis>isql</emphasis> utility now prints the SQLSTATE diagnostic for errors instead of
            the SQLCODE one</para>
          </listitem>
          <listitem>
            <para>The SQLCODE diagnostic is deprecated&mdash;meaning it will disappear in a future release</para>
          </listitem>
        </itemizedlist>
        <note>
          <title>Deprecated SQLCODE</title>
          <para>Although the SQLCODE is deprecated and use of the SQLSTATE is preferred, it
          remains in Firebird for the time being.  The <firstterm>isc_sqlcode()</firstterm> API
          function is still supported, as is the <command>WHEN SQLCODE</command> exception handling.</para>
        </note>
        <para><link linkend="rnfb25-appx-sqlstates">Appendix A: SQLSTATE</link> provides a list of all 
        SQLSTATE codes in use in this release, along with the corresponding message texts.</para>
      </section>

      <section id="rnfb25-apiods-api-unprpr"><!-- Level 2 section -->
        <sectioninfo>
          <title><quote>Efficient Unprepare</quote></title>
          <authorgroup>
            <author><firstname>W.</firstname><surname>Oliver</surname></author>
            <author><firstname>D.</firstname><surname>Yemanov</surname></author>
          </authorgroup>
        </sectioninfo>
        <para>Tracker reference <ulink url="http://tracker.firebirdsql.org/browse/CORE-1741">CORE-1741</ulink>.</para>

        <para>The new option <firstterm>DSQL_unprepare</firstterm> (numeric value 4) for the API routine
        <firstterm>isc_dsql_free_statement()</firstterm> allows the DSQL statement handle to survive the
        <quote>unpreparing</quote> of the statement.</para>
        <para>Previously, the <firstterm>isc_dsql_free_statement()</firstterm> function supported only
        <firstterm>DSQL_close</firstterm> (for closing a named cursor) and <firstterm>DSQL_drop</firstterm> (which frees
        the statement handle).</para>
        <para>The API addition is:</para>
        <programlisting>
#define DSQL_close 1
#define DSQL_drop 2
#define DSQL_unprepare 4
        </programlisting>
      </section>

      <section id="rnfb25-apiods-api-cnclop"><!-- Level 2 section -->
        <sectioninfo>
          <title>Cancel Operation Function</title>
            <author><firstname>Alex</firstname><surname>Peshkov</surname></author>
        </sectioninfo>
        <para>New <firstterm>fb_cancel_operation()</firstterm> API call, allowing cancellation of the current activity
        being performed by some kind of blocking API call in the given connection.</para>

        <para><emphasis role="bold">Syntax</emphasis></para>
        <literallayout class="monospaced">
   ISC_STATUS fb_cancel_operation(ISC_STATUS* status_vector,
                                  isc_db_handle* db_handle,
                                  ISC_USHORT option);
        </literallayout>

        <para><emphasis role="bold">Parameters</emphasis></para>

        <variablelist>
          <varlistentry>
            <term>status vector (ISC_STATUS* status_vector)</term>
            <listitem>
              <para>A regular status vector pointer structure.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>db_handle (pointer to a isc_db_handle)</term>
            <listitem>
              <para>A regular, valid database handle.  It identifies the attachment.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>option (unsigned short: symbol)</term>
            <listitem>
              <para>Determines the action to be performed. The option symbols are:</para>
              <itemizedlist>
                <listitem>
                  <para><emphasis>fb_cancel_raise</emphasis>: cancels any activity related to the
                  <command>db_handle</command> specified in the second parameter. The effect will be
                  that, as soon as possible, the engine will try to stop the running request and
                  return an exception to the caller via the status vector of the interrupted API 
                  call.</para>
                  <para><quote>..as soon as possible</quote> will be, under normal conditions, at
                  the next rescheduling point.</para>
                  <example>
                    <literallayout class="monospaced">
Thread1:                                Thread2:
------------------------------          ------------------------------

isc_dsql_execute(status, ....)
........                                fb_cancel_operation(cancel_status, ...)
status[1] == isc_cancelled;             cancel_status[1] = 0;
                    </literallayout>
                  </example>
                </listitem>
                <listitem>
                  <para><emphasis>fb_cancel_disable</emphasis>: disables execution of
                  <emphasis>fb_cancel_raise</emphasis> requests for the specified attachment. It
                  can be useful when your program is executing critical operations, such as
                  cleanup, for example.</para>
                </listitem>
                <listitem>
                  <para><emphasis>fb_cancel_enable</emphasis>: re-enables delivery of a cancel execution
                  that was previously disabled.  The 'cancel' state is effective by default, being
                  initialized when the attachment is created.</para>
                </listitem>
                <listitem>
                  <para><emphasis>fb_cancel_abort</emphasis>: : forcibly close client side of connection. 
                  Useful if you need to close a connection urgently. All active transactions will be 
                  rolled back by the server. 'Success' is always returned to the application. 
                  <emphasis role="bold">Use with care !</emphasis></para>
                </listitem>
              </itemizedlist>
            </listitem>
          </varlistentry>
        </variablelist>
        <section id="rnfb25-apiods-api-cnclop-usage"><!-- Level 3 section -->
          <title>Usage</title>
          <para>The cycle of <emphasis>fb_cancel_disable</emphasis> and <emphasis>fb_cancel_enable</emphasis>
          requests may be repeated as often as necessary.  If the engine is already in the
          requested state there is no exception:  it is simply a no-op.</para>

          <para>Usually <emphasis>fb_cancel_raise</emphasis> is called when you need to stop
          a long-running request. It is called from a separate thread, not from the signal
          handler, because it is <emphasis>not</emphasis> async signal safe.</para>
          <important>
            <title>Pay attention to the asynchronous nature of this API call!</title>
          </important>

          <para> Another aspect of asynchronous execution is that, at the end of API call, the
          attachment's activity might be cancelled or it might not.  The latter is always a
          possibility.  The asynchronicity also means that returned status vector will almost
          always return <emphasis>FB_SUCCESS</emphasis>.  Exceptions, though, are possible:
          a network packet error, for example.</para>

          <para><emphasis role="bold">An Example</emphasis></para>
          <programlisting>
Thread A:
fb_cancel_operation(isc_status, &amp;DB, fb_cancel_enable);
isc_dsql_execute_immediate(isc_status, &amp;DB, &amp;TR, 0, &quot;long running statement&quot;, 3, NULL);
// waits for API call to finish...

		Thread B:
		fb_cancel_operation(local_status, &amp;DB, fb_cancel_raise);

Thread A:
if (isc_status[1])
	isc_print_status(isc_status); // will print &quot;operation was cancelled&quot;
          </programlisting>
        </section><!-- sect3 -->
      </section><!-- sect2 -->

      <section id="rnfb25-apiods-api-shtdn"><!-- Level 2 section -->
        <sectioninfo>
          <title>Shutdown Functions</title>
            <author><firstname>Alex</firstname><surname>Peshkov</surname></author>
        </sectioninfo>

        <para>This release exposes a variety of API functions for instigating server
        shutdowns of various types from client applications.</para>

        <section id="rnfb25-apiods-api-shtdn01"><!-- Level 3 section -->
          <title>Two Interrelated fb_shutdown* Functions</title>
          <para>This release exposes two <firstterm>fb_shutdown*</firstterm> functions that
          may be useful for embedded server applications: <firstterm>fb_shutdown()</firstterm>
          and <firstterm>fb_shutdown_callback</firstterm>.</para>

          <para><emphasis role="bold">Prototypes</emphasis></para>
          <literallayout class="monospaced">
   typedef int (*FB_SHUTDOWN_CALLBACK)(const int reason, const int mask, void* arg);

   int fb_shutdown(unsigned int timeout,
                   const int reason);

   ISC_STATUS fb_shutdown_callback(ISC_STATUS* status_vector,
                                   FB_SHUTDOWN_CALLBACK callback_function,
                                   const int mask,
                                   void* arg);
          </literallayout>

          <section id="rnfb25-apiods-api-shtdn01a"><!-- Level 4 section -->
            <title>fb_shutdown()</title>
            <para><command>fb_shutdown()</command> performs  a smart shutdown of various Firebird
            subsystems (yValve, engine, redirector).  It was primarily designed for use by the
            internal engine, since it is only applicable to the current process.  It is exposed by
            the API for its possible usefulness to user applications in the embedded server
            environment.</para>
            <para>Currently operational only for the embedded engine, this function terminates all
            the current activity, rolls back active transactions, disconnects active attachments
            and shuts down the embedded engine instance gracefully.</para>
            <important>
              <title>Important for Application Developers</title>
              <para><command>fb_shutdown()</command> does not perform a shutdown of a remote server to
              which your application might be concurrently attached.  In fact, all of the Firebird
              client libraries&mdash;including the one in embedded&mdash;call it automatically at
              exit(), as long as the client is attached to at least one database or service.</para>
              <para>Hence, it should never be called by a client in the context of a remote
              attachment.</para>
            </important>

            <para><emphasis role="bold">Parameters</emphasis></para>
            <para><command>fb_shutdown()</command> takes two parameters:</para>
            <orderedlist>
              <listitem>
                <para>timeout in milliseconds</para>
              </listitem>
              <listitem>
                <para>reason for shutdown</para>
                <para>The reason codes (<command>const int reason</command>), which are
                negative, are listed in <filename>ibase.h</filename>: &nbsp;refer to constants
                starting with <command>fb_shutrsn</command>.</para>
                <note>
                  <para>When calling <command>fb_shutdown()</command> from
                  your program, you must pass the value as <emphasis>positive</emphasis>, for it
                  will be passed as an argument to <command>fb_shutdown_callback()</command> by
                  way of your <command>callback_function</command>, the routine where you
                  would code the appropriate actions.</para>
                </note>
              </listitem>
            </orderedlist>

            <para><emphasis role="bold">Return Values</emphasis></para>
            <itemizedlist>
              <listitem>
                <para>A return value of zero means shutdown was successful</para>
              </listitem>
              <listitem>
                <para>A non-zero value means some errors occurred during the shutdown. Details
                will be written to <filename>firebird.log</filename>.</para>
              </listitem>
            </itemizedlist>
          </section><!-- sect4 -->

          <section id="rnfb25-apiods-api-shtdn01b"><!-- Level 4 section -->
            <title>fb_shutdown_callback()</title>
            <para><command>fb_shutdown_callback()</command> sets up the callback function that
            is to be called during shutdown. It is a call that almost always returns successfully,
            although there are cases, such as an out-of-memory condition, which could cause it to
            return an error.</para>

            <para><emphasis role="bold">Parameters</emphasis></para>
            <para><command>fb_shutdown_callback()</command> takes four parameters:</para>
            <variablelist>
              <varlistentry>
                <term>status vector (ISC_STATUS* status_vector)</term>
                <listitem>
                  <para>A regular status vector pointer structure.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>pointer to callback function (FB_SHUTDOWN_CALLBACK callback_function)</term>
                <listitem>
                  <para>This points to the callback function you have written to perform
                  the actions (if any) to be taken when the callback occurs.</para>
                  <para>Your callback function can take three parameters.  The first and second
                  parameters help to determine what action is to be taken in your callback:</para>
                  <orderedlist>
                    <listitem>
                      <para>reason for shutdown</para>
                      <para>Two shutdown reasons are of especial interest:</para>
                      <itemizedlist>
                        <listitem>
                          <para>fb_shutrsn_exit_called: Firebird is closing due to exit() or
                          unloaded client/embedded library</para>
                        </listitem>
                        <listitem>
                          <para>fb_shutrsn_signal, applies only to POSIX: a SIGINT or SIGTERM
                          signal was caught</para>
                        </listitem>
                      </itemizedlist>
                      <note>
                        <para>Firebird code always uses negative reasons. Users are expected
                        to use positive values when calling <command>fb_shutdown()</command>
                        themselves.</para>
                      </note>
                    </listitem>
                    <listitem>
                      <para>actual value of the mask with which it was called</para>
                      <para>The purpose of this parameter to help determine whether the callback
                      was invoked before or after engine shutdown.</para>
                    </listitem>
                    <listitem>
                      <para>argument passed to fb_shutdown_callback() by the user application</para>
                      <para>Can be used for any purpose you like and may be NULL.</para>
                    </listitem>
                  </orderedlist>
                </listitem>
                <listitem>
                  <para>&nbsp;</para><!-- this space is intentionally left blank! -->
                  <para><emphasis role="bold">Return Value from the Callback Function</emphasis></para>
                </listitem>
                <listitem>
                  <para>If the callback function returns zero, it means it performed its job
                  successfully.  A non-zero return value is interpreted according to the
                  call mask (see next parameter topic, below):</para>
                  <itemizedlist>
                    <listitem>
                      <para>For <emphasis>fb_shut_postproviders</emphasis> calls, it means some
                      errors occurred and it will result in a non-zero value being returned from
                      <command>fb_shutdown()</command>. It is the responsibility of the
                      callback function to notify the world of the exact reasons for the error
                      condition being returned.</para>
                    </listitem>
                    <listitem>
                      <para>For <emphasis>fb_shut_preproviders</emphasis> calls, it means that
                      shutdown will not be performed.</para>
                      <tip>
                        <para>It is <emphasis>NOT</emphasis> a good idea to return non-zero if
                        the shutdown is due to exit() having been called ! ;-)</para>
                      </tip>
                    </listitem>
                  </itemizedlist>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>call mask (const int mask)</term>
                <listitem>
                  <para>Can have the following symbolic values:</para>
                  <itemizedlist spacing="compact">
                    <listitem>
                      <para>fb_shut_preproviders: callback function will be called before shutting down engine</para>
                    </listitem>
                    <listitem>
                      <para>fb_shut_postproviders: callback function will be called after shutting down engine</para>
                    </listitem>
                    <listitem>
                      <para>An ORed combination of them, to have the same function called in either case</para>
                    </listitem>
                  </itemizedlist>
                  <note>
                    <title>Values for call mask</title>
                    <variablelist>
                      <varlistentry>
                        <term>fb_shut_confirmation</term>
                        <listitem>
                          <para>Engine queries: Is everyone ready to shut down?</para>
                        </listitem>
                      </varlistentry>
                      <varlistentry>
                        <term>fb_shut_preproviders</term>
                        <listitem>
                          <para>Actions to be done before providers are closed</para>
                        </listitem>
                      </varlistentry>
                      <varlistentry>
                        <term>fb_shut_postproviders</term>
                        <listitem>
                          <para>Aactions to be done when providers are already closed</para>
                        </listitem>
                      </varlistentry>
                      <varlistentry>
                        <term>fb_shut_finish</term>
                        <listitem>
                          <para>Final cleanup</para>
                        </listitem>
                      </varlistentry>
                    </variablelist>
                    <para>Returning non-zero for <emphasis>fb_shut_confirmation</emphasis>
                    (although not <emphasis>fb_shut_preproviders</emphasis>) means that shutdown
                    will not be performed.</para>
                  </note>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>argument (void* arg)</term>
                <listitem>
                  <para>This is the argument to be passed to <command>callback_function</command>.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </section><!-- sect4 -->

          <section id="rnfb25-apiods-api-shtdn01c"><!-- Level 4 section -->
            <title>Using the fb_shutdown Functions</title>
            <para>Following is a sample of using the shutdown and shutdown callback feature to
            prevent your program from being terminated if someone presses Ctrl-C while it is
            has database attachments.</para>

            <programlisting>
#include &lt;ibase.h&gt;

// callback function for shutdown
static int ignoreCtrlC(const int reason, const int, void*)
{
	return reason == fb_shutrsn_signal ? 1 : 0;
}

int main(int argc, char *argv[])
{
        ISC_STATUS_ARRAY status;
        if (fb_shutdown_callback(status, ignoreCtrlC, fb_shut_confirmation, 0))
	{
		isc_print_status(status);
		return 1;
	}
	// your code continues ...
}
            </programlisting>
          </section><!-- sect4 -->
        </section><!-- sect3 -->
        <section id="rnfb25-apiods-api-shtdn02"><!-- Level 3 section -->
          <title>New isc_spb_prp_* Constants for Shutdown</title>
          <para>The new database shutdown modes can now be set using calls to the Services
          API. A number of new <command>isc_spb_prp_*</command> constants are available as
          arguments.</para>
          <section id="rnfb25-apiods-api-shtdn02a"><!-- Level 4 section -->
            <title>isc_spb_prp_shutdown_mode and isc_spb_prp_online_mode</title>
            <para>These arguments are used for shutting down a database and bringing it back
            on-line, respectively. Each carries a single-byte parameter to set the new
            shutdown mode, exactly in accord with the <emphasis>gfix -shut</emphasis> settings:</para>
            <itemizedlist>
              <listitem>
                <para>isc_spb_prp_sm_normal</para>
              </listitem>
             <listitem>
                <para>isc_spb_prp_sm_multi</para>
              </listitem>
              <listitem>
                <para>isc_spb_prp_sm_single</para>
              </listitem>
              <listitem>
                <para>isc_spb_prp_sm_full</para>
              </listitem>
            </itemizedlist>

            <para>The shutdown request also requires the <emphasis>type of
            shutdown</emphasis> to be specified, viz., one of</para>

            <itemizedlist>
              <listitem>
                <para>isc_spb_prp_force_shutdown</para>
              </listitem>
             <listitem>
                <para>isc_spb_prp_attachments_shutdown</para>
              </listitem>
              <listitem>
                <para>isc_spb_prp_transactions_shutdown</para>
              </listitem>
            </itemizedlist>

            <para>Each takes a 4-byte integer parameter, specifying the timeout for the
            shutdown operation requested.</para>

            <note>
              <para>The older-style parameters are also supported and should be used
              to enter the default shutdown (currently 'multi') and online ('normal')
              modes.</para>
            </note>
          </section><!-- sect4 -->

          <!-- reverting to the Level 3 section -->
          <para><emphasis role="bold">Usage Examples</emphasis></para>
          <para>Following are a few examples of using the new parameters with the
          <emphasis>fbsvmgr</emphasis> utility.  For simplicity, it is assumed that
          login has already been established.  Each example, though broken to
          fit the page-width, is a single line command.</para>

          <variablelist>
            <varlistentry>
              <term>Shutdown database to single-user maintenance mode:</term>
              <listitem>
                <literallayout class="monospaced">
  fbsvcmgr service_mgr action_properties dbname employee
    prp_shutdown_mode prp_sm_single prp_force_shutdown 0
                </literallayout>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Next, enable multi-user maintenance:</term>
              <listitem>
                <literallayout class="monospaced">
  fbsvcmgr service_mgr action_properties dbname employee
    prp_online_mode prp_sm_multi
                </literallayout>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Now go into full shutdown mode, disabling new attachments
              for the next 60 seconds:</term>
              <listitem>
                <literallayout class="monospaced">
  fbsvcmgr service_mgr action_properties dbname employee
    prp_shutdown_mode prp_sm_full prp_attachments_shutdown 60
                </literallayout>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Return to normal state:</term>
              <listitem>
                <literallayout class="monospaced">
  fbsvcmgr service_mgr action_properties dbname employee
    prp_online_mode prp_sm_normal
                </literallayout>
              </listitem>
            </varlistentry>
          </variablelist>
        </section><!-- sect3 -->
      </section><!-- sect2 -->

      <section id="rnfb25-apiods-api-tighter"><!-- Level 2 section -->
        <sectioninfo>
          <title>Tighter Control Over Header-level Changes</title>
            <author><firstname>Alex</firstname><surname>Peshkov</surname></author>
        </sectioninfo>
        <para>Several DPB parameters have been made inaccessible to ordinary users, closing some dangerous
        loopholes.  In some cases, they are settings that would alter the database header
        settings and potentially cause corruptions if not performed under administrator control;  in others,
        they initiate operations that are otherwise restricted to the SYSDBA. They are.-</para>
      <itemizedlist>
        <listitem>
          <para>isc_dpb_shutdown and isc_dpb_online</para>
        </listitem>
        <listitem>
          <para>isc_dpb_gbak_attach, isc_dpb_gfix_attach and isc_dpb_gstat_attach</para>
        </listitem>
        <listitem>
          <para>isc_dpb_verify</para>
        </listitem>
        <listitem>
          <para>isc_dpb_no_db_triggers</para>
        </listitem>
        <listitem>
          <para>isc_dpb_set_db_sql_dialect</para>
        </listitem>
        <listitem>
          <para>isc_dpb_sweep_interval</para>
        </listitem>
        <listitem>
          <para>isc_dpb_force_write</para>
        </listitem>
        <listitem>
          <para>isc_dpb_no_reserve</para>
        </listitem>
        <listitem>
          <para>isc_dpb_set_db_readonly</para>
        </listitem>
        <listitem>
          <para>isc_dpb_set_page_buffers (on Superserver)</para>
        </listitem>
      </itemizedlist>
      <para>The parameter <filename>isc_dpb_set_page_buffers</filename> can still be used by ordinary
      users on Classic and it will set the buffer size temporarily for that user and that session only.  
      When used by the SYSDBA on either Superserver or Classic, it will change the buffer count in the 
      database header, i.e., make a permanent change to the default buffer size.</para>
      <important>
        <title>Important Note for Developers and Users of Data Access Drivers and Tools</title>
          <para>This change will affect any of the listed DPB parameters that have been explicitly set,
          either by including them in the DPB implementation by default property values or by enabling
          them in tools and applications that access databases as ordinary users.  For example, a Delphi
          application that included 'RESERVE PAGE SPACE=TRUE' and 'FORCED WRITES=TRUE' in its database
          Params property, which caused no problems when the application connected to Firebird 1.x, 2.0.1.
          2.0.3, 2.04 or 2.1.0/2.1.1, now rejects a connection by a non-SYSDBA user with ISC ERROR CODE
          335544788, <quote>Unable to perform operation. You must be either SYSDBA or owner of the
          database.</quote></para>
        </important>
      </section><!-- sect2 -->

      <section id="rnfb25-apiods-api-svctrace"><!-- Level 2 section -->
        <sectioninfo>
          <title>New Trace Services for Applications</title>
            <author><firstname>Vlad</firstname><surname>Khorsun</surname></author>
        </sectioninfo>
        <para>Five new services relating to the management of the new user trace sessions have
        been added to the Services Manager, each with its corresponding Services API action
        function.</para>

        <section id="rnfb25-apiods-api-svctrace-start"><!-- Level 3 section -->
          <title>isc_action_svc_trace_start</title>
          <para>Starts a user trace session</para>
          <para><emphasis>Parameter(s)</emphasis></para>
          <literallayout class="monospaced">
  isc_spb_trc_name : trace session name, string, optional
  isc_spb_trc_cfg  : trace session configuration, string, mandatory
          </literallayout>
          <para>The mandatory parameter is a string encompassing the text for the
          desired configuration.  A template file named <filename>fbtrace.conf</filename>
          is provided in Firebird's root directory as a guide to the contents of this 
          string.</para>
          <note>
            <orderedlist>
              <listitem>
                <para>Unlike system audit sessions, a user session does not read the 
                configuration from a file.  It will be the responsibility of the 
                application developer to devise a mechanism for storing configurations
                locally at the client and retrieving them for run-time use.</para>
              </listitem>
              <listitem>
                <para>Superfluous white space in the string is fine:  it will simply be
                ignored.</para>
              </listitem>
            </orderedlist>
          </note>
          <para><emphasis>Output</emphasis></para>
          <itemizedlist>
            <listitem>
              <para>A text message reporting the status of the operation, EITHER:</para>
              <literallayout class="monospaced">
  Can not start trace session. There are no trace plugins loaded
              </literallayout>
              <para>OR</para>
              <literallayout class="monospaced">
  Trace session ID NNN started
              </literallayout>
            </listitem>
            <listitem>
              <para>In the second case, the results of the trace session in text format follow.</para>
            </listitem>
          </itemizedlist>
        </section><!-- sect3 -->

        <section id="rnfb25-apiods-api-svctrace-stop"><!-- Level 3 section -->
          <title>isc_action_svc_trace_stop</title>
          <para>Stops a designated trace session</para>
          <para><emphasis>Parameter(s)</emphasis></para>
          <literallayout class="monospaced">
  isc_spb_trc_id : trace session ID, integer, mandatory
          </literallayout>
          <para><emphasis>Output</emphasis></para>
          <para>A text message providing the result (status) of the request:</para>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Trace session ID NNN stopped</para>
            </listitem>
            <listitem>
              <para>No permissions to stop other user trace session</para>
            </listitem>
            <listitem>
              <para>Trace session ID NNN not found</para>
            </listitem>
          </itemizedlist>
        </section><!-- sect3 -->

        <section id="rnfb25-apiods-api-svctrace-suspend"><!-- Level 3 section -->
          <title>isc_action_svc_trace_suspend</title>
          <para>Suspends a designated trace session</para>
          <para><emphasis>Parameter(s)</emphasis></para>
          <literallayout class="monospaced">
  isc_spb_trc_id : trace session ID, integer, mandatory
          </literallayout>
          <para><emphasis>Output</emphasis></para>
          <para>A text message providing the result (status) of the request:</para>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Trace session ID NNN paused</para>
            </listitem>
            <listitem>
              <para>No permissions to change other user trace session</para>
            </listitem>
            <listitem>
              <para>Trace session ID NNN not found</para>
            </listitem>
          </itemizedlist>
        </section><!-- sect3 -->

        <section id="rnfb25-apiods-api-svctrace-resume"><!-- Level 3 section -->
          <title>isc_action_svc_trace_resume</title>
          <para>Resumes a designated trace session that has been suspended</para>
          <para><emphasis>Parameter(s)</emphasis></para>
          <literallayout class="monospaced">
  isc_spb_trc_id : trace session ID, integer, mandatory
          </literallayout>
          <para><emphasis>Output</emphasis></para>
          <para>A text message providing the result (status) of the request:</para>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Trace session ID NNN resumed</para>
            </listitem>
            <listitem>
              <para>No permissions to change other user trace session</para>
            </listitem>
            <listitem>
              <para>Trace session ID NNN not found</para>
            </listitem>
          </itemizedlist>
        </section><!-- sect3 -->

        <section id="rnfb25-apiods-api-svctrace-list"><!-- Level 3 section -->
          <title>isc_action_svc_trace_list</title>
          <para>Lists existing trace sessions</para>
          <para><emphasis>No parameters</emphasis></para>
          <para><emphasis>Output</emphasis></para>
          <para>A text message listing the trace sessions and their states:</para>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Session ID: &lt;number&gt;</para>
            </listitem>
            <listitem>
              <para>name:  &lt;string&gt;.  Prints the trace session name if it
              is not empty</para>
            </listitem>
            <listitem>
              <para>user:  &lt;string&gt;.  Prints the user name of the user that
              created the trace session</para>
            </listitem>
            <listitem>
              <para>date:  YYYY-MM-DD HH:NN:SS, start date and time of the user
              session</para>
            </listitem>
            <listitem>
              <para>flags: &lt;string&gt;, a comma-separated set comprising some
              or all of the following:</para>
              <variablelist>
                <varlistentry>
                  <term>active | suspend</term>
                  <listitem>
                    <para>Run state of the session.</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>admin</term>
                  <listitem>
                    <para>Shows <emphasis>admin</emphasis> if an administrator user created
                    the session. Absent if an ordinary user created the session.</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>system</term>
                  <listitem>
                    <para>Shows <emphasis>system</emphasis> if the session was created
                    by the Firebird engine (system audit session).  Absent if an ordinary
                    user created the session.</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>audit | trace</term>
                  <listitem>
                    <para>
			Indicates the kind of session: <emphasis>audit</emphasis> for an
                        engine-created audit session or <emphasis>trace</emphasis> for a user
                        trace session.</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>log full</term>
                  <listitem>
                    <para>Conditional, appears if it is a user trace session and the session
                    log file is full.</para>
                  </listitem>
                </varlistentry>
              </variablelist>
            </listitem>
          </itemizedlist>

          <note>
            <para>The output of each service can usually be obtained using a regular
            <emphasis>isc_service_query</emphasis> call with either of the
            <emphasis>isc_info_svc_line</emphasis>
            or <emphasis>isc_info_svc_to_eof</emphasis> information items.</para>
          </note>
        </section><!-- sect3 -->

      </section><!-- sect2 -->

      <section id="rnfb25-apiods-api-spbadds"><!-- Level 2 section -->
        <sectioninfo>
          <title>Other Services API Additions</title>
            <author><firstname>Alex</firstname><surname>Peshkov</surname></author>
        </sectioninfo>

        <para>Other additions to the Services API include:</para>



        <section id="rnfb25-apiods-api-spbadminmapping"><!-- Level 3 section -->
          <title>Mapping for RDB$ADMIN Role in Services API</title>
          <para>Two tag items have been added to the services parameter block (SPB) to
          to enable or disable the <link linkend="rnfb25-prvlgs">RDB$ADMIN role</link>
          for a privileged operating system user when requesting access to the security
          database.</para>

          <note>
            <para>This capability is implemented in the <emphasis>gsec</emphasis>
            utility by way of the new <command>-mapping</command> switch.  Refer to
            the notes in the <link linkend="rnfb25-util-gsec">relevant
            section</link> of the <emphasis>Command-line Utilities</emphasis>
            chapter.</para>
          </note>
          <section id="rnfb25-apiods-api-spbadminmapping01"><!-- Level 4 section -->
            <title>Tag Item isc_action_svc_set_mapping</title>
            <para>Enables the RDB$ADMIN role for the appointed OS user for a
            service request to access <emphasis>security2.fdb</emphasis>.</para>
          </section><!-- sect4 -->

          <section id="rnfb25-apiods-api-spbadminmapping02"><!-- Level 4 section -->
            <title>Tag Item isc_action_svc_drop_mapping</title>
            <para>Disables the RDB$ADMIN role for the appointed OS user for a
            service request to access <emphasis>security2.fdb</emphasis>.</para>
          </section><!-- sect4 -->
        </section><!-- sect3 -->
        
        <section id="rnfb25-apiods-api-spbadmingrant"><!-- Level 3 section -->
          <title>Parameter isc_spb_sec_admin</title>
          <para>The new parameter <command>isc_spb_sec_admin</command>, is the SPB 
          implementation of the new DDL syntax introduced to enable SYSDBA or another
          sufficiently privileged user to grant or revoke the RDB$ADMIN role in the
          security database (<emphasis>security2.fdb</emphasis>) to or from an
          ordinary Firebird user.  An ordinary user needs this role to acquire the same 
          privileges as SYSDBA to create, alter or drop users in the security database.</para>

          <para><command>isc_spb_sec_admin</command> is of type <emphasis>spb_long</emphasis> with
          a value of either 0 (meaning REVOKE ADMIN ROLE) or a non-zero number (meaning 
          GRANT ADMIN ROLE).</para>
          <para>For more information, refer to the topic 
          <link linkend="rnfb25-ddl-crtusr">CREATE/ALTER/DROP USER</link> in the chapter 
          <emphasis>Data Definition Language</emphasis>.</para>
        </section>

        <section id="rnfb25-apiods-api-spbnotriggrs"><!-- Level 3 section -->
          <title>Tag item isc_spb_bkp_no_triggers</title>
          <para>This new SPB tag reflects the Services API side of the
          <command>-nodbtriggers</command> switch introduced in the <emphasis>gbak</emphasis>
          utility at V.2.1 to prevent database-level and transaction-level triggers from
          firing during backup and restore.  It is intended for use as a member of the
          <command>isc_spb_options</command> set of optional directives that includes
          items like <command>isc_spb_bkp_ignore_limbo</command>, etc.</para>
        </section><!-- sect3 -->

        <section id="rnfb25-apiods-api-spbnbackup"><!-- Level 3 section -->
          <title>nBackup Support</title>
          <para>Tracker reference:
          <ulink url="http://tracker.firebirdsql.org/browse/CORE-1758">CORE-1758</ulink>.</para>
          <para>The nBackup utility performs two logical groups of operations:
          locking or unlocking a database and backing it up or restoring it.  While
          there is no rationale for providing a service action for the
          lock/unlock operations&mdash;they can be requested remotely by way of an
          SQL language request for ALTER DATABASE&mdash;a Services API interface
          to the backup/restore operations is easily justified.</para>
          <para>Backup and restore must be run on the host station and the only
          way to access them was by running nBackup.</para>
          <para>The two new service actions now enabling nBackup backup and restore
          to be requested through the Services API are:</para>
          <itemizedlist spacing="compact">
            <listitem>
              <para>isc_action_svc_nbak - incremental nbackup</para>
            </listitem>
            <listitem>
              <para>isc_action_svc_nrest - incremental database restore</para>
            </listitem>
          </itemizedlist>
          <para>The parameter items are:</para>
          <itemizedlist spacing="compact">
            <listitem>
              <para>isc_spb_nbk_level - backup level (integer)</para>
            </listitem>
            <listitem>
              <para>isc_spb_nbk_file - backup file name (string)</para>
            </listitem>
            <listitem>
              <para>isc_spb_nbk_no_triggers - option to suppress database triggers</para>
            </listitem>
          </itemizedlist>

          <para><emphasis role="bold">Usage Examples</emphasis></para>
          <para>Following are a few examples of using the new parameters with the
          <emphasis>fbsvcmgr</emphasis> utility.  For simplicity, it is assumed that
          login has already been established.  Each example, though broken to
          fit the page-width, is a single line command.</para>

          <variablelist>
            <varlistentry>
              <term>Create backup level 0:</term>
              <listitem>
                <literallayout class="monospaced">
  fbsvcmgr service_mgr action_nbak dbname employee
    nbk_file e.nb0 nbk_level 0
                </literallayout>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Create backup level 1:</term>
              <listitem>
                <literallayout class="monospaced">
  fbsvcmgr service_mgr action_nbak dbname employee
    nbk_file e.nb1 nbk_level 1
                </literallayout>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Restore database from those files:</term>
              <listitem>
                <literallayout class="monospaced">

  fbsvcmgr service_mgr action_nrest dbname e.fdb
    nbk_file e.nb0 nbk_file e.nb1
               </literallayout>
              </listitem>
            </varlistentry>
          </variablelist>

        </section><!-- sect3 -->
        
        <section id="rnfb25-apiods-api-fixfss">
          <sectioninfo>
            <title>FIX_FSS_DATA and FIX_FSS_METADATA Options Enabled in Services API</title>
            <author><firstname>A.</firstname><surname>Peshkov</surname></author>
          </sectioninfo>

          <para>Tracker reference <ulink url="http://tracker.firebirdsql.org/browse/CORE-2439">CORE-2439</ulink></para>
          <para>The FIX_FSS_DATA and FIX_FSS_METADATA functions that were implemented as
          <command>gbak -restore</command> switches in Firebird 2.1 have been implemented in the core engine
          and exposed as corresponding tag constants for the <command>isc_action_svc_restore</command> structure
          in the Services API.  Thus, developers now have a path for writing applications to automate the
          migration of older Firebird databases to the new on-disk structure.</para>
          <para>The new SPB tags are <command>isc_spb_res_fix_fss_data</command> and
          <command>isc_spb_res_fix_fss_metadata</command>.</para>
        </section><!-- sect3 -->
      </section><!-- sect2 -->
      
      <section id="rnfb25-apiods-api-traceapi"><!-- Level 2 section -->
        <title>New Trace API</title>
        <para>A new Trace API is under construction, providing a set of hooks which can be 
        implemented as an external plug-in module to be called by the engine when any traced event 
        happens.  It is as yet undocumented, since it is subject to change in forthcoming 
        sub-releases.</para>

        <para>For a little more information about it, refer to the topic 
        <link linkend="rnfb25-trace-plugin">Trace Plug-in Facilities</link> in the 
        <emphasis>Administrative Features</emphasis> chapter.</para>
      </section><!-- sect2 -->

    </section><!-- sect1 -->
  </chapter>

