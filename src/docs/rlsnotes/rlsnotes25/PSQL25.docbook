<chapter id="rnfb25-psql">
  <chapterinfo>
    <title>Procedural SQL (PSQL)</title>
  </chapterinfo>
  <para>Several significant changes appear in Firebird's procedural language (PSQL), the language set for triggers,
  stored procedures and dynamic executable blocks, especially with regard to new extensions to the capabilities of
  EXECUTE STATEMENT.  This release also heralds the arrival of the <quote>autonomous transaction</quote>.</para>

  <section id="rnfb25-psql-links"><!-- Level 1 section -->
    <title>Quick Links</title>
    <itemizedlist spacing="compact"><!-- Outer -->
      <listitem>
        <para><link linkend="rnfb25-psql-auton">Autonomous Transactions</link></para>
      </listitem>
      <listitem>
        <para><link linkend="rnfb25-psql-colmtyp">Borrow Database Column Type for a PSQL Variable</link></para>
      </listitem>
      <listitem>
        <para><link linkend="rnfb25-psql-exctstmnt">New Extensions to EXECUTE STATEMENT</link></para>
        <itemizedlist spacing="compact"><!-- Outer -1 -->
          <listitem>
            <para><link linkend="rnfb25-psql-cntxt">Context Issues</link></para>
            <itemizedlist><!-- Outer -2 -->
              <listitem>
                <para><link linkend="rnfb25-psql-authntctn">Authentication</link></para>
              </listitem>
              <listitem>
                <para><link linkend="rnfb25-psql-trnsctns">Transaction Behaviour</link></para>
              </listitem>
              <listitem>
                <para><link linkend="rnfb25-psql-inhrtprvs">Inherited Access Privileges</link></para>
              </listitem>
            </itemizedlist><!-- Outer -2 -->
          </listitem>
          <listitem>
            <para><link linkend="rnfb25-psql-extqry">External Queries from PSQL</link></para>
          </listitem>
          <listitem>
            <para><link linkend="rnfb25-psql-dynex">EXECUTE STATEMENT with Dynamic Parameters</link></para>
          </listitem>
          <listitem>
            <para><link linkend="rnfb25-psql-exctstmnt-exmpls">Examples Using EXECUTE STATEMENT</link></para>
          </listitem>
        </itemizedlist><!-- Outer -1 -->
      </listitem>
      <listitem>
        <para><link linkend="rnfb25-psql-imprvmts">Other PSQL Improvements</link></para>
        <itemizedlist spacing="compact"><!-- Outer -1 -->
          <listitem>
            <para><link linkend="rnfb25-psql-imprvmts01">Subqueries as PSQL Expressions</link></para>
          </listitem>
        </itemizedlist><!-- Outer -1 -->
      </listitem>
    </itemizedlist><!-- Outer -->
  </section><!-- sect 1 -->

  <section id="rnfb25-psql-auton"><!-- Level 1 section -->
    <sectioninfo>
    <title>Autonomous Transactions</title>
      <author>
        <firstname>Adriano</firstname>
        <surname>dos Santos Fernandes</surname>
      </author>
    </sectioninfo>
    <para>Tracker reference <ulink url="http://tracker.firebirdsql.org/browse/CORE-1409">CORE-1409</ulink>.</para>
    <para>This new implementation allows a piece of code to run in an autonomous transaction within a PSQL module.
    It can be handy for a situation where you need to raise an exception but do not want the database changes to be
    rolled back.</para>

    <para>The new transaction is initiated with the same isolation level as the one from which it is launched.  Any
    exception raised in a block within the autonomous transaction will cause changes to be rolled back.  If the block
    runs through until its end, the transaction is committed.</para>
    <warning>
      <para>Because the autonomous transaction is independent from the one from which is launched, you need to use
      this feature with caution to avoid deadlocks.</para>
    </warning>
    <para><emphasis role="bold">Syntax Pattern</emphasis></para>
    <programlisting>
IN AUTONOMOUS TRANSACTION
DO
  &lt;simple statement | compound statement&gt;
    </programlisting>

    <para><emphasis role="bold">Example of Use</emphasis></para>
    <programlisting>
create table log (
  logdate timestamp,
  msg varchar(60)
);

create exception e_conn 'Connection rejected';

set term !;

create trigger t_conn on connect
as
begin
  if (current_user = 'BAD_USER') then
  begin
    in autonomous transaction
    do
    begin
      insert into log (logdate, msg) values (current_timestamp, 'Connection rejected');
    end

    exception e_conn;
  end
end!

set term ;!
    </programlisting>
  </section>

  <section id="rnfb25-psql-colmtyp"><!-- Level 1 section -->
    <sectioninfo>
    <title>Borrow Database Column Type for a PSQL Variable</title>
      <author>
        <firstname>Adriano</firstname>
        <surname>dos Santos Fernandes</surname>
      </author>
    </sectioninfo>
    <para>Tracker reference <ulink url="http://tracker.firebirdsql.org/browse/CORE-1356">CORE-1356</ulink>.</para>
    <para>This feature extends the implementation in v.2 whereby domains became available as <quote>data types</quote>
     for declaring variables in PSQL.  Now it is possible to borrow the data type of a column definition from a table
     or view for this purpose.</para>

    <para><emphasis role="bold">Syntax Pattern</emphasis></para>
    <programlisting>
    data_type ::=
         &lt;builtin_data_type&gt;
       | &lt;domain_name&gt;
       | TYPE OF &lt;domain_name&gt;
       | TYPE OF COLUMN &lt;table or view&gt;.&lt;column&gt;
    </programlisting>

    <note>
      <para>TYPE OF COLUMN gets only the type of the column. Any constraints or default values defined for the column
      are ignored.</para>
    </note>

    <para><emphasis role="bold">Examples</emphasis></para>
    <programlisting>
CREATE TABLE PERSON (
  ID INTEGER,
  NAME VARCHAR(40)
  );

CREATE PROCEDURE SP_INS_PERSON (
  ID TYPE OF COLUMN PERSON.ID,
  NAME TYPE OF COLUMN PERSON.NAME
  )
  AS
DECLARE VARIABLE NEW_ID TYPE OF COLUMN PERSON.ID;
BEGIN
  INSERT INTO PERSON (ID, NAME)
    VALUES (:ID, :NAME)
    RETURNING ID INTO :NEW_ID;
END
    </programlisting>
  </section><!-- sect1 -->

  <section id="rnfb25-psql-exctstmnt"><!-- Level 1 section -->
    <title>New Extensions to EXECUTE STATEMENT</title>
    <para>Unusually for our release notes, we begin this chapter with the full, newly extended syntax for the EXECUTE
    STATEMENT statement in PSQL and move on afterwards to explain the various new features and their usage.</para>

    <programlisting>
[FOR] EXECUTE STATEMENT &lt;query_text&gt; [(&lt;input_parameters&gt;)]
    [ON EXTERNAL [DATA SOURCE] &lt;connection_string&gt;]
    [WITH {AUTONOMOUS | COMMON} TRANSACTION]
    [AS USER &lt;user_name&gt;]
    [PASSWORD &lt;password&gt;]
    [ROLE &lt;role_name&gt;]
    [WITH CALLER PRIVILEGES]
    [INTO &lt;variables&gt;]
    </programlisting>
    <note>
      <para>The order of the optional clauses is not fixed so, for example, a statement based on the following model
      would be just as valid:</para>
      <literallayout class="monospaced">
    [ON EXTERNAL [DATA SOURCE] &lt;connection_string&gt;]
    [WITH {AUTONOMOUS | COMMON} TRANSACTION]
    [AS USER &lt;user_name&gt;]
    [PASSWORD &lt;password&gt;]
    [ROLE &lt;role_name&gt;]
    [WITH CALLER PRIVILEGES]
      </literallayout>
      <para>Clauses cannot be duplicated.</para>
    </note>

    <section id="rnfb25-psql-cntxt"><!-- Level 2 section -->
      <title>Context Issues</title>
      <para>If there is no ON EXTERNAL DATA SOURCE clause present, EXECUTE STATEMENT is normally executed within the
      CURRENT_CONNECTION context.  This will be the case if the AS USER clause is omitted, or it is present with its
      &lt;user_name&gt; argument equal to CURRENT_USER.</para>
      <para>However, if &lt;user_name&gt; is not equal to CURRENT_USER, then the statement is executed in a separate
      connection, established without Y-Valve and remote layers, inside the same engine instance.</para>
      <note>
        <para>In the absence of an AS USER &lt;user_name&gt; clause, CURRENT_USER is the default.</para>
      </note>

      <section id="rnfb25-psql-authntctn"><!-- Level 3 section -->
        <title>Authentication</title>
        <para>Where server authentication is needed for a connection that is different to CURRENT_CONNECTION, e.g.,
        for executing an EXECUTE STATEMENT command on an external datasource, the AS USER and
        PASSWORD clauses are required.  However, under some conditions, the PASSWORD may be omitted and the effects
        will be as follows:</para>

        <orderedlist enumeration="loweralpha">
          <listitem>
            <para>On Windows, for the CURRENT_CONNECTION (i.e., no external data source), trusted authentication will
            be performed <emphasis>if it is active</emphasis> and the AS USER parameter is missing, null or equal to
            CURRENT_USER.</para>
          </listitem>
          <listitem>
            <para>If the external data source parameter is present and its &lt;connection_string&gt; refers to the same
            database as the CURRENT_CONNECTION, the effective user account will be that of the CURRENT_USER.</para>
          </listitem>
          <listitem>
            <para>If the external data source parameter is present and its &lt;connection_string&gt; refers to a
            different database than the one CURRENT_CONNECTION is attached to, the effective user account will be the
            operating system account under which the Firebird process is currently running.</para>
          </listitem>
        </orderedlist>
        <para>In any other case where the PASSWORD clause is missing, only <emphasis>isc_dpb_user_name</emphasis> will
        be presented in the DPB (attachment parameters) and native authentication will be attempted.</para>
      </section>

      <section id="rnfb25-psql-trnsctns"><!-- Level 3 section -->
        <title>Transaction Behaviour</title>
        <para>The new syntax has an optional clause for setting the appropriate transaction behaviour: WITH AUTONOMOUS
        TRANSACTION and WITH COMMON TRANSACTION.  WITH COMMON TRANSACTION is the default and does not need to be
        specified.  Transaction lifetimes are bound to the lifetime of CURRENT_TRANSACTION and are committed or rolled
        back in accordance with the CURRENT_TRANSACTION.</para>
        <para>The behaviour for WITH COMMON TRANSACTION is as follows:</para>

        <orderedlist numeration="loweralpha">
          <listitem>
            <para>Causes any transaction in an external data source to be started with the same parameters as
            CURRENT_TRANSACTION;  otherwise</para>
          </listitem>
          <listitem>
            <para>Executes the statement inside the CURRENT_TRANSACTION; or</para>
          </listitem>
          <listitem>
            <para>May use another transaction that is started internally in CURRENT_CONNECTION.</para>
          </listitem>
        </orderedlist>

        <para>The WITH AUTONOMOUS TRANSACTION setting starts a new transaction with the same parameters as
        CURRENT_TRANSACTION.  That transaction will be committed if the statement is executed without exceptions or
        rolled back if the statement encounters an error.</para>
      </section>

      <section id="rnfb25-psql-inhrtprvs"><!-- Level 3 section -->
        <sectioninfo>
        <title>Inherited Access Privileges</title>
          <author>
            <firstname>Vladyslav</firstname>
            <surname>Khorsun</surname>
          </author>
        </sectioninfo>
        <para>Tracker reference <ulink url="http://tracker.firebirdsql.org/browse/CORE-1928">CORE-1928</ulink>.</para>
        <para>By design, the original implementation of EXECUTE STATEMENT isolated the executable code from the access
        privileges of the calling stored procedure or trigger, falling back to the privileges available to the
        CURRENT_USER.  In general, the strategy is wise, since it reduces the vulnerability inherent in providing for
        the execution of arbitrary statements.  However, in hardened environments, or where privacy is not an issue,
        it could present a limitation.</para>
        <para>The introduction of the optional clause WITH CALLER PRIVILEGES now makes it possible to have the
        executable statement inherit the access privileges of the calling stored procedure or trigger.  The statement
        is prepared using any additional privileges that apply to the calling stored procedure or trigger.  The effect
        is the same as if the statement were executed by the stored procedure or trigger directly.</para>
        <important>
          <para>The WITH CALLER PRIVILEGES option is not compatible with the ON EXTERNAL DATA SOURCE option.</para>
        </important>

      </section>
    </section>

    <section id="rnfb25-psql-extqry"><!-- Level 2 section -->
      <sectioninfo>
      <title>External Queries from PSQL</title>
        <author>
          <firstname>Vladyslav</firstname>
          <surname>Khorsun</surname>
        </author>
      </sectioninfo>
      <para>Tracker reference <ulink url="http://tracker.firebirdsql.org/browse/CORE-1853">CORE-1853</ulink>.</para>
      <para>EXECUTE STATEMENT now supports queries against external databases by inclusion of the ON EXTERNAL DATA
      SOURCE clause with its &lt;connection_string&gt; argument.</para>

      <section id="rnfb25-psql-extqry01"><!-- Level 3 section -->
        <title>The &lt;connection_string&gt; Argument</title>
        <para>The format of &lt;connection_string&gt; is the usual one that is passed through the API function
        <emphasis>isc_attach_database()</emphasis>, viz.</para>
        <literallayout class="monospaced">
   [&lt;host_name&gt;&lt;protocol_delimiter&gt;]database_path
        </literallayout>
      </section>

      <section id="rnfb25-psql-extqry02"><!-- Level 3 section -->
        <title>Character Set</title>
        <para>The connection to the external data source uses the same character set as is being used by the
        CURRENT_CONNECTION context.</para>
      </section>

      <section id="rnfb25-psql-extqry03"><!-- Level 3 section -->
        <title>Access Privileges</title>
        <para>If the external data source is on another server then the clauses AS USER &lt;user_name&gt; and PASSWORD
        &lt;password&gt; will be needed.</para>
        <para>The clause WITH CALLER PRIVILEGES is a no-op if the external data source is on another server.</para>
        <para>MORE INFORMATION REQUIRED.  ROLES?</para>
      </section>

      <note>
        <para>Use of a two-phase transaction for the external connection is not available in V.2.5.</para>
      </note>
    </section>

    <section id="rnfb25-psql-dynex"><!-- Level 2 section -->
      <sectioninfo>
        <title>EXECUTE STATEMENT with Dynamic Parameters</title>
        <authorgroup>
          <author><firstname>Vladyslav</firstname><surname>Khorsun</surname></author>
          <author><firstname>Alex</firstname><surname>Peshkov</surname></author>
       </authorgroup>
      </sectioninfo>
      <para>Tracker reference <ulink url="http://tracker.firebirdsql.org/browse/CORE-1221">CORE-1221</ulink>.</para>

      <para>The new extensions provide the ability to prepare a statement with dynamic input parameters (placeholders)
      in a manner similar to a parameterised DSQL statement.  The actual text of the query itself can also be passed
      as a parameter.</para>

      <section id="rnfb-psql-dynex-syntax"><!-- Level 3 section -->
        <title>Syntax Conventions</title>
        <para>The mechanism employs some conventions to facilitate the run-time parsing and to allow the option of
        <quote>naming</quote> parameters in a style comparable with the way some popular client wrapper layers, such as
        Delphi, handle DSQL parameters.  The API's own convention, of passing unnamed parameters in a predefined order,
        is also supported.  <emphasis role="bold">However, named and unnamed parameters cannot be mixed</emphasis>.</para>

        <section id="rnfb-psql-dynex-syntax01"><!-- Level 4 section -->
          <title>The New Binding Operator</title>
          <para>At this point in the implementation of the dynamic parameter feature, to avoid clashes with equivalence
          tests, it was necessary to introduce a new assignment operator for binding run-time values to named parameters.
          The new operator mimics the Pascal assignment operator:<quote>:=</quote>.</para>
        </section>

        <section id="rnfb-psql-dynex-syntax02"><!-- Level 4 section -->
          <title>Syntax for Defining Parameters</title>

          <literallayout class="monospaced">
    &lt;input_parameters&gt; ::=
      &lt;named_parameter&gt; | &lt;input_parameters&gt;, &lt;named_parameter&gt;

    &lt;named_parameter&gt; ::=
      &lt;parameter name&gt; := &lt;expression&gt;
          </literallayout>
          <para>Example for <emphasis role="bold">named input parameters</emphasis></para>
          <para>For example, the following block of PSQL defines both &lt;query_text&gt; and
          named &lt;input_parameters&gt; (&lt;named_parameter&gt;):</para>
          <programlisting>
EXECUTE BLOCK AS
  DECLARE S VARCHAR(255);
  DECLARE N INT = 100000;
  BEGIN
  /* Normal PSQL string assignment of &lt;query_text&gt; */
    S = 'INSERT INTO TTT VALUES (:a, :b, :a)';

    WHILE (N > 0) DO
    BEGIN
    /* Each loop execution applies both the string value
       and the values to be bound to the input parameters */

      EXECUTE STATEMENT (:S) (a := CURRENT_TRANSACTION, b := CURRENT_CONNECTION)
      WITH COMMON TRANSACTION;
      N = N - 1;
    END
  END
          </programlisting>
          <para>Example for <emphasis role="bold">unnamed input parameters</emphasis></para>
          <para>A similar block using a set of unnamed input parameters instead and passing
          constant arguments directly:</para>
          <programlisting>
EXECUTE BLOCK AS
  DECLARE S VARCHAR(255);
  DECLARE N INT = 100000;
  BEGIN
    S = 'INSERT INTO TTT VALUES (?, ?, ?)';

    WHILE (N &gt; 0) DO
    BEGIN
      EXECUTE STATEMENT (:S) (CURRENT_TRANSACTION, CURRENT_CONNECTION, CURRENT_TRANSACTION);
      N = N - 1;
    END
  END
          </programlisting>
          <note>
            <para>Observe that, if you use both &lt;query_text&gt; and &lt;input_parameters&gt; then the
            &lt;query_text&gt; must be enclosed in parentheses, viz.</para>
            <literallayout class="monospaced">
    EXECUTE STATEMENT (:sql) (p1 := 'abc', p2 := :second_param) ...
            </literallayout>
          </note>
        </section><!-- Level 4 -->
      </section><!-- Level 3 -->
    </section><!-- Level 2 -->
    <section id="rnfb-psql-exctstmnt-exceptions"><!-- Level 2 section -->
      <title>Exception Handling</title>
      <para>The handling of exceptions depends on whether the <command>ON EXTERNAL DATA SOURCE</command>
      is present.</para>

      <section id="rnfb-psql-exctstmnt-exceptions01"><!-- Level 3 section -->
        <title>ON EXTERNAL DATA SOURCE clause is present</title>
        <para>If ON EXTERNAL DATA SOURCE clause is present, Firebird cannot interpret error codes
        supplied by the unknown data source so it interprets the error information itself and wraps
        it as a string into its own error wrapper (<command>isc_eds_connection</command>
        or <command>isc_eds_statement</command>).</para>
        <para> The text of the interpreted remote error contains both error codes and corresponding messages.</para>
        <orderedlist type="loweralpha">
          <listitem>
            <para><emphasis role="bold">Format of isc_eds_connection error</emphasis></para>
            <programlisting>
<emphasis>Template string</emphasis>
  Execute statement error at @1 :\n@2Data source : @3
<emphasis>Status-vector tags</emphasis>
  isc_eds_connection,
  isc_arg_string, &lt;failed API function name&gt;,
  isc_arg_string, &lt;text of interpreted external error&gt;,
  isc_arg_string, &lt;data source name&gt;
            </programlisting>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Format of isc_eds_statement error</emphasis></para>
            <programlisting>
<emphasis>Template string</emphasis>
  Execute statement error at @1 :\n@2Statement : @3\nData source : @4
<emphasis>Status-vector tags</emphasis>
  isc_eds_statement,
  isc_arg_string, &lt;failed API function name&gt;,
  isc_arg_string, &lt;text of interpreted external error&gt;,
  isc_arg_string, &lt;query&gt;,
  isc_arg_string, &lt;data source name&gt;
            </programlisting>
          </listitem>
        </orderedlist>
        <para>At PSQL level the symbols for these errors can be handled by treating them
        like any other <emphasis>gdscode</emphasis>. For example</para>
        <programlisting>
  WHEN GDSCODE isc_eds_statement
        </programlisting>
        <note>
          <para>Currently, the originating error codes are not accessible in a WHEN statement. The
          situation could be improved in future.</para>
      </note>
      </section><!-- Level 3 -->

      <section id="rnfb-psql-exctstmnt-exceptions02"><!-- Level 3 section -->
        <title>ON EXTERNAL DATA SOURCE clause is not present</title>
        <para>If ON EXTERNAL DATA SOURCE clause is not present, the original status-vector
        with the error is passed as-is to the caller PSQL code.</para>
        <para>For example, if a dynamic statement were to raise the <emphasis>isc_lock_conflict</emphasis>
        exception, the exception would be passed to the caller and could be handled using the
        usual handler:</para>
        <programlisting>
  WHEN GDSCODE isc_lock_conflict
        </programlisting>
      </section><!-- Level 3 -->
    </section><!-- Level 2 -->

    <section id="rnfb25-psql-exctstmnt-exmpls"><!-- Level 2 section -->
      <title>Examples Using EXECUTE STATEMENT</title>
      <para>The following examples offer a sampler of ways that the EXECUTE STATEMENT extensions might be applied in
      your applications.</para>

      <section id="rnfb25-psql-exctstmnt-exmpls01"><!-- Level 3 section -->
        <title>Test Connections and Transactions</title>
        <para>A couple of tests you can try to compare variations in settings:</para>

        <section id="rnfb25-psql-exctstmnt-exmpls01a"><!-- Level 4 section -->
          <para>Test a) :Execute this block few times in the same transaction - it will create three new connections
          to the current database and reuse it in every call. Transactions are also reused.</para>
          <programlisting>
EXECUTE BLOCK
  RETURNS (CONN INT, TRAN INT, DB VARCHAR(255))
AS
  DECLARE I INT = 0;
  DECLARE N INT = 3;
  DECLARE S VARCHAR(255);
BEGIN
  SELECT A.MON$ATTACHMENT_NAME FROM MON$ATTACHMENTS A
   WHERE A.MON$ATTACHMENT_ID = CURRENT_CONNECTION
    INTO :S;

  WHILE (i &lt; N) DO
  BEGIN
    DB = TRIM(CASE i - 3 * (I / 3)
      WHEN 0 THEN '\\.\' WHEN 1 THEN 'localhost:' ELSE '' END) || :S;

    FOR EXECUTE STATEMENT
      'SELECT CURRENT_CONNECTION, CURRENT_TRANSACTION
      FROM RDB$DATABASE'
      ON EXTERNAL :DB
      AS USER CURRENT_USER PASSWORD 'masterkey' -- just for example
      WITH COMMON TRANSACTION
      INTO :CONN, :TRAN
    DO SUSPEND;

    i = i + 1;
  END
END
          </programlisting>
        </section>

        <section id="rnfb25-psql-exctstmnt-exmpls01b"><!-- Level 4 section -->
          <para>Test b) : Execute this block few times in the same transaction - it will create three new connections
          to the current database on every call.</para>
          <programlisting>
EXECUTE BLOCK
  RETURNS (CONN INT, TRAN INT, DB VARCHAR(255))
AS
  DECLARE I INT = 0;
  DECLARE N INT = 3;
  DECLARE S VARCHAR(255);
BEGIN
  SELECT A.MON$ATTACHMENT_NAME
    FROM MON$ATTACHMENTS A
  WHERE A.MON$ATTACHMENT_ID = CURRENT_CONNECTION
   INTO :S;

  WHILE (i &lt; N) DO
  BEGIN
    DB = TRIM(CASE i - 3 * (I / 3)
      WHEN 0 THEN '\\.\'
      WHEN 1 THEN 'localhost:'
      ELSE '' END) || :S;

    FOR EXECUTE STATEMENT
    'SELECT CURRENT_CONNECTION, CURRENT_TRANSACTION FROM RDB$DATABASE'
      ON EXTERNAL :DB
      WITH AUTONOMOUS TRANSACTION -- note autonomous transaction
      INTO :CONN, :TRAN
    DO SUSPEND;

    i = i + 1;
  END
END
          </programlisting>
        </section><!-- 4 -->
      </section><!-- 3 -->

      <section id="rnfb25-psql-exctstmnt-exmpls02"><!-- Level 3 section -->
        <title>Input Evaluation Demo</title>
        <para>Demonstrating that input expressions evaluated only once:</para>
        <programlisting>
EXECUTE BLOCK
  RETURNS (A INT, B INT, C INT)
AS
BEGIN
  EXECUTE STATEMENT (
    'SELECT CAST(:X AS INT),
            CAST(:X AS INT),
            CAST(:X AS INT)
       FROM RDB$DATABASE')
      (x := GEN_ID(G, 1))
    INTO :A, :B, :C;

  SUSPEND;
END
        </programlisting>
      </section><!-- 3 -->

      <section id="rnfb25-psql-exctstmnt-exmpls03"><!-- Level 3 section -->
        <title>Insert Speed Test</title>
        <para>Recycling our earlier examples for input parameter usage for comparison with the non-parameterised form
        of EXECUTE STATEMENT:</para>
        <programlisting>
RECREATE TABLE TTT (
  TRAN INT,
  CONN INT,
  ID INT);

-- Direct inserts:

EXECUTE BLOCK AS
  DECLARE N INT = 100000;
BEGIN
  WHILE (N &gt; 0) DO
  BEGIN
    INSERT INTO TTT VALUES (CURRENT_TRANSACTION, CURRENT_CONNECTION, CURRENT_TRANSACTION);
    N = N - 1;
  END
END

-- Inserts via prepared dynamic statement
-- using named input parameters:

EXECUTE BLOCK AS
  DECLARE S VARCHAR(255);
  DECLARE N INT = 100000;
BEGIN
  S = 'INSERT INTO TTT VALUES (:a, :b, :a)';

  WHILE (N &gt; 0) DO
  BEGIN
    EXECUTE STATEMENT (:S)
      (a := CURRENT_TRANSACTION, b := CURRENT_CONNECTION)
    WITH COMMON TRANSACTION;
    N = N - 1;
  END
END

-- Inserts via prepared dynamic statement
-- using unnamed input parameters:

EXECUTE BLOCK AS
DECLARE S VARCHAR(255);
DECLARE N INT = 100000;
BEGIN
  S = 'INSERT INTO TTT VALUES (?, ?, ?)';

  WHILE (N &gt; 0) DO
  BEGIN
    EXECUTE STATEMENT (:S) (CURRENT_TRANSACTION, CURRENT_CONNECTION, CURRENT_TRANSACTION);
    N = N - 1;
  END
END
        </programlisting>
      </section><!-- Level 3 -->
    </section><!-- Level 2 -->
  </section><!-- Level 1 -->

  <section id="rnfb25-psql-imprvmts"><!-- Level 1 -->
    <title>Other PSQL Improvements</title>
    <para>Improvements made to existing PSQL syntax include the following:</para>
    <section id="rnfb25-psql-imprvmts01"><!-- Level 2 -->
      <sectioninfo>
        <title>Subqueries as PSQL Expressions</title>
        <author><firstname>A.</firstname><surname>dos Santos Fernandes</surname></author>
      </sectioninfo>

      <para>Tracker reference <ulink url="http://tracker.firebirdsql.org/browse/CORE-2580">CORE-2580</ulink></para>
      <para>Previously, a subquery used as a PSQL expression would return an exception, even though it was
      logically valid in SQL terms.  For example, the following constructions would all return
      errors:</para>
      <programlisting>
var = (select ... from ...);
if ((select ... from ...) = 1) then
if (1 = any (select ... from ...)) then
if (1 in (select ... from ...)) then
      </programlisting>

      <para>Now, such potentially valid expressions are allowed, removing the need to jump 
      through hoops to fetch the output of a scalar subquery into an intermediate variable
      using SELECT...INTO.</para>
    </section><!-- Level 2 -->
  </section><!-- Level 1 -->
</chapter>