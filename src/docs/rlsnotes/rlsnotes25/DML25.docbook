<chapter id="rnfb25-dml">
  <chapterinfo>
    <title>Data Manipulation Language (DML)</title>
  </chapterinfo>
  <para>In this chapter are the additions and improvements that have been added to the SQL
  data manipulation language subset in Firebird 2.5.</para>

  <section id="rnfb25-dml-links"><!-- Level 1 section -->
    <title>Quick Links</title>
    <itemizedlist spacing="compact">
      <listitem>
        <para><link linkend="rnfb25-dml-regex">RegEx Search Support using SIMILAR TO</link></para>
      </listitem>
      <listitem>
        <para><link linkend="rnfb25-dml-hex">Hex Literal Support</link></para>
      </listitem>
      <listitem>
        <para><link linkend="rnfb25-dml-uuid">New UUID Conversion Functions</link></para>
      </listitem>
      <listitem>
        <para><link linkend="rnfb25-dml-lst">Extension to LIST() Function</link></para>
      </listitem>
      <listitem>
        <para><link linkend="rnfb25-dml-orisnull">SOME_COL = ? OR ? IS NULL Predication</link></para>
      </listitem>
      <listitem>
        <para><link linkend="rnfb25-dml-optimiz">Optimizer Improvements</link></para>
      </listitem>
    </itemizedlist>

    <section id="rnfb25-dml-regex"><!-- Level 2 section -->
      <sectioninfo>
        <title>RegEx Search Support using SIMILAR TO</title>
        <author>
          <firstname>Adriano</firstname>
          <surname>dos Santos Fernandes</surname>
        </author>
      </sectioninfo>
      <para>Tracker reference <ulink url="http://tracker.firebirdsql.org/browse/CORE-769">
      CORE-769</ulink>.</para>
      <para>A new SIMILAR TO predicate is introduced to support regular expressions.  The
      predicate's function is to verify whether a given SQL-standard regular expression
      matches a string argument.  It is valid in any context that accepts Boolean
      expressions, such as WHERE clauses, CHECK constraints and PSQL IF() tests.</para>

      <para><emphasis role="bold">Syntax Patterns</emphasis></para>
      <programlisting>
&lt;similar predicate&gt; ::=
	&lt;value&gt; [ NOT ] SIMILAR TO &lt;similar pattern&gt; [ ESCAPE &lt;escape character&gt; ]

&lt;similar pattern&gt; ::= &lt;character value expression: regular expression&gt;

&lt;regular expression&gt; ::=
      &lt;regular term&gt;
    | &lt;regular expression&gt; &lt;vertical bar&gt; &lt;regular term&gt;

&lt;regular term&gt; ::=
      &lt;regular factor&gt;
    | &lt;regular term&gt; &lt;regular factor&gt;

&lt;regular factor&gt; ::=
      &lt;regular primary&gt;
    | &lt;regular primary&gt; &lt;asterisk&gt;
    | &lt;regular primary&gt; &lt;plus sign&gt;
    | &lt;regular primary&gt; &lt;question mark&gt;
    | &lt;regular primary&gt; &lt;repeat factor&gt;

&lt;repeat factor&gt; ::=
    &lt;left brace&gt; &lt;low value&gt; [ &lt;upper limit&gt; ] &lt;right brace&gt;

&lt;upper limit&gt; ::= &lt;comma&gt; [ &lt;high value&gt; ]

&lt;low value&gt; ::= &lt;unsigned integer&gt;

&lt;high value&gt; ::= &lt;unsigned integer&gt;

&lt;regular primary&gt; ::=
      &lt;character specifier&gt;
    | &lt;percent&gt;
    | &lt;regular character set&gt;
    | &lt;left paren&gt; &lt;regular expression&gt; &lt;right paren&gt;

&lt;character specifier&gt; ::=
      &lt;non-escaped character&gt;
    | &lt;escaped character&gt;

&lt;regular character set&gt; ::=
      &lt;underscore&gt;
    | &lt;left bracket&gt; &lt;character enumeration&gt;... &lt;right bracket&gt;
    | &lt;left bracket&gt; &lt;circumflex&gt; &lt;character enumeration&gt;... &lt;right bracket&gt;
    | &lt;left bracket&gt; &lt;character enumeration include&gt;... &lt;circumflex&gt; &lt;character enumeration exclude&gt;... 
        &lt;right bracket&gt;

&lt;character enumeration include&gt; ::= &lt;character enumeration&gt;

&lt;character enumeration exclude&gt; ::= &lt;character enumeration&gt;

&lt;character enumeration&gt; ::=
      &lt;character specifier&gt;
    | &lt;character specifier&gt; &lt;minus sign&gt; &lt;character specifier&gt;
    | &lt;left bracket&gt; &lt;colon&gt; &lt;character class identifier&gt; &lt;colon&gt; &lt;right bracket&gt;

&lt;character specifier&gt; ::=
      &lt;non-escaped character&gt;
    | &lt;escaped character&gt;

&lt;character class identifier&gt; ::=
      ALPHA
    | UPPER
    | LOWER
    | DIGIT
    | SPACE
    | WHITESPACE
    | ALNUM
      </programlisting>

      <note>
        <orderedlist>
          <listitem>
          <para>&lt;non-escaped character&gt; is any character except &lt;left bracket&gt;, &lt;right bracket&gt;, &lt;left paren&gt;,
&lt;right paren&gt;, &lt;vertical bar&gt;, &lt;circumflex&gt;, &lt;minus sign&gt;, &lt;plus sign&gt;, &lt;asterisk&gt;, &lt;underscore&gt;,
&lt;percent&gt;, &lt;question mark&gt;, &lt;left brace&gt; and &lt;escape character&gt;.</para>
          </listitem>
          <listitem>
          <para>&lt;escaped character&gt; is the &lt;escape character&gt; succeeded by one of &lt;left bracket&gt;, &lt;right bracket&gt;,
&lt;left paren&gt;, &lt;right paren&gt;, &lt;vertical bar&gt;, &lt;circumflex&gt;, &lt;minus sign&gt;, &lt;plus sign&gt;, &lt;asterisk&gt;,
&lt;underscore&gt;, &lt;percent&gt;, &lt;question mark&gt;, &lt;left brace&gt; or &lt;escape character&gt;.</para>
          </listitem>
        </orderedlist>
      </note>

      <table id="rnfb25-t1">
        <title>Character class identifiers</title>
        <tgroup cols="3">
          <colspec align="left" colname="col-identifier" colwidth="1*"/>
          <colspec align="left" colname="col-desc" colwidth="2*"/>
          <colspec align="left" colname="col-note" colwidth="2*"/>
          <thead>
            <row>
              <entry align="left">Identifier</entry>
              <entry align="left">Description</entry>
              <entry align="left">Note</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>ALPHA</entry>
              <entry>All characters that are simple latin letters (a-z, A-Z)</entry>
              <entry>Includes latin letters with accents when using accent-insensitive collation</entry>
            </row>
            <row>
              <entry>UPPER</entry>
              <entry>All characters that are simple latin uppercase letters (A-Z)</entry>
              <entry>Includes lowercase latters when using case-insensitive collation</entry>
            </row>
            <row>
              <entry>LOWER</entry>
              <entry>All characters that are simple latin lowercase letters (a-z)</entry>
              <entry>Includes uppercase latters when using case-insensitive collation</entry>
            </row>
            <row>
              <entry>DIGIT</entry>
              <entry>All characters that are numeric digits (0-9)</entry>
              <entry></entry>
            </row>
            <row>
              <entry>SPACE</entry>
              <entry>All characters that are the space character (ASCII 32)</entry>
              <entry></entry>
            </row>
            <row>
              <entry>WHITESPACE</entry>
              <entry>All characters that are whitespaces (vertical tab (9), newline (10),
            horizontal tab (11), carriage return (13), formfeed (12), space (32))</entry>
              <entry></entry>
            </row>
            <row>
              <entry>ALNUM</entry>
              <entry>All characters that are simple latin letters (ALPHA) or numeric digits (DIGIT)</entry>
              <entry></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para><emphasis role="bold">Usage Guide</emphasis></para>

       <para>Return true for a string that matches &lt;regular expression&gt; or &lt;regular term&gt;:</para>
       <literallayout class="monospaced">
      &lt;regular expression&gt; &lt;vertical bar&gt; &lt;regular term&gt;
       </literallayout>
       <programlisting>
    'ab' SIMILAR TO 'ab|cd|efg'   -- true
    'efg' SIMILAR TO 'ab|cd|efg'  -- true
    'a' SIMILAR TO 'ab|cd|efg'    -- false
       </programlisting>
       <para>Match zero or more occurrences of &lt;regular primary&gt;:
       &lt;regular primary&gt; &lt;asterisk&gt;</para>
       <programlisting>
    '' SIMILAR TO 'a*'     -- true
    'a' SIMILAR TO 'a*'    -- true
    'aaa' SIMILAR TO 'a*'  -- true
       </programlisting>

       <para>Match one or more occurrences of &lt;regular primary&gt;: &lt;regular primary&gt;
       &lt;plus sign&gt;</para>
       <programlisting>
    '' SIMILAR TO 'a+'     -- false
    'a' SIMILAR TO 'a+'    -- true
    'aaa' SIMILAR TO 'a+'  -- true
       </programlisting>

       <para>Match zero or one occurrence of &lt;regular primary&gt;: &lt;regular primary&gt; &lt;question
       mark&gt;</para>
       <programlisting>
    '' SIMILAR TO 'a?'     -- true
    'a' SIMILAR TO 'a?'    -- true
    'aaa' SIMILAR TO 'a?'  -- false
       </programlisting>

       <para>Match exact &lt;low value&gt; occurrences of &lt;regular primary&gt;: &lt;regular
       primary&gt; &lt;left brace&gt; &lt;low value&gt; &lt;right brace&gt;</para>
       <programlisting>
    '' SIMILAR TO 'a{2}'     -- false
    'a' SIMILAR TO 'a{2}'    -- false
    'aa' SIMILAR TO 'a{2}'   -- true
    'aaa' SIMILAR TO 'a{2}'  -- false
       </programlisting>

       <para>Match &lt;low value&gt; or more occurrences of &lt;regular primary&gt;:
&lt;regular primary&gt; &lt;left brace&gt; &lt;low value&gt; &lt;comma&gt; &lt;right brace&gt;:</para>
       <programlisting>
    '' SIMILAR TO 'a{2,}'     -- false
    'a' SIMILAR TO 'a{2,}'    -- false
    'aa' SIMILAR TO 'a{2,}'   -- true
    'aaa' SIMILAR TO 'a{2,}'  -- true
       </programlisting>

       <para>Match &lt;low value&gt; to &lt;high value&gt; occurrences of &lt;regular
       primary&gt; &lt;regular primary&gt; &lt;left brace&gt; &lt;low value&gt; &lt;comma&gt;
       &lt;high value&gt; &lt;right brace&gt;:</para>
       <programlisting>
    '' SIMILAR TO 'a{2,4}'       -- false
    'a' SIMILAR TO 'a{2,4}'      -- false
    'aa' SIMILAR TO 'a{2,4}'     -- true
    'aaa' SIMILAR TO 'a{2,4}'    -- true
    'aaaa' SIMILAR TO 'a{2,4}'   -- true
    'aaaaa' SIMILAR TO 'a{2,4}'  -- false
       </programlisting>

       <para>Match any (non-empty) character: &lt;underscore&gt;</para>
       <programlisting>
    '' SIMILAR TO '_'    -- false
    'a' SIMILAR TO '_'   -- true
    '1' SIMILAR TO '_'   -- true
    'a1' SIMILAR TO '_'  -- false
       </programlisting>

       <para>Match a string of any length (including empty strings): &lt;percent&gt;</para>
       <programlisting>
    '' SIMILAR TO '%'         -- true
    'az' SIMILAR TO 'a%z'     -- true
    'a123z' SIMILAR TO 'a%z'  -- true
    'azx' SIMILAR TO 'a%z'    -- false
       </programlisting>

       <para>Group a complete &lt;regular expression&gt; to use as one single &lt;regular primary&gt; as a
       sub-expression: &lt;left paren&gt; &lt;regular expression&gt; &lt;right paren&gt;</para>
       <programlisting>
    'ab' SIMILAR TO '(ab){2}'    -- false
    'aabb' SIMILAR TO '(ab){2}'  -- false
    'abab' SIMILAR TO '(ab){2}'  -- true
       </programlisting>

       <para>Match a character identical to one of &lt;character enumeration&gt;: &lt;left bracket&gt; &lt;character
       enumeration&gt;... &lt;right bracket&gt;</para>
        <programlisting>
    'b' SIMILAR TO '[abc]'    -- true
    'd' SIMILAR TO '[abc]'    -- false
    '9' SIMILAR TO '[0-9]'    -- true
    '9' SIMILAR TO '[0-8]'    -- false
       </programlisting>

       <para>Match a character not identical to one of &lt;character enumeration&gt;:
&lt;left bracket&gt; &lt;circumflex&gt; &lt;character enumeration&gt;... &lt;right bracket&gt;</para>
       <programlisting>
    'b' SIMILAR TO '[^abc]'    -- false
    'd' SIMILAR TO '[^abc]'    -- true
       </programlisting>

       <para>Match a character identical to one of &lt;character enumeration include&gt; but not identical to
       one of &lt;character enumeration exclude&gt;: &lt;left bracket&gt; &lt;character enumeration
       include&gt;... &lt;circumflex&gt; &lt;character enumeration exclude&gt;...</para>
       <programlisting>
    '3' SIMILAR TO '[[:DIGIT:]^3]'    -- false
    '4' SIMILAR TO '[[:DIGIT:]^3]'    -- true
       </programlisting>

       <para>Match a character identical to one character included in &lt;character class identifier&gt;. Refer to the 
       table of <link linkend="rnfb25-t1">Character Class Identifiers</link>, above. May be used 
       with &lt;circumflex&gt; to invert the logic (see above):
&lt;left bracket&gt; &lt;colon&gt; &lt;character class identifier&gt; &lt;colon&gt; &lt;right bracket&gt;</para>
       <programlisting>
    '4' SIMILAR TO '[[:DIGIT:]]'  -- true
    'a' SIMILAR TO '[[:DIGIT:]]'  -- false
    '4' SIMILAR TO '[^[:DIGIT:]]' -- false
    'a' SIMILAR TO '[^[:DIGIT:]]' -- true
       </programlisting>

      <para><emphasis role="bold">Examples</emphasis></para>
      <programlisting>
create table department (
  number numeric(3) not null,
  name varchar(25) not null,
  phone varchar(14) 
  check (phone similar to '\([0-9]{3}\) [0-9]{3}\-[0-9]{4}' escape '\')
);

insert into department 
  values ('000', 'Corporate Headquarters', '(408) 555-1234');
insert into department 
  values ('100', 'Sales and Marketing', '(415) 555-1234');
insert into department 
  values ('140', 'Field Office: Canada', '(416) 677-1000');

insert into department
  values ('600', 'Engineering', '(408) 555-123'); -- check constraint violation

select * from department
  where phone not similar to '\([0-9]{3}\) 555\-%' escape '\';
      </programlisting>
    </section>

    <section id="rnfb25-dml-hex"><!-- Level 2 section -->
      <sectioninfo>
        <title>Hex Literal Support</title>
        <authorgroup>
          <author><firstname>Bill</firstname><surname>Oliver</surname></author>
          <author><firstname>Adriano</firstname><surname>dos Santos Fernandes</surname></author>
        </authorgroup>
      </sectioninfo>
      <para>Tracker reference <ulink url="http://tracker.firebirdsql.org/browse/CORE-1760">CORE-1760</ulink>.</para>
      <para>Support for hexadecimal numeric and binary string literals has been introduced.</para>

      <para><emphasis role="bold">Syntax Patterns</emphasis></para>
      <programlisting>
&lt;numeric hex literal&gt; ::=
    { 0x | 0X } &lt;hexit&gt; [ &lt;hexit&gt;... ]

&lt;binary string literal&gt; ::=
    { x | X } &lt;quote&gt; [ { &lt;hexit&gt; &lt;hexit&gt; }... ] &lt;quote&gt;

&lt;digit&gt; ::=
    0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

&lt;hexit&gt; ::=
    &lt;digit&gt; | A | B | C | D | E | F | a | b | c | d | e | f
      </programlisting>

      <section id="rnfb25-dml-hex-lit"><!-- section 3 -->
        <title>Numeric Hex Literals</title>
        <itemizedlist>
          <listitem>
            <para>The number of &lt;hexit&gt; in the string cannot exceed 16.</para>
          </listitem>
          <listitem>
            <para>If the number of &lt;hexit&gt; is greater than eight, the constant data type is a signed BIGINT. If
            it is eight or less, the data type is a signed INTEGER.</para>
            <tip>
              <para> That means 0xF0000000 is -268435456 and 0x0F0000000 is 4026531840.</para>
            </tip>
          </listitem>
        </itemizedlist>
      </section>

      <section id="rnfb25-dml-hex-bin"><!-- section 3 -->
        <title>Binary String Literals</title>
        <para>The resulting string is defined as a CHAR(<emphasis>n</emphasis>/2) CHARACTER SET OCTETS, where
        <emphasis>n</emphasis> is the number of &lt;hexit&gt;.</para>
      </section>

      <para><emphasis role="bold">Examples</emphasis></para>
      <programlisting>
select 0x10, cast('0x0F0000000' as bigint)
  from rdb$database;
select x'deadbeef'
  from rdb$database;
      </programlisting>
    </section>

    <section id="rnfb25-dml-uuid"><!-- Level 2 section -->
      <sectioninfo>
        <title>New UUID Conversion Functions</title>
        <author>
          <firstname>Adriano</firstname>
          <surname>dos Santos Fernandes</surname>
        </author>
      </sectioninfo>
      <para>Tracker references <ulink url="http://tracker.firebirdsql.org/browse/CORE-1656">CORE-1656</ulink> and
      <ulink url="http://tracker.firebirdsql.org/browse/CORE-1682">CORE-1682</ulink>.</para>
      <para>Two new built-in functions, UUID_TO_CHAR and CHAR_TO_UUID, enable conversion between a UUID in the form of
      a CHAR(16) OCTETS string and the RFC4122-compliant form.</para>

      <section id="rnfb25-dml-uuid01"><!-- Level 3 section -->
        <title>CHAR_TO_UUID()</title>
        <para>The function CHAR_TO_UUID() converts the CHAR(32) ASCII representation of a UUID
        (XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX) to the CHAR(16) OCTETS representation, optimized for storage.</para>

        <para><emphasis role="bold">Syntax Model</emphasis></para>
        <programlisting>
CHAR_TO_UUID( &lt;string&gt; )
        </programlisting>
        <para><emphasis role="bold">Example</emphasis></para>
        <programlisting>
select char_to_uuid('93519227-8D50-4E47-81AA-8F6678C096A1')
  from rdb$database;
        </programlisting>
      </section>

      <section id="rnfb25-dml-uuid02"><!-- Level 3 section -->
        <title>UUID_TO_CHAR()</title>
        <para>The function UUID_TO_CHAR() converts a CHAR(16) OCTETS UUID (as returned by the GEN_UUID() function) to
        the CHAR(32) ASCII representation (XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX).</para>

        <para><emphasis role="bold">Syntax Model</emphasis></para>
        <programlisting>
UUID_TO_CHAR( &lt;string&gt; )
        </programlisting>
        <para><emphasis role="bold">Example</emphasis></para>
        <programlisting>
select uuid_to_char(gen_uuid())
  from rdb$database;
        </programlisting>
      </section>
    </section><!-- Level 2 -->

    <section id="rnfb25-dml-orisnull"><!-- Level 2 section -->
      <sectioninfo>
        <title>SOME_COL = ? OR ? IS NULL Predication</title>
        <author>
          <firstname>Adriano</firstname>
          <surname>dos Santos Fernandes</surname>
        </author>
      </sectioninfo>
      <para>Tracker reference <ulink url="http://tracker.firebirdsql.org/browse/CORE-2298">CORE-2298</ulink></para>

      <para>By popular request, particularly from Delphi programmers, support has been
      implemented for a predication that is able to <quote>OR</quote> test both the equivalence
      between a column and a parameter and whether the value passed to the parameter is NULL.
      This construct is often desired as a way to avoid the need to prepare one query to
      request a filtered result set and another for the same query without the filter.</para>

      <para>Users of Delphi and other programming interfaces that apply client-side object
      names to parameters wanted the ability for the DSQL engine to recognise a usage like the
      following:</para>
      <literallayout class="monospaced">
  WHERE col1 = :param1 OR :param1 IS NULL
      </literallayout>

      <para>At the API level, the language interface translates the query to</para>
      <literallayout class="monospaced">
  WHERE col1 = ? OR ? IS NULL
      </literallayout>

      <para>That presented two problems:</para>
      <orderedlist>
        <listitem>
          <para>While the programmer treated the parameter <command>:param1</command> as
          though it were a single variable with two references, the API could not:  it is
          presented with two <emphasis>parameters</emphasis></para>
        </listitem>

        <listitem>
          <para>The second parameter is of an unknown data type and the program has no
          way to assign to it</para>
        </listitem>
      </orderedlist>

      <para>What was needed to solve this problem was to introduce a new data type to handle
      the <quote>? is NULL</quote> condition and teach Firebird to do the right thing when
      it received such a request.</para>

      <para>The implementation works like this.  To resolve the first problem, the
      request must supply <emphasis>two</emphasis> parameters (for our Delphi example):</para>
      <literallayout class="monospaced">
  WHERE col1 = :param1 OR :param2 IS NULL
      </literallayout>
      <itemizedlist>
        <listitem>
          <para>If <quote>param1</quote> is not NULL, the language interface is required to
          assign the correct value for the first parameter, set the <command>XSQLVAR.sqlind</command>
          to NOT NULL and leave XSQLVAR.sqldata NULL.</para>
        </listitem>
        <listitem>
          <para>If <quote>param2</quote> is NULL, the language interface is required to
          set the XSQLVAR.sqlind of <emphasis>both</emphasis> parameters to NULL and leave
          the XSQLVAR.sqldata NULL.</para>
        </listitem>
      </itemizedlist>
      <para>In other words, for the parameter (&nbsp;?&nbsp;) in <command>? IS NULL</command></para>:

      <itemizedlist>
        <listitem>
          <para>XSQLVAR.sqlind should be set in accordance with NULL/NON-NULL state of the
          parameter. This is the type of parameter that is described by the new constant SQL_NULL.</para>
        </listitem>
        <listitem>
          <para>The XSQLVAR.sqldata of a SQL_NULL type of parameter should always be passed by
          the client application as a NULL pointer and should never be accessed.</para>
        </listitem>
      </itemizedlist>

      <note>
        <title>NULL Specified in the Output Set</title>
        <para>When NULL is specified as an output constant (<command>select 
        NULL from ...</command>), it continues to be described as CHAR(1), rather than by SQL_NULL.  
        That may change in a future version.</para>
      </note>

    </section>

    <section id="rnfb25-dml-lst"><!-- Level 2 section -->
      <sectioninfo>
        <title>Extension to LIST() Function</title>
        <author>
          <firstname>Adriano</firstname>
          <surname>dos Santos Fernandes</surname>
        </author>
      </sectioninfo>
      <para>Tracker reference <ulink url="http://tracker.firebirdsql.org/browse/CORE-1453">CORE-1453</ulink></para>
      <para>A string expression is now allowed as the delimiter argument of the LIST() function.</para>
      <para><emphasis role="bold">Example</emphasis></para>
      <programlisting>
SELECT
  DISCUSSION_ID,
  LIST(COMMMENT, ASCII_CHAR(13))
FROM COMMENTS
  GROUP BY DISCUSSION_ID;
      </programlisting>
    </section><!-- sect2 -->

    <section id="rnfb25-dml-optimiz"><!-- Level 2 section -->
      <title>Optimizer Improvements</title>
      <para>Changes in optimizer logic that address recognised problems include:</para>
      <variablelist>
        <varlistentry>
          <term>CROSS JOIN Logic (D. Yemanov)</term>
          <listitem>
            <para>When a CROSS JOIN involved an empty table, the optimizer had no special
            logic to detect that the query was futile and return the empty set
            immediately.  That shortcut logic has now been implemented.</para>
            <para>Tracker reference <ulink
            url="http://tracker.firebirdsql.org/browse/CORE-2200">CORE-2200</ulink>.</para>
            <note>
              <para>The same change was implemented in V.2.1.2.</para>
            </note>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Derived Tables (A. dos Santos Fernandes)</term>
          <listitem>
            <para>The limit on the number of contexts available when using derived
            tables has been raised.</para>
            <para>Tracker reference <ulink
            url="http://tracker.firebirdsql.org/browse/CORE-2029">CORE-2029</ulink>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Timing of DEFAULT Evaluation (A. dos Santos Fernandes)</term>
          <listitem>
            <para>Under rare conditions, the early evaluation of a DEFAULT value or
            expression defined for a column might give rise to a confused situation
            regarding the evaluation of an input value supplied for that column.  The
            possibility was addressed by deferring the evaluation of DEFAULT and not
            actually performing the evaluation at all unless it was actually
            necessary.</para>
            <para>Tracker reference <ulink
            url="http://tracker.firebirdsql.org/browse/CORE-1842">CORE-1842</ulink>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Index Use for NOT IN Searches (A. dos Santos Fernandes)</term>
          <listitem>
            <para>Better performance has been achieved for the NOT IN predicate by
            enabling the use of an index.</para>
            <para>Tracker reference <ulink
            url="http://tracker.firebirdsql.org/browse/CORE-1137">CORE-1137</ulink>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Undo Log Memory Consumption (D. Yemanov)</term>
          <listitem>
            <para>Excessive memory consumption by the Undo log after a lengthy series
            of updates in a single transaction has been avoided.</para>
            <para>Tracker reference <ulink
            url="http://tracker.firebirdsql.org/browse/CORE-1477">CORE-1477</ulink>.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section><!-- sect2 -->

    <section id="rnfb25-dml-other"><!-- Level 2 section -->
      <title>Other Improvements</title>
      <para>Other changes to smooth out the little annoyances include:</para>
      <variablelist>

        <varlistentry>
          <term>FREE_IT Error Detection (A. dos Santos Fernandes)</term>
          <listitem>
            <para>Previously, a UDF declared with FREE_IT would crash if the pointer
            returned had not been allocated by the <command>ib_util_malloc()</command> function.
            Now, such a condition is detected, an exception is thrown and the pointer remains
            in its allocated state.</para>
            <para>Tracker reference <ulink
            url="http://tracker.firebirdsql.org/browse/CORE-1937">CORE-1937</ulink>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><quote>Expression evaluation not supported</quote> message improved (C. Valderrama)</term>
          <listitem>
            <para>A number of secondary GDS codes were introduced to provide more details
            about an operation that fails with an <quote>Expression evaluation not
            supported</quote> exception, for example:</para>
            <literallayout class="monospaced">
  'Argument for @1 in dialect 1 must be string or numeric'
  'Strings cannot be added to or subtracted from DATE or TIME types'
  'Invalid data type for subtraction involving DATE, TIME or TIMESTAMP types'
   etc.
            </literallayout>
            <para>These detailed messages follow the GDS code for the
            <command>isc_expression_eval_err (expression evaluation not supported)</command>
            error in the status vector.</para>
            <para>Tracker reference <ulink
            url="http://tracker.firebirdsql.org/browse/CORE-1799">CORE-1799</ulink>.</para>
          </listitem>
        </varlistentry>
      </variablelist>

    </section><!-- sect2 -->
  </section>

</chapter>