  <chapter id="rnfb25-admin">
    <chapterinfo>
      <title>Administrative Features</title>
    </chapterinfo>
    <para>Certain improvements to Firebird's administrative features will be welcomed by many.</para>

    <section id="rnfb25-prvlgs" xreflabel="RDB$ADMIN Role"><!-- Level 1 section -->
      <sectioninfo>
        <title>New RDB$ADMIN System Role</title>
        <author>
          <firstname>Alex</firstname>
          <surname>Peshkov</surname>
        </author>
      </sectioninfo>
      <para>A new pre-defined system role RDB$ADMIN has been added for transferring SYSDBA privileges
      to another user. Any user, when granted the role in a particular database, acquires SYSDBA-like
      rights when attaching to that database with the RDB$ADMIN role specified.</para>

      <para>To assign it, SYSDBA should log in to that database and grant the role RDB$ADMIN to the
      user, in the same way one would grant any other role to a user.  After the user has been
      granted the role, s/he must include it in the log-in in order to access the <quote>superuser</quote>
      privileges in that database.</para>

      <important>
        <para>If the user attaches with a user database role passed in the DPB (connection parameters), it
         will not be replaced with RDB$ADMIN, i.e., he/she will not get SYSDBA rights.</para>
      </important>

      <para>The following example transfers SYSDBA privileges to users named User1 and Admins\ADMINS.
      The second user in our example is typical for a Windows system user with access enabled via trusted
      authentication:</para>

      <programlisting>
GRANT RDB$ADMIN TO User1;
GRANT RDB$ADMIN TO "Admins\ADMINS";
      </programlisting>

      <section id="rnfb25-prvlgs-multi"><!-- Level 2 section -->
        <title>Multiple Databases and Superusers</title>
        <para>It should be understood that acquiring the RDB$ADMIN role does not make a regular
        user into SYSDBA.  Rather, it gives that user the same privileges as SYSDBA over the
        objects <emphasis>in the database in which the role is granted to that user</emphasis>.</para>

        <itemizedlist>
          <listitem>
            <para>If the same user needs Superuser privileges in more than one database, the
            RDB$ADMIN role must be explicitly granted for that user in <emphasis>each</emphasis> database.</para>
          </listitem>
          <listitem>
            <para>If more than one user is to have Superuser privileges in a database then
            each user needs to be granted the RDB$ADMIN role.</para>
          </listitem>
          <listitem>
            <para>One user that has acquired the RDB$ADMIN role in the database can grant it
            to another user.</para>
          </listitem>
          <listitem>
            <para>It is not necessary to specify WITH ADMIN OPTION (for the privilege to grant
            this role to others) or WITH GRANT OPTION (for the privilege to grant permissions on
            objects to other users without being the owner of those objects).
            The ADMIN and GRANT options are implicit. </para>
          </listitem>
        </itemizedlist>
      </section>

      <section id="rnfb25-prvlgs-suprusr"><!-- Level 2 section -->
        <title>System <quote>Superusers</quote></title>
        <para>On POSIX hosts, the <firstterm>root</firstterm> user always had SYSDBA privileges, but
        the same was not possible for a domain administrator on Windows until Firebird 2.1. In V.2.1,
        a configuration parameter, <firstterm>Authentication</firstterm>, was introduced, whereby a
        user logged in as a Windows domain administrator could automatically gain server access with
        SYSDBA privileges through trusted user authentication. On POSIX, the mechanism has not changed
        but on Windows, the introduction of the RDB$ADMIN role has changed the way Windows administrators
        acquire SYSDBA privileges.</para>

        <important>
          <title>Windows trusted user authentication is no longer available by default!</title>
          <para>By default, the <firstterm>Authentication</firstterm> parameter in
          <filename>firebird.conf</filename>is configured as <firstterm>native</firstterm>. It must
          be explicitly configured to either <firstterm>trusted</firstterm> or <firstterm>mixed</firstterm>
          to enable trusted user authentication.</para>
        </important>


        <section id="rnfb25-prvlgs-win"><!-- Level 3 section -->
          <title>Global Admin Privileges for Windows Administrators</title>

          <para>For a trusted domain administrator to get SYSDBA access privileges on a Firebird
          server that is configured for trusted user authentication, the domain administrator must
          acquire the RDB$ADMIN role. The <link linkend="rnfb25-prvlgs">manual method</link>
          described above for ordinary users will work, by granting RDB$ADMIN to each specific
          administrator, database by database.</para>
          <para>However, there is a way for the SYSDBA to configure the server so that the RDB$ADMIN
          role will be mapped to administrators automatically when they log into any database, thus
          arriving at a situation parallel to the association of root-privileged users on POSIX
          systems with the SYSDBA privileges. The new ALTER ROLE statement achieves this (and only this)
          purpose.</para>

          <section id="rnfb25-prvlgs-automap-altrole"><!-- Level 4 section -->
            <title>ALTER ROLE Statement</title>
            <para>To configure a database to map the RDB$ADMIN role to administrators
            automatically on a Windows server that is configured to enable trusted user
            authentication, the SYSDBA logs in to any database and issues the following
            statement:</para>

            <programlisting>
ALTER ROLE RDB$ADMIN
  SET AUTO ADMIN MAPPING;
            </programlisting>

            <para>To revert to the default setting, preventing administrators from getting SYSDBA
            privileges automatically, issue this statement:</para>
            <programlisting>
ALTER ROLE RDB$ADMIN
  DROP AUTO ADMIN MAPPING;
            </programlisting>
          </section><!-- 4 -->

          <section id="rnfb25-prvlgs-automap-api"><!-- Level 4 section -->
            <title>Services API Tag Items</title>
            <para>The same effects are supported in the Services API by the provision of two
            tag items: <command>isc_action_svc_set_mapping</command> to enable the automatic
            mapping and <command>isc_action_svc_drop_mapping</command> to disable it.</para>
            <para>These tags are supported in the <emphasis>fbsvcmgr</emphasis> utility.</para>
          </section><!-- 4 -->
        </section><!-- 3 -->
      </section><!-- 2 -->

      <section id="rnfb25-prvlgs-super"><!-- Level 2 section -->
        <title>Escalating RDB$ADMIN Scope for User Management</title>
        <para>The new DDL command <command>ALTER USER</command> enables an <quote>ordinary</quote> user
        (a regular Firebird user, a non-root user on POSIX or a trusted user on a Windows
        system where trusted authentication is enabled) the ability to change his or her
        password and/or personal name elements, while logged in to any database.  Superusers can also
        use the same command to create and drop users.  For more information about this new command,
        refer to the topic <link linkend="rnfb25-ddl-crtusr">CREATE/ALTER/DROP USER</link> in the chapter
        <emphasis>Data Definition Language</emphasis>.</para>

        <para>Because <firstterm>security2.fdb</firstterm> is created as (or should be upgraded to)
        an ODS 11.2 database, it has the pre-defined RDB$ADMIN role, too. Since no user&mdash;not
        even SYSDBA&mdash;can log into the security database, alternative means have been provided
        to enable the SYSDBA or a Superuser to apply the RDB$ADMIN role in
        <firstterm>security2.fdb</firstterm> to an ordinary user that needs the ability to create
        or drop users.  There are three ways, each having the equivalent effect:</para>

        <orderedlist>
          <listitem>
            <para>Use the optional parameter GRANT ADMIN ROLE with a CREATE USER or ALTER USER
            statement.</para>

            <note>
              <title>Notes</title>
              <para>Notice that GRANT ADMIN ROLE and REVOKE ADMIN ROLE here are not GRANT/REVOKE
              statements but 3-keyword parameters to the CREATE USER and ALTER USER statements.
              There is no system role named 'ADMIN'.</para>
              <para>Any user that acquires the RDB$ADMIN role in a database implicitly acquires
              the extended privileges WITH ADMIN OPTION and WITH GRANT OPTION.</para>
            </note>

            <para><emphasis role="bold">Examples</emphasis></para>

            <para>To grant the RDB$ADMIN role to user <emphasis>alex</emphasis> in the security
            database:</para>
            <literallayout>
      ALTER USER alex GRANT ADMIN ROLE;
            </literallayout>

            <para>To revoke the RDB$ADMIN role from user <emphasis>alex</emphasis> in the
            security database:</para>
            <literallayout>
      ALTER USER alex REVOKE ADMIN ROLE;
            </literallayout>

            <para>To drop user <emphasis>alex</emphasis> and destroy his privileges in all
            databases:</para>
            <literallayout>
      DROP USER alex;
            </literallayout>
          </listitem>

          <listitem>
            <para>Use the <emphasis>gsec</emphasis> utility with the new switch <command>-admin</command>.
            The switch takes one argument: YES to apply the RDB$ADMIN role to the user, or NO to revoke
            it.  For more details, refer to the topic <link linkend="rnfb25-util-gsec-adminrole">Granting
            the RDB$ADMIN Role to An Ordinary User</link> in the <emphasis>gsec</emphasis> section of the
            <emphasis>Utilities</emphasis> chapter.</para>
          </listitem>

          <listitem>
            <para>Use the new SPB parameter <command>isc_spb_sec_admin</command> which implements
            the assignment of the RDB$ADMIN role for ordinary users in <emphasis>security2.fdb</emphasis>
            via a SPB connection.  It is described in more detail in the chapter <emphasis>Changes to the
            Firebird API and ODS</emphasis>, in the topic <link
            linkend="rnfb25-apiods-api-spbadmingrant">Parameter isc_spb_sec_admin</link>.</para>
            <para>The <emphasis>fbsvmgr</emphasis> utility also supports the use of this parameter.</para>
          </listitem>
        </orderedlist>
        <tip>
          <para>Firebird 2.5 does not allow you to set up more than one security database on a
          server.  From V.3.0, it is intended to be possible to have separate security databases
          for each database.  For now, you can be connected to any database on the server (even
          <firstterm>employee.fdb</firstterm>) to update its one-and-only <firstterm>security2.fdb</firstterm>.</para>
          <para>In future, it will be essential to send these requests from a database that is
          associated with the security database that is to be affected by them.</para>
        </tip>
      </section><!-- 2 -->
    </section><!-- 1 -->

    <section id="rnfb25-trace"><!-- Level 1 section -->
      <sectioninfo>
        <title>Trace and Audit Services</title>
        <author>
          <firstname>Vlad</firstname>
          <surname>Khorsun</surname>
        </author>
      </sectioninfo>
      <para>The new trace and audit facilities in v.2.5 were initially developed from
      the TraceAPI contributed to us by Nickolay Samofatov that he had developed for
      the Red Soft Database, a commercial product based on Firebird's code.</para>

      <section id="rnfb25-trace-oview"><!-- Level 2 section -->
        <title>Overview of Features</title>
        <para>The new trace and audit facilities enable various events performed inside
        the engine, such as statement execution, connections, disconnections, etc., to
        be logged and collated for real-time analysis of the corresponding performance
        characteristics.</para>
        <para>A trace takes place in the context of a <firstterm>trace session</firstterm>.
        Each trace session has its own configuration, state and output.</para>

	<para>The Firebird engine has a fixed list of events it can trace. It can perform
        two different sort of traces:  a <firstterm>system audit</firstterm> and a
        <firstterm>user trace</firstterm>.  How the engine forms the list of events for
        a session depends on which sort of trace is requested.</para>
        <tip>
          <para>Every trace session is assigned a unique session ID.  When any trace session 
          begins, the Services Manager outputs this ID as the message</para>
          <literallayout class="monospaced">
  Trace session ID nnnn started
          </literallayout>
          <para>where <command> nnnn </command> is the ID, of course.</para>
        </tip>
      </section>

      <section id="rnfb25-trace-audit"><!-- Level 2 section -->
        <title>The System Audit Session</title>
        <para>A system audit session is started by the engine itself.  To determine
        which events the session is <quote>interested in</quote>, it reads the contents
        of a <firstterm>trace configuration file</firstterm> as it goes to create
        the session.</para>

        <para>A new parameter in <filename>firebird.conf</filename>,
        <emphasis>AuditTraceConfigFile</emphasis> points to the name and location of
        the file.  There can be at most one system audit trace in progress.  By default,
        the value of this parameter is empty, indicating that no system audit tracing is
        configured.</para>

        <section id="rnfb25-trace-conf"><!-- Level 3 section -->
          <para>A configuration file contains list of traced events and points to the
          placement of the trace log(s) for each event.  It is sufficiently flexible
          to allow different sets of events for different databases to be logged to
          separate log files. The template file file <filename>fbtrace.conf</filename>,
          found in Firebird's root directory, contains the full list of available events,
          with format, rules and syntax for composing an audit trace configuration
          file.</para>

          <tip>
            <title>Tip About the fbtrace.conf File</title>
            <para>The file contains a large amount of commented text explaining the purpose
            and syntax of each entry.  As sub-releases progress, keep an eye on new events
            and facilities that will be added from time to time to improve the tracing
            capabilities.</para>
            <para>For example, a late pre-release enhancement enables Services events to be
            traced by name and targeted using include and exclude filters.</para>

            <para>As another example, the matching algorithm for path names was improved to
            interpret strings in the configuration file according to the platform character set
            and, basing the strings on UTF-8, to apply platform rules such as treating file names
            as case-insensitive on Windows and case-sensitive on POSIX. (Tracker reference
           <ulink url="http://tracker.firebirdsql.org/browse/CORE-2404">CORE-2404</ulink>, A.
           dos Santos Fernandes).</para>
          </tip>
        </section><!-- sect 3 -->
      </section><!-- sect 2 -->

      <section id="rnfb25-trace-user"><!-- Level 2 section -->
        <title>User Trace Sessions</title>
        <para>A user trace session is managed by user, using some new calls to the
        Services API. There are five new service functions for this purpose:</para>
        <itemizedlist spacing="compact">
          <listitem>
            <para>start: <command>isc_action_svc_trace_start</command></para>
          </listitem>
          <listitem>
            <para>stop: <command>isc_action_svc_trace_stop</command></para>
          </listitem>
          <listitem>
            <para>suspend: <command>isc_action_svc_trace_suspend</command></para>
          </listitem>
          <listitem>
            <para>resume: <command>isc_action_svc_trace_resume</command></para>
          </listitem>
          <listitem>
            <para>list all known trace sessions: <command>isc_action_svc_trace_list</command></para>
          </listitem>
        </itemizedlist>
        <para>The syntax for the Services API calls are discussed in the topic <link
        linkend="rnfb25-apiods-api-svctrace">New Trace Functions for Applications</link> in
        the chapter entitled <emphasis>Changes to the Firebird API and ODS</emphasis>.</para>

        <section id="rnfb25-trace-user-sssn"><!-- Level 3 section -->
          <title>Workings of a User Trace Session</title>
          <para>When a user application starts a trace session, it sets a session
          name (optional) and the session configuration (mandatory). The session
          configuration is a text file conforming to the rules and syntax modelled in
          the <filename>fbtrace.conf</filename> template that is in Firebird's root
          directory, apart from the lines relating to placement of the output.</para>
          <note>
            <para>Such files obviously do not live on the server.  It will be the job
            of the application developer to design a suitable mechanism for storing
            and retrieving texts for passing in the user trace request.</para>
            <para>For example, the command-line <link 
            linkend="rnfb25-trace-user-cmdline">fbsvcmgr</link> utility supports a
            saved-file parameter, <emphasis>trc_cfg</emphasis>.</para>
          </note>

          <para>The output of a user session is stored in set of temporary files, each
          of 1 MB.  Once a file has been completely read by the application, it is
          automatically deleted. By default, the maximum total size of the output is
          limited to 10 MB.  It can be changed to a smaller or larger value using the
          <emphasis>MaxUserTraceLogSize</emphasis> in <filename>firebird.conf</filename>.</para>

          <para>Once the user trace session service has been started by the application, the
          application has to read its output, using calls to <emphasis>isc_service_query()</emphasis>.
          The service could be generating output faster than the application can read it. If
          the total size of the output reaches the <emphasis>MaxUserTraceLogSize</emphasis>
          limit, the engine automatically suspends the trace session. Once the application
          has finished reading a file (a 1 MB part of the output) that file is deleted,
          capacity is returned and the engine resumes the trace session automatically.</para>

          <para>At the point where the application decides to stop its trace session, it
          simply requests a <emphasis>detach</emphasis> from the service.  Alternatively, the
          application can use the <command>isc_action_svc_trace_*</command> functions to
          suspend, resume or stop the trace session at will.</para>
          <tip>
            <para>The name of the character set of the attachment is included in any corresponding 
            trace log records, placed between <command>user:role</command>
            and <command>protocol:port</command>, e.g.,</para>
            <literallayout role="monospaced">
A.FDB (ATT_36, SYSDBA:NONE, WIN1251, TCPv4:127.0.0.1)
            </literallayout>
            <para>If no character set is specified in the DPB, NONE is written to the attachment 
            character set slot in the trace log record.</para>
            <para>(<ulink url="http://tracker.firebirdsql.org/browse/CORE-3008">CORE-3008</ulink>)</para>
          </tip>
        </section><!-- sect3 -->

        <section id="rnfb25-trace-user-who"><!-- Level 3 section -->
          <title>Who Can Manage Trace Sessions?</title>
          <para>Any user can initiate and manage a trace session. An ordinary user can
          request a trace only on its own connections and cannot manage trace sessions
          started by any other users.  Administrators can manage any trace session.</para>
        </section><!-- sect3 -->

        <section id="rnfb25-trace-user-abend"><!-- Level 3 section -->
          <title>Abnormal Endings</title>
          <para>If all Firebird processes are stopped, no user trace sessions are preserved.
          What this means is that if a Superserver or Superclassic process is shut down, any
          user trace sessions that were in progress, including any that were awaiting a
          <emphasis>resume</emphasis> condition, are fully stopped and a <emphasis>resume</emphasis>
          cannot restart them.</para>

          <note>
            <para>This situation doesn't apply to the Classic server, of course, since each
            connection involves its own dedicated server instance.  Thus, there is no such
            thing as <quote>shutting down</quote> a Classic server instance.  No service
            instance can outlive the connection that instigated it.</para>
          </note>
        </section><!-- sect3 -->

        <section id="rnfb25-trace-user-samples"><!-- Level 3 section -->
          <title>User Trace Sample Configuration Texts</title>
          <para>The following samples provide a reference for composing configuration texts
          for user trace sessions.</para>

          <orderedlist numeration="loweralpha">
            <listitem>
              <para>Trace prepare, free and execution of all statements within connection 12345</para>
              <programlisting>
&lt;database mydatabase.fdb&gt;
	enabled                true
	connection_id          12345
	log_statement_prepare  true
	log_statement_free     true
	log_statement_start    true
	log_statement_finish   true
	time_threshold         0
&lt;/database&gt;
              </programlisting>
            </listitem>

            <listitem>
              <para>Trace all connections of given user to database mydatabase.fdb, logging
              executed INSERT, UPDATE and DELETE statements and nested calls to procedures
              and triggers, and show corresponding PLANs and performance statistics.</para>
              <programlisting>
&lt;database mydatabase.fdb&gt;
	enabled                true
	include_filter         %(INSERT|UPDATE|DELETE)%
	log_statement_finish   true
	log_procedure_finish   true
	log_trigger_finish     true
	print_plan             true
	print_perf             true
	time_threshold         0
&lt;/database&gt;
              </programlisting>
            </listitem>
          </orderedlist>
        </section><!-- sect3 -->

        <section id="rnfb25-trace-user-cmdline"><!-- Level 3 section -->
          <title>Command-line Requests for User Trace Services</title>
          <para>A new command-line utility, <emphasis>named fbtracemgr</emphasis>, has been 
          added for working interactively with trace services.  It has its own syntax of 
          switches and parameters, discussed in detail, with examples, in the
          <link linkend="rfb25-util-tracemgr">Utilities chapter</link>.</para>

          <para>As well, the general Services utility, <emphasis>fbsvcmgr</emphasis>, can be 
          used for submitting service requests from the command line, as exemplified in
          the following examples.</para>

          <orderedlist numeration="loweralpha">
            <listitem><!-- a -->
              <para>Start a user trace named <quote>My trace</quote> using a configuration file
              named <filename>fbtrace.conf</filename> and read its output on the screen:</para>

              <literallayout class="monospaced">
  fbsvcmgr service_mgr action_trace_start trc_name &quot;My trace&quot; trc_cfg fbtrace.conf
              </literallayout>
              <para>To stop this trace session, press Ctrl+C at the <emphasis>fbsvcmgr</emphasis>
              console prompt. (See also (e), below).</para>
            </listitem>

            <listitem><!-- b -->
              <para>List trace sessions:</para>
              <literallayout class="monospaced">
  fbsvcmgr service_mgr action_trace_list
              </literallayout>
            </listitem>

            <listitem><!-- c -->
              <para>Suspend trace sesson with ID 1</para>
              <literallayout class="monospaced">
  fbsvcmgr service_mgr action_trace_suspend trc_id 1
              </literallayout>
            </listitem>

            <listitem><!-- d -->
              <para>Resume trace sesson with ID 1</para>
              <literallayout class="monospaced">
  fbsvcmgr service_mgr action_trace_resume trc_id 1
              </literallayout>
            </listitem>

            <listitem><!-- e -->
              <para>Stop trace sesson with ID 1</para>
              <literallayout class="monospaced">
  fbsvcmgr service_mgr action_trace_stop trc_id 1
              </literallayout>
              <tip>
                <para>List sessions (see b.) in another console, look for the ID of a
                session of interest and use it in the current console to stop the
                session.</para>
              </tip>
            </listitem>
          </orderedlist>
        </section><!-- sect3 -->
      </section><!-- sect2 -->

      <section id="rnfb25-trace-scope"><!-- sect2 -->
        <title>Trace Scope on Windows</title>
        <para>Tracker reference <ulink url="http://tracker.firebirdsql.org/browse/CORE-2588">CORE-2588</ulink></para>
        <para>On Windows, the trace tools exhibit shared memory conflicts if multiple engine instances in
        different Windows sessions are allowed to run <emphasis>trace</emphasis> in global namespace.
        Tracing scope has therefore been restricted to only those processes that are accessible from
        the current Windows session.</para>
      </section>

      <section id="rnfb25-trace-usecase"><!-- Level 2 section -->
        <title>Use Cases</title>
        <para>There are three general use cases:</para>
        <orderedlist>
          <listitem>
            <para><emphasis role="bold">Constant audit of engine activity</emphasis></para>
            <para>This is served by system audit trace. Administrator creates or edits
            the trace configuration file, sets its name via the
            <emphasis>AuditTraceConfigFile</emphasis> setting in firebird.conf and
            restarts Firebird. Later, the administrator could suspend, resume or
            stop this session without needing to restart Firebird.</para>
            <important>
              <para>To make audit configuration changes known to the engine, Firebird
               must be restarted.</para>
            </important>
          </listitem>

          <listitem>
            <para><emphasis role="bold">On-demand interactive trace of some (or all)
            activity in some (or all) databases</emphasis></para>
            <para>An application (which could be the <emphasis>fbtracemgr</emphasis>
            utility) starts a user trace session, reads its output and shows traced 
            events to the user in real time on the screen. The user can suspend and 
            resume the trace and, finally, stop it.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Engine activity collection for a significant 
            period of time (a few hours or perhaps even a whole day) for later 
            analysis</emphasis></para>

            <para>An application starts a user trace session, reading the trace output
            regularly and saving it to one or more files.  The session must be stopped
            manually, by the same application or by another one.  If multiple trace
            sessions are running, a listing can be requested in order to identify the
            session of interest.</para>
          </listitem>
        </orderedlist>
      </section><!-- sect2 -->

      <section id="rnfb25-trace-plugin"><!-- Level 2 section -->
        <title>Trace Plug-in Facilities</title>
        <para>A new Trace API will provide a set of hooks which can be implemented as an
        external plug-in module to be called by the engine when any traced event happens. 
        A plug-in will assume responsibility for logging such events in some custom way.</para>
        <para>This Trace API exists in Firebird 2.5 and is in use.  However, since it will be 
        changed in forthcoming sub-releases, it is not officially published and must be 
        regarded as unstable.</para>
        <para>The implemented <quote>standard</quote> trace plug-in, <filename>fbtrace.dll (.so)</filename>, 
        resides in the <filename>\plugins</filename> folder of your Firebird 2.5 installation.</para>
      </section>
    </section><!-- sect1 -->

    <section id="rnfb25-mon" xreflabel="Monitoring Improvements"><!-- Level 1 section -->
      <sectioninfo>
        <title>Monitoring Improvements</title>
        <author>
          <firstname>Dmitry</firstname>
          <surname>Yemanov</surname>
        </author>
      </sectioninfo>
      <para>Firebird 2.5 sees the enhancement of the <quote>MON$</quote> database monitoring features 
      introduced in V.2.1, with new tables delivering data about context variables and memory usage in 
      ODS 11.2 and higher databases.  Also, in these databases, it becomes possible to terminate a 
      client connection from another connection through the MON$ structures.</para>
      
      <section id="rnfb25-mon-useraccess"><!-- Level 2 section -->
        <title>Extended Access for Ordinary Users</title>
        <para>The original design allowed non-privileged database users to see monitoring
        information pertaining only to their CURRENT_CONNECTION.  Now they can request
        information for any attachment that was authenticated using the same user name.</para>
        <para>Tracker reference
        <ulink url="http://tracker.firebirdsql.org/browse/CORE-2233">CORE-2233</ulink>.</para>
        <note>
          <title>Notes</title>
          <orderedlist>
            <listitem>
              <para>For an application architecture that entails a middleware tier logging in
              multiple times concurrently with the same user name on behalf of different end
              users, consideration should be given to the impact on performance and privacy
              of exposing the monitoring features to the end users.</para>
            </listitem>
            <listitem>
              <para>The same extension was implemented in V.2.1.2.</para>
            </listitem>
          </orderedlist>
        </note>
      </section>

      <section id="rnfb25-mon-mtdta"><!-- Level 2 section -->
        <title>New MON$ Metadata for ODS 11.2 Databases</title>
        <note>
          <para>For the ODS 11.1 metadata please refer to the V.2.1 documentation.</para>
       </note>

       <important>
         <title>Character Set Change for MON$ Metadata</title>
         <para>The system domain RDB$FILE_NAME2, that is used to define those columns in the MON$
         tables that pertain to file specifications has been altered from CHARACTER SET NONE to
         CHARACTER SET UNICODE_FSS.  The columns currently affected are MON$DATABASE_NAME,
         MON$ATTACHMENT_NAME and MON$REMOTE_PROCESS. This change makes the affected data consistent
         with the updated v.2.5 handling of filespec and other character parameter items in the DPB.</para>
         
         <para>(Tracker entry <ulink url="http://tracker.firebirdsql.org/browse/CORE-2551">CORE-2551</ulink>, 
         A. dos Santos Fernandes)</para>
       </important>

       <variablelist>
         <varlistentry>
           <term>MON$MEMORY_USAGE (current memory usage)</term>
           <listitem>
             <literallayout>
      - MON$STAT_ID (statistics ID)
      - MON$STAT_GROUP (statistics group)
          0: database
          1: attachment
          2: transaction
          3: statement
          4: call
      - MON$MEMORY_USED (number of bytes currently in use)
          High-level memory allocations performed by the engine from its pools.
          Can be useful for tracing memory leaks and for investigating unusual
          memory consumption and the attachments, procedures, etc. that might
          be responsible for it.
      - MON$MEMORY_ALLOCATED (number of bytes currently allocated at the OS level)
          Low-level memory allocations performed by the Firebird memory manager.
          These are bytes actually allocated by the operating system, so it enables
          the physical memory consumption to be monitored.
             </literallayout>
             <note>
               <para>Not all records have non-zero values. On the whole, only MON$DATABASE and 
               memory-bound objects point to non-zero <quote>allocated</quote> values.  Small 
               allocations are not allocated at this level, being redirected to the database 
               memory pool instead.</para>
             </note>
             <literallayout>

      - MON$MAX_MEMORY_USED (maximum number of bytes used by this object)
      - MON$MAX_MEMORY_ALLOCATED (maximum number of bytes allocated from
          the operating system by this object)
             </literallayout>
           </listitem>
         </varlistentry>

         <varlistentry>
           <term>MON$CONTEXT_VARIABLES (known context variables)</term>
           <listitem>
             <literallayout>
      - MON$ATTACHMENT_ID (attachment ID)
          Contains a valid ID only for session-level context variables.
          Transaction-level variables have this field set to NULL.
      - MON$TRANSACTION_ID (transaction ID)
          Contains a valid ID only for transaction-level context variables.
          Session-level variables have this field set to NULL.
      - MON$VARIABLE_NAME (name of context variable)
      - MON$VARIABLE_VALUE (value of context variable)
             </literallayout>
           </listitem>
         </varlistentry>
       </variablelist>
       <note>
         <title>Memory Usage in MON$STATEMENTS and MON$STATE</title>
         <para>Memory usage statistics in MON$STATEMENTS and MON$STATE represent 
         actual CPU consumption.</para>
         <para>Tracker reference: 
         <ulink url="http://tracker.firebirdsql.org/browse/CORE-1583">CORE-1583</ulink>)</para>
       </note>
      </section>

      <section id="rnfb25-mon-usg"><!-- Level 2 section -->
        <title>Usage Notes</title>

        <para><emphasis role="bold">Examples</emphasis></para>

        <para><quote>Top 10</quote> statements ranked according to their memory usage:</para>
        <programlisting>
SELECT FIRST 10
  STMT.MON$ATTACHMENT_ID,
  STMT.MON$SQL_TEXT,
  MEM.MON$MEMORY_USED
FROM MON$MEMORY_USAGE MEM
  NATURAL JOIN MON$STATEMENTS STMT
  ORDER BY MEM.MON$MEMORY_USED DESC
        </programlisting>

        <para>To enumerate all session-level context variables for the current connection:</para>
        <programlisting>
SELECT
  VAR.MON$VARIABLE_NAME,
  VAR.MON$VARIABLE_VALUE
FROM MON$CONTEXT_VARIABLES VAR
  WHERE VAR.MON$ATTACHMENT_ID = CURRENT_CONNECTION
        </programlisting>

        <section id="rnfb25-mon-trmntclnt"><!-- Level 3 section -->
          <title>Terminating a Client</title>
          <para>The MON$ structures are, by design, read-only.  Thus, user DML operations on them 
          are prohibited.  However, a mechanism is built in to allow deleting (only) of records in
          the MON$STATEMENTS and MON$ATTACHMENTS tables.  The effect of this mechanism is to make 
          it possible, respectively, to cancel running statements and, for ODS 11.2 databases, to 
          terminate client sessions.</para>

          <para>To cancel all current activity for a specified connection:</para>
          <programlisting>
DELETE FROM MON$STATEMENTS
  WHERE MON$ATTACHMENT_ID = 32
          </programlisting>

          <para>To disconnect all clients except the <quote>Me</quote> connection:</para>
          <programlisting>
DELETE FROM MON$ATTACHMENTS
  WHERE MON$ATTACHMENT_ID &lt;&gt; CURRENT_CONNECTION
          </programlisting>

          <note>
            <orderedlist>
              <listitem>
                <itemizedlist>
                  <listitem>
                  <!-- 1 -->
                    <para>A statement cancellation attempt becomes a void operation (<quote>no-op</quote>) 
                    if the client has no statements currently running.</para>
                  </listitem>
                  <listitem>
                    <para>Upon cancellation, the execute/fetch API call returns 
                    the <firstterm>isc_cancelled</firstterm> error code.</para>
                  </listitem>
                  <listitem>
                    <para>Subsequent operations are allowed.</para>
                  </listitem>
                </itemizedlist>
              </listitem>

              <listitem>
              <!-- 2 -->
                <itemizedlist>
                  <listitem>
                    <para>Any active transactions in the connection being terminated will have their 
                    activities cancelled immediately and they are rolled back. </para>
                  </listitem>
                  <listitem>
                    <para>Once terminated, the client session receives 
                    the <firstterm>isc_att_shutdown</firstterm> error code.</para>
                  </listitem>
                  <listitem>
                    <para>Subsequent attempts to use this connection handle will cause network 
                    read/write errors.</para>
                  </listitem>
                 </itemizedlist>
               </listitem>
             </orderedlist>
           </note>
         </section>
      </section>
    </section>
    
  </chapter>