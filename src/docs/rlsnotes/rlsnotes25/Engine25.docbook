  <chapter id="rnfb25-engine" xreflabel="Changes in the Firebird Engine">
    <chapterinfo>
      <title>Changes in the Firebird Engine</title>
    </chapterinfo>
    <para>The primary objective of this release was to refactor Firebird's threading architecture to take 
    advantage of the symmetric multiprocessing (SMP) capabilities of multiprocessor hardware.  This has a 
    noticeable effect on the scaleability of Superserver when multiple databases are being accessed 
    simultaneously but its major effect is the emergence of the architectural <quote>Superclassic</quote> 
    model that will underpin the fine-grained multi-threading under development for Firebird 3.</para>

    <section id="rnfb25-engine-threading"><!-- sect1 -->
      <sectioninfo>
        <title>New Threading Architecture</title>
        <authorgroup>
          <author><firstname>Dmitry</firstname><surname>Yemanov</surname></author>
          <author><firstname>Vladyslav</firstname><surname>Khorsun</surname></author>
          <author><firstname>Alex</firstname><surname>Peshkov</surname></author>
          <author><firstname>also</firstname><surname>-</surname></author>
          <author><firstname>Nickolay</firstname><surname>Samofatov</surname></author>
          <author><firstname>Roman</firstname><surname>Simakov</surname></author>
        </authorgroup>
      </sectioninfo>
      <para>For Superserver, the new architecture will be most obvious in two ways:</para>

      <orderedlist>

        <listitem>
          <para>In a multiple database environment, Superserver threads for each database are
          allotted evenly to available processors.</para>
          <note>
            <para>The default <emphasis>CpuAffinity</emphasis> setting still binds SuperServer to 
            a single processor only. In order to take advantage of this improvement when working 
            with multiple databases, this setting should be changed in <filename>firebird.conf</filename>.</para>
          </note>
        </listitem>
        <listitem>
          <para>A slight improvement in scaling should be apparent for single database usage on 
          SMP hardware </para>
        </listitem>
      </orderedlist>

      <para>It is with Classic that the effects are most evident:</para>
      <orderedlist>
        <listitem>
          <para>Classic Server can now be multi-threaded. The one worker thread per process model 
          remains but now it is possible to use additional threads for parallel tasks such as 
          asynchronous shutdown, sweep, inter-process communications with the lock manager and
          more.</para>
        </listitem>
        <listitem>
          <para>On POSIX, services in Classic also run in threads now, rather than in forked
          processes as previously.</para>
          <note>
            <para>For Windows Classic, services became threadable in v.2.1.</para>
          </note>
        </listitem>
        <listitem>
          <para>The embedded libraries&mdash;<emphasis>libfbembed.so</emphasis> on POSIX and
          <emphasis>fbembed.dll</emphasis> on Windows&mdash;are now multi-thread-capable and
          thread-safe, so they can be used in multi-threaded applications.</para>
        </listitem>
        <listitem>
          <para>Testing suggests that the performance of Classic in this version will be be
          significantly faster than previous Classic versions.</para>
        </listitem>
      </orderedlist>

      <section id="rnfb25-threading-superclassic"><!-- sect2 -->
        <title><quote>Superclassic</quote></title>
        <para>This multi-threaded mode for Classic has been dubbed <quote>Superclassic</quote> for
        its capability to handle multiple worker threads&mdash;dedicated or pooled&mdash;inside a
        single server process. It shares all the usual Classic features, with a few differences:</para>
        <itemizedlist>
          <listitem>
            <para>Safe, full shutdown of the server engine is possible on any platform</para>
          </listitem>
          <listitem>
            <para>Under some TPC conditions, it can outperform Classic&mdash;by about 15-20%</para>
          </listitem>
          <listitem>
            <para>It uses fewer kernel resources (although not less memory)</para>
          </listitem>
          <listitem>
            <para>When a Superclassic process crashes, it takes all its connections with it</para>
          </listitem>
          <listitem>
            <para>Recognised limitations in the Services API for the Classic server, such as the
            inability to retrieve the list of attachments/active users, do not apply to
            SuperClassic.</para>
          </listitem>
          <listitem>
            <para>On POSIX, Superclassic does not require <emphasis>[x]inetd</emphasis>.</para>
          </listitem>
        </itemizedlist>
        <note>
          <title>Embedded Server Notes</title>
          <itemizedlist>
            <listitem>
              <para>The embedded server in the Windows library, <emphasis>fbembed.dll</emphasis>,
              now uses Superclassic, not Superserver as previously, thus unifying its model with
              that of local connection to Superclassic on POSIX.  The database file-lock that
              previously restricted connections to a single application space is replaced by a
              global lock table that allows simultaneous access to the same database from different
              embedded server modules.  This facilitates concurrent debugging of applications and
              use of native utility tools like <emphasis>gbak</emphasis>, <emphasis>gstat</emphasis>
              and so on.</para>
            </listitem>
            <listitem>
              <para>A single attachment handle can now be shared by simultaneous threads. (Tracker 
              reference <ulink url="http://tracker.firebirdsql.org/browse/CORE-2498">CORE-2498</ulink>,
              A. dos Santos Fernandes).</para>
            </listitem>
          </itemizedlist>
        </note>

        <section id="rnfb25-threading-superclassic01"><!-- sect3 -->
          <title>Usage Notes</title>

          <section id="rnfb25-threading-superclassic01win"><!-- sect4 -->
            <title>Windows</title>
            <para>On Windows, the same <filename>fb_inet_server.exe</filename> binary delivers
            either the Classic or the Superclassic working modes, according to switch settings.
            Classic is the default mode.</para>
            <para>To use the Superclassic mode as a service, add the <filename>-m[ulti-threaded]</filename>
            switch to the <emphasis>instsvc.exe</emphasis>command line, as follows:</para>
            <programlisting>
instsvc install -multithreaded
            </programlisting>
            <para>When intending to run Superclassic <emphasis>as an application</emphasis>, use</para>
            <programlisting>
fb_inet_server -a -m
            </programlisting>
          </section><!-- sect4 -->

          <section id="rnfb25-threading-superclassic01psx"><!-- sect4 -->
            <title>New Binary for POSIX</title>
            <para>On POSIX, the new binary <filename>fb_smp_server</filename> is supplied for the Superclassic model.
            It contains the network listener, meaning it works similarly to <filename>fbserver</filename> with regard
            to attachment requests and does not require <emphasis>[x]inetd</emphasis>.</para>
            
            <para>The multi-threaded engine used by <filename>fb_smp_server</filename> is the 
            <filename>libfbembed.so</filename> library, in accordance with OSRI requirements.  The Classic packages
            also include <filename>fbguard</filename> (the Guardian) which, in a Superclassic installation, starts
            <filename>fb_smp_server</filename>, rather than <filename>fbserver</filename> as it does when the 
            Superserver model is installed with Guardian.</para>
            <important>
              <para>Do not try to use <filename>fbguard</filename> when running the traditional Classic server.</para>
            </important>  
          </section><!-- sect 4 end -->
        </section><!-- sect 3 end -->
      </section><!-- sect 2 end -->
    </section><!-- sect 1 end -->

    <section id="rnfb25-engine-thrdsafe"><!-- Level 1 section -->
      <sectioninfo>
        <authorgroup>
          <author><firstname>Dmitry</firstname><surname>Yemanov</surname></author>
          <author><firstname>Vladyslav</firstname><surname>Khorsun</surname></author>
          <author><firstname>Alex</firstname><surname>Peshkov</surname></author>
        </authorgroup>
        <title>Thread-safe Client Library</title>
      </sectioninfo>
      <para>Tracker reference <ulink url="http://tracker.firebirdsql.org/browse/CORE-707">CORE-707</ulink>.</para>
      <para>The client libraries, including the embedded one, can now be used in multi-threaded applications without
      any application-level synchronization.</para>
    </section>

    <section id="rnfb25-engine-other"><!-- Level 1 section -->
      <title>Improvements</title>
      <para>Improvements implemented include:</para>

      <section id="rnfb25-engine-dscnnct"><!-- Level 2 section -->
        <sectioninfo>
          <author><firstname>Vladyslav</firstname><surname>Khorsun</surname></author>
          <title>Immediate Detection of Disconnected Clients on Classic</title>
        </sectioninfo>

        <para>The Classic server now detects immediately when a Classic process has been broken by a client
        disconnection.  Its response is to terminate any pending activity, roll back the active transaction and close
        the network connection.</para>
        <para>Tracker reference <ulink url="http://tracker.firebirdsql.org/browse/CORE-818">CORE-818</ulink>.</para>
      </section>

      <section id="rnfb25-engine-optmz"><!-- Level 2 section -->
        <title>Optimizations</title>
        <para>Important optimizations include:</para>

        <section id="rnfb25-engine-optmz01"><!-- Level 3 section -->
          <sectioninfo>
            <author><firstname>Dmitry</firstname><surname>Yemanov</surname></author>
            <title>Data Retrieval</title>
          </sectioninfo>
          <para>An optimization improves data retrieval performance for tables from which no fields are
          accessed.  This applies, for example to the <command>SELECT COUNT(*)</command> style of query.</para>
          <para>Tracker reference <ulink url="http://tracker.firebirdsql.org/browse/CORE-1598">CORE-1598</ulink>.</para>
        </section>

        <section id="rnfb25-engine-optmz02"><!-- Level 3 section -->
          <sectioninfo>
             <title>BLOB Memory Usage</title>
            <author><firstname>Adriano</firstname><surname>dos Santos Fernandes</surname></author>
          </sectioninfo>
          <para>An optimization avoids memory consumption of &lt;page size&gt; bytes for each temporary BLOB created
          during assignment.</para>
          <para>Tracker reference <ulink url="http://tracker.firebirdsql.org/browse/CORE-1658">CORE-1658</ulink>.</para>
        </section>

        <section id="rnfb25-engine-optmz03"><!-- Level 3 section -->
          <sectioninfo>
            <title>Performance Improvement for Updates</title>
            <author><firstname>V.</firstname><surname>Khorsun</surname></author>
          </sectioninfo>

          <para>The aim of this improvement was to reduce the amount of precedence writing that the
          engine undertakes when performing its <quote>careful write</quote> procedure for updates.
          The existing procedure had a noticeable effect on the performance of mass updates, especially for
          <quote>updates-in-place</quote>, where the same records are updated more than once in
          the same transaction. In the worst case, a page could be written to disk for every single new
          record version created during an update.</para>
          <para>See the <ulink url="http://tracker.firebirdsql.org/browse/CORE-2672">Tracker
          reference (CORE-2672)</ulink>for a simplified technical description of what was involved
          internally.</para>

          <para>The solution addresses the potentially time-consuming process involved in protecting the
          write operations from causing circular references between the pages on which new record
          versions and back versions are placed to maintain correct precedence.</para>
        </section><!-- Level 3 -->

      </section><!-- Level 2 -->

      <section id="rnfb25-engine-cachesize"><!-- Level 2 section -->
        <sectioninfo>
          <title>Cache Size Limit Increased for 64-bit Servers</title>
          <author><firstname>V.</firstname><surname>Khorsun</surname></author>
        </sectioninfo>

        <para>Tracker reference <ulink url="http://tracker.firebirdsql.org/browse/CORE-1687">CORE-1687</ulink></para>
        <para>Previous 64-bit Firebird server versions could not benefit from 64-bit address space and be
        configured for more than 2 GB (16K * 128 K)of database cache. The problem has been rectified in this version.
        On 64-bit Firebird, if the resources are available, it is now possible to configure cache large enough to
        accommodate a database of 5-10 GB completely in RAM .</para>

        <para>Although Firebird's caching can get a lot of help from the filesystem cache, it is a feature that
        could be important for high-throughput systems whose load is mainly reads.  The theoretical upper limit
        for caches on x64 Firebird servers is now  2^31 -1 (2,147,483,647) pages.</para>

      </section><!-- Level 2 -->

      <section id="rnfb25-engine-dbdftloc"><!-- Level 2 section -->
        <sectioninfo>
          <title>Default Database Location</title>
          <author><firstname>A.</firstname><surname>Peshkov</surname></author>
        </sectioninfo>

        <para>Tracker reference <ulink url="http://tracker.firebirdsql.org/browse/CORE-1643">CORE-1643</ulink></para>
        <para>The configuration parameter <emphasis>DatabaseAccess</emphasis> now has more <quote>meaning</quote>
        attached to it.  In the absence of any other indication, the first location defined in the <quote>Restrict</quote>
        list for <emphasis>DatabaseAccess</emphasis> is taken by the engine as the default location for creating a
        new database and for locating a database where the connection parameters do not specify either an
        alias or the full path specification.</para>
        <para>The seek logic is similar to that use for finding external tables from the Restrict list supplied to
        the <emphasis>ExternalFileAccess</emphasis> parameter, viz.,</para>
        <orderedlist>
          <listitem>
            <para>All directories in the Restrict list are searched first.</para>
          </listitem>
          <listitem>
            <para>If the database specified is not found:</para>
            <itemizedlist>
              <listitem>
                <para>If CREATE DATABASE is involved, then the first location in the Restrict list is
                used.</para>
              </listitem>
              <listitem>
                <para>Otherwise, the attach fails in the expected fashion.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </orderedlist>

        <note>
          <title>NOTE :: Current Working Directory</title>
          <para>This feature does not suppress the use of the current working directory as the
          implicit location of the specified database file for direct local connections.  The
          Y-valve handles the path resolution in these cases, just as it ever did.</para>
          <para>For a stand-alone server working via the remote subsystem, trying to connect
          using the database file name with no path, although unlikely, is not recommended, since
          there is not really any way to be certain where the database would <quote>land</quote>.
          On Windows, for example, under these conditions the current working directory would be
         <command>%system%</command>.</para>
        </note>
      </section><!-- Level 2 -->



      <section id="rnfb25-engine-embddll"><!-- Level 2 section -->
        <sectioninfo>
          <author><firstname>Adriano</firstname><surname>dos Santos Fernandes</surname></author>
          <title>DLL Loading for Windows Embedded Engine</title>
        </sectioninfo>
        <para>The root determination mechanism for the Windows embedded engine has been changed to avoid common problems
        that occur when an installation of the application structure encounters <quote>DLL Hell</quote>.  Previously,
        the implicit root directory was the directory containing the user application's main executable file.  Now it
        is the directory where the renamed <emphasis>fbembed.dll</emphasis> library is located.</para>
        <para>Tracker reference <ulink url="http://tracker.firebirdsql.org/browse/CORE-1814">CORE-1814</ulink>.</para>
      </section>

      <section id="rnfb25-engine-exttblio"><!-- Level 2 section -->
        <sectioninfo>
          <author><firstname>Vlad</firstname><surname>Khorsun</surname></author>
          <title>Large External Table Support Enabled</title>
        </sectioninfo>
        <para>Previous Firebird versions used 32-bit I/O when working with external tables, limiting the 
        size of the external file to &lt; 2 GB.  The mechanism has been enhanced to use 64-bit I/O on 
        filesystems that support it, effectively eliminating the 2 GB limit.</para>
        <para>Tracker reference <ulink url="http://tracker.firebirdsql.org/browse/CORE-2492">CORE-2492</ulink>.</para>
      </section>
      
      <section id="rnfb25-engine-stats64">
        <sectioninfo>
          <title>Statistics Now Work Properly with 64-bit Values</title>
          <authorgroup>
            <author><firstname>V.</firstname><surname>Khorsun</surname></author>
            <author><firstname>A.</firstname><surname>Peshkov</surname></author>
          </authorgroup>
        </sectioninfo>
        <para>Tracker reference <ulink url="http://tracker.firebirdsql.org/browse/CORE-2619">CORE-2619</ulink></para>
        <para>Memory and other statistics did not work properly 64-bit values in older Firebird versions.  The issue
        had two parts:</para>
        <orderedlist numeration="loweralpha">
          <listitem><!-- a -->
            <para>To make the engine use 64-bit integers for statistics, the internals
            of <command>AtomicCounter</command> were changed.</para>
          </listitem>
          <listitem><!-- b -->
            <para>The <emphasis>isql</emphasis> and <emphasis>qli</emphasis> tools had to be taught to
            work with 64-bit values.</para>
          </listitem>
        </orderedlist>
        <important>
          <title>Incompatibility with Older Clients</title>
          <para>To enable the 32-bit tools to work correctly with a 64-bit server, it was necessary to
          introduce some new internal API functions (<command>struct perf64</command> and <command>perf64_xxx</command>)
          and change <emphasis>isql</emphasis> and <emphasis>qli</emphasis> to use them. This means that the
          <emphasis>isql</emphasis> and <emphasis>qli</emphasis> programs in V.2.5 are not compatible with
          older Firebird clients.</para>
        </important>
      </section>

      <section id="rnfb25-engine-udf"><!-- Level 2 section -->
        <sectioninfo>
          <author><firstname>Adriano</firstname><surname>dos Santos Fernandes</surname></author>
          <title>UDFs Safeguard</title>
        </sectioninfo>
        <para>Tracker reference <ulink url="http://tracker.firebirdsql.org/browse/CORE-1937">CORE-1937</ulink>.</para>
        <para>When a string UDF is written to return a pointer not allocated by the same runtime as the Firebird server 
        is accessing, the presence of the FREE_IT keyword in its declaration corrupts memory and crashes the server.
        As a safeguard against such dysfunctional UDFs, the engine now</para>
        <orderedlist>
          <listitem>
            <para>detects such UDFs and throws an exception</para>
          </listitem>
          <listitem>
            <para>depends on the presence of the updated <emphasis>ib_util</emphasis> library in the path for all server 
            models, including embedded</para>
          </listitem>
        </orderedlist>
      </section>

      <section id="rnfb25-engine-dgnstcs"><!-- Level 2 section -->
        <title>Diagnostics</title>
        <section id="rnfb25-engine-dgnstcs01"><!-- Level 2 section -->
          <sectioninfo>
            <author><firstname>Claudio</firstname><surname>Valderrama</surname></author>
            <title>Transaction Diagnostics</title>
          </sectioninfo>
          <para>Better diagnostics and error reporting when TPB contents are malformed. The new TPB
          validation logic now rejects:</para>
          <itemizedlist>
            <listitem>
              <para>explicitly conflicting options within the same category, e.g., <command>{WAIT}</command> 
              and <command>{NOWAIT}</command> specified together, or <command>{READ COMMITTED}</command>
              and <command>{SNAPSHOT}</command>, or <command>{READ ONLY}</command> and 
              <command>{WRITE}</command></para>
            </listitem>
            <listitem>
              <para>options making no sense, e.g. <command>[NO] RECORD VERSION</command> specified for 
              a SNAPSHOT isolation mode</para>
            </listitem>
            <listitem>
              <para>incorrect order of table reservation options, e.g. 
              <command>{PROTECTED READ &lt;TABLE&gt;}</command> instead of <command>{READ &lt;TABLE&gt; 
              PROTECTED}</command></para>
            </listitem>
          </itemizedlist>
          <para>Tracker reference <ulink url="http://tracker.firebirdsql.org/browse/CORE-1600">CORE-1600</ulink>.</para>
        </section>
        
        <section id="rnfb25-engine-dgnstcs02"><!-- Level 2 section -->
          <sectioninfo>
            <author><firstname>Alex</firstname><surname>Peshkov</surname></author>
            <title>Access Privilege Error Messages</title>
          </sectioninfo>
          <para>Both table and column names are now reported when access privilege exceptions occur for a column.</para>
          <para>Tracker reference <ulink url="http://tracker.firebirdsql.org/browse/CORE-1234">CORE-1234</ulink>.</para>
        </section>
        
        <section id="rnfb25-engine-dgnstcs03">
          <sectioninfo>
            <title>Message Improvement</title>
            <author><firstname>V.</firstname><surname>Khorsun</surname></author>
          </sectioninfo>

          <para>Tracker reference <ulink url="http://tracker.firebirdsql.org/browse/CORE-2587">CORE-2587</ulink></para>
          <para>The diagnostic message when the engine cannot create shared memory that has
          already been mapped by another engine process in another Windows session is now a bit
          more user-friendly.  It used to say:</para>
          <literallayout class="monospace">
  The requested operation cannot be performed on a file with a user-mapped section open.
          </literallayout>
          <para>Now, it says:</para>
    <literallayout class="monospace">
  Database is probably already opened by another engine instance in another Windows session.
    </literallayout>
        </section>

      </section>

      <section id="rnfb25-engine-mtdta"><!-- Level 2 section -->
        <title>Metadata Improvements</title>

        <section id="rnfb25-engine-mtdta01"><!-- Level 3 section -->
          <sectioninfo>
            <author><firstname>Adriano</firstname><surname>dos Santos Fernandes</surname></author>
            <title>Preserve Character Set Default Collation</title>
          </sectioninfo>
          <para>An improvement allows the current value of RDB$DEFAULT_COLLATE_NAME in the system table RDB$CHARACTER_SETS
          to survive the backup/restore cycle.  The mechanism for such customisation is the new 
          <link linkend="rnfb25-ddl-altrchrset">ALTER CHARACTER SET</link> command.</para>
          <para>Tracker reference <ulink url="http://tracker.firebirdsql.org/browse/CORE-789">CORE-789</ulink>.</para>
        </section>
      </section>
    </section>
  </chapter>



