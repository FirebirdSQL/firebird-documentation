<chapter id="rnfb30-ddl">
  <chapterinfo>
    <title>Data Definition Language (DDL)</title>
  </chapterinfo>

  <section id="rnfb30-ddl-links"><!-- Level 1 section -->
    <title>Quick Links</title>
    <itemizedlist spacing="compact">
      <listitem>
        <para><link linkend="rnfb30-ddl-boolean">BOOLEAN Data Type</link></para>
      </listitem>
      <listitem>
        <para><link linkend="rnfb30-ddl-identity">IDENTITY-Style Column</link></para>
      </listitem>
      <listitem>
        <para><link linkend="rnfb30-ddl-managenull">Manage Nullability in Domains and Columns</link></para>
      </listitem>
      <listitem>
        <para><link linkend="rnfb30-ddl-altersequence">Modify Generators (Sequences)</link></para>
      </listitem>
      <listitem>
        <para><link linkend="rnfb30-ddl-alterdftcharset">Alter Default Character Set</link></para>
      </listitem>
      <listitem>
        <para><link linkend="rnfb30-ddl-blobscomputed">BLOB Expressions in Computed Columns</link></para>
      </listitem>
      <listitem>
        <para><link linkend="rnfb30-ddl-enhance-linger"><quote>Linger</quote> Database Closure 
        for Superserver</link></para>
      </listitem>
      <listitem>
        <para>New option in <database>DROP SHADOW</database> to <link linkend="rnfb3-ddl-dropshadow">Preserve 
        the Shadow File</link>
        </para>
      </listitem>
      <listitem>
        <para><link linkend="rnfb3-ddl-users-and-privs">New SQL for Managing Users and 
        Access Privileges</link></para>
      </listitem>
    </itemizedlist>
  </section>

  <section id="rnfb30-ddl-enhance"><!-- L1 -->
    <title>DDL Enhancements</title>
    <para>The following enhancements have been added to the SQL data definition
    language lexicon:</para>

<!-- NEW DATA TYPES -->
    <section><!-- L2 -->
      <title>New Data Types</title>
      <para>A fully-fledged Boolean type is introduced in this release, along with a
      surfaced emulation of the Microsoft-style <quote>identity</quote> column.</para>

<!-- BOOLEAN DATA TYPE -->
      <section id="rnfb30-ddl-boolean"><!-- L3 -->
        <sectioninfo>
          <title>BOOLEAN Data Type</title>
          <author><firstname>Adriano</firstname><surname>dos Santos Fernandes</surname></author>
        </sectioninfo>
        <para>The SQL-2008 compliant BOOLEAN data type (8 bits) comprises the distinct truth
        values TRUE and FALSE. Unless prohibited by a NOT NULL constraint, the BOOLEAN data type
        also supports the truth value UNKNOWN as the null value. The specification does not make
        a distinction between the NULL value of this data type and the truth value UNKNOWN that is
        the result of an SQL predicate, search condition, or boolean value expression: they may be
        used interchangeably to mean exactly the same thing.</para>

        <para>As with many programming languages, the SQL BOOLEAN values can be tested with
        implicit truth values.  For example, <command>field1 OR field2</command>
        and <command>NOT field1</command> are valid expressions.</para>
        
        <section><!-- L4 -->
          <title>The IS Operator</title>
          <para>Predications use the operator IS [NOT] for matching.  For
          example, <command>field1 IS FALSE</command>, or <command>field1 IS NOT TRUE</command>.</para>

          <note>
            <para>Equivalence operators (<quote>=</quote>, <quote>!=</quote>, <quote>&lt;&gt;</quote> and so on)
            are valid in all comparisons.</para>
          </note>
        </section><!-- L4 -->
        <para><emphasis role="bold">Examples</emphasis></para>
          <programlisting>
CREATE TABLE TBOOL (ID INT, BVAL BOOLEAN);
COMMIT;

INSERT INTO TBOOL VALUES (1, TRUE);
INSERT INTO TBOOL VALUES (2, 2 = 4);
INSERT INTO TBOOL VALUES (3, NULL = 1);
COMMIT;

SELECT * FROM TBOOL
          ID    BVAL
============ =======
           1 &lt;true&gt;
           2 &lt;false&gt;
           3 &lt;null&gt;

-- Test for TRUE value
SELECT * FROM TBOOL WHERE BVAL
          ID    BVAL
============ =======
           1 &lt;true&gt;

-- Test for FALSE value
SELECT * FROM TBOOL WHERE BVAL IS FALSE
          ID    BVAL
============ =======
           2 &lt;false&gt;

-- Test for UNKNOWN value
SELECT * FROM TBOOL WHERE BVAL IS UNKNOWN
          ID    BVAL
============ =======
           3 &lt;null&gt;

-- Boolean values in SELECT list
SELECT ID, BVAL, BVAL AND ID &lt; 2
  FROM TBOOL
          ID    BVAL
============ ======= =======
           1 &lt;true&gt;  &lt;true&gt;
           2 &lt;false&gt; &lt;false&gt;
           3 &lt;null&gt;  &lt;false&gt;

-- PSQL Declaration with start value
DECLARE VARIABLE VAR1 BOOLEAN = TRUE;

-- Valid syntax, but as with a comparison 
-- with NULL, will never return any record
SELECT * FROM TBOOL WHERE BVAL = UNKNOWN
SELECT * FROM TBOOL WHERE BVAL &lt;&gt; UNKNOWN
          </programlisting>
          
        <section id="rnfb30-ddl-boolean-othertypes">
          <title>Use of Boolean against other data types</title>
          <para>Although BOOLEAN is not inherently convertible to any other datatype,
          from v.3.0.1 the strings 'true' and 'false' (case-insensitive) will be
          implicitly cast to Boolean in value expressions, e.g.,
            <literallayout class="monospaced">
  if (true &gt; 'false') then ...
            </literallayout>
          'false' is converted to Boolean.  An attempt use the Boolean operators AND, NOT, OR and IS
          will fail. <function>NOT 'False'</function>, for example, is invalid.</para>
          <para>A Boolean can be explicitly converted to and from string with CAST. UNKNOWN is 
          not available for any form of casting.</para>
        </section>

        <note>
          <title>Other Notes</title>
          <itemizedlist>
            <listitem>
              <para>Represented in the API with the FB_BOOLEAN type and FB_TRUE and FB_FALSE constants.</para>
            </listitem>
            <listitem>
              <para>The value TRUE is greater than the value FALSE.</para>
            </listitem>
          </itemizedlist>
        </note>
        <section id="rnfb30-ddl-booleansreserved"><!-- L4 -->
          <title>Keywords INSERTING, UPDATING and DELETING</title>
          <para>To avoid ambiguities when used in Boolean expressions, the previously 
          non-reserved keywords INSERTING, UPDATING and DELETING, which return True|False 
          when tested in PSQL, have been made reserved words in all contexts.  If you have 
          used any of these words as identifiers for database objects, columns, variables or 
          parameters, it will be necessary to redefine them, either with new names or by 
          enclosing their identifiers in double quotes.</para>
        </section><!-- L4 -->

      </section><!-- L3 -->

<!-- IDENTITY-STYLE COLUMN -->
      <section id="rnfb30-ddl-identity"><!-- L3 -->
        <sectioninfo>
          <title>Identity Column Type</title>
          <author><firstname>Adriano</firstname><surname>dos Santos Fernandes</surname></author>
        </sectioninfo>
        <para>An identity column is a column associated with an internal sequence generator.  Its
        value is set automatically when the column is omitted in an INSERT statement.</para>
        <para><emphasis role="bold">Syntax Patterns</emphasis></para>
        
        <literallayout class="monospaced">
    &lt;column definition&gt; ::=
        &lt;name&gt; &lt;type&gt; GENERATED BY DEFAULT AS IDENTITY [ (START WITH &lt;value&gt;) ]&lt;constraints&gt;
        </literallayout>
        <para>When defining a column, the optional START WITH clause allows the generator to be
        initialised to a value other than zero.  See Tracker ticket
        <ulink url="http://tracker.firebirdsql.org/browse/CORE-4199">CORE-4199</ulink>.</para>

        <literallayout class="monospaced">
    &lt;alter column definition&gt; ::=
        &lt;name&gt; RESTART [ WITH &lt;value&gt; ]
        </literallayout>
        <para>A column definition can be altered to modify the starting value of the 
        generator.  RESTART alone resets the generator to zero;  the optional WITH &lt;value&gt;
        clause allows the restarted generator to start at a value other than zero. See Tracker ticket
        <ulink url="http://tracker.firebirdsql.org/browse/CORE-4206">CORE-4206</ulink>.</para>

        <para><emphasis role="bold">Rules</emphasis></para>
          <itemizedlist>
            <listitem>
              <para>The data type of an identity column must be an exact number type with zero
              scale. Allowed types are thus SMALLINT, INTEGER, BIGINT, NUMERIC(x,0) and
              DECIMAL(x,0).</para>
            </listitem>
            <listitem>
              <para>An identity column cannot have DEFAULT or COMPUTED value.</para>
            </listitem>
          </itemizedlist>


        <note>
          <title>Notes</title>

          <itemizedlist>
            <listitem>
              <para>An identity column cannot be altered to become a regular column.
              The reverse is also true.</para>
            </listitem>
            <listitem>
              <para>Identity columns are implicitly NOT NULL (non-nullable).</para>
            </listitem>
            <listitem>
              <para>Uniqueness is not enforced automatically.  A UNIQUE or PRIMARY KEY
              constraint is required to guarantee uniqueness.</para>
            </listitem>
            <listitem>
              <para>The use of other methods of generating key values for IDENTITY columns,
              e.g., by trigger-generator code or by allowing users to change or add them, is
              discouraged to avoid unexpected key violations.</para>
            </listitem>
          </itemizedlist>
        </note>

        <para><emphasis role="bold">Example</emphasis></para>
          <programlisting>
create table objects (
  id integer generated by default as identity primary key,
  name varchar(15)
);

insert into objects (name) values ('Table');
insert into objects (name) values ('Book');
insert into objects (id, name) values (10, 'Computer');

select * from objects;

          ID NAME
============ ===============
           1 Table
           2 Book
          10 Computer
          </programlisting>

        <section><!-- L4 -->
          <title>Implementation Details</title>
          <para>Two new columns have been inserted in RDB$RELATION_FIELDS to support
          identity columns: RDB$GENERATOR_NAME and RDB$IDENTITY_TYPE.</para>
          <itemizedlist>
            <listitem>
              <para>RDB$GENERATOR_NAME stores the automatically created generator for
              the column. In RDB$GENERATORS, the value of RDB$SYSTEM_FLAG of that generator
              will be 6.</para>
            </listitem>
            <listitem>
              <para>Currently, RDB$IDENTITY_TYPE will currently always store the value 1 
              (by default) for identity columns and NULL for non-identity columns.  In the 
              future this column will store the value 0, too (for ALWAYS) when Firebird 
              implements support for this type of identity column.</para>
            </listitem>
          </itemizedlist>
         </section><!-- L4 -->
      </section><!-- L3 -->
    </section><!-- L2 -->

<!-- MANAGE NULLABILITY -->
    <section id="rnfb30-ddl-managenull"><!-- L2 -->
      <sectioninfo>
        <title>Manage Nullability in Domains and Columns</title>
        <author>
          <firstname>A.</firstname><surname>dos Santos Fernandes</surname>
        </author>
      </sectioninfo>
      <para>ALTER syntax is now available to change the nullability of a table
      column or a domain</para>
      <para><emphasis role="bold">Syntax Pattern</emphasis></para>
        <literallayout class="monospaced">
ALTER TABLE &lt;table name&gt; ALTER &lt;field name&gt; { DROP | SET } [NOT] NULL

ALTER DOMAIN &lt;domain name&gt; { DROP | SET } [NOT] NULL
        </literallayout>

      <note>
        <title>Notes</title>
        <para>The success of a change in a table column from NULL to NOT NULL is subject
        to a full data validation on the table, so ensure that the column has no nulls
        before attempting the change.</para>
        <para>A change in a domain subjects all the tables using the domain to validation.</para>
        <para>An explicit NOT NULL on a column that depends on a domain prevails over the domain.
        In this situation, the changing of the domain to make it nullable does not propagate to
        the column.</para>
      </note>
    </section>

<!-- MODIFY GENERATORS -->
    <section id="rnfb30-ddl-altersequence"><!-- L2 -->
      <sectioninfo>
        <title>Modify Generators (Sequences)</title>
        <authorinfo>
          <author><firstname>Adriano</firstname><surname>dos Santos Fernandes</surname></author>
          <author><firstname>Dmitry</firstname><surname>Yemanov</surname></author>
        </authorinfo>
      </sectioninfo>
      <para>More statement options have been added for modifying generators (sequences).  Where
      previously in SQL the only option was <command>ALTER SEQUENCE &lt;sequence name&gt;
      RESTART WITH &lt;value&gt;</command>, now a full lexicon is provided and GENERATOR 
      and SEQUENCE are synonyms for the full range of commands.</para>
      <para>RESTART can now be used on its own to restart the sequence at its previous start or 
      restart value.  A new column <code>RDB$INITIAL_VALUE</code> is added to the system table RDB$GENERATORS
      to store that value.</para> 

      <para><emphasis role="bold">Syntax Forms</emphasis></para>
        <literallayout class="monospaced">
{ CREATE | RECREATE } { SEQUENCE | GENERATOR } &lt;sequence name&gt; [ START WITH &lt;value&gt; ]

CREATE OR ALTER { SEQUENCE | GENERATOR } &lt;sequence name&gt; { RESTART | START WITH &lt;value&gt; }

ALTER { SEQUENCE | GENERATOR } &lt;sequence name&gt; RESTART [ WITH &lt;value&gt; ]
        </literallayout>

    </section><!-- L2 -->

<!-- ALTER DEFAULT CHARACTER SET -->
    <section id="rnfb30-ddl-alterdftcharset"><!-- L2 -->
      <author>
        <firstname>A.</firstname><surname>dos Santos Fernandes</surname>
      </author>
      <title>Alter the Default Character Set</title>
      <literallayout class="monospaced">
  ALTER DATABASE
    ...
    SET DEFAULT CHARACTER SET &lt;new_charset&gt;
      </literallayout>
      <para>The alteration does not change any existing data.  The new default 
      character set is used only in subsequent DDL commands and will assume the 
      default collation of the new character set.</para>
    </section><!-- L2 -->

<!-- BLOBS IN COMPUTED BY EXPRESSIONS -->
    <section id="rnfb30-ddl-blobscomputed"><!-- L2 -->
      <sectioninfo>
        <title>BLOB Expressions in Computed Columns</title>
        <author><firstname>Adriano</firstname><surname>dos Santos Fernandes</surname></author>
      </sectioninfo>
      <para>A substring from a BLOB column can now be used to define a computed column.</para>
      <para><emphasis role="bold">For Example</emphasis></para>
      <programlisting>
ALTER TABLE ATABLE 
  ADD ABLOB
  COMPUTED BY (SUBSTRING(BLOB_FIELD FROM 1 FOR 20))
      </programlisting>
    </section><!-- L2 -->


<!-- LINGER -->
    <section id="rnfb30-ddl-enhance-linger"><!-- L2 -->
      <sectioninfo>
        <title><quote>Linger</quote> Database Closure for Superserver</title>
        <authorinfo>
          <author><firstname>Alex</firstname><surname>Peshkov</surname></author>
        </authorinfo>
      </sectioninfo>
      <para>Sometimes it is desirable to have the Superserver engine keep the database 
      open for a period after the last attachment is closed, i.e., to have it <quote>linger</quote>
      a while. It can help to improve performance at low cost, under conditions where the database
      is opened and closed frequently, by keeping resources <quote>warm</quote> for next time it
      is reopened.</para>
      <para>Firebird 3.0 introduces an enhancement to <command>ALTER DATABASE</command> to manage
      this optional LINGER capability for databases running under Superserver.</para>
      
      <para><emphasis role="bold">Syntax Form</emphasis></para>
      <literallayout class="monospaced">
  ALTER DATABASE SET LINGER TO {seconds};
  ALTER DATABASE DROP LINGER;
      </literallayout>

      <para><emphasis role="bold">Usage</emphasis></para>
      <para>To set linger for the database do:</para>
      <literallayout class="monospaced">
 ALTER DATABASE SET LINGER TO 30;  -- sets linger interval to 30 seconds
      </literallayout>
      <para>Either of the following forms will clear the linger setting and return the database
      to the normal condition (no linger):</para>
      <literallayout class="monospaced">
 ALTER DATABASE DROP LINGER;
 ALTER DATABASE SET LINGER TO 0;
      </literallayout>
      <note>
        <para>Dropping LINGER is not an ideal solution for the occasional need to turn it off for
        some once-only condition where the server needs a forced shutdown.  The <emphasis>gfix</emphasis>
        utility now has the <command>-NoLinger</command> switch, which will close the specified database
        immediately the last attachment is gone, regardless of the LINGER setting in the
        database.  The LINGER setting is retained and works normally the next time.</para>
        <para>The same one-off override is also available through the Services API, using the tag
        <command>isc_spb_prp_nolinger</command>, e.g. (in one line):</para>
        <literallayout class="monospaced">
 fbsvcmgr host:service_mgr user sysdba password xxx
        action_properties dbname employee prp_nolinger
        </literallayout>
      </note>
      <para>See also Tracker ticket 
      <ulink url="http://tracker.firebirdsql.org/browse/CORE-4263">CORE-4263</ulink> for some 
      discussion of the development of this feature.</para>
    </section><!-- L2 -->
    
    <section id="rnfb3-ddl-dropshadow"><!-- L2 -->
      <title>Option to Preserve Shadow File</title>
      <author><firstname>Alex</firstname><surname>Peshkov</surname></author>
      <para>The <database>DROP SHADOW</database> command has a new option to preserve the 
      shadow file in the filesystem:
        <blockquote><programlisting>
DROP SHADOW <replaceable>shadow_num</replaceable>
  [{DELETE | PRESERVE} FILE]
        </programlisting></blockquote>
      </para>
      <para>See Tracker ticket <ulink url="http://tracker.firebirdsql.org/browse/CORE-4955">CORE-4955</ulink>.</para>
    </section><!-- L2 --> <!-- drop shadow -->

    <section id="rnfb3-ddl-users-and-privs"><!-- L2 -->
      <title>New SQL for Managing Users and Access Privileges</title>
      <para>A number of new features and enhancements have been added to the DDL lexicon 
      for managing users and their access to objects in databases.  
      They are <link linkend="rnfb30-access-sql">described in detail</link> in Chapter 7,
      Security.</para>

      <section id="rnfb3-ddl-enhance-users"><!-- L3 -->
        <title><link linkend="rnfb30-user-sql">SQL-driven User Management</link></title>
        <para>The SQL set of DDL commands for managing user accounts has been enhanced in Firebird 3,
        thus improving the capability to manage (add, modify or delete) users in a security database
        from a regular database attachment.</para>
        <important>
          <title><emphasis>gsec</emphasis> is deprecated!</title>
          <para>The command-line and shell utility <emphasis>gsec</emphasis> is deprecated from this
          release forward.  It will continue to work with <filename>security3.fdb</filename> but it
          will not work with alternative security databases.</para>
        </important>
      </section><!-- L3 -->

      <section id="rnfb3-ddl-setrole"><!-- L3 -->
        <title><link linkend="rnfb3-security-setrole">SET ROLE</link> 
        and <link linkend="rnfb3-security-settrustedrole">SET TRUSTED ROLE</link></title>
        <para>The SQL2008-compliant operator SET ROLE allows the CURRENT_ROLE context 
        variable to be set to one that has been granted to the CURRENT_USER or to a 
        user assigned to the database attachment as trusted (SET TRUSTED ROLE).</para>
      </section><!-- L3 -->

      <section id="rnfb3-ddl-grantedby"><!-- L3 -->
        <title><link linkend="rnfb30-security-grantedby">GRANTED BY Clause for Privileges</link></title>
        <para>Previously, the grantor or revoker of SQL privileges was always the
        current user.  The GRANTED BY clause makes it so that a different grantor or revoker
        can be specified in GRANT and REVOKE commands.</para>
      </section><!-- L3 -->

      <section id="rnfb3-ddl-revoke-all"><!-- L3 -->
        <title><link linkend="rnfb30-security-revokeall">REVOKE ALL ON ALL</link></title>
        <para>When a user is removed from the security database or another authentication 
        source, this new command is useful for revoking its access to all objects in the
        database.</para>
      </section><!-- L3 -->

      <section id="rnfb3-ddl-metadataprivs"><!-- L3 -->
        <title><link linkend="rnfb30-security-metadataprivs">GRANT/REVOKE Metadata Privileges</link></title>
        <para>In Firebird 3, the system tables are read-only. This SQL syntax provides
        the means to assign metadata write privileges to specified users or roles
        for specified objects.</para>
      </section><!-- L3 -->

      <section id="rnfb3-ddl-execute-udf"><!-- L3 -->
        <title><link linkend="rnfb30-security-udfperms">EXECUTE Privileges for UDFs</link></title>
        <para>EXECUTE permission is now supported for UDFs (both legacy and PSQL based ones).</para>
      </section><!-- L3 -->

      <section id="rnfb3-ddl-grantusage"><!-- L3 -->
        <title><link linkend="rnfb30-security-otherprivs">GRANT/REVOKE USAGE</link></title>
        <para>New SQL-2008 compliant USAGE permission is introduced to protect metadata objects 
        other than tables, views, procedures and functions.</para>
      </section><!-- L3 -->

    </section><!-- L2 -->
  </section><!-- L1 -->
</chapter>
