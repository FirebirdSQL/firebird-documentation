  <chapter id="rnfb30-fbconf">
    <chapterinfo>
      <title>Configuration Additions and Changes</title>
    </chapterinfo>
    <para>The file <filename>aliases.conf</filename> is renamed to <filename>databases.conf</filename>. 
    An old <filename>aliases.conf</filename> from a previous version can simply be renamed and the 
    new engine will just continue to use it as before.  However, <filename>databases.conf</filename> 
    can now include some configuration information for individual databases.</para>
    <section id="rnfb30-configparams-scope"><!-- L1 -->
      <title>Scope of Parameters</title>
      <para>Some parameters are marked as configurable <emphasis>per-database</emphasis> or
      <emphasis>per-connection</emphasis>.</para>
      <itemizedlist>
        <listitem>
          <para>Per-database configuration is done in <filename>databases.conf</filename>.</para>
        </listitem>
        <listitem>
          <para>Per-connection configuration is primarily for client tool use and is done using the
          DPB parameter <command>isc_dpb_config</command> or, for Services, the SPB parameter
          <command>isc_spb_config</command>.</para>
        </listitem>
        <listitem>
          <para>In the case of Embedded, the DPB can be used to tune per-database entries on first
          attaching to a database.</para>
        </listitem>
      </itemizedlist>
    </section><!-- L1 -->

    <section><!-- L1 -->
      <title>Macro Substitution</title>
      <para>A number of predefined macros (syntax $(name)) is available for use in the configuration
      files to substitute for a directory name:</para>
      <variablelist>
        <varlistentry>
          <term>$(root)</term>
          <listitem>
            <para>Root directory of Firebird instance</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>$(install)</term>
          <listitem>
            <para>Directory where Firebird is installed. $(root) and $(install) are initially the same.  
            $(root) can be overridden by setting or altering the environment variable FIREBIRD, in which 
            case it becomes different from $(install).</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>$(this)</term>
          <listitem>
            <para>Directory where current configuration file is located</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>$(dir_conf)</term>
          <listitem>
            <para>Directory where firebird.conf and databases.conf are located</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>$(dir_secdb)</term>
          <listitem>
            <para>Directory where the default security database is located</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>$(dir_plugins)</term>
          <listitem>
            <para>Directory where plugins are located</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>$(dir_udf)</term>
          <listitem>
            <para>Directory where UDFs are located by default</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>$(dir_sample)</term>
          <listitem>
            <para>Directory where samples are located</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>$(dir_sampledb)</term>
          <listitem>
            <para>Directory where sample DB (employee.fdb) is located</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>$(dir_intl)</term>
          <listitem>
            <para>Directory where international modules are located</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>$(dir_msg)</term>
          <listitem>
            <para>Directory where the messages file (firebird.msg) is located. 
            $(dir_msg) usually should be the same as $(root) but can be 
            overridden by the environment variable FIREBIRD_MSG.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      
      <tip>
        <para>You can observe the usage of some of the macros 
        in <filename>databases.conf.</filename></para>
      </tip>
      <note>
        <title>Notes</title>
        <para>In our pre-built binaries, $(dir_conf) and $(dir_secdb) would normally
        be the same as $(root) and $(install).</para>

        <para>$(dir_plugins), $(dir_udf), $(dir_sample), $(dir_sampledb) and $(dir_intl)
        are predefined sub-directories inside $(root).</para>

        <para>The build conventions are not <quote>rules</quote> that could be expected
        to apply in every distribution of Firebird.  Distro-specific Linux packages, for
        example, each prefer to fit the Firebird components into standard layouts that
        comply with their own conventions.  As an illustration, user binaries, such
        as <emphasis>isql</emphasis> might be located in <filename>/usr/bin</filename>,
        server binaries in <filename>/usr/sbin</filename>, configuration files in
        <filename>/etc/firebird.d</filename> and so on.  Obviously, $(root) would then
        make no sense, even if the $(dir_something) macros still pointed to actual
        directories.</para>
      </note>
    </section><!-- L1 -->

    <section><!-- L1 -->
      <title>Includes</title>
      <para>One configuration file can be included in another by using an <quote>include</quote>
      directive, e.g., </para>
      <literallayout>
  include some_file.conf
      </literallayout>
      <para>A relative path is treated as relative to the enclosing configuration file.  So, if our
      example above is inside <filename>/opt/config/master.conf</filename> then our <command>include</command>
      refers to the file <filename>/opt/config/some_file.conf</filename>.</para>
      <section><!-- L2 -->
        <title>Wildcards</title>
        <para>The standard wildcards <command>*</command> and <command>?</command> may be used 
        in an <command>include</command> directive, to include all matching files in undefined order. 
        For example,</para>
        <literallayout>
  include $(dir_plugins)/config/*.conf
        </literallayout>
      </section><!-- L2 -->
    </section><!-- L1 -->

    <section><!-- L1 -->
      <title>Expression of Parameter Values</title>
      <para>Previously, byte values were specified by default as integer, representing the number 
      of bytes.  However, now you can optionally specify them in Kilobytes, Megabytes or Gigabytes, as 
      appropriate, by adding K, M or G (case-insensitive).  For example, <command>24M</command> is read as
      25165824 (24 * 1024 * 1024).</para>
      <para>Boolean values are expressed as non-zero (true)|zero (false) by default, but you may now use 
      the quoted strings 'y', 'yes' or 'true' instead of a non-zero digit.</para>
    </section><!-- L1 -->

    <section id="rnfb3-fbconf-perdatabase"><!-- L1 -->
      <title><quote>Per-database</quote> Configuration</title>
      <para>Custom configuration at database level is achieved with formal entries in
      <filename>databases.conf</filename>.</para>

      <section><!-- L2 -->
        <title>Format of Configuration Entries</title>
        <para>In <filename>aliases.conf</filename> the format for specifying a database alias was</para>
        <literallayout class="monospaced">
 aliasname = /absolute/path/to/database_file
        </literallayout>
        <para>If you are not adding any database-specific configuration directives for an alias, the format
        is just as it was before, e.g.,</para>
        <literallayout class="monospaced">
  emp = c:\Program Files\examples\empbuild\employee.fdb
 ** or  **
  emp = /opt/firebird/examples/empbuild/employee.fdb
 ** or  **
  emp = $(dir_sampleDb)/employee.fdb
        </literallayout>
        <para>A slightly more complex format is used for cases where certain non-global 
        parameters are to be targeted at an indvidual databases. The entry for the database 
        is defined by the alias declaration, as previously.  The database-specific directives 
        are listed below it, within curly brackets.</para>
        <literallayout class="monospaced">
  #
  # Directives for MYBIGDB
  MYBIGDB = opt/databases/mybigdb.fdb
     {
        LockMemSize = 32M           # We know that MYBIGDB needs a lot of locks
        LockHashSlots = 19927       # and a hash table large enough for them
     }
          </literallayout>
      </section>

      <section><!-- L2 -->
        <title>Parameters Available</title>
        <para>The following parameters can be copy/pasted to <filename>databases.conf</filename> and
        used as overrides for specific databases.</para>
        <table valign="middle"><title>Parameters available in databases.conf</title>
          <tgroup cols="3" align="left">
          <colspec colname='c1'/>
          <colspec colname='c2'/>
          <colspec colname='c3'/>

          <!-- spanspec spanname="c2andc3" namest="c2" nameend="c3" colsep="0"/ -->
          <!-- spanspec spanname="all3" namest="c1" nameend="c3" colsep="0"/ -->

          <tbody>
            <row><!-- block header -->
              <entry namest="c1" nameend="c3"><emphasis role="bold">Engine-related</emphasis></entry>
            </row>

            <row>
              <entry>DatabaseGrowthIncrement</entry>
              <entry>DeadlockTimeout</entry>
              <entry>DefaultDbCachePages</entry>
            </row>
            <row>
              <entry>EventMemSize</entry>
              <entry>FileSystemCacheThreshold</entry>
              <entry>ExternalFileAccess</entry>
            </row>
            <row>
              <entry>GCPolicy</entry>
              <entry>LockAcquireSpins</entry>
              <entry>LockHashSlots</entry>
            </row>
            <row>
              <entry>LockMemSize</entry>
              <entry>MaxUnflushedWrites</entry>
              <entry>MaxUnflushedWriteTime</entry>
            </row>
            <row>
              <entry><link linkend="rnfb30-fbconf-securitydatabase">SecurityDatabase</link></entry>
              <entry><link linkend="rnfb30-fbconf-usermanager">UserManager</link></entry>
              <entry></entry>
            </row>
            <row>
              <entry><link linkend="rnfb30-fbconf-wirecompression">WireCompression</link></entry>
              <entry><link linkend="rnfb30-fbconf-wirecrypt">WireCrypt</link></entry>
              <entry><link linkend="rnfb30-fbconf-cryptplugin">WireCryptPlugin</link></entry>
            </row>

            <row><!-- block header -->
              <entry><emphasis  role="bold">Client-related</emphasis></entry>
              <entry namest="c2" nameend="c3"><emphasis>Some parameters can be configured at
              the client connection via the DPB/SPB, as an alternative to configuring them in
              <filename>databases.conf</filename>.  Please refer back
              to <link linkend="rnfb30-configparams-scope">Scope of Parameters</link> at the beginning
              of this chapter to understand these
              differences.</emphasis></entry>
            </row>
            <row>
              <entry><link linkend="rnfb30-fbconf-auth">AuthClient</link></entry>
              <entry><link linkend="rnfb30-engine-providers">Providers</link></entry>
              <entry>&nbsp;</entry>
            </row>

            <row><!-- block header -->
              <entry namest="c1" nameend="c3"><emphasis>The following parameters can be
              configured ONLY via the DPB/SPB</emphasis></entry>
            </row>
            <row>
              <entry>ConnectionTimeout</entry>
              <entry>DummyPacketInterval</entry>
              <entry>IpcName</entry>
            </row>
            <row>
              <entry>RemoteAuxPort</entry>
              <entry>RemotePipeName</entry>
              <entry>RemoteServiceName</entry>
            </row>
            <row>
              <entry>RemoteServicePort</entry>
              <entry>TCPNoNagle</entry>
              <entry>&nbsp;</entry>
            </row>
          </tbody>
          </tgroup>
        </table>
      </section><!-- L2 -->
    </section><!-- L1 -->

    <section><!-- L1 -->
      <title>New Parameters</title>
      <para>New parameters added to <filename>firebird.conf</filename> are:</para>
      
      <section id="rnfb30-fbconf-securitydatabase"><!-- L2 -->
        <title>SecurityDatabase</title>
        <para>Defines the name and location of the security database that stores login user
        names and passwords used by the server to validate remote connections.  By default, in
        <filename>firebird.conf</filename>, it is <filename>$(root)/security3.fdb</filename>.
        It can be overridden for a specific database by a configuration in
        <filename>databases.conf</filename>.</para>
      </section>

      <section id="rnfb30-fbconf-auth"><!-- L2 -->
        <title>AuthServer and AuthClient</title>
        <para>Two parameters that  determine what authentication methods can be used by
        the network server and the client redirector.  The enabled methods are listed as
        string symbols separated by commas, semicolons or spaces.</para>
        <itemizedlist>
          <listitem>
            <para>Secure remote passwords (Srp), using the plug-in is the default, using the
            OS-appropriate plug-in (<filename>libSrp.s0 | Srp.dll | Srp.dylib</filename>)</para>
          </listitem>
          <listitem>
            <para>On Windows, the Security Support Provider Interface (Sspi) is used when no
            login credentials are supplied</para>
          </listitem>
          <listitem>
            <para>Client applications can use legacy authentication (Legacy_Auth) to talk
            to old servers.</para>
          </listitem>
        </itemizedlist>

        <para>For <emphasis role="bold">AuthServer</emphasis>, Srp and Win_Sspi are listed;&nbsp;
        for <emphasis role="bold">AuthClient</emphasis>, Srp, Win_Sspi
        and Legacy_Auth.</para>
        <para>  To disable a method, erase the comment marker (#) and remove
        the unwanted method from the list.</para>

        <para>Both parameters can be used in <filename>databases.conf</filename>.  They can
        both be used in the DPB or the SPB for a connection-specific configuration.</para>
      </section>
      
      <section id="rnfb30-fbconf-wirecrypt"><!-- L2 -->
        <title>WireCrypt</title>
        <para>Sets whether the network connection should be encrypted.  It has three
        possible values: Required | Enabled | Disabled.  The default is
        set such that encryption is Required for connections coming in to the server and 
        Enabled for connections outgoing to a server. </para>
        <para>To access a server using an older client library and, thus, no encryption, 
        <emphasis role="bold">WireCrypt</emphasis> in the server configuration file should 
        be set to Enabled or Disabled to avert the default <emphasis>Required</emphasis>.</para>
        <para>The rules are simple: if one side has <code>WireCrypt = Required</code> and 
        the other sets the parameter to Disabled, side with WireCrypt=Required rejects 
        the connection and it is not established.</para>
        <para>A missing WireCrypt plug-in or encryption key in cases where the channel must 
        be encrypted also thwarts a connection.</para>
        <para>In all other cases, connection is established without encryption if at least 
        one side has <code>WireCrypt = Disabled</code>. In other cases, the encrypted 
        connection is established.</para>
      </section>

      <section id="rnfb30-fbconf-usermanager"><!-- L2 -->
        <title>UserManager</title>
        <para>Sets the plug-in that will operate on the security database. It can be a list with
        blanks, commas or semicolons as separators: the first plug-in from the list is used.</para>
        <para>The default plug-in is <emphasis role="bold">Srp</emphasis>
        (<filename>libSrp.s0 | Srp.dll | Srp.dylib)</filename>.</para>
        <para>The UserManager parameter can be used in <filename>databases.conf</filename> for
        a database-specific override.</para>
      </section>

      <section id="rnfb30-fbconf-traceplugin"><!-- L2 -->
        <title>TracePlugin</title>
        <para>Specifies the plug-in used by Firebird's Trace facility to send trace data
        to the client app or audit data to the log file.</para>
        <para>The default plug-in is <emphasis role="bold">fbtrace</emphasis>
        (<filename>libfbtrace.s0 | fbtrace.dll | fbtrace.dylib)</filename>.</para>
      </section>

      <section id="rnfb30-fbconf-cryptplugin"><!-- L2 -->
        <title>WireCryptPlugin</title>
        <para>A wire-crypt plug-in is used to encrypt and decrypt data transferred over the 
        network.</para>
        <para>The installation default <emphasis role="bold">Arc4</emphasis> implies use of an 
        <emphasis role="bold">Alleged RC4</emphasis> plug-in.  The configured plug-in, which requires a 
        key generated by the configured authentication plug-in, can be overridden in the API for a 
        specific connection via the DPB or the SPB.</para>
        <tip>
          <para>For information about configuring plug-ins, see <link linkend="rnfb30-config-plugins">Configuring
          Plug-ins</link> in the Engine chapter.</para>
        </tip>
      </section>
      
      <section id="rnfb30-fbconf-keyholder"><!-- L2 -->
        <title>KeyHolderPlugin</title>
        <para>This parameter would represent some form of temporary storage for database encryption
        keys.  Nothing is implemented as a default plug-in but a sample Linux plug-in named 
        <filename>libCryptKeyHolder_example.so</filename> can be found 
        in <filename>/plugins/</filename>.</para>
      </section>

      <section id="rnfb30-fbconf-providers"><!-- L2 -->
        <title>Providers</title>
        <para>List of allowed transports for accessing databases, 
        discussed in <link linkend="rnfb30-engine-providers">the Engine chapter</link>.</para>
      </section>
      
      <section id="rnfb30-fbconf-shared"><!-- L2 -->
        <title>ServerMode</title>
        <para>Determines the execution mode of the server (<quote>server model</quote>).  
        Discussed in <link linkend="rnfb30-engine-modes">the Engine chapter</link>.</para>
      </section>
      
      <section id="rnfb30-fbconf-remoteaccess"><!-- L2 -->
        <title>RemoteAccess</title>
        <para>Parameter in <filename>firebird.conf</filename> and <filename>databases.conf</filename>
        provides an efficient, configurable replacement for hard-coded rules limiting access to
        <filename>security3.fdb</filename>.  It can also be used to configure limited remote
        access to any other database, including non-default security databases.</para>
        <para>By default RemoteAccess is enabled for all databases except the security database.
        If you intend using more than one dedicated security database, then disabling remote
        access to it (or them) via <filename>databases.conf</filename> is recommended.</para>
        <para>For stricter security, server-wide, you can set <emphasis>RemoteAccess</emphasis> to
        false in <filename>firebird.conf</filename> and use entries in <filename>database.conf</filename>
        to re-enable it for specific databases.</para>
        <para><emphasis>RemoteAccess</emphasis> is a Boolean. It can be expressed with either
        true/false, 1/0 or Yes/No.</para>
      </section>

      <section id="rnfb30-fbconf-wirecompression"><!-- L2 -->
        <title>WireCompression</title>
        <author><firstname>Alex</firstname><surname>Peshkov</surname></author>
        <para>Parameter in <filename>firebird.conf</filename> or 
        <filename>databases.conf</filename>, enabling or disabling compression of data
        over the wire at global or individual database level.</para>

        <para>The default setting is disabled (= False).  Settings and environment must
        be correct at both server and client for WireCompression to take effect:
        <itemizedlist>
          <listitem>To enable it at the server side, in <filename>firebird.conf</filename> 
          and/or <filename>databases.conf</filename>, change the setting to True</listitem>
          <listitem>To activate Wirecompression from the client side, pass the appropriate tag in
          the config item of the DPB or SPB call:
            <literallayout class="monospaced">
  isc_dbp_config/isc_sbp_config &lt;string-length&gt; &quot;WireCompression=true&quot;
            </literallayout>
          </listitem>
          <listitem>Both server and client versions must be Firebird 3 or greater (protocol >=13)</listitem>
        </itemizedlist>
        </para>

        <para>See Tracker item <ulink url="http://tracker.firebirdsql.org/browse/CORE-733">CORE-733</ulink>.
        </para>
      </section>

      <section id="rnfb30-fbconf-ipv6only"><!-- L2 -->
        <title>IPv6V6Only</title>
        <author><firstname>Michael</firstname><surname>Kubecek</surname></author>
        <para>Parameter in <filename>firebird.conf</filename> only. (TCP ports
        are created before any connection is established.)</para>
        <para>Firebird 3 supports IPv6 connections, on both client and server sides.</para>
        <section><!-- L3 -->
          <title>Server</title>
          <para>By default, the Firebird server listens on the zero IPv6 address (::)
          and accepts all incoming connections, whether IPv4 or IPv6, and <emphasis>IPv6V6Only</emphasis>
          is set to false (=0). If it is set to true, the server, still listening implicitly or explicitly
          on the zero IPv6 address, will accept only IPv6 connections.</para>
          <note>
            <para>A different listening address, either IPv4 or IPv6, can be set using the
            <emphasis>RemoteBindAddress</emphasis> parameter. If an IPv4 address or a non-zero IPv6 address
            is used, the <emphasis>IPv6V6Only</emphasis> directive has no effect.</para>
            <para>On POSIX platforms, in Classic mode, the parameters <emphasis>RemoteBindAddress</emphasis>,
            <emphasis>RemoteServicePort</emphasis> and <emphasis>RemoteServiceName</emphasis> are ignored by
            <filename>fbserver</filename>,  since the listening socket is set up by <filename>(x)inetd</filename>.
            The listening address and/or port need to be set in the <filename>(x)inetd</filename>.</para>
          </note>
          <para><emphasis>IPv6V6Only</emphasis> is a Boolean. It can be expressed with either
          true/false, 1/0 or Yes/No.</para>
        </section>

        <section><!-- L3 -->
          <title>Client</title>
          <para>The standard text form of an IPv6 address uses the colon character to separate the four groups 
          of digits.  In the connection string, the IPv6 address must be enclosed in square brackets, to
          resolve the ambiguity with the use of the colon as the separator between the host IP address and the 
          database path.  For example:</para>
          <literallayout class="monospaced">
  connect '[2014:1234::5]:test';
  connect '[2014:1234::5]/3049:/srv/firebird/test.fdb';
          </literallayout>
          <note>
            <title>Notes</title>
            <para>For consistency, square brackets can be optionally used around an IPv4 address
            or a domain name.</para>

            <para>If a domain name is used in connection string, all addresses (IPv4 and IPv6) are
            tried in the order returned by resolver until a connection is established. If all attempts
            fail, the client fails to connect.</para>
          </note>
         </section>
      </section>
    </section>

    <section><!-- L1 -->
      <title>Parameters Changed or Enhanced</title>
      <para>The following parameters have been changed or enhanced:</para>

      <section><!-- L2 -->
        <title>ExternalFileAccess</title>
        <para>Entries in the <quote>Restrict</quote> list of the <command>ExternalFileAccess</command>
        parameter can be used to mangle file names with relative paths.</para>
        <para>Entries in the <quote>Restrict</quote> list were already used to mangle file names 
        with no path component. For example, with </para>
        <literallayout class="monospaced">
  ExternalFileAccess = /opt/extern
        </literallayout>
        <para>and the following sequence of commands:</para>
        <programlisting>
SQL> create table qq external file 'zz' (x int);
SQL> insert into qq values(1);
SQL> commit;
        </programlisting>
        <para>the file /opt/extern/zz will be created.</para>
        <para>But if something like this is submitted,</para>
        <literallayout class="monospaced">
  create table qq external file 'dir/zz' (x int);
        </literallayout>
        <para>the result is an error about denied access to file /opt/firebird/bin/dir/zz.</para>

        <para>The improvement avoids this gap by mangling the file name in accord with 
        the value of the parameter and, if necessary, creating the missing path components, 
        such as 'dir' in the example above.</para>
      </section>
    </section>

    <section><!-- L1 -->
      <title>Parameters Removed or Deprecated</title>
      <para>The following parameters have been removed or deprecated:</para>

      <section><!-- L2 -->
        <title>RootDirectory</title>
        <para>In older version, this parameter provided a superfluous option for recording the file
        system path to Firebird's <quote>root</quote> files (firebird.conf, the security database and
        so on).</para>
      </section>

      <section><!-- L2 -->
        <title>LegacyHash</title>
        <para>This parameter used to make it possible to use the old 
        <filename>security.fdb</filename> from Firebird 1.X installations after it had been 
        subjected to an upgrade script and thence to enable or disable use of the obsolete DES 
        hash encrypting algorithm.  It is no longer supported.</para>
      </section>

      <section><!-- L2 -->
        <title>OldSetClauseSemantics</title>
        <para>This parameter enabled temporary support for an implementation fault in certain
        sequences of SET clauses in versions of Firebird prior to v.2.5. It is no longer
        available.</para>
      </section>

      <section><!-- L2 -->
        <title>OldColumnNaming</title>
        <para>This parameter temporarily enabled legacy code support for an old
        InterBase/Firebird 1.0 bug that generated unnamed columns for computed output 
        which was not explicitly aliased in the SELECT specification. It is no longer 
        available.</para>
      </section>

      <section><!-- L2 -->
        <title>LockGrantOrder</title>
        <para>This parameter used to allow the option to have Firebird's Lock Manager
        emulate InterBase v3.3 lock allocation behaviour, whereby locks would be granted in
        no particular order, as soon as soon as they were available, rather than by the normal
        order (first-come, first-served). The legacy option is no longer supported.</para>
      </section>
      
      <section><!-- L2 -->
        <title>Obsolete Windows priority settings</title>
        <para>UsePriorityScheduler, PrioritySwitchDelay and PriorityBoost, which were
        marginally relevant to obsolete processors on obsolete Windows versions, are no
        longer supported.</para>
      </section>



    </section>

</chapter>