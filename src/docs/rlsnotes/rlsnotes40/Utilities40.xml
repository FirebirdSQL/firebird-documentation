<chapter id="rnfb40-util">
  <chapterinfo> 
    <title>Monitoring &amp; Command-line Utilities</title>
  </chapterinfo>
  <para>Improvements and additions to the Firebird utilities continue.</para>
  
  <section id="rnfb40-util-mon$">
    <title>Monitoring</title>
    <para>Additions to MON$ATTACHMENTS and MON$STATEMENTS to report on
    timeouts and wire status.  Refer to 
    <link linkend="rnfb40-engine-timeouts">Timeouts at Two levels</link> in the 
    chapter <quote>Changes in the Firebird Engine</quote> for details.</para>

    <para>New columns in the tables:
      <itemizedlist>
        <listitem>In MON$DATABASE:
          <simplelist type="horiz" columns="2">
            <member>MON$CRYPT_STATE</member><member>Current state of database encryption
            (not encrypted = 0, encrypted = 1, decryption in progress = 2, encryption in progress = 3)</member>
          </simplelist>
        </listitem>

        <listitem>In MON$ATTACHMENTS:
          <simplelist type="horiz" columns="2">
            <member>MON$IDLE_TIMEOUT</member><member>Connection level idle timeout</member>
            <member>MON$IDLE_TIMER</member><member>Idle timer expiration time</member>
            <member>MON$STATEMENT_TIMEOUT</member><member>Connection level statement timeout</member>
            <member>MON$WIRE_COMPRESSED</member><member>Wire compression (enabled = 1, disabled = 0)</member>
            <member>MON$WIRE_ENCRYPTED</member><member>Wire encryption (enabled = 1, disabled = 0)</member>
            <member>MON$WIRE_CRYPT_PLUGIN</member><member>Name of the wire encryption plugin used by client</member>
          </simplelist>
        </listitem>

        <listitem>In MON$STATEMENTS:
          <simplelist type="horiz" columns="2">
            <member>MON$STATEMENT_TIMEOUT</member><member>Connection level statement timeout</member>
            <member>MON$STATEMENT_TIMER</member><member>Timeout timer expiration time</member>
          </simplelist>
        </listitem>

        <listitem>In MON$RECORD_STATS:
          <simplelist type="horiz" columns="2">
            <member>MON$RECORD_IMGC</member><member>Number of records processed by the intermediate garbage collection</member>
          </simplelist>
        </listitem>
      </itemizedlist>
    </para>
  </section>

  <section id="rnfb40-util-nbackup">
    <sectioninfo>
      <title><emphasis>nBackup</emphasis>: UUID-based Backup and In-Place Merge</title>
      <authorgroup>
        <author><firstname>Roman</firstname><surname>Simakov</surname></author>
        <author><firstname>Vlad</firstname><surname>Khorsun</surname></author>
      </authorgroup>
    </sectioninfo>
    <para>Tracker ticket <ulink url="http://tracker.firebirdsql.org/browse/CORE-2216">CORE-2216</ulink></para>

    <para>The <emphasis>nBackup</emphasis> utility in Firebird 4 can perform
    a physical backup that uses the GUID (UUID) of the most recent backup of a read-only
    standby database to establish the backup target file.
    Increments from the &lt;source database&gt; can be applied continuously to the standby
    database, eliminating the need to keep and apply all increments since the last full backup.</para>
    <para>The new style of <quote>warm</quote> backup and merge to a standby database can
    be run without affecting an existing multilevel backup scheme on
    the live database.</para>

    <section id="rnfb40-util-nbackup-bkp">
      <title>Making Backups</title>
      <para>The syntax pattern for this form of backup with <emphasis>nBackup</emphasis>
      is as follows:
        <literallayout class="monospaced">
  nbackup -B[ACKUP] &lt;level&gt; | &lt;GUID&gt; &lt;source database&gt; [&lt;backup file&gt;]
        </literallayout>
      </para>
    </section>

    <section id="rnfb40-util-nbackup-rstr">
      <title>Merging-in-Place from the Backup</title>
      <para>The syntax pattern for an in-place <quote>restore</quote> to merge the
      incremental backup file with the standby database is:
        <literallayout class="monospaced">
  nbackup -I[NPLACE] -R[ESTORE] &lt;standby database&gt; &lt;backup file&gt;
        </literallayout>
      </para>
      <note>
        <para><quote>Restore</quote> here means merging the increment from the backup file
        with the standby database.</para>
        <para><emphasis>Switch names may change before the final release</emphasis>.</para>
      </note>
    </section>

    <section id="rnfb40-util-nbackup-exmpl">
      <title>Example of an On-line Backup and Restore</title>
      <orderedlist type="a">
        <listitem>Use <emphasis>gstat</emphasis> to get the UUID of
        the standby database:
          <literallayout class="monospaced">
  gstat -h &lt;standby database&gt;
...
    Variable header data:
        Database backup GUID: {8C519E3A-FC64-4414-72A8-1B456C91D82C}
          </literallayout>
        </listitem>

        <listitem>Use the backup UUID to produce an incremental backup:
          <literallayout class="monospaced">
  nbackup -B {8C519E3A-FC64-4414-72A8-1B456C91D82C} &lt;source database&gt; &lt;backup file&gt;
          </literallayout>
        </listitem>

        <listitem>Apply increment to the standby database:
          <literallayout class="monospaced">
  nbackup -I -R &lt;standby database&gt; &lt;backup file&gt;
          </literallayout>
        </listitem>
      </orderedlist>
    </section>
  </section> <!-- rnfb40-util-nbackup -->

  <section id="rnfb40-util-isql-stmnt-timeouts">
    <title><emphasis>isql</emphasis>: Support for Statement Timeouts</title>
    <para>A new command has been introduced in <emphasis>isql</emphasis> to
    enable an execution timeout in milliseconds to be set for the next
    statement.  The syntax is:
      <literallayout class="monospaced">
  SET LOCAL_TIMEOUT &lt;int&gt;
      </literallayout>
    After statement execution, the timer is automatically reset to zero.
    </para>
  </section> <!-- rnfb40-util-isql-stmnt-timeouts -->

  <section id="rnfb40-util-isql-keeptranparams">
    <title><emphasis>isql</emphasis>: Better transaction control</title>
    <para>A new command has been introduced in <emphasis>isql</emphasis> to
    remember and reuse the last entered transaction parameters. The syntax is:
      <literallayout class="monospaced">
  SET KEEP_TRAN_PARAMS [{ ON | OFF}]
      </literallayout>
    When set to ON, <emphasis>isql</emphasis> keeps the complete SQL text of the
    following successful <code>SET TRANSACTION</code> statement and new transactions
    are started using the same SQL text (instead of the default
    <code>CONCURRENCY WAIT</code> mode). When set to OFF, <emphasis>isql</emphasis>
    starts new transactions as usual. Name KEEP_TRAN can be used as a shorthand for
    KEEP_TRAN_PARAMS.
    </para>
    <para>Examples:
       <programlisting>
-- check current value
SQL> SET;
...
Keep transaction params: OFF

-- toggle value
SQL> SET KEEP_TRAN;
SQL> SET;
...
Keep transaction params: ON
SET TRANSACTION

SQL>commit;

-- start new transaction, check KEEP_TRAN value and actual transaction's parameters
SQL>SET TRANSACTION READ COMMITTED WAIT;
SQL>SET;
...
Keep transaction params: ON
  SET TRANSACTION READ COMMITTED WAIT
SQL> SELECT RDB$GET_CONTEXT('SYSTEM', 'ISOLATION_LEVEL') FROM RDB$DATABASE;

RDB$GET_CONTEXT

=============================================================
READ COMMITTED

SQL> commit;

-- start new transaction, ensure is have parameters as KEEP_TRAN value
SQL> SELECT RDB$GET_CONTEXT('SYSTEM', 'ISOLATION_LEVEL') FROM RDB$DATABASE;

RDB$GET_CONTEXT

=============================================================
READ COMMITTED

-- disable KEEP_TRAN, current transaction is not changed
SQL> SET KEEP_TRAN OFF;
SQL> SELECT RDB$GET_CONTEXT('SYSTEM', 'ISOLATION_LEVEL') FROM RDB$DATABASE;

RDB$GET_CONTEXT

=============================================================
READ COMMITTED

SQL> commit;

-- start new transaction, ensure is has default parameters (SNAPSHOT)
SQL> SELECT RDB$GET_CONTEXT('SYSTEM', 'ISOLATION_LEVEL') FROM RDB$DATABASE;

RDB$GET_CONTEXT

=============================================================
SNAPSHOT

SQL> SET;
...
Keep transaction params: OFF
       </programlisting>
    </para>
  </section> <!-- rnfb40-util-isql-keeptranparams -->

  <section id="rnfb40-util-gbak">
    <title><emphasis>gbak</emphasis></title>
    <author><firstname>Alex</firstname><surname>Peshkov</surname></author>
    
    <section id="rnfb40-util-gbak-crypt">
      <title>Backup and Restore with Encryption</title>
      <para>Tracker ticket <ulink url="http://tracker.firebirdsql.org/browse/CORE-5808">CORE-5808</ulink></para>

      <para>With an encrypted database, sooner or later it will need to 
      be backed up and restored. It is not unreasonable to want
      the database backup to be encrypted as well. If the encryption key
      is delivered to the plug-in by some means that does not require input
      from the client application, it is not a big problem. However, if the 
      server expects the key to be delivered from the client side,
      that could become a problem. </para>

      <para>The introduction of keys to <emphasis>gbak</emphasis> in 
      Firebird 4 provides a solution.</para>
      
      <section id="rnfb40-util-gbak-crypt-reqs">
        <title>Prerequisites</title>
        <para>A <firstterm>keyholder plug-in</firstterm> is required, that 
        is able to load keys from some external source, such as a configuration 
        file, and deliver them using the call
        <literallayout class="monospaced">
  ICryptKeyCallback* IKeyHolderPlugin::chainHandle(IStatus* status)
        </literallayout>
        </para>
        <para>That key holder and the dbcrypt plug-ins that work with it
        should be installed on the workstation that will be used to perform 
        backups.</para>
        
      </section>
      
      <section id="rnfb40-util-gbak-crypt-switches">
        <title>New Switches for Encrypted Backups &amp; Restores</title>
        <para>With the prerequisites in place, the following new switches
        are available for use. They are case-insensitive.
        <table frame="topbot">
          <title>Switches for Encrypted Backups/Restores</title>
          <tgroup cols="2" align='left' colsep='1' rowsep='1'>
          <colspec colname="c1" colwidth="*"/>
          <colspec colname="c2" colwidth="3*"/>
            <thead>
              <row>
                <entry>Switch</entry>
                <entry>What it Does</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>-KEYHOLDER</entry>
                <entry>This is the main switch necessary for <emphasis>gbak</emphasis>
                to access an encrypted database.</entry>
              </row>
              <row>
                <entry>-KEYNAME</entry>
                <entry>Available to name the key explicitly, in place of the default key
                specified in the original database (when backing up) or in the backup 
                file (when restoring).</entry>
              </row>
              <row>
                <entry>-CRYPT</entry>
                <entry>Available to name the plug-in to use to encrypt the backup file or
                restored database in place of the default plug-in.  It can also be used 
                in combination with the -KEYNAME switch to encrypt the backup of 
                a non-encrypted database or to encrypt a database restored from a 
                non-encrypted backup.  See example below.</entry>
              </row>
              <row>
                <entry>-ZIP</entry>
                <entry>Only for a backup, to compress the backup file before encrypting it.
                The switch is necessary because the usual approach of compressing the backup 
                file with some favoured compression routine after <emphasis>gbak</emphasis>, 
                perhaps using pipe, does not work with encrypted backups because they are 
                not compressible.  The -ZIP switch is unnecessary for a restore
                because the format is detected automatically. </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        </para>
      </section>

      <section id="rnfb40-util-gbak-crypt-usage">
        <title>Usage and Examples</title>
        <para>To back up an encrypted database do something like this:
        <literallayout class="monospaced">
  gbak -b -keyholder MyKeyHolderPlugin host:dbname backup_file_name
        </literallayout>
        The backup file will be encrypted using the same crypt
        plug-in and key that are used for database encryption. This
        ensures that it will not be any easier to steal data from your
        backup file than from the database.</para>

        <para>To restore a database that was previously backed up encrypted:
        <literallayout class="monospaced">
 gbak -c -keyholder MyKeyHolderPlugin backup_file_name host:dbname
        </literallayout>
        The restored database will be encrypted using the same plug-in 
        and key as the backup file.  Using the backup example above, of course 
        this means the same plug-in and key as the  original database.
        </para>
        <note>
          <para>The database is first encrypted right after creation and only
          after the encryption data are restored into the header. This is a bit
          faster than a <quote>restore-then-encrypt</quote> approach but,
          mainly, it is to avoid having non-encrypted data on the server
          during the restore process.</para>
        </note>
        
        <para>The next example will either
        <itemizedlist spacing="compact">
          <listitem>restore the database from a backup file made using non-default 
          Crypt and Keyholder plug-ins, using the same Keyname as was used for 
          the backup; OR</listitem>
          <listitem>restore a non-encrypted backup as an encrypted database</listitem>
        </itemizedlist>
        <literallayout class="monospaced">
  gbak -c -keyholder MyKeyHolderPlugin -crypt MyDbCryptPlugin 
     -keyname SomeKey non_encrypted_backup_file host:dbname
        </literallayout>
        The restored database will encrypted by MyDbCryptPlugin
        using SomeKey.
        </para>

        <para>To make an encrypted backup of a non-encrypted database:
        <literallayout class="monospaced">
  gbak -b -keyholder MyKeyHolderPlugin -crypt MyDbCryptPlugin
     -keyname SomeKey host:dbname encrypted_backup_file
        </literallayout>
        </para>
        <warning>
          <title>Take note:</title>
          <para>Attempts to create a non-encrypted backup of an
          encrypted database or to restore an encrypted backup to 
          a non-encrypted database will fail. Such operations are 
          intentionally disallowed to avoid foolish operator errors 
          that would expose critcal data in non-encrypted form.</para>
        </warning>
        
        <para>To create a compressed, encrypted backup:
        <literallayout class="monospaced">
  gbak -b -keyholder MyKeyHolderPlugin -zip host:dbname backup_file_name
        </literallayout>
        The backup file will be compressed before being encrypted using the 
        same crypt plug-in and same key that are used for the
        database encryption. ZLib is used to compress the backup file 
        content and the appropriate record is added to its header.
        </para>
        <note>
          <title>Compressing Non-Encrypted Databases</title>
          <para>The -ZIP switch is also available for compressing a non-encrypted 
          database.  It is important to understand that the format of a backup 
          file thus created is not the same as one created by
          compressing a backup file with a utility such as 7Zip.  It can be 
          decompressed only by a <emphasis>gbak</emphasis> restore.</para>
        </note>
      </section>
    </section>

    <section id="rnfb40-util-gbak-batch-restore">
      <title>Enhanced Restore Performance</title>
      <para>Tracker ticket <ulink url="http://tracker.firebirdsql.org/browse/CORE-5952">CORE-5952</ulink></para>
      <para>The new Batch API is used to enhance the performance of
      restoring from backup.</para>
    </section>
    <section id="rnfb40-util-gbak-batch-fixmessage"><!-- BETA 1 -->
      <title>Friendlier <quote>-fix_fss_*</quote> Messages</title>
      <para>Tracker ticket <ulink url="http://tracker.firebirdsql.org/browse/CORE-5741">CORE-5741</ulink></para>
      <para>The messages in the verbose output from a restore using the <quote>-fix_fss_*</quote>
      switches now use the word <quote>adjusting</quote> instead of <quote>fixing</quote>.</para>
      <para>The same change was backported to V. 3.0.5.</para>
    </section>
  </section>
  
  <section id="rnfb40-util-gbak-include-data">
      <title>Ability to Backup/Restore Only Specified Tables</title>
      <para>Tracker ticket <ulink url="http://tracker.firebirdsql.org/browse/CORE-5538">CORE-5538</ulink></para>

      <para>A new command-line switch has been added to <emphasis>gbak</emphasis>: <code>-INCLUDE(_DATA)</code>.
      Similarly to the existing <code>-SKIP(_DATA)</code> switch, it accepts one parameter which is a regular
      expression pattern used to match table names. If specified, it defines tables to be backed up or restored.
      The regular expression syntax used to match table names is the same as in SIMILAR TO boolean expressions.
      Interaction between both switches is described in the following table.
        <table>
         <title>Interaction between -INCLUDE(_DATA) and -SKIP(_DATA) switches</title>
         <tgroup cols="4">
           <thead>
             <row>
               <entry></entry>
               <entry></entry>
               <entry>INCLUDE_DATA</entry>
               <entry></entry>
             </row>
             <row>
               <entry>SKIP_DATA</entry>
               <entry>NOT SET</entry>
               <entry>MATCHED</entry>
               <entry>NOT MATCHED</entry>
             </row>
           </thead>
           <tbody>
             <row>
               <entry>NOT SET</entry>
               <entry>included</entry>
               <entry>included</entry>
               <entry>excluded</entry>
             </row>
             <row>
               <entry>MATCHED</entry>
               <entry>excluded</entry>
               <entry>excluded</entry>
               <entry>excluded</entry>
             </row>
             <row>
               <entry>NOT MATCHED</entry>
               <entry>included</entry>
               <entry>included</entry>
               <entry>excluded</entry>
             </row>
           </tbody>
         </tgroup>
		</table>
      </para>
    </section>

  <section id="rnfb40-util-gfix">
    <title><emphasis>gfix</emphasis></title>
    <para>The <emphasis>gfix</emphasis> repertoire now includes the new <code>-replica</code> 
    switch for configuring and managing <link linkend="rnfb40-replication">Firebird replication</link>.
    For more detail, see the topic <link linkend="rnfb40-replication-setup-replica-create">Creating 
    a Replica Database</link>.
    It takes one of three arguments (case-insensitive):
    <itemizedlist>
      <listitem><firstterm>read-only</firstterm>&nbsp; Sets the database copy as a read-only replica, 
      usually for a high-availability solution.
      </listitem>
      <listitem><firstterm>read-write</firstterm>&nbsp;Sets the database copy as a read-write replica,
      for asynchronous replication.</listitem>
      <listitem><firstterm>none</firstterm>&nbsp;Converts the replica to a 
      regular database, <quote>switching off</quote> replication to a read-write replica
      when conditions call for replication flow to be discontinued for some reason. Typically, it 
      would be used to promote the replica to become the master database after a failure;  
      or to make physical backup copies from the replica.</listitem>
    </itemizedlist>
    </para>
  </section>

</chapter>
