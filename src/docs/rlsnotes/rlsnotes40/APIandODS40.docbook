  <chapter id="rnfb40-apiods">
    <chapterinfo>
      <title>Changes to the Firebird API and ODS</title>
      <para><emphasis role="bold">since Firebird 3.0 release</emphasis></para>
    </chapterinfo>

    <section id="rnfb40-apiods-ods" xreflabel="ODS Changes"><!-- Level 1 section -->
      <title>ODS (On-Disk Structure) Changes</title>

      <section id="rnfb40-apiods-ods-number"><!-- Level 2 section -->
        <title>New ODS Number</title>
        <para>Firebird 4.0 creates databases with an ODS (On-Disk Structure) version of 13. </para>
      </section>
    </section><!-- L1 -->

      <!-- API -->

    <section id="rnfb40-apiods-api" xreflabel="New APIs"><!-- Level 1 section -->
      <title>Application Programming Interfaces</title>
      <para>The wire protocol version for the Firebird 4.0 API is 16.  Additions include</para>
      
      <section id="rnfb40-apiods-api-service"><!-- Level 2 section -->
        <title>Services Cleanup</title>
        <author>
          <firstname>Alex</firstname><surname>Peshkov</surname>
        </author>
        <para>Apart from the widely-known Services Manager (<code>service_mgr</code>),
        Firebird has a group of so-called <quote>version 1</quote> service managers. 
        Backup and <emphasis>gsec</emphasis> are examples, along with a number of other 
        services related to shared cache control and the unused journalling feature. 
        Since at least Firebird 3 they seem to be in a semi-working state at best,
        so they have undergone a cleanup.</para>
        
        <para>A visible effect is that the constant <code>service_mgr</code> is no longer 
        required in the connection string for a service request. The request call will 
        ignore anything in that field, including an empty string.  The remote client 
        will do the right thing just by processing the host name, such as localhost:, 
        inet://localhost/ or inet://localhost.</para>
      </section>

      <section id="rnfb40-apiods-api-timeouts"><!-- Level 2 section -->
        <title>Timeouts for Sessions &amp; Statements</title>
        <section id="rnfb40-apiods-api-session-timeouts"><!-- Level 3 section -->
          <title>Session Timeouts</title>
          <para>See <link linkend="rnfb40-session-timeouts-api">Support for Session Timeouts
          at API Level</link> in the chapter <quote>Changes in the Firebird Engine</quote>.</para>
        </section><!-- L3 -->

        <section id="rnfb40-apiods-api-stmnt-timeouts"><!-- Level 3 section -->
          <title>Statement Timeouts</title>
          <para>See <link linkend="rnfb40-stmnt-timeouts-api">Support for Statement Timeouts
          at API Level</link> in the chapter <quote>Changes in the Firebird Engine</quote>.</para>
        </section><!-- L3 -->
      </section><!-- L2 -->

      <section id="rnfb40-apiods-api-readconsistency"><!-- Level 2 section -->
        <title>New Isolation Sub-level for READ COMMITTED Transactions</title>
        <para> Provides API support for the new 
        <link linkend="rnfb40-engine-read-consistency">READ COMMITTED READ 
        CONSISTENCY</link> isolation sub-level for READ COMMITTED transactions. To 
        start a READ COMMITTED READ CONSISTENCY transaction via the ISC API, use the 
        new constant <code>isc_tpb_read_consistency</code> in the Transaction Parameter 
        Buffer.</para>
      </section><!-- L2 -->
      
      <section id="rnfb40-apiods-api-batchops"><!-- Level 2 section -->
        <title>Support for Batch Insert and Update Operations in the API</title>
        <author>
          <firstname>Alex</firstname><surname>Peshkov</surname>
        </author>

        <para>The OO-API in Firebird 4 supports execution of statements with more
        than a single set of parameters&mdash;<firstterm>batch execution</firstterm>. 
        The primary purpose of the batch interface design is to satisfy JDBC requirements 
        for batch processing of prepared statements but it has some fundamental differences:
        <itemizedlist>
          <listitem>As with all data operations in Firebird, it is oriented on messages,
          not on single fields</listitem>
          <listitem>An important extension of our batch interface is support for inline
          use of BLOBs, which is especially efficient when working with small BLOBs</listitem>
          <listitem>The <code>execute()</code> method returns not a plain array of integers 
          but the special <code>BatchCompletionState</code> interface which, depending on
          the batch creation parameters, can contain both the information about the update 
          records and the error flag augmented by detailed status vectors for the messages 
          that caused execution errors</listitem>
        </itemizedlist>
        </para>
        <para>The methods described below illustrate how to implement everything needed 
        for JDBC-style prepared statement batch operations.  Almost all of the methods 
        described are used in <filename>11.batch.cpp</filename>.  Please refer to it to 
        see a live example of batching in Firebird.</para>

        <section id="rnfb40-apiods-api-batch-create"><!-- Level 3 section -->
          <title>Creating a Batch</title>
          <para>As with <code>ResultSet</code> a batch may be created in two ways&mdash;using
          either the <code>Statement</code> or the <code>Attachment</code> interface.  
          In both cases, the <code>createBatch()</code> method of appropriate interface
          is called.</para>
          <para>For the <code>Attachment</code> case, the text of the SQL statement to be 
          executed in a batch is passed directly to <code>createBatch()</code>. </para>
          <para>Tuning of the batch operation is performed using the Batch Parameters Block 
          (BPB) whose format is similar to DPB v.2: beginning with the tag (IBatch::CURRENT_VERSION)
          and followed by the set of wide clumplets: 1-byte tag, 4-byte length, length-byte value. 
          Possible tags are described in batch interface.</para>
          <para>The recommended (and simplest) way to create a BPB for batch creation is to 
          use the appropriate XpbBuilder interface:
          <literallayout class="monospaced">
  IXpbBuilder* pb = utl-&gt;getXpbBuilder(&amp;status, IXpbBuilder::BATCH, NULL, 0);
  pb-&gt;insertInt(&amp;status, IBatch::RECORD_COUNTS, 1);
          </literallayout>
          This usage of the BPB directs the batch to account for a number of updated
          records on per-message basis.</para>
        </section><!-- L3 -->
          
        <section id="rnfb40-apiods-api-batchintf-create"><!-- Level 3 section -->
          <title>Creating the Batch Interface</title>
          <para>To create the batch interface with the desired parameters, pass the BPB to
          a <code>createBatch() call</code>:
          <literallayout class="monospaced">
  IBatch* batch = att-&gt;createBatch(&amp;status, tra, 0, sqlStmtText, SQL_DIALECT_V6, NULL,
  pb-&gt;getBufferLength(&amp;status), pb-&gt;getBuffer(&amp;status));
          </literallayout>
          In this sample, the batch interface is created with the default message format
          because NULL is passed instead of the input metadata format.
          </para>

          <section id="rnfb40-apiods-api-batch-msgformat"><!-- Level 4 -->
            <title>Getting the Message Format</title>
            <para>To proceed with the created batch interface, we need to get
            the format of the messages it contains, using the <code>getMetadata()</code>
            method:
            <literallayout class="monospaced">
  IMessageMetadata* meta = batch-&gt;getMetadata(&amp;status);
            </literallayout>
            If you have passed your own format for messages to the batch, of course you
            can simply use that.
            </para>
            <para>We assume here that some function is present that can fill the
            buffer <quote>data</quote> according to the passed format <quote>metadata</quote>.
            For example,
            <literallayout class="monospaced">
    fillNextMessage(unsigned char* data, IMessageMetadata* metadata)
            </literallayout>
            </para>
          </section><!-- L4 -->

          <section id="rnfb40-apiods-api-batch-msgbuffer"><!-- Level 4 -->
            <title>A Message Buffer</title>
            <para>To work with the messages we need a buffer for our <quote>data</quote>:
            <literallayout class="monospaced">
  unsigned char* data = new unsigned char[meta-&gt;getMessageLength(&amp;status)];
            </literallayout>
            </para>

            <para>Now we can add some messages full of data to the batch:
            <literallayout class="monospaced">
  fillNextMessage(data, meta);
  batch-&gt;add(&amp;status, 1, data);
  fillNextMessage(data, meta);
  batch-&gt;add(&amp;status, 1, data);
            </literallayout>
          </para>
            <note>
              <para>An alternative way to work with messages is to use the
              <code>FB_MESSAGE</code> macro.  An example of this method can be
              found in the batch interface example, <filename>11.batch.cpp</filename>.</para>
            </note>
          </section> <!-- L4 -->
        </section><!-- L3 rnfb40-apiods-api-batchintf-create -->

        <section id="rnfb40-apiods-api-batch-execute"><!-- Level 3 section -->
          <title>Executing the Batch</title>
          <para>The batch is now ready to be executed:
          <literallayout class="monospaced">
  IBatchCompletionState* cs = batch->execute(&amp;status, tra);
          </literallayout>
          </para>
          <para>We requested accounting of the number of modified records (inserted, 
          updated or deleted) per message. The interface <code>BatchCompletionState</code>
          is used to print it. The total number of messages processed by the batch
          could be less than the number of messages passed to the batch if an error 
          happened and the option enabling multiple errors during batch processing 
          was not turned on.  To determine the number of messages processed:
          <literallayout class="monospaced">
  unsigned total = cs->getSize(&amp;status);
          </literallayout>
          </para>
          <para>Now to print the state of each message:
          <literallayout class="monospaced">
  for (unsigned p = 0; p &lt; total; ++p)
      printf(&quot;Msg %u state %d\n&quot;, p, cs-&gt;getState(&amp;status, p));
          </literallayout>
          </para>
          
          <para>A complete example of printing the contents of
          <code>BatchCompletionState</code> is in the function
          <code>print_cs()</code> in sample <filename>11.batch.cpp</filename>.</para>

          <section id="rnfb40-apiods-api-batch-cleanup"><!-- Level 4 section -->
            <title>Cleaning Up</title>
            <para>Once analysis of the completion state is finished, remember
            to dispose of it:
            <literallayout class="monospaced">
  cs->dispose();
            </literallayout>
            </para>

            <para>If you want to empty the batch's buffers without executing it for
            some reason, such as preparing for a new portion of messages to process,
            use the <code>cancel()</code> method:
            <literallayout class="monospaced">
  batch->cancel(&amp;status);
            </literallayout>
            </para>

            <para>Being reference-counted, the batch does not have special method to
            close it&mdash;just a standard <code>release()</code> call:
            <literallayout class="monospaced">
  batch->release();
            </literallayout>
            </para>
          </section><!-- L4 rnfb40-apiods-api-batch-cleanup -->
        </section><!-- L3 rnfb40-apiods-api-batch-execute -->

        <section id="rnfb40-apiods-api-msgs-multi"><!-- Level 3 section -->
          <title>Multiple Messages per Call</title>
          <para>More than a single message can be added in one call to the batch. It 
          is important to remember that messages should be appropriately aligned for 
          this feature to work correctly. The required alignment and aligned size of 
          the message should be obtained from the interface <code>MessageMetadata</code>.
          For example:
          <literallayout class="monospaced">
  unsigned aligned = meta-&gt;getAlignedLength(&amp;status);
          </literallayout>
          </para>
          <para>Later that size will be useful when allocating an array of messages and 
          working with it:
          <literallayout class="monospaced">
 unsigned char* data = new unsigned char[aligned * N]; 
       // N is the desired number of messages
 for (int n = 0; n &lt; N; ++n) fillNextMessage(&amp;data[aligned * n], meta);
 batch-&gt;add(&amp;status, N, data);
          </literallayout>
          After that, the the batch can be executed or the next portion of messages
          can be added to it.
          </para>
        </section><!-- rnfb40-apiods-api-msgs-multi L3 -->

        <section id="rnfb40-apiods-api-blobs-batches"><!-- Level 3 section -->
          <title>Passing In-line BLOBs in Batch Operations</title>
          <para>As a general rule, BLOBs are not compatible with batches.  Batching
          is efficient when a lot of small data are to be passed to the server in single
          step. BLOBs are treated as large objects so, as a rule, it makes no sense to 
          use them in batches.</para>
          <para>Nevertheless, in practice it often happens that BLOBs are not too big.
          When that is the case, use of the traditional BLOB API (create BLOB, pass 
          segments to the server, close BLOB, pass BLOB's ID in the message) kills 
          performance, especially over a WAN. Firebird's batching therefore  supports 
          passing BLOBs to the server <firstterm>in-line</firstterm>, along with other
          messages.</para>
          
          <section id="rnfb40-apiods-api-blobs-policy"><!-- Level 4 section -->
            <para>To use the in-line BLOB feature, first a <firstterm>BLOB usage policy</firstterm>
            has to be set up as an option in the BPB for the batch being created:
            <literallayout class="monospaced">
  pb-&gt;insertInt(&amp;status, IBatch::BLOB_IDS, IBatch::BLOB_IDS_ENGINE);
            </literallayout>
            </para>
            <para>In this example, for the simplest and fairly common usage scenarios, 
            the Firebird engine generates the temporary BLOB IDs needed to keep a link between
            a BLOB and the message where it is used.  Imagine that the message is described 
            as follows:
            <programlisting>
FB_MESSAGE(Msg, ThrowStatusWrapper,
(FB_VARCHAR(5), id)
(FB_VARCHAR(10), name)
(FB_BLOB, desc)
) project(&amp;status, master);
            </programlisting>
            </para>
            <para>Something like the following will send a message to the server
            containing the BLOB:
            <programlisting>
project-&gt;id = ++idCounter;
project->name.set(currentName);
batch-&gt;addBlob(&amp;status, descriptionSize, descriptionText, &amp;project-&gt;desc);
batch-&gt;add(&amp;status, 1, project.getData());
            </programlisting>
            </para>

            <section id="rnfb40-apiods-api-blobs-oversize"><!-- Level 5 section -->
              <title>Over-sized BLOBs</title>
              <para>If some BLOB happens to be too big to fit into your existing buffer,
              then, instead of reallocating the buffer, you can use the
              <code>appendBlobData()</code> method to append more data to the last added
              BLOB:
              <literallayout class="monospaced">
  batch-&gt;addBlob(&amp;status, descriptionSize, descriptionText, &amp;project-&gt;desc, bpbLength, bpb);
              </literallayout>
              </para>
              <para>After adding the first part of the BLOB, get the next portion of data
              into <code>descriptionText</code>, update <code>descriptionSize</code> and
              then do:
              <literallayout class="monospaced">
  batch-&gt;appendBlobData(&amp;status, descriptionSize, descriptionText);
              </literallayout>
              </para>
              <para>You can do this work in a loop but take care not to overflow
              the internal batch buffers. Its size is controlled by the
              <code>BUFFER_BYTES_SIZE</code> option when creating the batch interface.
              The default size is 10MB but it cannot exceed 40MB. If you need to
              process a BLOB that is too big, having chosen to use batching on the basis of
              data involving a lot of small BLOBs, just use the standard BLOB API and
              the <code>registerBlob</code> method of the Batch interface.</para>
            </section> <!-- L5 rnfb40-apiods-api-blobs-oversize -->
            
            <section id="rnfb40-apiods-api-user-blob-ids"><!-- Level 5 section -->
              <title>User-Supplied BLOB IDs</title>
              <para>Another possible choice in the BLOB policy is <code>BLOB_IDS_USER</code>, 
              to supply a temporary BLOB_ID instead of having one generated
              by Firebird.</para>
              <para>Usage is not substantially different. Before calling <code>addBlob()</code>,
              place the correct execution ID, which is unique per batch, into the memory 
              referenced by the last parameter. Exactly the same ID should be passed in
              the data message for the BLOB.</para> 
              
              <para>Considering that generation of BLOB IDs by the engine is very fast.
              such a policy may seem useless.  However, imagine a case where you get
              BLOBs and other data in relatively independent streams (blocks in a file,
              for example) and some good IDs are already present in them. Supplying
              the BLOB IDs can greatly simplify your code for such cases.</para>
            </section> <!-- L5 rnfb40-apiods-api-user-blob-ids -->
            
          </section><!-- L4 rnfb40-apiods-api-blobs-policy -->

          <section id="rnfb40-apiods-api-blobs-stuff"><!-- Level 4 section -->
            <title>Streams vs Segments</title>
            <para>Be aware that BLOBs created by the Batch interface are by default
            streamed, not segmented like BLOBs created by means of <code>createBlob()</code>.
            Segmented BLOBs provide nothing interesting compared with streamed
            ones&mdash;we support that format only for backward compatibility and
            recommend avoiding them in new development.</para>
            
            <section id="rnfb40-apiods-api-blobs-segments"><!-- Level 5 section -->
              <title>Overriding to Use Segmented BLOBs</title>
              <para>If you really must have segmented BLOBs, you can override the default
              by calling:
              <literallayout class="monospaced">
  batch-&gt;setDefaultBpb(&amp;status, bpbLength, bpb);
              </literallayout>
              </para>
              <note>
              <para>Of course, the passed BPB could contain other BLOB creation
              parameters, too. You could also pass the BPB directly to <code>addBlob()</code>
              but, if most of the BLOBs you are going to add have the same non-default
              format, it is slightly more efficient to use <code>setDefaultBpb()</code>.
              </para>
              </note>

              <para>A call to <code>addBlob()</code> will add the first segment to
              the BLOB;  successive calls to <code>appendBlobData()</code> will add
              more segments.
              <warning>
                <title>Segment size limit!</title>
                <para>Keep in mind that segment size is limited to 64KB -1. Attempting
                to pass more data in a single call will cause an error.</para>
              </warning>
              </para>
            </section> <!-- L5 rnfb40-apiods-api-blobs-segments -->

            <section id="rnfb40-apiods-api-blobs-streams"><!-- Level 5 section -->
              <title>Multiple BLOBs Using Streams</title>
              
              <para>Using the method <code>addBlobStream()</code>, it is possible to 
              add more than one BLOB to the batch in a single call.</para>
              
              <para>A blob stream is a sequence of BLOBs, each starting with a BLOB
              header which needs to be appropriately aligned.  The Batch interface
              provides a special call for this purpose:
              <literallayout class="monospaced">
  unsigned alignment = batch->getBlobAlignment(&amp;status);
              </literallayout>
              </para>
              <para>
              It is assumed that all components of a BLOB stream in a batch will be 
              aligned, at least at the alignment boundary.  This includes the size of 
              stream potions passed to <code>addBlobStream()</code>, which should be 
              a multiple of this alignment.</para>
              <para>The header contains three fields: an 8-byte BLOB ID (must be non-zero), 
              a 4-byte total BLOB size and a 4 byte BPB size. The total BLOB size includes 
              the enclosed BPB, i.e. the next  BLOB in the stream will always be found 
              in the BLOB-size bytes after the header, taking the alignment into account.</para>
              <para>The BPB is present if the BPB size is not zero and is placed immediately 
              after the header. The BPB BLOB data goes next, its format depending upon
              wehether the BLOB is streamed or segmented:
              <itemizedlist>
                <listitem>For a stream BLOB it is a plain sequence of bytes whose size 
                is (BLOB-size - BPB-size) </listitem>
                <listitem>For a segmented BLOB, things are a bit more compicated: the 
                BLOB data is a set of segments where each segment has the 
                format: 2-bytes for the size of the segment, aligned at 
                <code>IBatch::BLOB_SEGHDR_ALIGN</code> boundary, followed by as many 
                bytes as are accounted for by this 2-byte segment size</listitem>
              </itemizedlist>
              </para>
              <section id="rnfb40-apiods-api-blobs-streams-cont"><!-- Level 6 section -->
                <title>Bigger BLOBS in the Stream</title>
                <para>When a big BLOB is added to the stream, its size is not always
                known in advance.  To avoid having too large a buffer for that BLOB
                (recalling that the size has to be provided in the BLOB header, before 
                the BLOB data) a <firstterm>BLOB continuation record</firstterm> may 
                be used. In the BLOB header, you leave BLOB size at a value known 
                when creating that header and add a continuation record.  The format of
                the continuation record is identical to the BLOB header, except that
                both the BLOB ID and the BPB size must always be zero.</para>
                <para>Typically, you will want to have one continuation record per 
                <code>addBlobStream()</code> call.</para>
                <para>An example of this usage can be found in <filename>sample 11.batch.cpp</filename>.</para>
              </section><!-- L6 -->
            </section> <!-- L5 rnfb40-apiods-api-blobs-streams -->
          </section><!-- L4 rnfb40-apiods-api-blobs-stuff -->

          <section id="rnfb40-apiods-api-blobs-register"><!-- Level 4 section -->
            <title>Registering a Standard BLOB</title>
            <para>The last method used to work with BLOBs stands apart from the first
            three that pass BLOB data inline with the rest of the batch data. 
            It is required for registering in a batch the ID of a BLOB created 
            using the standard BLOB API. This may be unavoidable if a really big
            BLOB has to be passed to the batch.</para>
            <para>The ID of such BLOB cannot be used in the batch directly without
            causing an invalid BLOB ID error during batch execution. Instead do:
              <literallayout class="monospaced">
  batch->registerBlob(&amp;status, &amp;realId, &amp;msg-&gt;desc);
              </literallayout>
              </para>
            <para>If the BLOB policy is making the Firebird engine generate BLOB 
            IDs then this code is enough to correctly register an existing BLOB 
            in a batch. In other cases you will have to assign to
            <code>msg&gt;>desc</code> the ID that is correct from the point of 
            view of the batch.</para>
            
          </section><!-- L4 rnfb40-apiods-api-blobs-register -->
        </section><!-- L3 rnfb40-apiods-api-blobs-batches -->

        <section id="rnfb40-apiods-api-batch-isc-api"><!-- L3 -->
          <title>Batch Ops in the Legacy (ISC) API</title>
          <para>A word or two about access to batches from the ISC API: a prepared ISC statement
          can be executed in batch mode. The main support for it is present in the <code>Util</code> 
          interface, namely in the methods <code>getTransactionByHandle</code> and 
          <code>getStatementByHandle</code>. These methods enable access to the appropriate 
          interfaces in the same way as to existing ISC handles.</para> 
          <para>An example of this usage can be found in <filename>12.batch_isc.cpp</filename>.</para>       
        </section><!-- rnfb40-apiods-api-batch-isc-api -->

      </section><!-- L2 rnfb40-apiods-api-batchops -->

      <section id="rnfb40-apiods-timezone-support"><!-- Level 2 -->
      <title>API Support for Time Zones</title>
      <section id="rnfb40-apiods-timezone-structs"><!-- Level 3 -->
        <title>Structures (structs)</title>
        <programlisting>
struct ISC_TIME_TZ
{
    ISC_TIME utc_time;
    ISC_USHORT time_zone;
};

struct ISC_TIMESTAMP_TZ
{
    ISC_TIMESTAMP utc_timestamp;
    ISC_USHORT time_zone;
};

        </programlisting>
      </section>

      <section id="rnfb40-apiods-timezone-functions"><!-- Level 3 -->
        <title>API Functions</title>
        <subtitle>(FirebirdInterface.idl&mdash;IUtil interface)</subtitle>
        <programlisting>
void decodeTimeTz(
    Status status,
    const ISC_TIME_TZ* timeTz,
    uint* hours,
    uint* minutes,
    uint* seconds,
    uint* fractions,
    uint timeZoneBufferLength,
    string timeZoneBuffer
);

void decodeTimeStampTz(
    Status status,
    const ISC_TIMESTAMP_TZ* timeStampTz,
    uint* year,
    uint* month,
    uint* day,
    uint* hours,
    uint* minutes,
    uint* seconds,
    uint* fractions,
    uint timeZoneBufferLength,
    string timeZoneBuffer
);

void encodeTimeTz(
    Status status,
    ISC_TIME_TZ* timeTz,
    uint hours,
    uint minutes,
    uint seconds,
    uint fractions,
    const string timeZone
);

void encodeTimeStampTz(
    Status status,
    ISC_TIMESTAMP_TZ* timeStampTz,
    uint year,
    uint month,
    uint day,
    uint hours,
    uint minutes,
    uint seconds,
    uint fractions,
    const string timeZone
);
        </programlisting>
      </section><!-- L3 -->
    </section><!-- L2 -->



  </section><!-- L1 -->


  </chapter>

