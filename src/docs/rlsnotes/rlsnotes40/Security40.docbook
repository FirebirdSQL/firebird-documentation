<chapter id="rnfb40-security">
  <chapterinfo>
    <title>Security</title>
  </chapterinfo>
    <para>Security enhancements in Firebird 4 include:</para>
    <section id="rnfb4-enhancedprivs">
      <title>Enhanced System Privileges</title>
      <author>
        <firstname>Alex</firstname><surname>Peshkov</surname>
      </author>
      <para>Tracker ticket <ulink url="http://tracker.firebirdsql.org/browse/CORE-5343">CORE-5343</ulink></para>
      <para>This feature enables granting and revoking some special privileges
      for regular users to perform tasks that have been historically limited to SYSDBA only,
      for example:
        <itemizedlist spacing="compact">
          <listitem>Run utilities such as gbak, gfix, nbackup and so on</listitem>
          <listitem>Shut down a database and bring it online</listitem>
          <listitem>Trace other users' attachments</listitem>
          <listitem>Access the monitoring tables</listitem>
          <listitem>Run <link linkend="rnfb40-msql">management statements</link></listitem>
        </itemizedlist>
      </para>

      <para>The implementation involved creating a set of SYSTEM PRIVILEGES, analogous
      to object privileges, from which lists of privileged tasks could be assigned
      to roles.</para>

      <section id="rnfb4-validsysprivs">
        <title>List of Valid System Privileges</title>
        <para>The following table lists the names of the valid system privileges that can 
        be granted and revoked to and from roles.
          <informaltable frame="none">
            <tgroup cols="2">
              <colspec colwidth="3.0in"/>
              <colspec colwidth="3.5in"/>
              <tbody>
                <row><entry>USER_MANAGEMENT</entry><entry>Manage users</entry></row>
                <row><entry>READ_RAW_PAGES</entry><entry>Read pages in raw format using Attachment::getInfo()</entry></row>
                <row><entry>CREATE_USER_TYPES</entry><entry>Add/change/delete non-system records in RDB$TYPES</entry></row>
                <row><entry>USE_NBACKUP_UTILITY</entry><entry>Use nbackup to create database copies</entry></row>
                <row><entry>CHANGE_SHUTDOWN_MODE</entry><entry>Shut down database and bring online</entry></row>
                <row><entry>TRACE_ANY_ATTACHMENT</entry><entry>Trace other users' attachments</entry></row>
                <row><entry>MONITOR_ANY_ATTACHMENT</entry><entry>Monitor (tables MON$) other users' attachments</entry></row>
                <row><entry>ACCESS_SHUTDOWN_DATABASE</entry><entry>Access database when it is shut down</entry></row>
                <row><entry>CREATE_DATABASE</entry><entry>Create new databases (given in security.db)</entry></row>
                <row><entry>DROP_DATABASE</entry><entry>Drop this database</entry></row>
                <row><entry>USE_GBAK_UTILITY</entry><entry>Use appropriate utility</entry></row>
                <row><entry>USE_GSTAT_UTILITY</entry><entry>...</entry></row>
                <row><entry>USE_GFIX_UTILITY</entry><entry>...</entry></row>
                <row><entry>IGNORE_DB_TRIGGERS</entry><entry>Instruct engine not to run DB-level triggers</entry></row>
                <row><entry>CHANGE_HEADER_SETTINGS</entry><entry>Modify parameters in DB header page</entry></row>
                <row><entry>SELECT_ANY_OBJECT_IN_DATABASE</entry><entry>Use SELECT for any selectable object</entry></row>
                <row><entry>ACCESS_ANY_OBJECT_IN_DATABASE</entry><entry>Access (in any possible way) any object</entry></row>
                <row><entry>MODIFY_ANY_OBJECT_IN_DATABASE</entry><entry>Modify (up to drop) any object</entry></row>
                <row><entry>CHANGE_MAPPING_RULES</entry><entry>Change authentication mappings</entry></row>
                <row><entry>USE_GRANTED_BY_CLAUSE</entry><entry>Use GRANTED BY in GRANT and REVOKE operators</entry></row>
                <row><entry>GRANT_REVOKE_ON_ANY_OBJECT</entry><entry>GRANT and REVOKE rights on any object in database</entry></row>
                <row><entry>GRANT_REVOKE_ANY_DDL_RIGHT</entry><entry>GRANT and REVOKE any DDL rights</entry></row>
                <row><entry>CREATE_PRIVILEGED_ROLES</entry><entry>Use SET SYSTEM PRIVILEGES in roles</entry></row>
                <row><entry>MODIFY_EXT_CONN_POOL</entry><entry>Use command ALTER EXTERNAL CONNECTIONS POOL</entry></row>
                <row><entry>REPLICATE_INTO_DATABASE</entry><entry>Use replication API to load change sets into database</entry></row>
              </tbody>
            </tgroup>
          </informaltable>
        </para>
      </section>

      <section id="rnfb4-new-grantee-type">
        <title>New Grantee Type SYSTEM PRIVILEGE</title>
        <para>At a lower level, a new grantee type SYSTEM PRIVILEGE enables the SYSDBA
        to grant and revoke specific access privileges on database objects to a named
        system privilege.  For example,
          <programlisting>
GRANT ALL ON PLG$SRP_VIEW TO SYSTEM PRIVILEGE USER_MANAGEMENT
          </programlisting>
        grants to users having USER_MANAGEMENT privilege all rights to the view that
        is used in the SRP user management plug-in.</para>
      </section>

      <section id="rnfb4-sysprivs-creating-roles">
        <title>Assigning System Privileges to a Role</title>
        <para>To put all this to use, we have some new clauses in the syntax of
        the CREATE ROLE and ALTER ROLE statements for attaching a list of the
        desired system privileges to a new or existing role.</para>

        <section id="rnfb4-setsysprivs">
          <title>The SET SYSTEM PRIVILEGES Clause</title>
          <para>Tracker ticket <ulink url="http://tracker.firebirdsql.org/browse/CORE-2557">CORE-2557</ulink></para>
          <para>The syntax pattern for setting up or changing these special roles
          is as follows:
            <programlisting>
CREATE ROLE &lt;name&gt; SET SYSTEM PRIVILEGES TO &lt;privilege1&gt; {, &lt;privilege2&gt; {, ...  &lt;privilegeN&gt; }}
ALTER ROLE &lt;name&gt; SET SYSTEM PRIVILEGES TO &lt;privilege1&gt; {, &lt;privilege2&gt; {, ...  &lt;privilegeN&gt; }}
            </programlisting>
          </para>
          <para>Both statements assign a non-empty list of system privileges to role &lt;name&gt;.
          The ALTER ROLE statement clears privileges previously assigned to the named role, before
          constructing the new list.</para>
          <important>Be aware that each system privilege provides a very thin level
          of control.  For some tasks it may be necessary to give the user more than
          one privilege to perform some task.  For example, add IGNORE_DB_TRIGGERS
          to USE_GSTAT_UTILITY because gstat needs to ignore database triggers.
          </important>
          <para>Note that this facility provides a solution to an old Tracker
          request (CORE-2557) to implement permissions on the monitoring
          tables:
            <programlisting>
CREATE ROLE MONITOR SET SYSTEM PRIVILEGES TO MONITOR_ANY_ATTACHMENT;
GRANT MONITOR TO ROLE MYROLE;
            </programlisting>
          </para>
        </section>

        <section id="rnfb4-dropsysprivs">
          <title>Dropping System Privileges from a Role</title>
          <para>This statement is used to clear the list of system
          privileges from the named role:
            <programlisting>
ALTER ROLE &lt;name&gt; DROP SYSTEM PRIVILEGES
            </programlisting>
          The role &lt;name&gt; is not dropped, just the list attached to it.</para>
        </section>
      </section> <!--rnfb4-sysprivs-creating-roles -->

      <section id="rnfb4-rdb$systemprivilege-function">
        <title>Function RDB$SYSTEM_PRIVILEGE</title>
        <para>To accompany all this delegation of power is a new
        built-in function, RDB$SYSTEM_PRIVILEGE().  It takes a
        valid system privilege as an argument and returns True if
        the current attachment has the given system privilege.</para>
        <para>Format:
          <literallayout class="monospaced">
    RDB$SYSTEM_PRIVILEGE( &lt;privilege&gt; )
          </literallayout>
        </para>
        <para>Example
          <programlisting>
select rdb$system_privilege(user_management) from rdb$database;
          </programlisting>
        </para>
      </section>
    </section> <!-- rnfb4-transferprivs -->

    <section id="rnfb4-grant-role-to-role">
      <title>Granting a Role to Another Role</title>
      <author>
        <firstname>Roman</firstname><surname>Simakov</surname>
      </author>
      <para>Tracker ticket <ulink url="http://tracker.firebirdsql.org/browse/CORE-1815">CORE-1815</ulink></para>
      <para>Firebird 4 allows a role to be granted to another role&mdash;a phenomenon
      that has been nicknamed <quote>cumulative roles</quote>.  If you hear that term, it 
      is referring to roles that are embedded within other roles by way of <function>GRANT 
      ROLE a TO ROLE b</function>, something Firebird would not allow before.</para>
      
      <important>
        <para>Take careful note that the GRANT ROLE syntax has been extended, 
        along with its effects.</para>
      </important>
      <para><emphasis role="bold">Syntax Pattern</emphasis></para>
      <literallayout class="monospaced">
GRANT [DEFAULT] &lt;role name&gt; TO [USER | ROLE] &lt;user/role name&gt; [WITH ADMIN OPTION];
REVOKE [DEFAULT] &lt;role name&gt; FROM [USER | ROLE] &lt;user/role name&gt; [WITH ADMIN OPTION];
      </literallayout>

      <section id="rnfb4-grant-role-default">
        <title>The DEFAULT Keyword</title>
        <para>If the  optional DEFAULT keyword is included, the role will be used every
        time the user logs in, even if the role is not specified explicitly in the login
        credentials.  During attachment, the user will get the privileges of all roles
        that have been granted to him/her with the DEFAULT property.  This set will
        include all the privileges of all the embedded roles that have been granted
        to the &lt;role name&gt; role with the DEFAULT property.</para>
        <para>Setting (or not setting) a role in the login does not affect the default 
        role.  The set of rights, given (by roles) to the user after login is the union 
        of the login role (when set), all default roles granted to the user and all 
        roles granted to this set of roles. 
          <note>A user still cannot acquire any privileges associated with a base role
          that has not been granted to his account or has been revoked.</note>
        </para>
      </section>
 
      <section id="rnfb4-grant-role-with-admin">
        <title>WITH ADMIN OPTION Clause</title>
        <para>If a user is to be allowed to grant a role to another user or to another 
        role, the WITH ADMIN OPTION should be included. Subsequently the user will 
        be able to grant any role in the sequence of roles granted to him, provided
        every role in the sequence has WITH ADMIN OPTION.</para>
      </section>
      
      <section id="rnfb4-grant-role-example">
        <title>Example Using a Cumulative Role</title>
        <programlisting>
CREATE DATABASE 'LOCALHOST:/TMP/CUMROLES.FDB';
CREATE TABLE T(I INTEGER);
CREATE ROLE TINS;
CREATE ROLE CUMR;
GRANT INSERT ON T TO TINS;
GRANT DEFAULT TINS TO CUMR WITH ADMIN OPTION;
GRANT CUMR TO USER US WITH ADMIN OPTION;
CONNECT 'LOCALHOST:/TMP/CUMROLES.FDB' USER 'US' PASSWORD 'PAS';
INSERT INTO T VALUES (1);
GRANT TINS TO US2;
        </programlisting>
      </section>

      <section id="rnfb4-revoke-role-default">
        <title>Revoking the DEFAULT Property of a Role Assignment</title>
        <para>To remove the DEFAULT property of a role assignment without revoking the
        role itself, include the DEFAULT keyword in the REVOKE statement:
          <programlisting>
REVOKE DEFAULT ghost FROM USER henry
REVOKE DEFAULT ghost FROM ROLE poltergeist
          </programlisting>
        </para>
        <para>Otherwise, revoking a role altogether from a user is unchanged.  However,
        now a role can be revoked from a role.  For example,
          <programlisting>
REVOKE ghost FROM USER henry
REVOKE ghost FROM ROLE poltergeist
          </programlisting>
        </para>
      </section> <!-- rnfb4-revoke-role-default -->

      <section id="rnfb4-rdb$role_in_use-function">
        <title>Function RDB$ROLE_IN_USE</title>
        <author>
          <firstname>Roman</firstname><surname>Simakov</surname>
        </author>
        <para>Tracker ticket <ulink url="http://tracker.firebirdsql.org/browse/CORE-2762">CORE-2762</ulink></para>
        <para>A new built-in function lets the current user check whether
        a specific role is available under his/her current credentials.
        It takes a single-quoted role name as a string argument of arbitrary length 
        and returns a Boolean result.
        <bridgehead renderas="sect4">Format</bridgehead>
          <literallayout class="monospaced">
    RDB$ROLE_IN_USE(&lt;role_name&gt;)
          </literallayout>
        </para>

        <section id="rnfb4-list-current-roles">
          <title>List Currently Active Roles</title>
            <para>Tracker ticket <ulink url="http://tracker.firebirdsql.org/browse/CORE-751">CORE-751</ulink></para>
            <para>To get a list of currently active roles you can run:
              <programlisting>
SELECT * FROM RDB$ROLES WHERE RDB$ROLE_IN_USE(RDB$ROLE_NAME)
              </programlisting>
            </para>
          </section> <!-- rnfb4-list-current-roles -->
        </section> <!-- rnfb4-rdb$role_in_use-function -->
    </section> <!-- rnfb4-grant-role-to-role -->

    <section id="rnfb40-sec-sqlsecurity">
      <title>SQL SECURITY Feature</title>
      <author>
        <firstname>Roman</firstname><surname>Simakov</surname>
      </author>
      <para>Tracker ticket <ulink url="http://tracker.firebirdsql.org/browse/CORE-5568">CORE-5568</ulink></para>
      <para>This new feature in Firebird 4 enables executable objects (triggers, stored
      procedures, stored functions) to be defined to run in the context of an SQL SECURITY
      clause, as defined in the SQL standards (2003, 2011).</para>

      <para>The SQL SECURITY scenario has two contexts:  INVOKER and DEFINER.  The
      INVOKER context corresponds to the privileges currently available to the 
      CURRENT_USER or the calling object, while DEFINER corresponds to those
      available to the owner of the object.</para>

      <para>The SQL SECURITY property is an optional part of an object's definition 
      that can be applied to the object with DDL statements.  The property cannot be
      dropped but it can be changed from INVOKER to DEFINER and vice versa.</para>
      
      <para>It is not the same thing as SQL privileges, which are applied to 
      <command>users</command> and some database object types to give them various 
      types of access to database objects.  When an executable object in Firebird 
      needs access to a table, a view or another executable object, the target object 
      is not accessible if the invoker does not have the necessary privileges on it.
      That has been the situation in previous Firebird versions and remains
      so in Firebird 4.  That is, by default, all executable objects have the SQL
      SECURITY INVOKER property in Firebird 4.  Any caller lacking the necessary
      privileges will be rejected.</para>

      <para>If a routine has the SQL SECURITY DEFINER property applied to it, the
      invoking user or routine will be able to execute it if the required privileges
      have been granted to its owner, without the need for the caller
      to be granted those privileges specifically.</para>

      <para>In summary:
        <itemizedlist>
          <listitem>If INVOKER is set, the access rights for executing the call to an
          executable object are determined by checking the current user's active set
          of privileges</listitem>
          <listitem>If DEFINER is set, the access rights of the object owner will be
          applied instead, regardless of the current user's active privilege set</listitem>
        </itemizedlist>
      </para>

      <para><emphasis role="bold">Syntax Patterns</emphasis></para>
      <literallayout class="monospaced">
CREATE TABLE &lt;table-name&gt; (...) [SQL SECURITY {DEFINER | INVOKER}]
ALTER TABLE &lt;table-name&gt; ... [{ALTER SQL SECURITY {DEFINER | INVOKER} | DROP SQL SECURITY}]
CREATE [OR ALTER] FUNCTION &lt;function-name&gt; ... [SQL SECURITY {DEFINER | INVOKER}] AS ...
CREATE [OR ALTER] PROCEDURE &lt;procedure-name&gt; ... [SQL SECURITY {DEFINER | INVOKER}] AS ...
CREATE [OR ALTER] TRIGGER &lt;trigger-name&gt; ... [SQL SECURITY {DEFINER | INVOKER} | DROP SQL SECURITY] [AS ...]
CREATE [OR ALTER] PACKAGE &lt;package-name&gt; [SQL SECURITY {DEFINER | INVOKER}] AS ...

ALTER DATABASE SET DEFAULT SQL SECURITY {DEFINER | INVOKER}
      </literallayout>
      
      <warning>
        <title>Packaged Routines</title>
        <para>An explicit SQL SECURITY clause is not valid for procedures and functions 
        defined in a package and will cause an error.</para>
      </warning>

      <section id="rnfb40-sec-sqlsecurity-triggers">
        <title>Triggers</title>
        <para>Triggers inherit the setting of the SQL SECURITY property from the table,
        but it can be overriden explicitly.  If the property is changed for
        a table, triggers that do not carry the overridden property will not see the effect
        of the change until next time the trigger is loaded into the metadata cache.</para>
        
         <para>To remove an explicit SQL SECURITY option from a trigger, e.g. one named
         tr_ins, you can run
           <programlisting>
alter trigger tr_ins DROP SQL SECURITY;
           </programlisting>
         </para>
         <para>To set it again to SQL SECURITY INVOKER, run
           <programlisting>
alter trigger tr_ins sql security invoker;
           </programlisting>
         </para>
      </section>

      <section id="rnfb40-sec-sqlsecurity-examples">
        <title>Examples Using the SQL SECURITY Property</title>
        <orderedlist>
          <listitem>
            <para>With DEFINER set for table t, user US needs only 
            the SELECT privilege on it.  If it were set for INVOKER, the
            user would need also the EXECUTE privilege on function f.
              <programlisting>
set term ^;
create function f() returns int
as
begin
    return 3;
end^
set term ;^
create table t (i integer, c computed by (i + f())) SQL SECURITY DEFINER;
insert into t values (2);
grant select on table t to user us;

commit;

connect 'localhost:/tmp/7.fdb' user us password 'pas';
select * from t;
              </programlisting>
            </para>
          </listitem>

          <listitem>
            <para>With DEFINER set for function f, user US needs only
            the EXECUTE privilege on it.  If it were set for INVOKER, the
            user would need also the INSERT privilege on table t.
              <programlisting>
set term ^;
create function f (i integer) returns int SQL SECURITY DEFINER
as
begin
  insert into t values (:i);
  return i + 1;
end^
set term ;^
grant execute on function f to user us;

commit;

connect 'localhost:/tmp/59.fdb' user us password 'pas';
select f(3) from rdb$database;
              </programlisting>
            </para>
          </listitem>

          <listitem>
            <para>With DEFINER set for procedure p, user US needs only
            the EXECUTE privilege on it.  If it were set for INVOKER, either 
            the user or the procedure would need also the INSERT privilege 
            on table t.
              <programlisting>
set term ^;
create procedure p (i integer) SQL SECURITY DEFINER
as
begin
  insert into t values (:i);
end^
set term ;^

grant execute on procedure p to user us;
commit;

connect 'localhost:/tmp/17.fdb' user us password 'pas';
execute procedure p(1);
              </programlisting>
            </para>
          </listitem>
          
          <listitem>
            <para>With DEFINER set for trigger tr, user US needs only
            the INSERT privilege on it.  If it were set for INVOKER, either
            the user would need also the INSERT privilege on table t.
              <programlisting>
create table tr (i integer);
create table t (i integer);
set term ^;
create trigger tr_ins for tr after insert SQL SECURITY DEFINER
as
begin
  insert into t values (NEW.i);
end^
set term ;^
grant insert on table tr to user us;

commit;

connect 'localhost:/tmp/29.fdb' user us password 'pas';
insert into tr values(2);
              </programlisting>
            </para>
            <para>The result would be the same if SQL SECURITY DEFINER
            were specified for table TR:
              <programlisting>
create table tr (i integer) SQL SECURITY DEFINER;
create table t (i integer);
set term ^;
create trigger tr_ins for tr after insert
as
begin
  insert into t values (NEW.i);
end^
set term ;^
grant insert on table tr to user us;

commit;

connect 'localhost:/tmp/29.fdb' user us password 'pas';
insert into tr values(2);
              </programlisting>
            </para>
          </listitem>
          
          <listitem>
            <para>With DEFINER set for package pk, user US needs only
            the EXECUTE privilege on it.  If it were set for INVOKER, either
            the user would need also the INSERT privilege on table t.
              <programlisting>
create table t (i integer);
set term ^;
create package pk SQL SECURITY DEFINER
as
begin
    function f(i integer) returns int;
end^

create package body pk
as
begin
    function f(i integer) returns int
    as
    begin
      insert into t values (:i);
      return i + 1;
    end
end^
set term ;^
grant execute on package pk to user us;

commit;

connect 'localhost:/tmp/69.fdb' user us password 'pas';
select pk.f(3) from rdb$database;
              </programlisting>
            </para>
          </listitem>
        </orderedlist>
      </section> <!-- rnfb40-sec-sqlsecurity-examples -->

    </section> <!-- rnfb40-sec-sqlsecurity -->
    
    <section id="rnfb4-builtin-crypto-functions"><!-- BETA 1 -->
      <title>Built-in Cryptographic Functions</title>
      <author>
        <firstname>Alex</firstname><surname>Peshkov</surname>
      </author>
      <para>Tracker ticket <ulink url="http://tracker.firebirdsql.org/browse/CORE-5970">CORE-5970</ulink></para>
      <para>Firebird 4 introduces eight new built-in functions supporting 
      cryptographic tasks;  also two (non-cryptographic) functions for encoding and decoding
      between string and Base-64 data and another for getting a CRC32 code for 
      a block of data.</para>

      <section id="rnfb4-builtin-crypto-encrypt">
        <title>ENCRYPT() and DECRYPT()</title>
        <para>For encrypting/decrypting data using a symmetric cipher.</para>

        <para><emphasis role="bold">Format</emphasis>
        <literallayout class="monospaced">
  {ENCRYPT | DECRYPT} ( &lt;string | blob&gt; USING &lt;algorithm&gt; [MODE &lt;mode&gt;] KEY &lt;string&gt;
    	[IV &lt;string&gt;] [&lt;endianness&gt;] [CTR_LENGTH &lt;smallint&gt;] [COUNTER &lt;bigint&gt;])

  algorithm ::= { block_cipher | stream_cipher }
  block_cipher ::= { AES | ANUBIS | BLOWFISH | KHAZAD | RC5 | RC6 | SAFER+ | TWOFISH | XTEA }
  stream_cipher ::= { CHACHA20 | RC4 | SOBER128 }
  mode ::= { CBC | CFB | CTR | ECB | OFB }
  endianness ::= { CTR_BIG_ENDIAN | CTR_LITTLE_ENDIAN }
        </literallayout>
        </para>
        <important>
          <itemizedlist>
            <listitem>Mode should be specified for block ciphers</listitem>
            <listitem>Initialization vector (IV) should be specified for block ciphers in all 
            modes except ECB and all stream ciphers except RC4</listitem>
            <listitem>Endianness may be specified only in CTR mode, default is little endian 
            counter</listitem>
            <listitem>Counter length (CTR_LENGTH, bytes) may be specified only in CTR mode, 
            default is the size of IV</listitem>
            <listitem>Initial counter value (COUNTER) may be specified only for CHACHA20 cipher, 
            default is 0</listitem>
            <listitem>Sizes of data strings passed to these functions are in accordance with
            the selected algorithm and mode requirements</listitem>
            <listitem>Functions return BLOB when the first argument is blob and varbinary for 
            all text types.</listitem>
          </itemizedlist>
        </important>
        
        <para><emphasis role="bold">Examples</emphasis>
        <programlisting>        
select encrypt('897897' using sober128 key 'AbcdAbcdAbcdAbcd' iv '01234567') 
    from rdb$database;
select decrypt(x'0154090759DF' using sober128 key 'AbcdAbcdAbcdAbcd' iv '01234567') 
    from rdb$database;
select decrypt(secret_field using aes mode ofb key '0123456701234567' iv init_vector) 
    from secure_table;
        </programlisting>
        </para>
      </section><!-- rnfb4-builtin-crypto-encrypt -->

      <section id="rnfb4-builtin-crypto-rsa-private">
        <title>RSA_PRIVATE()</title>
        <para>Returns an RSA private key of specified length (in bytes)
        in PKCS#1 format as a VARBINARY string.</para>
        
        <para><emphasis role="bold">Format</emphasis>
        <literallayout class="monospaced">
  RSA_PRIVATE ( &lt;smallint&gt; )
        </literallayout>
        </para>

        <para><emphasis role="bold">Example</emphasis>
        <programlisting>
select rdb$set_context('USER_SESSION', 'private_key', rsa_private(256)) 
    from rdb$database;
        </programlisting>
        </para>
      </section><!-- rnfb4-builtin-crypto-rsa-private -->

      <section id="rnfb4-builtin-crypto-rsa-public">
        <title>RSA_PUBLIC()</title>
        <para>Returns the RSA public key for a specified RSA private key.
        Both keys are in PKCS#1 format.</para>
        <para><emphasis role="bold">Format</emphasis>
        <literallayout class="monospaced">
  RSA_PUBLIC ( &lt;private key&gt; )
        </literallayout>
        </para>

        <para><emphasis role="bold">Example</emphasis>
        <note>
          <title>Tip</title>
          <para>Run your samples one by one from the RSA_PRIVATE function
          forward.</para>
        </note>
        </para>
        <programlisting>
select rdb$set_context('USER_SESSION', 'public_key',
    rsa_public(rdb$get_context('USER_SESSION', 'private_key'))) from rdb$database;
        </programlisting>
      </section><!-- rnfb4-builtin-crypto-rsa-public -->

      <section id="rnfb4-builtin-crypto-rsa-encrypt">
        <title>RSA_ENCRYPT()</title>
        <para>Pads data using <ulink url="https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding">OAEP padding</ulink> 
        and encrypts it using an RSA public key.
        Normally used to encrypt short symmetric keys which are then used in 
        block ciphers to encrypt a message.</para>
        <para><emphasis role="bold">Format</emphasis>
        <literallayout class="monospaced">
  RSA_ENCRYPT ( &lt;string&gt; KEY &lt;public key&gt; [LPARAM &lt;string&gt;] [HASH &lt;hash&gt;] )
        </literallayout>
        </para>
        <para>KEY should be a value returned by the RSA_PUBLIC function. LPARAM is an additional 
        system-specific tag that can be applied to identify which system encoded the message. 
        Its default value is NULL.
        <literallayout class="monospaced">
  hash ::= { MD5 | SHA1 | SHA256 | SHA512 } 
        </literallayout>
         Default is SHA256.</para>
        <para><emphasis role="bold">Example</emphasis>         
        <note>
          <title>Tip</title>
          <para>Run your samples one by one from the RSA_PRIVATE function
          forward.</para>
        </note>
        </para>
        <programlisting>
select rdb$set_context('USER_SESSION', 'msg', rsa_encrypt('Some message'
    key rdb$get_context('USER_SESSION', 'public_key'))) from rdb$database;
        </programlisting>
      </section><!-- rnfb4-builtin-crypto-rsa-encrypt -->

      <section id="rnfb4-builtin-crypto-rsa-decrypt">
        <title>RSA_DECRYPT()</title>
        <para>Decrypts using the RSA private key and OAEP de-pads the resulting data.</para>
        <para><emphasis role="bold">Format</emphasis>
        <literallayout class="monospaced">
  RSA_DECRYPT ( &lt;string&gt; KEY &lt;private key&gt; [LPARAM &lt;string&gt;] [HASH &lt;hash&gt;] )
        </literallayout>
        KEY should be a value returned by the RSA_PRIVATE function. LPARAM is the
        same variable passed to RSA_ENCRYPT. If it does not match what was used 
        during encoding,  RSA_DECRYPT will not decrypt the packet.
        <literallayout class="monospaced">
        hash ::= { MD5 | SHA1 | SHA256 | SHA512 } Default is SHA256. 
        </literallayout>
        </para>
        <para><emphasis role="bold">Example</emphasis>
        <note>
          <title>Tip</title>
          <para>Run your samples one by one from the RSA_PRIVATE function
          forward.</para>
        </note>
        </para>
        <programlisting>
select rsa_decrypt(rdb$get_context('USER_SESSION', 'msg')
    key rdb$get_context('USER_SESSION', 'private_key')) from rdb$database;
        </programlisting>
      </section><!-- rnfb4-builtin-crypto-rsa-decrypt -->

      <section id="rnfb4-builtin-crypto-rsa-sign">
        <title>RSA_SIGN()</title>
        <para>Performs PSS encoding of the message digest to be signed and
        signs using the RSA private key.</para>
        <note>
          <title>PSS encoding</title>
          <para>Probabilistic Signature Scheme (PSS) is a cryptographic signature scheme 
          specifically developed to allow modern methods of security analysis to prove that 
          its security directly relates to that of the RSA problem. There is no such proof 
          for the traditional PKCS#1 v1.5 scheme. </para>
        </note>
        <para><emphasis role="bold">Format</emphasis>
        <literallayout class="monospaced">
RSA_SIGN ( &lt;string&gt; KEY &lt;private key&gt; [HASH &lt;hash&gt;] [SALT_LENGTH &lt;smallint&gt;] )
        </literallayout>
        KEY should be a value returned by the RSA_PRIVATE function.
        <literallayout class="monospaced">
  hash ::= { MD5 | SHA1 | SHA256 | SHA512 } 
        </literallayout>
        Default is SHA256.</para>
        <para>SALT_LENGTH indicates the length of the desired salt, and should 
        typically be small. A good value is between 8 and 16.</para>
        <para><emphasis role="bold">Example</emphasis>
        <note>
          <title>Tip</title>
          <para>Run your samples one by one from the RSA_PRIVATE function
          forward.</para>
        </note>
        </para>
        <programlisting>
  select rdb$set_context('USER_SESSION', 'msg', rsa_sign(hash('Test message' using sha256)
    key rdb$get_context('USER_SESSION', 'private_key'))) from rdb$database;
        </programlisting>
      </section><!-- rnfb4-builtin-crypto-rsa-sign -->

      <section id="rnfb4-builtin-crypto-rsa-verify">
        <title>RSA_VERIFY()</title>
        <para>Performs PSS encoding of message digest to be signed and verifies 
        its digital signature using the RSA public key.</para>
        
        <para><emphasis role="bold">Format</emphasis>
        <literallayout class="monospaced">
  RSA_VERIFY ( &lt;string> SIGNATURE &lt;string&gt;
                           KEY &lt;public key&gt;
                           [HASH &lt;hash&gt;] [SALT_LENGTH &lt;smallint&gt;] )
        </literallayout>
        SIGNATURE should be a value returned by the RSA_SIGN function.
        KEY should be a value returned by RSA_PUBLIC function.
        <literallayout class="monospaced">
        hash ::= { MD5 | SHA1 | SHA256 | SHA512 } 
        </literallayout>
        Default is SHA256.</para>
        <para>SALT_LENGTH indicates the length of the desired salt, and should 
        typically be small. A good value is between 8 and 16.</para>

        <para><emphasis role="bold">Example</emphasis>
        <note>
          <title>Tip</title>
          <para>Run your samples one by one from the RSA_PRIVATE function
          forward.</para>
        </note>
        </para>
        <programlisting>
select rsa_verify(hash('Test message' using sha256)
                  signature rdb$get_context('USER_SESSION', 'msg')
                  key rdb$get_context('USER_SESSION', 'public_key')) 
              from rdb$database;
        </programlisting>
      </section><!-- rnfb4-builtin-crypto-rsa-verify -->
      
      <section id="rnfb4-builtin-noncrypto-base64">
        <title>BASE64_ENCODE() and BASE64_DECODE()</title>
        <para>These two functions are for encoding and decoding input data 
        between string and BASE64 representation. They operate with character strings 
        and BLOBs. Considered useful when working with binary objects&mdash;with keys, 
        for example.</para>
        <para><emphasis role="bold">Format</emphasis>
          <literallayout class="monospaced">
  BASE64_ENCODE( &lt;binary data&gt; )
  BASE64_DECODE( &lt;base64 data&gt; )
          </literallayout>
        </para>
        <para><emphasis role="bold">Example</emphasis>
          <literallayout class="monospaced">
  select base64_encode(public_key) from clients;
          </literallayout>
        </para>
      </section><!-- rnfb4-builtin-noncrypto-base64 -->
      
      <section id="rnfb4-builtin-noncrypto-hex">
        <title>HEX_ENCODE() and HEX_DECODE()</title>
        <para>These two functions are for encoding and decoding input data 
        between string and hexadecimal representation. They operate with character strings 
        and BLOBs.</para>
        <para><emphasis role="bold">Format</emphasis>
          <literallayout class="monospaced">
  HEX_ENCODE( &lt;binary data&gt; )
  HEX_DECODE( &lt;hex data&gt; )
          </literallayout>
        </para>
        <para><emphasis role="bold">Example</emphasis>
          <literallayout class="monospaced">
  select hex_encode(binary_string) from clients;
          </literallayout>
        </para>
      </section><!-- rnfb4-builtin-noncrypto-hex -->
      
      <section id="rnfb4-builtin-noncrypto-crc32">
        <title>CRC32()</title>
        <para>Accepts an argument than can be a field, variable or expression
        of any type recognised by DSQL/PSQL and returns a CRC-32 code calculated
        from the input data with the polynomial 0x04C11DB7.  A constant, such as
        a file name passed as a string, returns the CRC for only the input.</para>
        <para><emphasis role="bold">Format</emphasis>
          <literallayout class="monospaced">
  CRC32( &lt;any value&gt; )
          </literallayout>
        </para>
        <para><emphasis role="bold">Example</emphasis>
          <literallayout class="monospaced">
  select crc32(job_title) from job;

  select crc32('Firebird-4.0.0.716-Alpha1.amd64.tar.gz') from rdb$database;
          </literallayout>
        </para>
        <note>
        <para>Initially CRC codes were designed as a tool to detect accidental 
        changes to raw data when transferred over the wire or stored somewhere.</para>
        <para>It can be used as a very fast and rather efficient hash function. If 
        the risk of collisions is not critical, its 32-bit integer output bestows a 
        significant advantage over the widely-used SHA family of hashes in that it 
        is easier to use later in various calculations if needed.</para>
        </note>
      </section><!-- rnfb4-builtin-noncrypto-crc32 -->
    </section><!-- rnfb4-builtin-crypto-functions -->

    <section id="rnfb4-sec-improvements"><!-- BETA 1 -->
      <title>Improvements to Security Features</title>
      <para>The following improvements were made to existing security features:</para>
      
      <section id="rnfb4-sec-improvements-01"><!-- BETA 1 -->
        <title>User Managing Other Users</title>
        <author>
          <firstname>Alex</firstname><surname>Peshkov</surname>
        </author>
        <para>Tracker ticket <ulink url="http://tracker.firebirdsql.org/browse/CORE-5770">CORE-5770</ulink></para>

        <para>A user that was created with user account administration privileges in 
        the security database (via the <code>... GRANT ADMIN ROLE</code> clause) no 
        longer has to hold the <code>RDB$ADMIN</code> role in the connected database 
        and pass it explicitly in order to create, alter or drop other users.</para>
        <note>
          <para>This improvement is also backported to Firebird 3.0.5.</para>
        </note>
      </section>

    </section>

</chapter>
