<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
    "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="rnfb40-psql">
  <title>Procedural SQL (PSQL)</title>
  <para>Recursion is now supported in sub-routines.  A few improvements have been
  implemented to help in logging exceptions from the various error contexts
  supported in PSQL.</para>

  <section id="rnfb40-psql-subroutines">
    <sectioninfo>
      <author><firstname>Adriano</firstname><surname>dos Santos Fernandes</surname></author>
    </sectioninfo>
    <title>Recursion for subroutines</title>
    <para>Tracker ticket <ulink url="http://tracker.firebirdsql.org/browse/CORE-5380">CORE-5380</ulink></para>

    <para>Starting in FB 4, subroutines may be recursive or call other subroutines.</para>
    <para><emphasis role="bold">Examples</emphasis></para>
    <para>A couple of recursive sub-functions in EXECUTE BLOCK:
      <programlisting>
    execute block returns (i integer, o integer)
    as
        -- Recursive function without forward declaration.
        declare function fibonacci(n integer) returns integer
        as
        begin
          if (n = 0 or n = 1) then
           return n;
         else
           return fibonacci(n - 1) + fibonacci(n - 2);
        end
        begin
          i = 0;

          while (i &lt; 10)
          do
          begin
            o = fibonacci(i);
            suspend;
            i = i + 1;
          end
       end

   -- With forward declaration and parameter with default values.

    execute block returns (o integer)
    as
        -- Forward declaration of P1.
        declare procedure p1(i integer = 1) returns (o integer);

        -- Forward declaration of P2.
        declare procedure p2(i integer) returns (o integer);

        -- Implementation of P1 should not re-declare parameter default value.
        declare procedure p1(i integer) returns (o integer)
        as
        begin
            execute procedure p2(i) returning_values o;
        end

        declare procedure p2(i integer) returns (o integer)
        as
        begin
            o = i;
        end
    begin
        execute procedure p1 returning_values o;
        suspend;
    end
      </programlisting>
    </para>
  </section> <!-- rnfb40-psql-subroutines -->

  <section  id="rnfb40-psql-errorlogging">
    <title>A Helper for Logging Context Errors</title>
    <para>A new system function enables the module to pass explicit context
    information from the error block to a logging routine.</para>

    <section id="rnfb40-psql-rdb_error">
      <sectioninfo>
        <author><firstname>Dmitry</firstname><surname>Yemanov</surname></author>
      </sectioninfo>
      <title>System Function RDB$ERROR()</title>
      <para>Tracker tickets <ulink url="http://tracker.firebirdsql.org/browse/CORE-2040">CORE-2040</ulink>
      and <ulink url="http://tracker.firebirdsql.org/browse/CORE-1132">CORE-1132</ulink></para>

      <para>The function RDB$ERROR() takes a PSQL error context as input
      and returns the specific context of the active exception.  Its scope is
      confined to the context of the exception-handling block in PSQL.
      Outside the exception handling block, RDB$ERROR always
      returns NULL.</para>

      <para>The type of the return value depends on the <link linkend="rnfb40-psql-rdb_error-contexts">context</link>.
       </para>
      <para><emphasis role="bold">Syntax Rules</emphasis></para>
      <literallayout class="monospaced">
    RDB$ERROR ( context )
    context ::= { GDSCODE | SQLCODE | SQLSTATE | EXCEPTION | MESSAGE }
      </literallayout>

      <section id="rnfb40-psql-rdb_error-contexts">
        <title>Contexts</title>
        <informaltable frame="none">
          <tgroup cols="3">
            <colspec colwidth="1.25in"/>
            <colspec colwidth="1.75in"/>
            <colspec colwidth="2.0in"/>
            <tbody>
              <row>
                <entry>GDSCODE</entry>
                <entry>INTEGER</entry>
                <entry>Context variable: refer to documentation</entry>
              </row>
              <row>
                <entry>SQLCODE</entry>
                <entry>INTEGER</entry>
                <entry>Context variable: refer to documentation</entry>
              </row>
              <row>
                <entry>SQLSTATE</entry>
                <entry>CHAR(5) CHARACTER SET ASCII</entry>
                <entry>Context variable: refer to documentation</entry>
              </row>
              <row>
                <entry>EXCEPTION</entry>
                <entry>VARCHAR(63) CHARACTER SET UTF8</entry>
                <entry>Returns name of the active user-defined exception or NULL if
                the active exception is a system one</entry>
              </row>
              <row>
                <entry>MESSAGE</entry>
                <entry>VARCHAR(1024) CHARACTER SET UTF8</entry>
                <entry>Returns interpreted text for the active exception</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <note>
          <para>For descriptions of the context variables GDSCODE, SQLCODE and SQLSTATE,
          refer to the 
          <ulink url="https://firebirdsql.org/file/documentation/reference_manuals/fblangref25-en/html/fblangref25-functions-contextvars.html">Context 
          Variables</ulink> topic in the
          <firstterm>Firebird 2.5 Language Reference</firstterm>.</para>
        </note>
      </section> <!-- rnfb40-psql-rdb$error-contexts -->

      <section><title>Example if RDB$ERROR</title>
      <programlisting>
    BEGIN
      ...
    WHEN ANY DO
      EXECUTE PROCEDURE P_LOG_EXCEPTION(RDB$ERROR(MESSAGE));
    END
      </programlisting>
      </section>
    </section> <!-- rnfb40-psql-rdb$error -->
  </section> <!-- rnfb40-psql-errorlogging -->
  
  <section id="rnfb40-psql-mngment-stmts">
    <sectioninfo>
      <author>
        <firstname>Adriano</firstname><surname>dos Santos Fernandes</surname>
      </author>
    </sectioninfo>
    <title>Allow Management Statements in PSQL Blocks</title>
    <para>See Tracker ticket
    <ulink url="http://tracker.firebirdsql.org/browse/CORE-5887">CORE-5887</ulink>.</para>
    <para>In prior Firebird versions, <link linkend="rnfb40-msql">management statements</link> 
    were not allowed inside PSQL blocks. They were allowed only as top-level SQL statements, 
    or as the top-level statement of an EXECUTE STATEMENT embedded in a PSQL block.</para>
    
    <para>Now they can be used directly in PSQL blocks (triggers, procedures, EXECUTE BLOCK), 
    which is especially helpful for applications that need some management statements to 
    be issued at the start of a session, specifically in ON CONNECT triggers.</para>
    
    <para>The management statements permitted for this usage are:
    <literallayout class="monospaced">
    ALTER SESSION RESET
    SET DECFLOAT ROUND
    SET DECFLOAT TRAPS TO
    SET DECFLOAT BIND
    SET ROLE
    SET SESSION IDLE TIMEOUT
    SET STATEMENT TIMEOUT
    SET TIME ZONE
    SET TIME ZONE BIND
    SET TRUSTED ROLE
    </literallayout>
    </para>
    <para><emphasis role="bold">Example</emphasis></para>
    <programlisting>
  create or alter trigger on_connect on connect
  as
  begin
      set decfloat bind double precision;
      set time zone 'America/Sao_Paulo';
  end
    </programlisting>
  </section>
  

</chapter>