
  <chapter id="config">
  <chapterinfo>
    <title>New Configuration Files</title>
  </chapterinfo>
  <para>In Firebird 1.5 there are two configuration files:  <firstterm>firebird.conf</firstterm> and
  <firstterm>aliases.conf</firstterm>.  The firebird.conf file replaces ibconfig (Windows) and isc_config (POSIX)
  that were in the Firebird 1.0.x distributions.  Aliases.conf is new:  it ties in with some database access
  parameters in firebird.conf to enable connection to databases without passing filesystem paths across the wire.</para>

  <section id="config-rootdir"><!-- Level 1 section -->
  <title>The Firebird Root Directory</title>
  <para>The root directory of your Firebird installation is used in many ways, both during installation and as
  an attribute that server routines, configuration parameters and clients depend on.  Because several ways exist
  to tell the server where to find a value for this attribute, developers and system administrators should be aware
  of the precedence trail that the server follows at startup, to determine it correctly.</para>

    <section id="config-rootdir-trail"><!-- Level 2 section -->
    <title>Precedence Trail for Locating the Firebird Root</title>
    <para><emphasis role="bold">Win32 Superserver and Classic builds</emphasis> (both server and client):</para>

    <orderedlist>
      <listitem>
        <para>FIREBIRD environment variable</para>
        <para>&nbsp;</para>
      </listitem>
      <listitem>
        <para><firstterm>RootDirectory</firstterm> parameter in firebird.conf</para>
        <para>&nbsp;</para>
      </listitem>
      <listitem>
        <para>Registry:</para>
        <para><function>HKLM\ SOFTWARE\Firebird Project\Firebird Server\Instances\DefaultInstance</function> and
        looks for the field <function>DefaultInstance</function>.</para>
        <para>&nbsp;</para>
      </listitem>
      <listitem>
        <para>The directory one level above the one where the server binary is located</para>
      </listitem>
    </orderedlist>

    <para><emphasis role="bold">Win32 Embedded:</emphasis></para>

    <orderedlist>
      <listitem>
        <para>FIREBIRD environment variable</para>
        <para>&nbsp;</para>
      </listitem>
      <listitem>
        <para><firstterm>RootDirectory</firstterm> parameter in firebird.conf</para>
        <para>&nbsp;</para>
      </listitem>
      <listitem>
        <para>The directory where fbembed.dll (renamed fbclient.dll) is located</para>
      </listitem>
    </orderedlist>

    <para><emphasis role="bold">Linux Classic:</emphasis></para>

    <orderedlist>
      <listitem>
        <para>FIREBIRD environment variable</para>
        <para>&nbsp;</para>
      </listitem>
      <listitem>
        <para><firstterm>RootDirectory</firstterm> parameter in firebird.conf</para>
        <para>&nbsp;</para>
      </listitem>
      <listitem>
        <para>Default installation path (/opt/firebird)</para>
      </listitem>
    </orderedlist>

    <para><emphasis role="bold">Linux Superserver:</emphasis></para>

    <orderedlist>
      <listitem>
        <para>FIREBIRD environment variable</para>
        <para>&nbsp;</para>
      </listitem>
      <listitem>
        <para><firstterm>RootDirectory</firstterm> parameter in firebird.conf</para>
        <para>&nbsp;</para>
      </listitem>
      <listitem>
        <para>The directory one level above the one where the server binary is located (retrieved via symlink
        &quot;/proc/self/exe&quot;, if supported)</para>
        <para>&nbsp;</para>
      </listitem>
      <listitem>
        <para>Default installation path (/opt/firebird)</para>
      </listitem>
    </orderedlist>
    </section>
  </section>

  <section id="config-fb-conf"><!-- Level 1 section -->
  <title>Server Configuration File--firebird.conf</title>
  <para>Default values are applicable to most parameters. Parameter names and values are case-sensitive on Linux 
  but not on Windows. To set any parameter to a non-default setting, delete the comment (#) marker and edit the 
  value. You can edit the configuration file while the server is running.  To activate configuration changes,
  it is necessary to stop and restart the service.</para>
  
  <para>Entries are in the form:</para>

  <literallayout><function>    parameter_name value</function></literallayout>
  <itemizedlist>
    <listitem>
      <para>parameter_name is a string that contains no whitespace and names a property of the server being
      configured.</para>
      <para>&nbsp;</para>
    </listitem>
    <listitem>
      <para>value is a number, Boolean (1=True, 0=False) or string that specifies the value for the parameter</para>
    </listitem>
  </itemizedlist>

    <section id="config-fb-conf-params"><!-- Level 2 section -->
    <title>Parameters</title>

      <section id="config-fb-conf-params-fs"><!-- Level 3 section -->
      <title>Filesystem-related</title>
      <variablelist>
        <varlistentry><term>RootDirectory</term>
        <listitem>
          <para>String, the absolute path to a directory root on the local filesystem.  It should remain commented
          unless you want to force the startup procedure to override the path to the root directory of the Firebird
          server installation, that it would otherwise detect for itself.</para>
        </listitem></varlistentry>

        <varlistentry><term>DatabaseAccess</term>
        <listitem>
          <para>Supports the database-aliasing feature. In previous versions, the server could attach to any
          database in its local filesystem and was accessed by applications passing the file's absolute filesystem
          path.  This parameter provides options to restrict the server's access to aliased databases only, or to
          only databases located in specific filesystem trees.</para>
          <para>DatabaseAccess may be None, Restrict or Full.</para>
          <blockquote>
            <para><emphasis>Full (the default)</emphasis> permits database files to be accessed anywhere on the
            local filesystem.</para>
            <para><emphasis>None</emphasis> permits the server to attach only databases that are listed in
            aliases.conf.</para>
            <para><emphasis>Restrict</emphasis> allows you to configure the locations of attachable database files
            to a specified list of filesystem tree-roots. Supply a list of one or more tree-roots, separated by
            semi-colons, to define one or more permissible locations.</para>
            <para>For example,</para>
            <literallayout class="monospaced">
  Unix: /db/databases;/userdir/data
  Windows:  D:\data
            </literallayout>
          </blockquote>
          <para>Relative paths are treated as relative to the path that the running server recognizes as the
          root directory.  For example, on Windows, if the root directory is C:\Program Files\Firebird, then
          the following value will restrict the server to accessing database files only if they are located
          under C:\Program Files\Firebird\userdata:</para>
          <literallayout class="monospaced">
  DatabaseAccess = Restrict userdata
          </literallayout>

          <note>
            <para>Database shadowing - the current DatabaseAccess handling has a bug that means you must use the
            Restrict option if you are shadowing any database on the server.</para>
          </note>
        </listitem></varlistentry>

        <varlistentry><term>ExternalFileAccess</term>
        <listitem>
          <para>Was external_file_directory in isc_config/ibconfig but syntax has changed.</para>
          <para>Provides three levels of security regarding EXTERNAL FILES (fixed format text files that are to be
          accessed as database tables).  The value is a string, which may be None, Full or Restrict.</para>
          <blockquote>
            <para><emphasis>None (the default value)</emphasis> disables any use of external files on your server.</para>
            <para><emphasis>Restrict</emphasis> provides the ability to restrict the location of external files for
            database access to specific path-trees.  Supply a list of one or more tree-roots, separated by
            semi-colons (;),  within and beneath which external files may be stored.</para>
            <para>For example,</para>
            <literallayout class="monospaced">
  Unix: /db/extern;/mnt/extern
  Windows:  C:\ExternalTables
            </literallayout>
            <para>Relative paths are treated as relative to the path that the running server recognizes as the root
            directory of the Firebird installation.  For example, on Windows, if the root that the running server
            recognizes as the root directory of the Firebird installation is C:\Program Files\Firebird, then the
            following value will restrict the server to accessing external files only if they are located
            in C:\Program Files\Firebird\userdata\ExternalTables:</para>
            <literallayout class="monospaced">
  ExternalFileAccess = Restrict userdata\ExternalTables
            </literallayout>
            <para><emphasis>Full</emphasis> permits external files to be accessed anywhere on the system.</para>
          </blockquote>
          <caution><para>See the CAUTION below the next entry, UdfAccess.</para></caution>
        </listitem></varlistentry>
        <varlistentry><term>UdfAccess</term>
        <listitem>
          <para>Was as external_function_directory in isc_config/ibconfig but syntax has changed.  It replaces not
          just the name of the earlier parameter, but also the form in which the values are presented.  The purpose
          of the changes was to enable optional levels of protection for external user-defined library modules,
          a recognized target for malicious intruder attacks. UdfAccess may be None, Restrict or Full.</para>
          <blockquote>
            <para><emphasis>Restrict (the default setting)</emphasis> retains the functionality provided by the
            external_function_directory parameter in Firebird 1.0, to restrict the location of callable external
            libraries to specific filesystem locations. Supply a list of one or more tree-roots, separated by
            semi-colons (;),  within and beneath which UDF, BLOB filter and character set definitions may be
            stored.</para>
            <para>For example,</para>
            <literallayout class="monospaced">
  Unix: /db/extern;/mnt/extern
  Windows:  C:\ExternalModules
            </literallayout>
            <para>Relative paths are treated as relative to the path that the running server recognizes as the
            root directory of the Firebird installation.  For example, on Windows, if the root of the Firebird
            installation is C:\Program Files\Firebird, then the following value will restrict the server to
            accessing external libraries only if they are located in
            C:\Program Files\Firebird\userdata\ExternalModules:</para>
            <literallayout class="monospaced">
  UDFAccess = Restrict userdata\ExternalModules
            </literallayout>

            <para><emphasis>None</emphasis> disallows all use of user-defined external libraries.</para>
            <para><emphasis>Full</emphasis> permits external libraries to be accessed anywhere on the system.</para>
          </blockquote>

          <caution>
            <para>Avoid setting up custom directory trees for UdfAccess and ExternalFileAccess such that they
            share a parent tree-root.  The default settings are safe.  If you are setting up your own and you
            don't make separated directory trees for them, the server can be easily hacked to execute unauthorised
            code.   An example of what to avoid:</para>
            <literallayout class="monospaced">
  UdfAccess = UDF; /bad_dir
  ExternalFileAccess = /external; /bad_dir/files
            </literallayout>
            <para>UdfAccess &amp; ExternalFileAccess here have a common sub-tree, /bad_dir/files, where someone
            could place his external file /bad_dir/files/hackudf.so and execute his own code on the compromised
            system.</para>
          </caution>
        </listitem></varlistentry>
      </variablelist>

      </section>

      <section id="config-fb-conf-params-rsrc"><!-- Level 3 section -->
      <title>Resource-related</title>
      <variablelist>
        <varlistentry><term>CpuAffinityMask</term>
        <listitem>
          <para>(was cpu_affinity in isc_config/ibconfig).  With Firebird SuperServer on Windows, there is a
          problem with the operating system continually swapping the entire SuperServer process back and forth
          between processors on SMP machines. This ruins performance. This parameter can be used on SMP systems on
          Windows to set Firebird SuperServer's processor affinity to a single CPU.</para>

          <caution>
            <para>Firebird Superservers, up to and including Release 1.5, may not support the Hyperthreading
            feature of some later-model motherboards on Windows.  To avoid balancing problems, you may need to
            disable hyperthreading at system BIOS level.</para>
          </caution>

          <para>CpuAffinityMask takes one integer, the CPU mask.</para>

          <para><emphasis role="bold">Example</emphasis></para>
          <literallayout class="monospaced">
     CpuAffinityMask = 1
          </literallayout>
          <para>only runs on the first CPU (CPU 0).</para>
          <literallayout class="monospaced">
     CpuAffinityMask = 2
          </literallayout>
          <para>only runs on the second CPU (CPU 1).</para>
          <literallayout class="monospaced">
     CpuAffinityMask = 3
          </literallayout>
          <para>runs on both first and second CPU.</para>

          <para><emphasis role="bold">Calculating the affinity mask value</emphasis></para>
          <para>You can use this flag to set Firebird's affinity to any single processor or (on Classic server)
          any combination of the CPUs installed in the system.</para>
          <para>Consider the CPUs as an array numbered from 0 to n-1, where n is the number of processors installed
          and i is the array number of a CPU.  M is another array, containing the MaskValue of each selected CPU.
          The value A is the sum of the values in M.</para>
          <para>Use the following formula to arrive at M and calculate the MaskValue A:</para>
          <literallayout class="monospaced">
    Mi = 2I
    A = M1 + M2 + M3. . .
          </literallayout>

          <para>For example, to select the first and fourth processors (processor 0 and processor 3) calculate
          as follows:</para>
          <literallayout class="monospaced">
    A = 20 + 23 = 1 + 8 = 9
          </literallayout>
        </listitem></varlistentry>

        <varlistentry><term>DeadlockTimeout</term>
        <listitem>
          <para>(was deadlock_timeout in isc_config/ibconfig).  Number of seconds (integer) that the lock manager
          will wait after a conflict has been encountered,  before purging locks from dead processes and doing a
          further deadlock scan cycle. Normally, the engine detects deadlocks instantly.  The deadlock timeout
          kicks in only if something goes wrong.</para>
          <para>The default of 10 seconds is about right for most conditions.  Setting it lower does not
          necessarily improve the speed with which problem deadlocks return a conflict exception.  If it is too
          low, the effect may be unnecessary extra scans which degrade system performance.</para>
        </listitem></varlistentry>

        <varlistentry><term>DefaultDbCachePages</term>
        <listitem>
          <para>(was database_cache_pages in isc_config/ibconfig).  Server-wide default (integer) number of 
          database pages to allocate in memory, per database. The configured value can be overridden at database
          level.</para>
          <para>The default value for SuperServer is 2048 pages.  For Classic, it is 75.</para>
          <para>SuperServer and Classic use the cache differently.  SS pools its cache for use by all
          connections;  Classic allocates a static cache to each connection.</para>
        </listitem></varlistentry>

        <varlistentry><term>EventMemSize</term>
        <listitem>
          <para>Integer, representing number of bytes of memory reserved for the event manager.  Default is
          65536 (64 Kb).</para>
        </listitem></varlistentry>

        <varlistentry><term>LockAcquireSpins</term>
        <listitem>
          <para>(was lock_acquire_spins).  Relevant only on SMP machines running Classic server.  In Classic 
          server, only one client process may access the lock table at any time.  A mutex governs access to the 
          lock table.  Client processes may request the mutex conditionally or unconditionally.  If it is 
          conditional, the request fails and must be retried.  If it is unconditional, the request will wait 
          until it is satisfied. LockAcquireSpins establishes the number of attempts that will be made if the mutex 
          request is conditional.</para>
          <para>Integer.  The default is 0 (unconditional).  There is no recommended minimum or maximum.</para>
        </listitem></varlistentry>

        <varlistentry><term>LockHashSlots</term>
        <listitem>
          <para>(was lock_hash_slots in isc_config/ibconfig).  Use this parameter for tuning the lock hash list.  
          Under heavy load, throughput might be improved by raising the number of hash slots to disperse the list 
          in shorter hash chains.</para>
          <para>Integer-prime number values are recommended.  The default is 101.</para>
        </listitem></varlistentry>

        <varlistentry><term>LockGrantOrder</term>
        <listitem>
          <para>(was lock_grant_order in isc_config/ibconfig).  When a connection wants to lock an object, it gets 
          a lock request block which specifies the object and the lock level requested. Each locked object has a 
          lock block. Request blocks are connected to those lock blocks either as requests that have been granted,
          or as pending requests.</para>
          <para>The LockGrantOrder parameter is a Boolean.  The default (1=True) indicates that locks are to be 
          granted on a first-come-first-served basis.  The False setting (0), emulating InterBase v3.3 behavior, 
          grants the lock as soon as it becomes available.  It can result in lock requests 
          being &quot;starved&quot;.</para>
        </listitem></varlistentry>

        <varlistentry><term>LockMemSize</term>
        <listitem>
          <para>This integer parameter represents the number of bytes of shared memory allocated for the lock 
          manager.  For a Classic server, the LockMemSize gives the initial allocation, which will grow 
          dynamically until memory is exhausted (&quot;Lock manager is out of room&quot;). If there are a lot of 
          connections or big page caches, increase this parameter to avoid these errors.</para>
          
          <para>In SuperServer, the memory allocated for the lock manager does not grow.</para>
          
          <para>The default size on Linux and Solaris is 98304 bytes (96 Kb). On Windows, it is 262144 (256 Kb).</para>
        </listitem></varlistentry>

        <varlistentry><term>LockSemCount</term>
        <listitem>
          <para>Integer parameter, specifying the number of semaphores available for interprocess communication 
          (IPC).  The default is 32.  Set this parameter in non-threading environments to raise or lower the number 
          of available semaphores.</para>
        </listitem></varlistentry>

        <varlistentry><term>SortMemBlockSize</term>
        <listitem>
          <para>This parameter allows you to configure, in bytes, the size of each memory block used by the 
          in-memory sorting module.  The installation default is 1 Mb; you can reconfigure it to any size up to 
          the currently configured maximum value set by the SortMemUpperLimit parameter (see below).</para>
        </listitem></varlistentry>

        <varlistentry><term>SortMemUpperLimit</term>
        <listitem>
          <para>The maximum amount of memory, in bytes, to be allocated by the in-memory sorting module.   The 
          installation default is 67108864 bytes (64 Mb) for SuperServer and 8388608 (8 Mb) for the Classic 
          server.</para>

          <caution>
            <para>For Classic, bear in mind that increasing either the block size or the maximum limit affects
            each client connection/server instance and will ramp up the server's memory consumption accordingly.</para>
          </caution>
        </listitem></varlistentry>
      </variablelist>
      </section>

      <section id="config-fb-conf-params-comms"><!-- Level 3 section -->
      <title>Communications-related</title>

      <variablelist>
        <varlistentry><term>ConnectionTimeout</term>
        <listitem>
          <para>(was connection_timeout in isc_config/ibconfig).  Number of seconds to wait before abandoning an
          attempt to connect. Default 180.</para>
        </listitem></varlistentry>

        <varlistentry><term>DummyPacketInterval</term>
        <listitem>
          <para>(was dummy_packet_interval in isc_config/ibconfig).  This is the number of seconds (integer) the
          server should wait on a silent client connection before sending  dummy packets to request
          acknowledgment.</para>

          <warning>
            <para>DO NOT USE THIS OPTION on a Win32 server running TCP/IP clients. It causes a persistent increase 
            in usage of kernel non-paged memory which may hang or crash Windows on the client side as explained at 
            <ulink url="http://support.microsoft.com/default.aspx?kbid=296265">http://support.microsoft.com/default.aspx?kbid=296265</ulink>.</para>
          </warning>

          <para>Win32-with-TCP/IP apart, it's the only way to detect and disconnect inactive clients when either
          NamedPipes (NetBEUI), XNET or IPC protocols are used.  There are no known issues on POSIX systems.</para>

          <para>Normally, Firebird uses the <firstterm>SO_KEEPALIVE</firstterm> socket option to keep track of
          active connections. If you do not like the default two-hour keepalive timeout, adjust your server OS
          settings appropriately:</para>
          <itemizedlist>
            <listitem>
              <para>On UNIX-like OS's, modify the contents of /proc/sys/net/ipv4/tcp_keepalive_*.</para>
            </listitem>
            <listitem>
              <para>On Windows, follow instructions in <ulink url="http://support.microsoft.com/default.aspx?kbid=140325">
              this article</ulink>.</para>
            </listitem>
          </itemizedlist>

          <para>Default should be 0 - not 60 which was the old default in Firebird 1.0 and most of the 1.5
          release candidates.  A setting of 60 should be treated as the default on systems where you need to make
          use of this dummy packet polling.</para>
        </listitem></varlistentry>

        <varlistentry><term>RemoteServiceName</term>
        <listitem>
          <para>Default = gds_db.  See RemoteServicePort, next.</para>
        </listitem></varlistentry>

        <varlistentry><term>RemoteServicePort</term>
        <listitem>
          <para>These two parameters provide the ability to override either the TCP/IP service name or the TCP/IP 
          port number used to listen for client database connection requests, if one of them differs from the 
          installed defaults (gds_db/tcp 3050).</para>
          <para>Change one of the entries, not both.  The RemoteServiceName is checked first for a matching entry 
          in the services file.  If there is a match, the port number configured for  RemoteServicePort is used.  
          If there is not a match, then the installation default, port 3050, is used.</para>
          <note>
            <para>If a port number is provided in the TCP/IP connection string, it will always take precedence 
            over RemoteServicePort.</para>
          </note>
        </listitem></varlistentry>

        <varlistentry><term>RemoteAuxPort</term>
        <listitem>
          <para>The inherited InterBase behavior, of passing event notification messages back to the network layer 
          through randomly selected TCP/IP ports, has been a persistent source of network errors and conflicts 
          with firewalls, sometimes to the extent of causing the server to crash under some conditions. This 
          parameter allows you to configure a single TCP Port for all event notification traffic.</para>
          
          <para>The installation default (0) retains the traditional random port behaviour. To dedicate one 
          specific port for event notifications, use an integer which is an available port number.</para>
        </listitem></varlistentry>

        <varlistentry><term>RemoteBindAddress</term>
        <listitem>
          <para>By default, clients may connect from any network interface through which the host server accepts 
          traffic.  This parameter allows you to bind the Firebird service to incoming requests through one
          NIC and to reject connection requests from any other network interfaces.  This should help to overcome 
          problems in some subnetworks where the server is handling traffic through multiple NICs.</para>
          <para>String, in a valid dotted IP format.  Default value (not bound) is no value.</para>
        </listitem></varlistentry>

        <varlistentry><term>TcpRemoteBufferSize</term>
        <listitem>
          <para>The engine reads ahead of the client and can send several rows of data in a single packet. The 
          larger the packet size, the more rows are sent per transfer. Use this parameter-with caution and complete 
          comprehension of its effects on network performance!-if you need to enlarge or reduce the TCP/IP packet 
          size for send and receive buffers.  It affects both the client and server.</para>
          <para>Value is an integer (size of packet in bytes) in the range 1448 to 32768.  The installation 
          default is 8192.</para>
        </listitem></varlistentry>
      </variablelist>
      </section>

      <section id="config-fb-conf-params-posix"><!-- Level 3 section -->
      <title>POSIX-specific</title>
      
      <variablelist>
        <varlistentry><term>LockSignal</term>
        <listitem>
          <para>Integer parameter, UNIX signal to use for interprocess communication.  Default:  16</para>
        </listitem></varlistentry>

        <varlistentry><term>RemoteFileOpenAbility</term>
        <listitem>
          <warning>
            <para>USE ONLY WITH EXTREME CAUTION</para>
            <para>Boolean parameter which, if set True, allows the engine to open database files which reside on 
            a networked filesystem (NFS) mounted partition.  Because the filesystem is beyond the control of the 
            local system, this is a very risky feature that should not be enabled for the purpose of opening any 
            read/write database whose survival matters to you.</para>
          </warning>
          <para>The default is 0 (False, disabled) and you should leave it that way unless you are very clear 
          about its effects.</para>
        </listitem></varlistentry>

        <varlistentry><term>TcpNoNagle</term>
        <listitem>
          <para>(was tcp_no_nagle in isc_config/ibconfig).  On Linux, by default, the socket library will minimize 
          physical writes by buffering writes before actually sending the data, using an internal algorithm 
          (implemented as the TCP_NODELAY option of the socket connection) known as Nagle's Algorithm. It was 
          designed to avoid problems with small packets, called <firstterm>tinygrams</firstterm>, on
          slow networks.</para>
          <para>By default, TCP_NODELAY is enabled (value 0) when Firebird Superserver is installed on Linux.  
          On slow networks, disabling it can actually improve speed.</para>
          <tip>
            <para>Watch out for the double negative--set the parameter True to disable TCP_NODELAY and False to 
            enable it.</para>
          </tip>
          <para>In releases up to and including v.1.5, this feature is active only for Superserver.</para>
        </listitem></varlistentry>
      </variablelist>
      </section>

      <section id="config-fb-conf-params-win"><!-- Level 3 section -->
      <title>Windows-specific</title>
      
      <variablelist>
        <varlistentry><term>CreateInternalWindow</term>
        <listitem>
          <para>The &quot;Windows local&quot; protocol uses a hidden window for inter-process communication between 
          the local client and the server.  This IPC window is created at server startup when CreateInternalWindow 
          is true (1, the default). Set it to 0 (off) to run the server without a window and thus to disable local
          protocol.</para>
          <para> With local protocol disabled, it is possible to run multiple instances of the server
          simultaneously.</para>
        </listitem></varlistentry>

        <varlistentry><term>DeadThreadsCollection</term>
        <listitem>
          <para>A setting for the thread scheduler on Windows, this integer parameter establishes the number of 
          priority switching cycles (see PrioritySwitchDelay, below) that the scheduler is to execute before a 
          thread is destroyed (or closed).</para>
          <para>Immediate destruction (or closure) of worker threads would require a semaphore and blocking call, 
          generating significant overhead.  Instead, a thread scheduler maintains threads in a pool. When a thread 
          has completed its task, it is marked as idle.  The idle thread is destroyed (or closed) after n 
          iterations of the scheduler loop, where n is the value of the DeadThreadsCollection parameter.</para>
          <para>For a server handling a very large number of connections--in the high hundreds or more--the 
          parameter value will need to be raised from its default setting of 50.</para>
        </listitem></varlistentry>

        <varlistentry><term>GuardianOption</term>
        <listitem>
          <para>Boolean parameter used on Windows servers to determine whether the Guardian should restart the
          server every time it terminates abnormally.  The installation default is to do so (1=True).
          To disable the restart behavior, set this parameter off (0=False).</para>
        </listitem></varlistentry>

        <varlistentry><term>IpcMapSize</term>
        <listitem>
          <para>(was server_client_mapping in ibconfig).  Size in bytes of one client's portion of the
          memory-mapped file used for interprocess communication (IPC) in the connection model used for
          &quot;Windows local&quot; connection.  It has no equivalent on other platforms.</para>

          <para>Integer, from 1024 to 8192.  The default is 4096.</para>
          <para>Increasing the map size may improve performance when retrieving very wide or large data row sets,
          such as those returning graphics BLOBs.</para>
          <note>
            <para>NOTE  This can no longer be modified in the Guardian's system tray icon dialog.</para>
          </note>
        </listitem></varlistentry>

        <varlistentry><term>IpcName</term>
        <listitem>
          <para>Default value: FirebirdIPI</para>
          <para>The name of the shared memory area used as a transport channel in local protocol.</para>
          <important>
            <para>The Release 1.5 default value--FirebirdIPI--is not compatible with older releases of Firebird 
            nor with InterBase&reg;.  Use the value InterBaseIPI to restore compatibility, if necessary.</para>
          </important>
        </listitem></varlistentry>

        <varlistentry><term>MaxUnflushedWrites</term>
        <listitem>
          <para>This parameter was introduced in Version 1.5 to handle a bug in the Windows server operating 
          systems, whereby asynchronous writes were never flushed to disk except when the Firebird server underwent 
          a controlled shutdown. (Asynchronous writes are not supported in Windows 9x or ME.)  Hence, on 24/7 
          systems, asynchronous writes were never flushed at all.</para>
          <para>This parameter determines how frequently the withheld pages are flushed to disk when Forced Writes 
          are disabled (asynchronous writing is enabled).  Its value is an integer which sets the number of pages
          to be withheld before a flush is flagged to be done next time a transaction commits.</para>
          <para>Default is 100 in Windows installations and -1 (disabled) in installations for all other
          platforms.</para>
          <para>If the end of the MaxUnflushedWriteTime cycle (see below) is reached before the count of withheld
          pages reaches the MaxUnflushedWrites count, the flush is flagged immediately and the count of withheld
          pages is reset to zero.</para>
        </listitem></varlistentry>

        <varlistentry><term>MaxUnflushedWriteTime</term>
        <listitem>
          <para>This parameter determines the maximum length of time that pages withheld for asynchronous writing 
          are flushed to disk when Forced Writes are disabled (asynchronous writing is enabled).  Its value is an 
          integer which sets the interval, in seconds, between the last flush to disk and the setting of a flag to 
          perform a flush next time a transaction commits.  Default is 5 seconds in Windows installations 
          and -1 (disabled) in installations for all other platforms.</para>
        </listitem></varlistentry>

        <varlistentry><term>PrioritySwitchDelay</term>
        <listitem>
          <para>A setting for the thread scheduler on Windows, this integer establishes the time, in milliseconds,
          which is to elapse before the priority of an inactive thread is reduced to  LOW or the priority of an
          active thread is advanced to HIGH.  One iteration of this switching sequence represents one thread
          scheduler cycle.</para>
          <para>The default value is 100 ms, chosen on the basis of experiments on Intel PIII/P4 processors.
          For processors with lower clock speeds, a longer delay will be required.</para>
        </listitem></varlistentry>

        <varlistentry><term>PriorityBoost</term>
        <listitem>
          <para>Integer, sets the number of extra cycles given to a thread when its priority is switched to HIGH.
          The installation default is 5.</para>
        </listitem></varlistentry>

        <varlistentry><term>ProcessPriorityLevel</term>
        <listitem>
          <para>(was server_priority_class in ibconfig).  Priority level/class for the server process.  This 
          parameter replaces the server_priority_class parameter of pre-1.5 releases-see below-with a new 
          implementation.</para>
          <para> The values are integer, as follows:</para>
          <itemizedlist>
            <listitem>
              <para>0 - normal priority</para>
            </listitem>
            <listitem>
              <para>positive value - high priority (same as -B[oostPriority] switch on instsvc.exe configure and
              start options)</para>
            </listitem>
            <listitem>
              <para>negative value - low priority</para>
            </listitem>
          </itemizedlist>

          <note>
            <para>All changes to this value should be carefully tested to ensure that they actually cause the
            engine to be more responsive to requests.</para>
          </note>
        </listitem></varlistentry>

        <varlistentry><term>RemotePipeName</term>
        <listitem>
          <para>Applicable only for NetBEUI connections.</para>
          <para>String parameter, the name of the pipe used as a transport channel in NetBEUI protocol.
          The named pipe is equivalent to a port number for TCP/IP.
          The default value--<emphasis>interbas</emphasis>-- is compatible with older releases of Firebird and
          with InterBase&reg;.</para>
        </listitem></varlistentry>
      </variablelist>
      </section>

      <section id="config-fb-conf-params-sort"><!-- Level 3 section -->
      <title>Related to Sort space</title>
      <para>When the size of the internal sort buffer is too small to accommodate the rows involved in a sort
      operation, Firebird needs to create temporary sort files on the server's filesystem.  By default, it will
      look for the path specified in the environment variable FIREBIRD_TMP .  If that variable is not present,
      it will try to use the root of the /tmp filesystem on Linux/UNIX, or C:\temp on Windows NT/2000/XP.</para>
      <para>None of these locations can be configured for size.</para>

      <para>Firebird provides a parameter for configuring the disk space that will be used for storing these
      temporary files.  It is prudent to use it, to ensure that sufficient sort space will be available under all
      conditions.</para>

      <para>All CONNECT or CREATE DATABASE requests share the same list of temporary file directories and each
      creates its own temporary files. Sort files are released when the sort is finished or the request is
      released.</para>

      <note>
        <para>In Release 1.5, the name of the parameter changed from tmp_directory to TempDirectories and the
        syntax of the parameter value also changed.</para>
      </note>

      <variablelist>
        <varlistentry><term>TempDirectories</term>
        <listitem>
          <para>(replaces tmp_directory entries in isc_config/ibconfig).  Supply a list of one or more directories, 
          separated by semi-colons (;), under which sort files may be stored. Each item may include an optional 
          size argument, in bytes,  to limit its storage.  If the argument is omitted, or is invalid, Firebird 
          will use the space in that directory until it is exhausted, before moving on to the next listed 
          directory.</para>
          
          <para>For example,</para>
          <literallayout class="monospaced">
    Unix: /db/sortfiles1 100000000;/firebird/sortfiles2
    Windows:  E:\sortfiles 500000000
          </literallayout>

          <para>Relative paths are treated as relative to the path that the running server recognizes as the
          root directory of the Firebird installation.  For example, on Windows, if the root directory is
          C:\Program Files\Firebird, then the following value will tell the server to store temporary files in
          C:\Program Files\Firebird\userdata\sortfiles, up to a limit of 500 Mb:</para>

          <literallayout class="monospaced">
    TempDirectories = userdata\sortfiles 500000000
          </literallayout>

          <note>
            <para>No quoted paths (as was required in Firebird 1.0).</para>
          </note>
        </listitem></varlistentry>
      </variablelist>
      </section>

      <section id="config-fb-conf-params-compat" xreflabel="Compatibility Parameters"><!-- Level 3 section -->
      <title>Compatibility</title>

      <variablelist>
        <varlistentry><term>CompleteBooleanEvaluation</term>
        <listitem>
          <para>Establishes the Boolean evaluation method (complete or shortcut).  The default (0=False) is
          to &quot;short-cut&quot; a Boolean evaluation expression involving the AND or OR predicates by returning
          as soon as a result of True or False is obtained that cannot be affected by the results of any
          further evaluation.</para>
          <para>Under very rare (usually avoidable) conditions, it might happen that an operation inside an OR or
          an AND condition that remains unevaluated due to the shortcut behavior has the potential to affect the
          outcome of the original result.  If you have the misfortune to inherit an application that has such
          characteristics in its SQL logic, you might wish to use this parameter to force complete evaluation
          until you have the opportunity to perform surgery on it.</para>
          <para>Parameter type is Boolean.</para>
          <important>
            <para>Don't overlook the fact that this flag affects all Boolean evaluations performed in any
            databases on the server.</para>
          </important>
        </listitem></varlistentry>

        <varlistentry><term>OldParameterOrdering</term>
        <listitem>
          <para>Version 1.5 addressed and fixed an old InterBase bug that caused output parameters to be returned
          to the client with an idiosyncratic ordering in the XSQLDA structure.  The bug was of such longevity
          that many existing applications, drivers and interface components have built-in workarounds to correct
          the problem on the client side.</para>

          <para>Releases 1.5 and later reflect the corrected condition in the API and are installed with
          OldParameterOrdering=0 (False).  Set this Boolean parameter True if you need to revert to the old
          condition for compatibility with existing code.</para>

          <important>
            <para>Don't overlook the fact that this setting affects all databases on the server and will potentially
            produce exceptions or wrong results if set on in an environment where applications are not compensating
            for the expected bug.</para>
          </important>
        </listitem></varlistentry>
        
        <varlistentry><term>OldColumnNaming</term>
        <listitem>
          <para><emphasis role="bold">New parameter added at v.1.5.3</emphasis></para>

          <para>This parameter allow users to revert to pre-V1.5 column naming behaviour in SELECT expressions.  If 
          this parameter changed from its default 0 setting, the engine will not attempt to supply run-time 
          identifiers, e.g. <function>CONCATENATION</function> for derived fields where the developer has neglected 
          to provide identifiers.</para>

          <important>
            <para>This setting affects all databases on the server and will potentially produce exceptions or 
            unpredicted results where mixed applications are implemented.</para>
          </important>
        </listitem></varlistentry>

      </variablelist>
      </section>
    </section>
  </section>
<!--  -->
  <section id="config-db-alias" xreflabel="Database File Aliasing"><!-- Level 1 section -->
  <title>Database File Aliasing</title>
  <para>Firebird release 1.5 introduced database file aliasing to improve the portability of applications and to
  tighten up control of both internal and external database file access.</para>
    <section id="config-db-alias-conf"><!-- Level 2 section -->
    <title>Aliases.conf</title>
    <para>Configure database file aliases in the text file <firstterm>aliases.conf</firstterm>, located in the
    root directory of your Firebird server installation.  The installed aliases.conf looks similar to this:</para>

    <programlisting>
  #
  # List of known database aliases
  # ------------------------------
  #
  # Examples:
  #
  #   dummy = c:\data\dummy.fdb   
  #
    </programlisting>

    <para>As in all of Firebird's configuration files, the '#' symbols are comment markers.  To configure an alias,
    simply delete the '#' and change the dummy line to the appropriate database path:</para>
    <programlisting>
  # fbdb1 is on a Windows server:
  fbdb1 = c:\Firebird\sample\Employee.fdb
  # fbdb2 is on a Linux server
  fbdb2 = /opt/databases/killergames.fdb
  #
    </programlisting>
    <para>You can edit aliases.conf whilst the server is running.  There is no need to stop and restart the server 
    in order for new aliases.conf entries to be recognised.</para>
    </section>

    <section id="config-db-alias-path"><!-- Level 2 section -->
    <title>Connecting using an aliased path</title>
    <para>The modified connection string in your client application looks like this:</para>
    <literallayout class="monospaced">    Server_name:aliasname</literallayout>
    <para>With the example above, the following connection string will ask the Firebird server running on a Linux
    box named &quot;myserver&quot; to find and connect the client to the database at the path identified in
    aliases.conf as &quot;fbdb2&quot;:</para>

    <literallayout class="monospaced">    myserver:fbdb2</literallayout>
     <note>
      <para>Because the gstat tool does not use a database connection to read the database file, a full path
      is still required for using gstat. (This may change).</para>
    </note>
    </section>
  </section>
</chapter>