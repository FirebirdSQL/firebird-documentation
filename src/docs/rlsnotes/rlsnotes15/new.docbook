<chapter id="new">
  <chapterinfo>
    <title>New Features in Firebird 1.5</title>
  </chapterinfo>

  <section id="new-codebase"><!-- Level 1 section -->
  <title>New Codebase, Better Optimization</title>
  <para>This release was built from code ported from the original C to C++, a process begun by Mike Nordell back in
  2000.  Extensive code cleanup and bug-fixing has continued, along with new memory management and language
  enhancements.  Not least, during the v.1.5 development process, the SQL query optimizer has undergone enhancements
  and fixes at the hands of Arno Brinkman and others, resulting in reported speed improvement of 30 to 60 percent
  and more.</para>
  </section><!-- level 1 -->

  <section id="new-arch"><!-- Level 1 section -->
  <title>Architecture</title>
  <para>Two significant new additions for Windows platforms are <firstterm>Classic</firstterm> server and
  <firstterm>embedded</firstterm> server.</para>

  <para><emphasis>Note that</emphasis></para>
  <itemizedlist>
    <listitem><para><!-- this para updated January 2008, after distribution of the 1.5.5 release -->Before Firebird 1.5, 
    there had not been a Classic server on Windows for nearly eight years.  This one can utilize multiple processors, 
    something which still eludes the Windows Superserver.  Although regarded as experimental initially, the reborn 
    Classic model for Windows has proven its mettle.</para>
    <para>&nbsp;</para></listitem>
    <listitem><para>Embedded server is a dll that merges a single client attachment with a Firebird Superserver for
    building very quick and efficient stand-alone and briefcase applications.</para></listitem>
  </itemizedlist>
  </section><!-- level 1 -->

  <section id="new-sql"><!-- Level 1 section -->
  <title>SQL Language</title>
  <para>Several important new language features have been added since version 1.0.x, including the SQL-92 conditonal
  expression functions CASE, COALESCE and NULLIF.  For syntax of these and other new language implementations,
  please refer to the Language Enhancements section later in this document.</para>
  </section><!-- level 1 -->

  <section id="new-modules"><!-- Level 1 section -->
  <title>Installed Modules and Security</title>
  <para>If you have been using Firebird 1.0.x until now, you will notice big changes in the names of modules and
  the rules for accessing and locating them.  Following are some highlights;  for detailed information on
  installation, disk layout and configuration, see the relevant section in this document.</para>

  <orderedlist>
    <listitem><para>Most modules and constants have been renamed.  In most cases, the new names involve some
    variant of <quote>firebird</quote> or <quote>fb</quote>.  For example, the API library is now located in a
    shared library named <quote>fbclient.dll</quote> on Windows and <quote>libfbclient.so</quote>
    or <quote>libfbembed.so</quote> on other platforms.</para>
    <para>The exception that breaks the rule is the security database, formerly named <quote>isc4.gdb</quote>, which
    is now called <quote>security.fdb</quote>.</para><para>&nbsp;</para></listitem>

    <listitem><para>External files used by the server (UDF libraries, BLOB filters, character set libraries,
    external tables) are now subject to levels of filesystem protection that, in some cases, default to a level that
    will be different to what you had under Firebird 1.0.x or InterBase.</para><para>&nbsp;</para></listitem>

    <listitem><para>The new server configuration file, <firstterm>firebird.conf</firstterm>, that replaces ibconfig
    (Windows) and isc_config (other platforms) contains several new configurable features along with improved
    self-documentation and organisation.</para><para>&nbsp;</para></listitem>

    <listitem><para>A database-aliasing feature comes in 1.5.  Now you can optionally <quote>soft-code</quote> the
    database location into your application code using your choice of alias to replace the path string.  Actual path
    locations are stored in a text file, <firstterm>aliases.conf</firstterm>.  The main purpose of aliasing, however,
    is to protect your physical paths from being maliciously <quote>sniffed</quote> on the
    wire.</para><para>&nbsp;</para></listitem>

    <listitem><para>The default (and past practice) on Windows server platforms makes it that the
    <emphasis>localsystem</emphasis> user runs the program that installs the Firebird service at system start-up.
    This could be a serious security vulnerability if the Firebird server should be hacked, since it provides a
    window through which the hacker can access the entire machine.  The 1.5 version of this program
    (<literal>instsvc.exe</literal>) now accepts a Windows user log-on for the service installation.  It is strongly
    recommended that you create a Firebird user for this purpose and make use of the new logon feature if your
    server is connected to the Internet in any way.</para></listitem>
  </orderedlist>
  </section><!-- level 1 -->

  <section id="new-more"><!-- Level 1 section -->
  <title>More Improvements</title>

    <section id="new-trimming"><!-- Level 2 section -->
    <title>Trimming of Varchar fields for Remote Protocols</title>
    <para>Work was resumed and completed on this tricky feature for the 1.5 client and varchars now cross the wire
    right-trimmed to actual length plus two bytes.</para>

    <note>
    <para>As it is the client that requests the server to trim varchars, the Firebird 1.5 client (fbclient.dll or
    libfbclient.so) will trim, even if connected to a pre-1.5 server version.  If you use an old client, you will not
    get trimming, even if you are connected to a 1.5 or later server.</para>
    </note>
    </section><!-- level 2 -->

    <section id="new-trigger"><!-- Level 2 section -->
    <title>Multi-action Trigger Semantics</title>
    <para>Now you can write conditional insert/update/delete actions in one Before or After trigger to have the one
    trigger cover all DML actions for that trigger's phase.  This cuts down the composition and maintenance of triggers
    without deprecating the ability to have multiple triggers per phase.</para>
    </section><!-- level 2 -->

    <section id="new-constraints"><!-- Level 2 section -->
    <title>Enhancement to Named Constraints</title>
    <para>Indexes that enforce named integrity constraints may now be named with user-defined identifiers.</para>

    <caution>
    <para>If you use this feature, your database will not be downgradable to v.1.0.x or InterBase&reg;.</para>
    </caution>
    </section><!-- level 2 -->

    <section id="new-index"><!-- Level 2 section -->
    <title>Maximum Indexes per Table Increased</title>
    <para>Now-in both Release 1.0 and this release-the maximum number of indexes you can define for a table has been
    increased from 64 to 256.</para>
    </section><!-- level 2 -->

    <section id="new-pess"><!-- Level 2 section -->
    <title>Pessimistic Locking</title>
    <para>For the rare times when you need to impose a pessimistic lock, this release adds syntax to place
    a <quote>reader's lock</quote> on rows as they are output to the client.  Use with care.</para>
    </section><!-- level 2 -->

    <section id="new-secur"><!-- Level 2 section -->
    <title>Security Database Connection Caching</title>
    <para>Connection to the security database is cached in Superserver builds. It means that
    <function>security.fdb</function> is loaded when the first connection is made and stays attached until all
    client connections are gone.</para>
    </section><!-- level 2 -->

    <section id="new-error"><!-- Level 2 section -->
    <title>Error-reporting Improvements</title>
    <para>Where possible, error messages report the cause of SQL errors at a more detailed level.  It is IMPORTANT
    to note that you will encounter bizarre messages if you use an old <function>interbase.msg</function> or
    <function>firebird.msg</function> file.</para>
    </section><!-- level 2 -->

    <section id="new-sapi"><!-- Level 2 section -->
    <title>Services API on Classic for Linux</title>
    <para>Limited support for the Services API is now available on Classic server on Linux. Services available from
    <function>gbak</function> (backup/restore) and <function>gfix</function> (validate database, shutdown/online,
    etc.) work. Others (gstat, server logs, etc.) were not tested and are probably non-functional.</para>
    </section><!-- level 2 -->
  </section><!-- level 1 -->

  <section id="new-client"><!-- Level 1 section -->
  <title>Changes in the Client Libraries</title>

    <section id="new-client-win"><!-- Level 2 section -->
    <title>Windows clients</title>
    <para>The client library is now named <quote>fbclient.dll</quote>. All server utilities (gbak, gfix, etc) use
    only the client library fbclient.dll. Connect new applications to fbclient.dll, without requiring gds32.dll (
    recommended).</para>

      <section id="new-client-win-compat"><!-- Level 3 section -->
      <title><quote>Compatibility</quote> Client</title>
      <para>For compatibility with existing applications, it is possible to generate a <quote>clone</quote> of
      fbclient.dll with the name <quote>gds32.dll</quote> using a new utility named
      <firstterm>instclient.exe</firstterm>.  For exact details, see the installation section and any late installation
      notes distributed with your Windows kit.</para>
      </section><!-- level 3 -->
    </section><!-- level 2 -->

    <section id="new-client-lin"><!-- Level 2 section -->
    <title>Linux clients</title>
    <para>The Superserver client library is now named <quote>libfbclient.so</quote>.  For compatibility with existing
    applications, a symlink <quote>libgds.so</quote> is installed that points back to libfbclient.so.  The local
    client library for embedded applications connecting to Classic server has been renamed to libfbembed.so.</para>
    </section><!-- level 2 -->
  </section><!-- level 1 -->

  <section id="new-renamed" xreflabel="Renamed Files and Modules"><!-- Level 1 section -->
  <title>Renamed Files and Modules</title>
    <section id="new-renamed-all">
    <title>All Platforms</title>
  <informalfigure>
  <mediaobject>
    <imageobject float="0">
      <!-- imagedata fileref="images/modls_all.png" width="632" depth="414"></imagedata -->
      <imagedata fileref="images/modls_all.png" width="6.6in" depth="4.3in"></imagedata>
    </imageobject>
  </mediaobject>
  </informalfigure>
    </section>

    <section id="new-renamed-posix">
    <title>All POSIX Platforms</title>
  <informalfigure>
  <mediaobject>
    <imageobject float="0">
      <!-- imagedata fileref="images/modls_lin.png" width="632" depth="352"></imagedata -->
      <imagedata fileref="images/modls_lin.png" width="6.6in" depth="3.7in"></imagedata>
    </imageobject>
  </mediaobject>
  </informalfigure>
    </section>

    <section id="new-renamed-win">
    <title>32-bit Windows Platforms</title>
  <informalfigure>
  <mediaobject>
    <imageobject float="0">
      <!-- imagedata fileref="images/modls_win.png" width="632" depth="523"></imagedata -->
      <imagedata fileref="images/modls_win.png" width="6.6in" depth="5.6in"></imagedata>
    </imageobject>
  </mediaobject>
  </informalfigure>
    </section><!-- level 2 -->
  </section><!-- level 1 -->

  <section id="rlsnotes153-intro-adds" xreflabel="Firebird 1.5.3 Point Release Additions">
  <sectioninfo>
    <title>Firebird 1.5.3 Point Release Additions</title>
  </sectioninfo>
  <para>The following group of minor enhancements was added to the Firebird v.1.5.3 point release.-</para>
    <section id="rlsnotes153-intro-adds-isql"><!-- level 2 -->
    <sectioninfo>
      <title>(1.5.3) Two ISQL Improvements</title>
      <author><firstname>C. Valderrama,</firstname><surname>D. Ivanov</surname></author>
    </sectioninfo>
    <orderedlist>
      <listitem>
        <para>Command line switch -b to bail out on error when used in non-interactive mode.</para>
      </listitem>
      <listitem>
        <para>Return an error code to the operating system from command-line isql</para>
      </listitem>
    </orderedlist>
    </section>

    <section id="rlsnotes153-intro-adds-colnames"><!-- level 2 -->
    <sectioninfo>
      <title>(1.5.3) Make Old Column Naming Convention available</title>
      <author><firstname>Paul</firstname><surname>Reeves</surname></author>
    </sectioninfo>
    <para>Added <firstterm>OldColumnNaming</firstterm> parameter to firebird.conf to allow users to revert to
    pre-V1.5 column naming in Select expressions.</para>
    </section>

    <section id="rlsnotes153-intro-adds-diagnostics"><!-- level 2 -->
    <sectioninfo>
      <title>(1.5.3) Security diagnostics added</title>
      <author><firstname>Alex</firstname><surname>Peshkoff</surname></author>
    </sectioninfo>
    <para>Attempts to send signals via a missing gds_relay may be an exploit attempt. They are now logged.</para>
    </section>

    <section id="rlsnotes153-intro-adds-uid"><!-- level 2 -->
    <sectioninfo>
      <title>(1.5.3) Closed an Endemic Security Hole</title>
      <author><firstname>Alex</firstname><surname>Peshkoff</surname></author>
    </sectioninfo>
    <para>Previously, a user could log into a server on a Unix/Linux host remotely, using a Linux UID and
    password accepted on that host. It was recognised as a security hole and fixed in Firebird 2 development.
    It is an endemic security bug in previous versions and InterBase.  The security fix has been back-ported to
    Firebird 1.5.3:  a UID received from the client side is now not trusted.</para>
    </section><!-- level 2 -->
  </section><!-- level 1 -->


  <section id="rlsnotes152-intro" xreflabel="Firebird 1.5.2 Point Release Additions">
  <sectioninfo>
    <title>Firebird 1.5.2 Point Release Additions</title>
  </sectioninfo>
  <para>The following group of minor enhancements was added to the Firebird v.1.5.2 point release.-</para>
    <section id="rlsnotes152-intro-adds-perms"><!-- level 2 -->
    <sectioninfo>
      <title>(1.5.2) Performance improvement for permissions checking</title>
      <author><firstname>N. Samofatov, </firstname><surname>D. Urban</surname></author>
    </sectioninfo>
    <para>Resource lists to check permissions are now computed on the fly as needed. For complex schemas,
    this significantly reduces memory and CPU time consumption.</para>
    </section>

    <section id="rlsnotes152-intro-adds-posix-thread"><!-- level 2 -->
    <sectioninfo>
      <title>(1.5.2) POSIX build and packaging changes</title>
      <author><firstname>Nickolay</firstname><surname>Samofatov</surname></author>
    </sectioninfo>
    <itemizedlist>
      <listitem><para>Work around bugs in GCC 3.3.2 and 3.3.3</para></listitem>
      <listitem><para>Support GCC 3.4 build</para></listitem>
      <listitem><para>Limit exports of Firebird libraries using version script</para></listitem>
      <listitem><para>Link client library and UDF libraries with POSIX threads.  This cures problems with
      single-threaded hosts like PHP linking with libfbclient.so from CS packages</para></listitem>
    </itemizedlist>
    </section>

    <section id="rlsnotes152-intro-adds-posix-startup"><!-- level 2 -->
    <sectioninfo>
      <title>(1.5.2) POSIX improvements, FR # 1027636</title>
      <author><firstname>D. Mullins,</firstname><surname>E. S. LaBianca</surname></author>
    </sectioninfo>
    <para>To prevent the startup status from being overwritten by the next status message, the /etc/init.d/firebird
    script needed to have a line consisting only of &quot;echo&quot; after RETVAL=$?.</para>
    <para>Erik LaBianca extended the Firebird build system to generate source bundles in a generic fashion and
    without autoconf dependency. He uses this facility for his Fedora Core packages.</para>
    </section>

    <section id="rlsnotes152-intro-adds-ib-udf"><!-- level 2 -->
    <sectioninfo>
      <title>(1.5.2) Changes to the standard ib_udf library declaration script</title>
      <author><firstname>Nickolay</firstname><surname>Samofatov</surname></author>
    </sectioninfo>
    <para>The default declarations of the string manipulation routines in ib_udf.sql were altered to accept
    strings with lengths up to 255 characters.</para>
    </section><!-- level 2 -->
  </section><!-- level 1 -->

  <section id="rlsnotes151-intro" xreflabel="Firebird 1.5.1 Point Release Additions">
  <sectioninfo>
    <title>Firebird 1.5.1 Point Release Additions</title>
  </sectioninfo>
  <important>
    <para>These are point release notes that augment the release notes for v.1.5.</para>
  </important>
    <section id="rlsnotes151-intro-adds-nptl">
    <sectioninfo>
      <title>(1.5.1) Introducing NPTL Builds for Higher Linuxen</title>
      <author><firstname>Alex</firstname><surname>Peshkoff</surname></author>
    </sectioninfo>

    <para>Firebird Superserver has a link-time backward compatibility issue with the NPTL (Native POSIX Thread
    Library) that may cause it to be unstable on Linux distributions that enable the NPTL in the GNU C library,
    e.g. Red Hat 9, Mandrake 10, Fedora Core.  The new NPTL builds of Superserver should solve these problems.</para>
    </section>

    <section id="rlsnotes151-intro-adds-sapi">
    <sectioninfo>
      <title>(1.5.1) Services API is now fully supported on Classic</title>
      <author><firstname>Nickolay</firstname><surname> Samofatov</surname></author>
    </sectioninfo>
    <para>Features of GSEC and GSTAT are now supported via the Services API in CS builds. It means that the entire
    Services API now works in both Superserver and Classic architectures.</para>
    <para>Known issue: GSEC doesn't deliver error status vectors to the client side if forked from the CS process.
    Any error will prevent the security database from being changed; but the exception is decoded by the server
    and the appropriate message is delivered via the API communication buffer instead of the status vector.  If
    this situation is not handled properly by the user program, it may cause application-specific errors.</para>

    <para>For example, IBExpert displays the message &quot;unexpected output buffer value&quot;.</para>
    </section>

    <section id="rlsnotes151-intro-adds-gstat">
    <sectioninfo>
      <title>(1.5.1) GSTAT can now connect to localhost</title>
      <author><firstname>Dmitry</firstname><surname>Yemanov</surname></author>
    </sectioninfo>
    <para>GSTAT supported only the local connection string syntax: you could not
    specify &quot;localhost:&lt;path&gt;&quot; to retrieve the statistics for a local database. Since Win32 Classic
    does not yet support the local (IPC) protocol, it wasn't possible to use GSTAT with it. Now GSTAT is fixed to
    enable it.</para>

    <para>You may use either &quot;localhost:&quot; (for TCP/IP) or &quot;\\.\&quot; (for Named Pipes) to work
    around the Win32 Classic limitation.</para>

    <note>
      <para>GSTAT still can not be run over remote databases. Because it has to open a database file directly to
      read the header page, it requires local access to the database file. This might change in a
      future version.</para>
    </note>
    </section>

    <section id="rlsnotes151-intro-adds-charset-none">
    <sectioninfo>
      <title>(1.5.1) Character set NONE data now accepted &quot;as is&quot;</title>
      <author><firstname>J. Beesley,</firstname><surname>N. Samofatov</surname></author>
    </sectioninfo>
    <para>Changes were made in the engine to make the character set NONE more friendly about reading and writing
    data from and to fields (columns, variables) of another character set.</para>
    <para>In Firebird 1.5.0, from a client connected with character set NONE, you could read data in two
    incompatible character sets-such as SJIS (Japanese) and WIN1251(Russian)-even though you could not read one
    of those character sets while connected from a client with the other character set.  Data would be received
    &quot;as is&quot; and be stored without raising an exception.</para>
    <para>However, from this character set NONE client connection, an attempt to update any Russian or Japanese
    data columns using either parameterized queries or literal strings without introducer syntax would fail
    with transliteration errors; and subsequent queries on the stored &quot;NONE&quot; data would similarly
    fail.</para>
    <para>In Firebird 1.5.1, both problems have been circumvented.  Data received from the client in character set
    NONE are still stored &quot;as is&quot; but what is stored is an exact, binary copy of the received string.
    In the reverse case, when stored data are read into this client from columns with specific character sets,
    there will be no transliteration error.  When the connection character set is NONE, no attempt is made in
    either case to resolve the string to well-formed characters, so neither the write nor the read will throw a
    transliteration error.</para>
    <para>This opens the possibility for working with data from multiple character sets in a single database,
    as long as the connection character set is NONE.   The client has full responsibility for submitting strings
    in the appropriate character set and converting strings returned by the engine, as needed.</para>
    <para>Abstraction layers that have to manage this can read the low byte of the <emphasis>sqlsubtype</emphasis>
    field in the XSQLVAR structure, which contains the character set identifier.</para>
    <para>While character set NONE literals are accepted and implicitly stored in the character set of their
    context, the use of introducer syntax to coerce the character sets of literals is highly recommended when the
    application is handling literals in a mixture of character sets. This should avoid the string's being
    misinterpreted when the application shifts the context for literal usage to a different character set.</para>

    <note>
      <para>Coercion of the character set, using the introducer syntax or casting, is still required when
      handling heterogeneous character sets from a client context that is anything but NONE.</para>
      <para><emphasis>Introducer syntax</emphasis></para>
      <literallayout class="monospaced">
  _ISO8859_1 'ààààà'
      </literallayout>
      <para><emphasis>Casting</emphasis></para>
      <literallayout class="monospaced">
  CAST (&lt;string&gt; as varchar(n) character set ISO8859_1)
      </literallayout>
    </note>
    </section>

    <section id="rlsnotes151-intro-adds-coredump">
    <sectioninfo>
      <title>(1.5.1) Optional core dump on exceptions</title>
      <author><firstname>Nickolay</firstname><surname>Samofatov</surname></author>
    </sectioninfo>

    <para>A debugging enhancement was added, to configure the server to abort a server process and produce a core
    dump when bugchecks or structured exceptions occur.  The new parameter in firebird.conf
    is <firstterm>BugcheckAbort</firstterm>.  It is off (=0) by default.</para>

    <para>If turned on, this feature will produce a correct core dump on BUGCHECK or when an external function
    (UDF, BLOB filter, intl2 function) causes havoc. When BugcheckAbort is not enabled, structured exception
    handlers or a synchronous signal handler may mask the original cause of problem.</para>
    </section>

    <section id="rlsnotes151-intro-adds-collate-ltlt">
    <sectioninfo>
      <title>(1.5.1) New collation added for Lithuanian language</title>
      <author><firstname>Jonas</firstname><surname>Jasas Jr</surname></author>
    </sectioninfo>

    <para>Collation sequence LT_LT was added for the ISO8859_13 charset.</para>
    </section>

    <section id="rlsnotes151-intro-adds-instsvc">
    <sectioninfo>
      <title>(1.5.1) Small Win32 installation utility enhancement</title>
      <author><firstname>Olivier</firstname><surname>Mascia</surname></author>
    </sectioninfo>

    <para>The Win32 service installer now adds a description string to the services configuration info.</para>
    </section>
  </section>

  </chapter>