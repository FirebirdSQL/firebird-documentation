  <chapter id="rnfbtwo-ddl">
  <chapterinfo>
    <title>Data Definition Language (DDL)</title>
  </chapterinfo>
    <section id="ddl-syntax"><!-- Level 1 section -->
    <title>New and Enhanced Syntaxes</title>
    <para>The following statement syntaxes and structures have been added to Firebird 2:</para>
      <section id="ddl-syntax-create-sequence"><!-- Level 2 section -->
      <sectioninfo>
        <author><firstname>D.</firstname><surname>Yemanov</surname></author>
        <title>CREATE SEQUENCE</title>
      </sectioninfo>
      <para>SEQUENCE has been introduced as a synonym for GENERATOR, in accordance with SQL-99.  SEQUENCE is a syntax term
 described in the SQL specification, whereas GENERATOR is a legacy InterBase syntax term. Use of the standard
 SEQUENCE syntax in your applications is recommended.</para>
 <para>A sequence generator is a mechanism for generating successive exact
    numeric values, one at a time. A sequence generator is a named schema
    object.  In dialect 3 it is a BIGINT, in dialect 1 it is an INTEGER.</para>
     <para><emphasis role="bold">Syntax patterns</emphasis></para>
     <programlisting>
    CREATE { SEQUENCE | GENERATOR } &lt;name&gt;
    DROP { SEQUENCE | GENERATOR } &lt;name&gt;
    SET GENERATOR &lt;name&gt; TO &lt;start_value&gt;
    ALTER SEQUENCE &lt;name&gt; RESTART WITH &lt;start_value&gt;
    GEN_ID (&lt;name&gt;, &lt;increment_value&gt;)
    NEXT VALUE FOR &lt;name&gt;
     </programlisting>

     <para><emphasis role="bold">Examples</emphasis></para>
     <para>1.</para>
     <programlisting>
   CREATE SEQUENCE S_EMPLOYEE;
     </programlisting>
     <para>2.</para>
     <programlisting>
   ALTER SEQUENCE S_EMPLOYEE RESTART WITH 0;
     </programlisting>
     <!-- Insert cross-reference here -->
     <para>See also the notes about <xref linkend="dml-dsql-nextvalue"/>. </para>
      </section>

      <section id="ddl-syntax-revoke-admin"><!-- Level 2 section -->
      <sectioninfo>
        <author><firstname>D.</firstname><surname>Yemanov</surname></author>
        <title>REVOKE ADMIN OPTION FROM</title>
      </sectioninfo>
      <para>SYSDBA, the database creator or the owner of an object can grant rights on that
object to other users. However, those rights can be made inheritable, too. By using
WITH GRANT OPTION, the grantor gives the grantee the right to become a grantor of
the same rights in turn. This ability can be removed by the original grantor with
REVOKE GRANT OPTION FROM user.</para>

     <para>However, there's a second form that involves roles. Instead of specifying the
same rights for many users (soon it becomes a maintenance nightmare) you can
create a role, assign a package of rights to that role and then grant the role to one or more users.
Any change to the role's rights affect all those users.</para>

      <para>By using WITH ADMIN OPTION, the grantor (typically the role creator) gives the grantee the
right to become a grantor of the same role in turn. Until FB v2, this ability
couldn't be removed unless the original grantor fiddled with system tables directly.
Now, the ability to grant the role can be removed by the original grantor with
REVOKE ADMIN OPTION FROM user.</para>
      </section>

      <section id="ddl-syntax-setdrop"><!-- Level 2 section -->
      <sectioninfo>
        <author><firstname>C.</firstname><surname>Valderrama</surname></author>
        <title>SET/DROP DEFAULT Clauses for ALTER TABLE</title>
      </sectioninfo>
      <para>Domains allow their defaults to be changed or dropped. It seems natural that table fields can be
      manipulated the same way without going directly to the system tables.</para>
      <para><emphasis role="bold">Syntax Pattern</emphasis></para>
      <programlisting>
  ALTER TABLE t ALTER [COLUMN] c SET DEFAULT default_value;
  ALTER TABLE t ALTER [COLUMN] c DROP DEFAULT;
      </programlisting>

      <note><itemizedlist>
      <listitem><para>Array fields cannot have a default value.</para></listitem>
      <listitem><para>If you change the type of a field, the default may remain in place. This is because a field
      can be given the type of a domain with a default but the field itself can override such domain. On the other
      hand, the field can be given a type directly in whose case the default belongs logically to the field
      (albeit the information is kept on an implicit domain created behind scenes).</para></listitem>
      </itemizedlist></note>
      </section>

      <section id="ddl-syntax-exceptions"><!-- Level 2 section -->
      <sectioninfo>
        <author><firstname>D.</firstname><surname>Yemanov</surname></author>
        <title>New Syntaxes for Changing Exceptions</title>
      </sectioninfo>
      <para>The DDL statements RECREATE EXCEPTION and CREATE OR ALTER EXCEPTION
(feature request SF #1167973) have been implemented, allowing either creating, recreating or altering an exception,
depending on whether it already exists.</para>
        <section id="ddl-syntax-recreate-exception"><!-- Level 3 section -->
        <title>RECREATE EXCEPTION</title>
        <para>RECREATE EXCEPTION is exactly like CREATE EXCEPTION if the exception does not already exist.
        If it does exist, its definition will be completely replaced, if there are no dependencies on it.</para>
        </section>
        <section id="ddl-syntax-create-or-alter-exception"><!-- Level 3 section -->
        <title>CREATE OR ALTER EXCEPTION</title>
        <para>CREATE OR ALTER EXCEPTION will create the exception if it does not already exist, or will alter the
        definition if it does, without affecting dependencies.</para>
        </section>
      </section>

      <section id="ddl-syntax-alter-ext-func"><!-- Level 2 section -->
      <sectioninfo>
        <title>ALTER EXTERNAL FUNCTION</title>
        <author><firstname>C.</firstname><surname>Valderrama</surname></author>
      </sectioninfo>
      <para>ALTER EXTERNAL FUNCTION has been implemented, to enable the <function>entry_point</function> or the
      <function>module_name</function> to be changed when the UDF declaration cannot be dropped due to existing
      dependencies.</para>
      </section>

      <section id="ddl-syntax-comment"><!-- Level 2 section -->
      <sectioninfo>
        <title>COMMENT Statement Implemented</title>
        <author><firstname>C.</firstname><surname>Valderrama</surname></author>
      </sectioninfo>
      <para>The COMMENT statement has been implemented for setting metadata descriptions.</para>

      <para><emphasis role="bold">Syntax Pattern</emphasis></para>
      <programlisting>
  COMMENT ON DATABASE IS {'txt'|NULL};
  COMMENT ON &lt;basic_type&gt; name IS {'txt'|NULL};
  COMMENT ON COLUMN tblviewname.fieldname IS {'txt'|NULL};
  COMMENT ON PARAMETER procname.parname IS {'txt'|NULL};
      </programlisting>

      <para>An empty literal string '' will act as NULL since the internal code (DYN in this case) works this way
      with blobs.</para>
      <programlisting>
  &lt;basic_type&gt;:
     DOMAIN
     TABLE
     VIEW
     PROCEDURE
     TRIGGER
     EXTERNAL FUNCTION
     FILTER
     EXCEPTION
     GENERATOR
     SEQUENCE
     INDEX
     ROLE
     CHARACTER SET
     COLLATION
     SECURITY CLASS<superscript>1</superscript>
     </programlisting>
     <para><superscript>1</superscript>not implemented,  because this type is hidden.</para>
      </section>
      <section id="ddl-syntax-view-extension"><!-- Level 2 section -->
      <sectioninfo>
        <title>Extensions to CREATE VIEW Specification</title>
        <author><firstname>D.</firstname><surname>Yemanov</surname></author>
      </sectioninfo>
      <para>FIRST/SKIP and ROWS syntaxes and PLAN and ORDER BY clauses can now be used in view specifications.
      More information to come.</para>
      </section>
    </section>

    <section id="ddl-usage"><!-- Level 1 section -->
    <title>Usage Enhancements</title>
    <para>The following changes will affect usage or existing, pre-Firebird 2 workarounds in existing applications or
    databases to some degree.</para>
      <section id="ddl-usage-foreign_keys"><!-- Level 2 section -->
      <sectioninfo>
        <title>Creating Foreign Key Constraints No Longer Requires Exclusive Access</title>
        <author><firstname>V.</firstname><surname>Horsun</surname></author>
      </sectioninfo>
      <para>Now it is possible to create foreign key constraints without needing to get an exclusive lock
        on the whole database. </para>
      </section>

      <section id="ddl-usage-view-updates"><!-- Level 2 section -->
      <title>Changed Logic for View Updates</title>
      <para>Apply NOT NULL constraints to base tables only, ignoring the ones inherited by view columns from domain
      definitions.</para>
      </section>

      <section id="ddl-usage-blob-symbols"><!-- Level 2 section -->
      <sectioninfo>
        <title>Declare BLOB Subtypes by Known Descriptive Identifiers</title>
        <author><firstname>A.</firstname><surname>Peshkov, C. Valderrama</surname></author>
      </sectioninfo>
      <para>Previously, the only allowed syntax for declaring a blob filter was:</para>
      <programlisting>
   declare filter &lt;name&gt; input_type &lt;number&gt; output_type &lt;number&gt;
     entry_point &lt;function_in_library&gt; module_name &lt;library_name&gt;;
      </programlisting>

      <para>The alternative new syntax is:</para>
      <programlisting>
   declare filter &lt;name&gt; input_type &lt;mnemonic&gt; output_type &lt;mnemonic&gt;
     entry_point &lt;function_in_library&gt; module_name &lt;library_name&gt;;
      </programlisting>

      <para>where &lt;mnemonic&gt; refers to a subtype identifier known to the engine.</para>

      <para>Initially they are binary, text and others mostly for internal usage, but an adventurous user
could write a new mnemonic in rdb$types and use it, since it is parsed only at declaration time. The engine keeps the
numerical value. Remember, only negative subtype values are meant to be defined by users.</para>
      <para>To get the predefined types, do</para>
      <programlisting>
   select RDB$TYPE, RDB$TYPE_NAME, RDB$SYSTEM_FLAG
     from rdb$types
     where rdb$field_name = 'RDB$FIELD_SUB_TYPE';

   RDB$TYPE   RDB$TYPE_NAME                RDB$SYSTEM_FLAG
   ========= ============================ =================

           0 BINARY                                     1
           1 TEXT                                       1
           2 BLR                                        1
           3 ACL                                        1
           4 RANGES                                     1
           5 SUMMARY                                    1
           6 FORMAT                                     1
           7 TRANSACTION_DESCRIPTION                    1
           8 EXTERNAL_FILE_DESCRIPTION                  1
      </programlisting>

      <para><emphasis role="bold">Examples</emphasis></para>

      <para>Original declaration:</para>
      <programlisting>
    declare filter pesh input_type 0 output_type 3
      entry_point 'f' module_name 'p';
      </programlisting>

      <para>Alternative declaration:</para>
      <programlisting>
    declare filter pesh input_type binary output_type acl
      entry_point 'f' module_name 'p';
      </programlisting>

      <para>Declaring a name for a user defined blob subtype (remember to commit after the insertion):</para>
      <programlisting>
  SQL&gt; insert into rdb$types
  CON&gt; values('RDB$FIELD_SUB_TYPE', -100, 'XDR', 'test type', 0);
  SQL&gt; commit;
  SQL&gt; declare filter pesh2 input_type xdr output_type text
  CON&gt; entry_point 'p2' module_name 'p';
  SQL&gt; show filter pesh2;
  BLOB Filter: PESH2
          Input subtype: -100 Output subtype: 1
          Filter library is p
          Entry point is p2
        </programlisting>

      </section>
    </section>
  </chapter>