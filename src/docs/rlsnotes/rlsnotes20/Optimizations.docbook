  <chapter id="rnfbtwo-optimi">
  <chapterinfo>
    <title>Optimizations</title>
  </chapterinfo>
    <section id="optimi-user-plans"><!-- Level 1 section -->
    <sectioninfo>
      <title>Improved PLAN Clause</title>
      <author><firstname>D.</firstname><surname>Yemanov</surname></author>
    </sectioninfo>
    <para>A PLAN clause optionally allows you to provide your own instructions to the engine and have it ignore
    the plan supplied by the optimizer.  Firebird 2 enhancements allow you to specify more possible paths for the
    engine.  For example:</para>
    <programlisting>
   PLAN (A ORDER IDX1 INDEX (IDX2, IDX3))
    </programlisting>
    <para>For more details, please refer to the topic in the DML section,
    <xref linkend="dml-dsql-plans"/>, Improvements in Handling User-specified Query Plans. </para>
    </section>

    <section id="optimi-optimizer"><!-- Level 1 section -->
    <title>Optimizer Improvements</title>
    <para>This chapter represents a collection of changes done in Firebird 2.0 to optimize many aspects of 
    performance.</para>
      <section id="optimi-ods-all"><!-- Level 2 section -->
      <title>For All Databases</title>
      <para>The following changes affect all databases.</para>

        <section id="optimi-ods-all-general"><!-- Level 3 section -->
        <sectioninfo>
          <title>Some General Improvements</title>
          <author><firstname>O. Loa,</firstname><surname>D. Yemanov</surname></author>
        </sectioninfo>
        <itemizedlist>
          <listitem>
            <para>Much faster algorithms to process the dirty pages tree</para>
            <para>Firebird 2.0 offers a more efficient processing of the list of modified pages, a.k.a. the dirty 
            pages tree.  It affects all kinds of batch data modifications performed in a single transaction and 
            eliminates the known issues with performance getting slower when using a buffer cache of &gt;10K 
            pages.</para>
            <para>This change also improves the overall performance of data modifications.</para>
          </listitem>
          <listitem>
            <para>Increased maximum page cache size to 128K pages (2GB for 16K page size)</para>
          </listitem>
        </itemizedlist>
        </section>

        <section id="optimi-ods-all-optimizer-in-or"><!-- Level 3 section -->
        <sectioninfo>
          <title>Faster Evaluation of IN() and OR</title>
          <author><firstname>O.</firstname><surname>Loa</surname></author>
        </sectioninfo>
        <para>Constant IN predicate or multiple OR booleans are now evaluated faster.</para>
        <para> Sparse bitmap operations were optimized to handle multiple OR booleans or an 
        IN (&lt;constant list&gt;) predicate more efficiently, improving performance of these operations.</para>
        </section>

        <section id="optimi-ods-all-optimizer-unique"><!-- Level 3 section -->
        <sectioninfo>
          <title>Improved UNIQUE Retrieval</title>
          <author><firstname>A.</firstname><surname>Brinkman</surname></author>
        </sectioninfo>
        <para>The optimizer will now use a more realistic cost value for unique retrieval.
        More information to come.</para>
        </section>

        <section id="optimi-ods-all-optimizer-not"><!-- Level 3 section -->
        <sectioninfo>
          <title>More Optimization of NOT Conditions</title>
          <author><firstname>D.</firstname><surname>Yemanov</surname></author>
        </sectioninfo>
        <para>NOT conditions are simplified and optimized via an index when possible.</para>
        <para><emphasis role="bold">Example</emphasis></para>
        <programlisting>
        (NOT NOT A = 0) -&gt; (A = 0)
        (NOT A &gt; 0) -&gt; (A &lt;= 0)
        </programlisting>
        </section>

        <section id="optimi-ods-all-having"><!-- Level 3 section -->
        <title>Distribute HAVING Conjunctions to the WHERE Clause</title>
        <para>If a HAVING clause or any outer-level select refers to a field being grouped by, this conjunct 
        is distributed deeper in the execution path than the grouping, thus allowing an index scan to be used. 
        In other words, it allows the HAVING clause not only be treated as the WHERE clause in this case, but 
        also be optimized the same way.</para>
        
        <para><emphasis role="bold">Examples</emphasis></para>
        <programlisting>
  select rdb$relation_id, count(*)
  from rdb$relations
  group by rdb$relation_id
  having rdb$relation_id > 10

  select * from (
    rdb$relation_id, count(*)
    from rdb$relations
    group by rdb$relation_id
    ) as grp (id, cnt)
  where grp.id > 10
        </programlisting>
        <para>In both cases, an index scan is performed instead of a full scan.</para>
        </section>

        <section id="optimi-ods-all-union"><!-- Level 3 section -->
        <title>Distribute UNION Conjunctions to the Inner Streams</title>
        <para>Distribute UNION conjunctions to the inner streams when possible.</para>
        </section>
        <section id="optimi-ods-all-cross"><!-- Level 3 section -->
        <title>Improved Handling of CROSS JOIN and Merge/SORT</title>
        <para>Improved cross join and merge/sort handling</para>
        </section><!-- Level 3 -->
        <section id="optimi-mixed"><!-- Level 3 section -->
        <title>Better Choice of Join Order for Mixed Inner/Outer Joins</title>
        <para>Let's choose a reasonable join order for intermixed inner and outer joins</para>
        </section><!-- Level 3 -->
        <section id="optimi-merge"><!-- Level 3 section -->
        <title>Equality Comparison on Expressions</title>
        <para>MERGE PLAN may now be generated for joins using equality comparsion on expressions</para>
        </section><!-- Level 3 -->
      </section><!-- Level 2 -->

      <section id="optimi-ods-eleven"><!-- Level 2 section -->
      <title>For ODS 11 Databases only</title>
      <para>Content to come.</para>
        <section id="optimi-ods-eleven-segment"><!-- Level 3 section -->
        <title>Segment-level Selectivities are Used</title>
        <para>See <xref linkend="indexing-per-segment"/> in the Indexing chapter.</para>
        </section>

        <section id="optimi-ods-eleven-isnull"><!-- Level 3 section -->
        <title>Better Support for IS NULL and STARTING WITH</title>
        <para>Previously, IS NULL and STARTING WITH predicates were optimized separately from others,
        thus causing non-optimal plans in complex ANDed/ORed boolean expressions. From v2.0 and ODS11,
        these predicates are optimized in a regular way and hence benefit from all possible optimization
        strategies.</para>
        </section>

        <section id="optimi-ods-eleven-or-and"><!-- Level 3 section -->
        <title>Matching of Both OR and AND Nodes to Indexes</title>
        <para>Complex boolean expressions consisting of many AND/OR predicates are now entirely mapped to available 
        indices if at all possible.  Previously, such complex expressions could be optimized badly.</para>
        </section>
        <section id="optimi-ods-eleven-joinorder"><!-- Level 3 section -->
        <title>Better JOIN Orders</title>
        <para>Cost estimations have been improved in order to improve JOIN orders.</para>
        </section>
        <section id="optimi-ods-eleven-outer-join"><!-- Level 3 section -->
        <title>Indexed Order Enabled for Outer Joins</title>
        <para>It is now possible for indexed order to be utilised for outer joins, i.e. navigational walk.</para>
        </section><!-- Level 3 -->
      </section><!-- Level 2 -->
    </section><!-- Level 1 -->
  </chapter>