  <chapter id="rnfbtwo-sec" xreflabel="New Security Features">
  <chapterinfo>
    <title>Security in Firebird 2</title>
  </chapterinfo>

    <section id="sec-summary"><!-- Level 1 section -->
    <title>Summary of Changes</title>
    <para>Improving security has had a lot of focus in Firebird 2.0 development.  The following is a summary of the
    major changes.</para>
      <section id="sec-summary-sec-db"><!-- Level 2 section -->
      <title>New security database</title>
      <para>The new security database is renamed as <function>security2.fdb</function>.  Inside, the user
      authentication table, where user names and passwords are stored, is now called <function>RDB$USERS</function>.
      There is no longer a table named <quote>users</quote> but a new <emphasis>view</emphasis> over RDB$USERS that 
      is named <quote>USERS</quote>.  Through this view, users can change their passwords.</para>
      
      <para>For details of the new database, see <xref linkend="sec-dtl-auth-fbtwo-secdb"/> in the section about
      authentication later in this chapter.</para>
      
      <para>For instructions on updating previous security databases, refer to the 
      section <xref linkend="sec-new-db"/> at the end of this chapter.</para>
      </section><!-- level 2 -->

      <section id="sec-summary-pwd"><!-- Level 2 section -->
      <sectioninfo>
        <title>Better password encryption</title>
        <author><firstname>A.</firstname><surname>Peshkov</surname></author>
      </sectioninfo>
      <para>Password encryption/decryption now uses a more secure password hash calculation algorithm.</para>
      </section><!-- level 2 -->

      <section id="sec-summary-usermod"><!-- Level 2 section -->
      <sectioninfo>
        <title>Users can modify their own passwords</title>
        <author><firstname>A.</firstname><surname>Peshkov</surname></author>
      </sectioninfo>
      <para>The SYSDBA remains the keeper of the security database.  However, users can now modify their own
      passwords.</para>
      </section><!-- level 2 -->

      <section id="sec-summary-gsec"><!-- Level 2 section -->
      <sectioninfo>
        <title>Non-server access to security database is rejected</title>
        <author><firstname>A.</firstname><surname>Peshkov</surname></author>
      </sectioninfo>
      <para>GSEC now uses the Services API.  The server will refuse any access to security2.fdb
      except through the Services Manager.</para>
      </section><!-- level 2 -->

      <section id="sec-summary-no-brute"><!-- Level 2 section -->
      <sectioninfo>
        <title>Active protection from brute-force attack</title>
        <author><firstname>A.</firstname><surname>Peshkov</surname></author>
      </sectioninfo>
      <para>Attempts to get access to the server using brute-force techniques on accounts and passwords are now
      detected and locked out.</para>
      <itemizedlist>
      <listitem><para>Login with password is required from any remote client</para></listitem>
      <listitem><para>Clients making too many wrong login attempts are blocked from further attempts for a 
      period</para></listitem>
      </itemizedlist>
      </section><!-- level 2 -->

      <section id="sec-summary-vulner"><!-- Level 2 section -->
      <sectioninfo>
        <title>Vulnerabilities have been closed</title>
        <author><firstname>A. Peshkov,</firstname><surname>C. Valderrama</surname></author>
      </sectioninfo>
      <para>Several known vulnerabilities in the API have been closed. </para>
      </section><!-- level 2 -->
    </section><!-- level 1 -->

    <section id="sec-dtl"><!-- Level 1 section -->
    <title>Details of the Security Changes in Firebird 2.0</title>
    <para>Security focus was directed at some recognised weaknesses in Firebird's security from malicious
    attacks:</para>
    <itemizedlist>
    <listitem><para>the lack of brute-force resistant passwords encryption in the security database</para></listitem>
    <listitem><para>the ability for any remote user with a valid account to open the security database and read
    hashes from it (especially interesting in combination with the first point)</para></listitem>
    <listitem><para>the inability for users to change their own passwords</para></listitem>
    <listitem><para>the lack of protection against remote brute-forcing of passwords on the server
    directly</para></listitem>
    </itemizedlist>

      <section id="sec-dtl-auth"><!-- Level 2 section -->
      <title>Authentication</title>
      <para>Firebird authentication checks a server-wide security database in order to decide whether a database or
      server connection request is authorised.  The security database stores the user names and passwords of all
      authorised login identities.</para>
        <section id="sec-dtl-auth-fbonefive"><!-- Level 3 section -->
        <title>Firebird 1.5 Authentication</title>
        <para>In Firebird 1.5 the DES algorithm is used twice to hash the password:  first by the client, then by
        the server, before comparing it with the hash stored in security database. However, this sequence becomes
        completely broken when the SYSDBA changes a password.  The client performs the hash calculation twice and
        stores the resulting hash directly in the security database. Therefore, hash management is completely
        client-dependent (or, actually, client-defined).</para>
        </section><!-- level 3 -->

        <section id="sec-dtl-auth-fbtwo"><!-- Level 3 section -->
        <title>Firebird 2: Server-side Hashing</title>
        <para>To be able to use stronger hashes, another approach was called for.  The hash to be stored on the
        server should always be calculated on the server side. Such a schema already exists in Firebird -- in the
        Services API. This led to the decision to use the Services API for any client activity related to user
        management. Now, gsec and the isc_user_add(modify, delete) API functions all use services to access the
        security database.  (Embedded access to Classic server on POSIX is the exception --see below). </para>
        <para>It became quite easy to make any changes to the way passwords are hashed - it is always performed by
        the server. It is no longer gsec's problem to calculate the hash for the security database: it simply asks
        services to do the work!</para>
        <para>It is worth noting that the new gsec works successfully with older Firebird versions, as long as the
        server's architecture supports services.</para>

          <section id="sec-dtl-auth-fbtwo-hash"><!-- Level 4 section -->
          <title>The SHA-1 Hashing Algorithm</title>
          <para>This method leads to the situation where</para>
          <orderedlist>
          <listitem><para>a hash valid for user A is invalid for user B</para></listitem>
          <listitem><para>when a user changes his password -- even to exactly the same string as before -- the data
          stored in RDB$USERS.RDB$PASSWD is new.</para></listitem>
          </orderedlist>

          <para>Although this situation does not increase resistance to a brute-force attempt to crack the password,
          it does make &quot;visual&quot; analysis of a stolen password database much harder.</para>
          </section><!-- level 4 -->
        </section><!-- level 3 -->

        <section id="sec-dtl-auth-fbtwo-secdb" xreflabel="New Security Database"><!-- Level 3 section -->
        <title>The New Security Database</title>

        <para>The structure of security database was changed. In general, now it contains a patch by Ivan Prenosil,
        with some minor differences, enabling any user to change his/her own password, .</para>
        <itemizedlist>
        <listitem><para>In firebird 1.5 the table USERS has to be readable by PUBLIC, an engine requirement without
        which the password validation process would fail.  Ivan's patch solution used a view, with the condition
        &quot;WHERE USER = ''&quot;. That worked due to another bug in the engine that left the SQL variable USER
        empty, not 'authenticator', as it might seem from engine's code.</para>
        <para>Once that bug was fixed, it was certainly possible to add the condition &quot;USER = 'authenticator'&quot;.
        For the short term, that was OK, because the username is always converted to upper case.</para></listitem>
        <listitem><para>A better solution was found, that avoids making user authentication depend on an SQL trick.
        The result is that the non-SYSDBA user can see only his own login in any user-management tool (gsec, or
        any graphical interface that use the Services API). SYSDBA continues to have full access to manage users'
        accounts.</para></listitem>
        </itemizedlist>

          <section id="sec-dtl-gsec-dbstruc"><!-- Level 4 section -->
          <title>New security database structure</title>
          <para>The Firebird 2 security database is named <literal>security2.fdb</literal>.  For user authentication
          it has a new table named <literal>RDB$USERS</literal> that stores the new hashed passwords.  A view over
          this table replaces the old USERS table and enables users to change their own passwords.</para>

          <para>The DDL for the new structures can be found in the <xref linkend="appx-sql-sec"/> in the Appendix.</para>
          </section><!-- level 4 -->
        </section><!-- level 3 -->
      </section><!-- level 2 -->

      <section id="sec-dtl-gsec"><!-- Level 2 section -->
      <title>GSEC in Firebird 2</title>
      <para>Special measures were thus taken to make remote connection to the security database completely
      impossible.  Don't be surprised if some old program fails on attempting direct access:  this is by design.
      Users information may now be accessed only through the Services API and the equivalent internal access to
      services now implemented in the <function>isc_user_*</function> API functions.</para>

      </section><!-- level 2 -->

      <section id="sec-dtl-protect"><!-- Level 2 section -->
      <title>Some Protection from Hacking</title>
      <para>Given the 8-byte maximum length of the traditional Firebird password, the hacker had a reasonable
      chance to break into the firebird installation by way of a brute-force attack.  Version 2.0 has some protection
      from this.  After too many attempts to access the server using a wrong password, the authentication process
      is locked for a period, minimizing the opportunity for a hacker to find the correct password in time.</para>
      </section><!-- level 2 -->
    </section><!-- level 1 -->

    <section id="sec-posix"><!-- Level 1 section -->
    <title>Classic Server on POSIX</title>
    <para>For reasons both technical and historical, a Classic server on POSIX with embedded clients is especially
    vulnerable to security exposure.  Users having embedded access to databases MUST be given at least read access
    to the security database.</para>
    <para>This is the main reason that made implementing enhanced password hashes an absolute requirement. A
    malicious user with user-level access to Firebird could easily steal a copy of the security database, take it
    home and quietly brute-force the old DES hashes! Afterwards, he could change data in critical databases stored
    on that server.  Firebird 2 is much less vulnerable to this kind of compromise.</para>
    <para>But the embedded POSIX server had one more problem with security:  its implementation of the Services API
    calls the command-line gsec, as normal users do. Therefore, an embedded user-maintenance utility must have full
    access to security database.</para>
    <para>The main reason to restrict direct access to the security database was to protect it from access by old
    versions of client software. Fortuitously, it also minimizes the exposure of the embedded Classic on POSIX at
    the same time, since it is quite unlikely that the combination of an old client and the new server would be
    present on the production box.</para>
    <caution><para>However, the level of Firebird security is still not satisfactory in one serious respect, so
    please read this section carefully before opening port 3050 to the Internet.</para></caution>
    <para>An important security problem with Firebird still remains unresolved:  the transmission of poorly
    encrypted passwords &quot;in clear&quot; across the network. It is not possible to resolve this problem without
    breaking old clients.</para>
    <para>To put it another way, a user who has set his/her password using a new secure method would be unable to use
    an older client to attach to the server. Taking this into account with plans to upgrade some aspects of the API
    in the next version, the decision was made not to change the password transmission method in Firebird 2.0.</para>
    <para>The immediate problem can be solved easily by using any IP-tunneling software (such as ZeBeDee) to move
    data to and from a Firebird server, for both 1.5 and 2.0.  It remains the recommended way to access your remote
    Firebird server across the Internet.</para>
    </section><!-- level 1 -->

    <section id="sec-new-db" xreflabel="Dealing with the New Security Database"><!-- Level 1 section -->
    <sectioninfo>
      <title>Dealing with the New Security Database</title>
      <author><firstname>A.</firstname><surname>Peshkov</surname></author>
    </sectioninfo>
    <para>If you try to put a pre-Firebird 2 security database -- security.fdb or a renamed isc4.gdb -- into
    Firebird's new home directory and then try to connect to the server, you will get the message &quot;Cannot
    attach to password database&quot;.  It is not a bug: it is by design. A security database from an earlier
    Firebird version cannot be used directly in Firebird 2.0 or higher.</para>

    <para>The newly structured security database is named security2.fdb.</para>

    <para>In order to be able to use an old security database, it is necessary to run the upgrade
    script <function>security_database.sql</function>, that is in
    the <function>../upgrade</function> sub-directory of your Firebird server installation.</para>
    
    <note>
    <para>The upgrade script may be excluded from the Beta 1 distributions due to tagging issues.  The script
    is also in the <function>../src/misc/upgrade/v2</function> directory of the firebird2
    CVS tree at Sourceforge, in the <emphasis role="bold">T2_0_0_Beta1</emphasis> tagged branch.</para>
    
    <para>A copy of the script appears in the Appendix to these notes: <xref linkend="appx-sql-sec"/>.</para>
    </note>

      <section id="sec-new-db-upgrade" xreflabel="Security DB Upgrade"><!-- Level 2 section -->
      <title>Doing the Security Database Upgrade</title>
      <para>To do the upgrade, follow these steps:</para>

      <orderedlist>
      <listitem><para>Put your old security database in some place known to you, but not in Firebird's new home
      directory. Keep a copy available at all times!</para></listitem>
      <listitem><para>Start Firebird 2, using its new, native security2.fdb.</para></listitem>
      <listitem><para>Connect to your old security database as SYSDBA and run the script.</para></listitem>
      <listitem><para>Stop the Firebird service.</para></listitem>
      <listitem><para>Copy the upgraded database to the Firebird 2 home directory.</para></listitem>
      <listitem><para>Open firebird.conf and set the parameter LegacyHash to 1 (remembering to erase
      the &quot;#&quot; comment marker).  TAKE NOTE OF THE CAUTION BELOW!</para></listitem>
      <listitem><para>Restart Firebird.</para></listitem>
      </orderedlist>

      <para>Now you should be able to connect to the Firebird 2 server using your old logins and passwords.</para>

      <caution>
        <para>As long as you configure <function>LegacyHash = 1</function> in <function>firebird.conf</function>,
        Firebird's security does not work completely.  To set this right, it is necessary to do as follows:</para>
        <orderedlist>
        <listitem><para>Change the SYSDBA password</para></listitem>
        <listitem><para>Have the users change their passwords (in 2.0 each user can change his or her
        own password).</para></listitem>
        <listitem><para>Set LegacyHash back to default value of 0, or comment it out. </para></listitem>
        <listitem><para>Stop and restart Firebird for the configuration change to take effect.</para></listitem>
        </orderedlist>
      </caution>
      </section><!-- level 2 -->
    </section><!-- level 1 -->
  </chapter>