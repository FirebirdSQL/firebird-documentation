  <chapter id="rnfbtwo-str">
  <chapterinfo>
    <title>New Features for Text Data</title>
  </chapterinfo>

    <section id="str-string-func"><!-- Level 1 section -->
  <title>New String Functions</title>
  <para>Two new string functions were added:</para>

    <section id="str-string-func-lower"><!-- Level 2 section -->
    <sectioninfo>
      <title>LOWER()</title>
      <author><firstname>A.</firstname><surname>dos Santos Fernandes</surname></author>
    </sectioninfo>
    <para>LOWER() returns the input argument converted to all lower-case characters.</para>
    <para><emphasis role="bold">Example</emphasis></para>
    <programlisting>
isql -q -ch dos850

SQL&gt; create database 'test.fdb';
SQL&gt; create table t (c char(1) character set dos850);
SQL&gt; insert into t values ('A');
SQL&gt; insert into t values ('E');
SQL&gt; insert into t values ('&Aacute;');<!-- ('Á') -->;
SQL&gt; insert into t values ('&Eacute;');<!-- ('É'); -->
SQL&gt;
C      LOWER
====== ======
A      a
E      e
&Aacute;      &aacute;
&Eacute;      &eacute;
    </programlisting>
    </section>

    <section id="str-string-func-trim"><!-- Level 2 section -->
    <sectioninfo>
      <title>TRIM()</title>
      <author><firstname>A.</firstname><surname>dos Santos Fernandes</surname></author>
    </sectioninfo>
    <para>TRIM trims characters (default: blanks) from the left and/or right of a string.</para>
    <para><emphasis role="bold">Syntax Pattern</emphasis></para>
    <programlisting>
TRIM &lt;left paren&gt; [ [ &lt;trim specification&gt; ] [ &lt;trim character&gt; ]
  FROM ] &lt;value expression&gt; &lt;right paren&gt;

   &lt;trim specification&gt; ::=  LEADING  | TRAILING  | BOTH

   &lt;trim character&gt; ::= &lt;value expression>
    </programlisting>

    <para><emphasis role="bold">Rules</emphasis></para>
    <orderedlist>
    <listitem><para>If &lt;trim specification&gt; is not specified, BOTH is assumed.</para></listitem>
    <listitem><para>If &lt;trim character&gt; is not specified, ' ' is assumed.</para></listitem>
    <listitem><para>If &lt;trim specification&gt; and/or &lt;trim character&gt; is specified, FROM should be
    specified.</para></listitem>
    <listitem><para>If &lt;trim specification&gt; and &lt;trim character&gt; is not specified, FROM should not be
    specified.</para></listitem>
    </orderedlist>
    <para><emphasis role="bold">Examples</emphasis></para>
    <para>A)</para>
    <programlisting>
  select
    rdb$relation_name,
    trim(leading 'RDB$' from rdb$relation_name)
  from rdb$relations
    where rdb$relation_name starting with 'RDB$';
    </programlisting>
    <para>B)</para>
    <programlisting>
  select
    trim(rdb$relation_name) || ' is a system table'
  from rdb$relations
    where rdb$system_flag = 1;
    </programlisting>
    </section>

    <section id="str-string-func-size"><!-- Level 2 section -->
    <sectioninfo>
      <title>New String Size Functions</title>
      <author><firstname>A.</firstname><surname>dos Santos Fernandes</surname></author>
    </sectioninfo>
    <para>Three new functions will return information about the size of strings:</para>
    <orderedlist>
    <listitem><para>BIT_LENGTH returns the length of a string in bits</para></listitem>
    <listitem><para>CHAR_LENGTH/CHARACTER_LENGTH returns the length of a string in characters</para></listitem>
    <listitem><para>OCTET_LENGTH returns the length of a string in bytes</para></listitem>
    </orderedlist>

    <para><emphasis role="bold">Syntax Pattern</emphasis></para>
    <para>These three functions share a similar syntax pattern, as follows.-</para>
    <programlisting>
&lt;length function&gt; ::=
{ BIT_LENGTH | CHAR_LENGTH | CHARACTER_LENGTH | OCTET_LENGTH } ( &lt;value expression&gt; &lt;)
    </programlisting>

    <para><emphasis role="bold">Example</emphasis></para>
    <programlisting>
  select
    rdb$relation_name,
    char_length(rdb$relation_name),
    char_length(trim(rdb$relation_name))
  from rdb$relations;
    </programlisting>
    </section>
  </section>

  <section id="str-charsets"><!-- Level 1 section -->
  <sectioninfo>
    <title>New INTL Interface for Non-ASCII Character Sets</title>
    <author><firstname>A.</firstname><surname>dos Santos Fernandes</surname></author>
  </sectioninfo>
  <para>A feature of Firebird 2 is the introduction of a new interface for international character sets.
  Originally described by N. Samofatov, the new interface features a number of enhancements that have been
  implemented by me.</para>

    <section id="str-charsets-arch"><!-- Level 2 section -->
    <title>Architecture</title>
    <para>Firebird allows character sets and collations to be declared in any character field or variable declaration.
    The default character set can also be specified at database create time, to cause every CHAR/VARCHAR declaration
    that doesn't specifically included a CHARACTER SET clause to use it.</para>

    <para>At attachment time you can specify the character set that the client is to use to read strings.  If no
    &quot;client&quot; (or &quot;connection&quot;) character set is specified, character set NONE is assumed.</para>

    <para>Two special character sets, NONE and OCTETS, can be used in declarations.  However, OCTETS cannot be used
    as a connection character set.  The two sets are similar, except that the space character of NONE is ASCII 0x20,
    whereas the space character OCTETS is 0x00.  NONE and OCTETS are "special" in the sense that they do not follow
    the rule that other charsets do regarding conversions.</para>

    <itemizedlist>
    <listitem><para>With other character sets, conversion is performed as
    CHARSET1-&gt;UNICODE-&gt;CHARSET2.</para></listitem>
    <listitem><para>With NONE/OCTETS the bytes are just copied: NONE/OCTETS-&gt;CHARSET2
    and CHARSET1-&gt;NONE/OCTETS.</para></listitem>
    </itemizedlist>
    </section>

    <section id="str-charsets-enh"><!-- Level 2 section -->
    <title>Enhancements</title>
    <para>Enhancements include: </para>
      <section id="str-charsets-enh-well-formed"><!-- Level 3 section -->
      <title>Well-formedness checks</title>
      <para>Some character sets (especially multi-byte) do not accept just any string.  Now, the engine verifies that
      strings are well-formed when assigning from NONE/OCTETS and when strings sent by the client (the statement
      string and parameters).</para>
      </section>
      <section id="str-charsets-enh-ucase"><!-- Level 3 section -->
      <title>Uppercasing</title>
      <para>In FB 1.5.X only ASCII characters are uppercased in a character set's default (binary) collation order,
      which is used if no collation is specified.</para>
      <para>For example,</para>
      <programlisting>
  isql -q -ch dos850
  SQL&gt; create database 'test.fdb';
  SQL&gt; create table t (c char(1) character set dos850);
  SQL&gt; insert into t values ('a');
  SQL&gt; insert into t values ('e');
  SQL&gt; insert into t values ('&aacute;');
  SQL&gt; insert into t values ('&eacute;');
  SQL&gt;
  SQL&gt; select c, upper(c) from t;

  C      UPPER
  ====== ======
       a      A
       e      E
       &aacute;      &aacute;
       &eacute;      &eacute;
      </programlisting>
      <para>In FB 2.0 the result is:</para>
      <programlisting>
  C      UPPER
  ====== ======
       a      A
       e      E
       &aacute;      &Aacute;
       &eacute;      &Eacute;
      </programlisting>
      </section>

      <section id="str-charsets-enh-max-string"><!-- Level 3 section -->
      <title>Maximum string length</title>
      <para>In FB 1.5.X the engine does not verify the logical length of multi-byte character set (MBCS) strings.
      Hence, a UNICODE_FSS field takes three times as many characters as the declared field size, three being the
      maximum length of one UNICODE_FSS character).</para>
      <para>This has been retained for compatibility for legacy character sets.  However, new character sets (UTF8,
      for example) do not inherit this limitation.</para>
      </section>

      <section id="str-charsets-enh-none"><!-- Level 3 section -->
      <title>NONE as attachment character set</title>
      <para>When NONE is used as the attachment (connection) character set, the sqlsubtype member of XSQLVAR stores
      the character set number of the read field, instead of always 0 as previously.</para>
      </section>

      <section id="str-charsets-enh-blob"><!-- Level 3 section -->
      <title>Enhancements for BLOBs</title>
      <para>Content</para>

        <section id="str-charsets-enh-blob-collate"><!-- Level 4 section -->
        <title>COLLATE clauses for BLOBs</title>
        <para>A DML COLLATE clause is now allowed with BLOBs.</para>
        <para><emphasis role="bold">Example</emphasis></para>
        <programlisting>
  select blob_column from table
    where blob_column collate unicode = 'foo';
        </programlisting>
        </section>

        <section id="str-charsets-enh-blob-compare"><!-- Level 4 section -->
        <title>Full equality comparisons between BLOBs</title>
        <para>Comparison can be performed on the entire content of a text BLOB.</para>
        </section>

        <section id="str-charsets-enh-blob-convert"><!-- Level 4 section -->
        <title>Character set conversion for BLOBs</title>
        <para>Conversion between character sets is now possible when assigning to a BLOB from a string or
        another BLOB</para>
        </section>
      </section>

      <section id="str-charsets-intl"><!-- Level 3 section -->
      <title>INTL Plug-ins</title>
      <para>Character sets and collations are installed using a manifest file.</para>
      <para>The manifest file should be put in the $rootdir/intl with a .conf extension.  It is used to locate
      character sets and collations in the libraries.  If a character set/collation is declared more than once, it
      is not loaded and the error is reported in the log.</para>
      <para>The symbol $(this) is used to indicate the same directory as the manifest file and the library
      extension should be omitted.</para>

      <para><emphasis role="bold">Example of a Section from fbintl.conf</emphasis></para>
      <literallayout class="monospaced">
   &lt;intl_module fbintl&gt;
       filename    $(this)/fbintl
   &lt;/intl_module&gt;

   &lt;charset ISO8859_1&gt;
       intl_module    fbintl
       collation    ISO8859_1
       collation    DA_DA
       collation    DE_DE
       collation    EN_UK
       collation    EN_US
       collation    ES_ES
       collation    PT_BR
       collation    PT_PT
   &lt;/charset&gt;

   &lt;charset WIN1250&gt;
       intl_module    fbintl
       collation    WIN1250
       collation    PXW_CSY
       collation    PXW_HUN
       collation    PXW_HUNDC
   &lt;/charset&gt;
      </literallayout>
      </section>

      <section id="str-charsets-new"><!-- Level 3 section -->
      <title>New Character Sets/Collations</title>
        <section id="str-charsets-new-utf8"><!-- Level 4 section -->
        <title>UTF8 character set</title>
        <para>The UNICODE_FSS character set has a number of problems: it's an old version of UTF8 that accepts
        malformed strings and does not enforce correct maximum string length.  In FB 1.5.X UTF8 is an alias
        to UNICODE_FSS.</para>
        <para>Now, UTF8 is a new character set, without the inherent problems of UNICODE_FSS.</para>
        </section>

        <section id="str-charsets-new-uni"><!-- Level 4 section -->
        <title>UNICODE collations (for UTF8)</title>
        <para>UCS_BASIC works identically to UTF8 with no collation specified (sorts in UNICODE code-point order).
        The UNICODE collation sorts using UCA (Unicode Collation Algorithm).</para>
        <para><emphasis role="bold">Sort order sample:</emphasis></para>
        <programlisting>
  isql -q -ch dos850
  SQL&gt; create database 'test.fdb';
  SQL&gt; create table t (c char(1) character set utf8);
  SQL&gt; insert into t values ('a');
  SQL&gt; insert into t values ('A');
  SQL&gt; insert into t values ('&aacute;');
  SQL&gt; insert into t values ('b');
  SQL&gt; insert into t values ('B');
  SQL&gt; select * from t order by c collate ucs_basic;

  C
  ======
  A
  B
  a
  b
  &aacute;

  SQL&gt; select * from t order by c collate unicode;

  C
  ======
  a
  A
  &aacute;
  b
  B
        </programlisting>
        </section>

        <section id="str-charsets-new-br"><!-- Level 4 section -->
        <title>Brazilian collations</title>
        <para>Two case-insensitive/accent-insensitive collations were created for Brazil: WIN_PTBR
        (for WIN1252) and PT_BR (for ISO8859_1).</para>

        <para><emphasis role="bold">Sort order and equality sample:</emphasis></para>
        <programlisting>
  isql -q -ch dos850
  SQL&gt; create database 'test.fdb';
  SQL&gt; create table t (c char(1) character set iso8859_1 collate pt_br);
  SQL&gt; insert into t values ('a');
  SQL&gt; insert into t values ('A');
  SQL&gt; insert into t values ('&aacute;');
  SQL&gt; insert into t values ('b');
  SQL&gt; select * from t order by c;

  C
  ======
  A
  a
  &aacute;
  b

  SQL&gt; select * from t where c = '&acirc;';

  C
  ======
  a
  A
  &acirc;
        </programlisting>
        </section>
      </section>

      <section id="str-charsets-drivers"><!-- Level 3 section -->
      <title>Drivers</title>
      <para>New character sets and collations are implemented through dynamic libraries and installed in the server
      with a manifest file in the intl subdirectory. For an example, see fbintl.conf.</para>
      <para>Not all implemented character sets and collations need to be listed in the manifest file. Only those
      listed are available and duplications are not loaded.</para>

        <section id="str-charset-drivers-addnew"><!-- l.4 section -->
        <title>Adding More Character Sets to a Database</title>
        <para>For installing additional character sets and collations into a database, the character sets and
        collations should be registered in the database's system tables (rdb$character_sets and rdb$collations).
        The file misc/intl.sql, in your Firebird 2 installation, is a script of stored procedures for registering
        and unregistering them.</para>
        </section>
      </section>
    </section>

    <section id="str-charsets-charsets"><!-- Level 2 section -->
    <title>New Character Sets and Collations Implemented</title>
      <section id="str-charsets-charsets-koi8r"><!-- Level 3 section -->
      <sectioninfo>
        <title>KOI8-R</title>
        <author><firstname>O. Loa,</firstname><surname>A. Karyakin</surname></author>
      </sectioninfo>
      <para>Russian language character set and dictionary collation.</para>
      </section>
      <section id="str-charsets-charsets-koi8u"><!-- Level 3 section -->
      <sectioninfo>
        <title>KOI8-U</title>
        <author><firstname>O. Loa,</firstname><surname>A. Karyakin</surname></author>
      </sectioninfo>
      <para>Ukrainian language character set and dictionary collation.</para>
      </section>

      <section id="str-charsets-charsets-lv"><!-- Level 3 section -->
      <sectioninfo>
        <title>WIN1257_LV</title>
        <author><firstname>O. Loa,</firstname><surname>A. Karyakin</surname></author>
      </sectioninfo>
      <para>Latvian dictionary collation.</para>
      </section>

      <section id="str-charsets-charsets-lt"><!-- Level 3 section -->
      <sectioninfo>
        <title>WIN1257_LT</title>
        <author><firstname>O. Loa,</firstname><surname>A. Karyakin</surname></author>
      </sectioninfo>
      <para>Lithuanian dictionary collation.</para>
      </section>

      <section id="str-charsets-charsets-ee"><!-- Level 3 section -->
      <sectioninfo>
        <title>WIN1257_EE</title>
        <author><firstname>O. Loa,</firstname><surname>A. Karyakin</surname></author>
      </sectioninfo>
      <para>Estonian dictionary collation.</para>
      </section>

      <section id="str-charsets-charsets-ut"><!-- Level 3 section -->
      <sectioninfo>
        <title>UTF8</title>
        <author><firstname>A.</firstname><surname>dos Santos Fernandes</surname></author>
      </sectioninfo>
      <para>Unicode 4.0 support with UTF8 character set and collations UCS_BASIC and UNICODE.</para>
      </section>

      <section id="str-charsets-charsets-ptbr"><!-- Level 3 section -->
      <sectioninfo>
        <title>Brazilian collations</title>
        <author><firstname>A.</firstname><surname>dos Santos Fernandes,  P. H. Albanez</surname></author>
      </sectioninfo>
      <orderedlist>
      <listitem><para>Collation PT_BR for ISO8859_character set</para></listitem>
      <listitem><para>Collation WIN_PTBR for WIN1252 character set</para></listitem>
      </orderedlist>
      </section>

      <section id="str-charsets-charsets-bsba"><!-- Level 3 section -->
      <sectioninfo>
        <title>Bosnian Collation</title>
        <author><firstname>F.</firstname><surname>Hasovic</surname></author>
      </sectioninfo>
      <para>New Bosnian language collation BS_BA was added for WIN1250 character set.</para>
      </section>

      <section id="str-charsets-charsets-cz"><!-- Level 3 section -->
      <sectioninfo>
        <title>Czech Collations</title>
        <author><firstname>I.</firstname><surname>Prenosil, A. dos Santos Fernandes</surname></author>
      </sectioninfo>
      <itemizedlist>
        <listitem>
          <para>WIN_CZ: case-insensitive Czech language collation for WIN1250 character set</para>
        </listitem>
        <listitem>
          <para>WIN_CZ_CI_AI: case-insensitive, accent-insensitive Czech language collation for WIN1250
          character set</para>
        </listitem>
      </itemizedlist>
      </section>

      <section id="str-charsets-charsets-vn"><!-- Level 3 section -->
      <sectioninfo>
        <title>Vietnamese Character Set</title>
        <author><firstname>Nguyen The Phuong,</firstname><surname>A. dos Santos Fernandes</surname></author>
      </sectioninfo>
      <para>Charset WIN1258 for Vietnamese language.</para>
      </section>

    </section>

    <section id="str-charsets-bugfixes"><!-- Level 2 section -->
    <sectioninfo>
      <title>Character Set Bug Fixes</title>
      <author><firstname>A.</firstname><surname>dos Santos Fernandes</surname></author>
    </sectioninfo>
    <para>The following bugs related to character sets and collations were fixed:</para>
    <para><emphasis>SF #1073212</emphasis>&nbsp; &nbsp;An Order By on a big column with a COLLATE clause would
    terminate the server.</para>
    <para><emphasis>SF #939844</emphasis>&nbsp; &nbsp;A query in a UNICODE database would throw a GDS Exception if
    it was longer than 263 characters.</para>
    <para><emphasis>SF #977785</emphasis>&nbsp; &nbsp;Wrong character lengths were being returned from some multi-byte
    character sets (UTF-8, East-Asian charsets).</para>
    <para><emphasis>SF #536243</emphasis>&nbsp; &nbsp;A correct result is now returned when the UPPER() function
    is applied to a UNICODE_FSS string.</para>
    <para><emphasis>SF #942726</emphasis>&nbsp; &nbsp;UPPER did not convert aacute to Aacute for ISO8859_1</para>
    <para><emphasis>SF #544630</emphasis>&nbsp; &nbsp;Some problems were reported when connecting using UNICODE.
    (More information to come.)</para>
    <para><emphasis>SF #540547</emphasis>&nbsp; &nbsp;Some problems involving concatenation, numeric fields and
    character set were fixed.</para>
    <para><emphasis>Unregistered bug</emphasis>&nbsp; &nbsp;A query could produce different results, depending on
    the presence of an index, when the last character of the string was the first character of a compression pair.</para>
    <para><emphasis>Unregistered bug</emphasis>&nbsp; &nbsp;SUBSTRING did not work correctly with a BLOB in a
    character set.</para>
    <para><emphasis>Unregistered bug</emphasis>&nbsp; &nbsp;Pattern matching with multi-byte BLOBs was being
    performed in binary mode.</para>
    <para><emphasis>Unregistered bug</emphasis>&nbsp; &nbsp;Connecting with a multi-byte character set was unsafe if the database had columns using a different character
    set.</para>
    </section>
  </section>

  </chapter>