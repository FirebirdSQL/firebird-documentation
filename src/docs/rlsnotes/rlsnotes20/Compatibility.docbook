  <chapter id="rnfbtwo-compat" xreflabel="Known Compatibility Issues">
  <chapterinfo>
    <title>Known Compatibility Issues</title>
    <author><firstname>D.</firstname><surname>Yemanov</surname></author>
  </chapterinfo>
  <para>This chapter is intended as a set of alerts to those who are migrating Firebird 1.0 or 1.5 databases to
  Firebird 2.0.  It should be studied before attempting to install any servers.</para>

  <section id="compat-firebirdvar"><!-- Level 1 section -->
  <title>The FIREBIRD Variable</title>
  <para>FIREBIRD is an optional environment variable that provides a system-level pointer to the root directory
  of the Firebird installation.  If it exists, it is available everywhere in the scope for which the variable
  was defined.</para>
  <para>The FIREBIRD variable is NOT removed by scripted uninstalls and it is not updated by the installer
  scripts.  If you leave it defined to point to the root
  directory of a v.1.5.x installation, there will be situations where the Firebird engine, command-line tools,
  cron scripts, batch files, installers, etc., will not work as expected.</para>
  <para>If the Windows installer program finds a value for %FIREBIRD% it will make that path the default
  location that it offers, instead
  of &nbsp;<literal>c:\Program Files\Firebird\Firebird_2_0</literal>&nbsp;.</para>
  <para>Unless you are very clear about the effects of having a wrong value in this variable, you should remove
  or update it before you begin installing Firebird 2.0.  After doing so, you should also check that the old
  value is no longer visible in the workspace where you are installing
  Firebird--use the &nbsp;<literal>SET FIREBIRD</literal>&nbsp; command in a Windows shell
  or &nbsp;<literal>printenv FIREBIRD</literal>&nbsp; in a POSIX shell.</para>
  </section>

  <section id="compat-any-secur"><!-- Level 1 section -->
  <title>Security in Firebird 2 (All Platforms)</title>
  <para>Be aware of the following changes that introduce incompatibilities with how your existing applications
  interface with Firebird's security:</para>
  <variablelist>
    <varlistentry>
      <term>Direct connections to the security database are no longer allowed</term>
      <listitem>
        <para>Apart from the enhancement this offers to server security, it also isolates the mechanisms of
          authentication from the implementation.</para>
        <itemizedlist>
          <listitem>
            <para>User accounts can now be configured only by using the Services API or the GSEC utility.</para>
          </listitem>
          <listitem>
            <para>For backing up the security database, the Services API is now the only route.
            You can employ the <literal> -se[rvice] hostname:service_mgr </literal> switch when invoking the
            gbak utility for this purpose.</para>
          </listitem>
        </itemizedlist>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Non-SYSDBA users no longer can see other users' accounts in the security database</term>
      <listitem>
        <para>A non-privileged user can retrieve or modify only its own account and it can change its
        own password.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Remote attachments to the server without a login and password are now prohibited</term>
      <listitem>
        <itemizedlist>
          <listitem>
            <para>For attachments to Superserver, even root trying to connect locally without
            <quote>localhost:</quote> in the database file string, will
            be rejected by the remote interface if a correct login is not supplied.</para>
          </listitem>
          <listitem>
            <para>Embedded access without login/password works fine.  On Windows, authentication is bypassed.
            On POSIX, the Unix user name is used to validate access to database files.</para>
          </listitem>
        </itemizedlist>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>The security database is renamed to <literal>security2.fdb</literal></term>
      <listitem>
        <para>If you upgrade an existing installation, be sure to upgrade the security database using the
        provided script in order to keep your existing user logins.</para>
        <para>Before you begin the necessary alterations to commission an existing security database on the
        Firebird 2.0 server, you should create a gbak backup of your old security.fdb (from v.1.5) or isc4.gdb
        (from v.1.0) using the old server's version of gbak and then restore it using the Firebird 2.0 gbak.
        </para>
        <important>
          <para>You must make sure that you restore the security database to have a page size of at least 4 Kb.
          The new security2.fdb will not work with a smaller page size.</para>
        </important>
        <warning>
          <para>A simple <literal>'cp security.fdb security2.fdb'</literal> will make it impossible to
          attach to the firebird server !</para>
        </warning>
        <para>For more details see the notes in the
        chapter on security, <xref linkend="rnfbtwo-sec"/>.  Also read the file
        <literal>security_database.txt</literal> in the <emphasis>upgrade</emphasis> directory beneath the root
        directory of your installation.</para>
      </listitem>
    </varlistentry>
  </variablelist>

  </section><!-- level 1 -->

  <section id="compat-sql" xreflabel="SQL Migration Issues"><!-- Level 1 section -->
  <title>SQL Migration Issues</title>

    <section id="compat-sql-ddl" xreflabel="DDL Migration Issues"><!-- Level 2 section -->
    <title>DDL</title>
    <variablelist>
    <varlistentry>
      <term>Views made updatable via triggers no longer perform direct table operations</term>
      <listitem>
        <para>In former versions, a naturally updatable view with triggers passed the DML operation to the
        underlying table and executed the triggers as well.  The result was that, if you followed the official
        documentation and used triggers to perform a table update (inserted to, updated or deleted from the
        underlying table), the operation was done twice: once executing the view's trigger code and again
        executing the table's trigger code.  This situation caused performance problems or exceptions,
        particularly if blobs were involved.</para>
        <para>Now, if you define triggers for a naturally updatable view, it becomes effectively like a
        non-updatable view that has triggers to make it updatable, in that a DML request has to be defined on
        the view to make the operation on the underlying table happen, viz.</para>
        <orderedlist>
          <listitem>
            <para>if the view's triggers define a DML operation on the underlying table, the operation in
            question is executed once and the table triggers will operate on the outcome of the view's
            triggers</para>
          </listitem>
          <listitem>
            <para>if the view's triggers do not define any DML request on the underlying table then no DML
            operation will take place in that table</para>
          </listitem>
        </orderedlist>
        <important>
          <para>Some existing code may depend on the assumption that requesting a
          DML operation on an updatable view with triggers defined would cause the said operation to occur
          automatically, as it does for an updatable view with no triggers.  For example, this
          <quote>feature</quote> might have been used as a quick way to write records to a log
          table en route to the <quote>real</quote> update.  Now, it will be necessary to adjust your view
          trigger code in order to make the update happen at all.</para>
        </important>
        </listitem>
    </varlistentry>

    <varlistentry>
      <term>New Reserved Words (Keywords)</term>
      <listitem>
        <para>A number of new reserved keywords are introduced. The full list is available in the chapter
        <xref linkend="rnfbtwo-reswords"/> and also in Firebird's CVS tree in
        /doc/sql.extentions/README.keywords. You must ensure that your DSQL statements and procedure/trigger
        sources do not contain those keywords as identifiers.</para>
        <note>
          <para>In a Dialect 3 database, such identifiers can be redefined using the same words, as long as the
          identifiers are enclosed in double-quotes.  In a Dialect 1 database there is no way to retain them:
          they must be redefined with new, legal words.</para>
        </note>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>CHECK Constraint Change</term>
      <listitem>
        <para>Formerly, CHECK constraints were not SQL standard-compliant in regard to the handling of NULL.
        For example, <literal>&nbsp;CHECK (DEPTNO IN (10, 20, 30))&nbsp;</literal> should allow NULL in the
        DEPTNO column but it did not.</para>
        <para>In Firebird 2.0, if you need to make NULL invalid in a CHECK constraint, you must do so explicitly
        by extending the constraint.  Using the example above:</para>
        <programlisting>
  CHECK (DEPTNO IN (10, 20, 30) AND DEPTNO IS NOT NULL)
        </programlisting>
      </listitem>
    </varlistentry>
    </variablelist>
    </section>

    <section id="compat-sql-dml"><!-- Level 2 section -->
    <title>DML</title>

      <section id="compat-sql-dml-ambiguity"><!-- Level 3 section -->
      <sectioninfo>
        <title>Changed Ambiguity Rules in SQL</title>
        <author><firstname>A.</firstname><surname>Brinkman</surname></author>
      </sectioninfo>
      <para>In summary, the changes are:</para>
      <orderedlist type="a">
      <listitem>
        <para>When an alias is present for a table, that alias, and not the table identifier, must be used
        to qualify columns; or no alias is used.  Use of an alias makes it invalid to use the table identifier to
        qualify a column. </para>
      </listitem>
      <listitem>
        <para>Columns can now be used without qualifiers in a higher scope level. The current scope level is checked
        first and ambiguous field checking is done at scope level.</para>
      </listitem>
      </orderedlist>
      <para><emphasis role="bold">Examples</emphasis></para>
      <variablelist>
        <varlistentry>
        <term>a) 1. When an alias is present it must be used or no alias at all must be used.</term>
        <listitem>
          <para>This query was allowed in FB1.5 and earlier versions:</para>
          <programlisting>
  SELECT
    RDB$RELATIONS.RDB$RELATION_NAME
  FROM RDB$RELATIONS R
          </programlisting>
          <para>Now, the engine will correctly report an error that the
          field <quote>RDB$RELATIONS.RDB$RELATION_NAME</quote> could not be found.</para>
          <para>Use this (preferred):</para>
          <programlisting>
  SELECT
    R.RDB$RELATION_NAME
  FROM RDB$RELATIONS R
          </programlisting>
          <para>or this statement:</para>
          <programlisting>
    SELECT
      RDB$RELATION_NAME
    FROM
      RDB$RELATIONS R
          </programlisting>
        </listitem>
        </varlistentry>

        <varlistentry>
        <term>a) 2. The next statement will now use the appropriate FieldID correctly from the subquery and from
        the updating table:</term>
        <listitem>
          <programlisting>
  UPDATE TableA
    SET
      FieldA = (SELECT SUM(A.FieldB) FROM TableA A
      WHERE A.FieldID = TableA.FieldID)
          </programlisting>
          <note>
            <para>Although it is possible in Firebird to provide an alias in an update statement, many other database
            vendors do not support it.  These SQL statement syntaxes provide better interchangeability with other
            SQL database products.</para>
          </note>
        </listitem>
        </varlistentry>

        <varlistentry>
        <term>a) 3.  This example ran incorrectly in Firebird 1.5 and earlier:</term>
        <listitem>
          <programlisting>
  SELECT
    RDB$RELATIONS.RDB$RELATION_NAME,
    R2.RDB$RELATION_NAME
  FROM RDB$RELATIONS
  JOIN RDB$RELATIONS R2 ON
   (R2.RDB$RELATION_NAME = RDB$RELATIONS.RDB$RELATION_NAME)
          </programlisting>
          <para>If RDB$RELATIONS contained 90 rows, it would return 90 * 90 = 8100 rows, but in Firebird 2.0 it will
          correctly return 90 rows.</para>
        </listitem>
        </varlistentry>

        <varlistentry>
        <term>b) 1. This would fail in Firebird 1.5, but is possible in Firebird 2.0:</term>
        <listitem>
          <programlisting>
  SELECT
    (SELECT RDB$RELATION_NAME FROM RDB$DATABASE)
  FROM RDB$RELATIONS
          </programlisting>
        </listitem>
        </varlistentry>

        <varlistentry>
        <term>b) 2. Ambiguity checking in subqueries</term>
        <listitem>
          <para>This would run on Firebird 1.5 without reporting an ambiguity, but will report it
          in Firebird 2.0:</para>
          <programlisting>
  SELECT
    (SELECT FIRST 1 RDB$RELATION_NAME
     FROM RDB$RELATIONS R1
     JOIN RDB$RELATIONS R2 ON
       (R2.RDB$RELATION_NAME = R1.RDB$RELATION_NAME))
 FROM RDB$DATABASE
          </programlisting>
        </listitem>
        </varlistentry>
      </variablelist>
      </section>

      <section id="compat-sql-dml-multihit"><!-- Level 3 -->
      <title>Multiple Hits to Same Column Now Illegal</title>
      <para>It is no longer allowed to make multiple <quote>hits</quote> on the same column in an INSERT or
      UPDATE statement.  Thus, a statement like</para>
      <programlisting>
  INSERT INTO T(A, B, A) ...
      </programlisting>
      <para>or</para>
      <programlisting>
  UPDATE T SET A = x, B = y, A = z
      </programlisting>
      <para>will be rejected in Firebird 2.n, even though it was tolerated in InterBase and previous
      Firebird versions.</para>
      </section><!-- level 3 -->

      <section id="compat-sql-dml-plans"><!-- Level 3 section -->
      <title>Query Plans</title>
      <variablelist>
        <varlistentry>
          <term>Stricter validation of user-specified plans</term>
          <listitem>
            <para>User-specified plans are validated more strictly than they were formerly.  If you encounter an
            exception related to plans, e.g. <literal>Table T is not referenced in plan</literal>, it will be
            necessary to inspect your procedure and trigger sources and adjust the plans to make them semantically
            correct.</para>
            <important>
              <para>Such errors could also show up during the restore process when you are migrating databases to
              the new version.  It will be necessary to correct these conditions in original database before you
              attempt to perform a backup/restore cycle.</para>
            </important>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Plan must refer to all tables in query</term>
          <listitem>
            <para>Using a plan without a reference to all tables in query is now illegal and will cause an
            exception.  Some previous versions would accept plans with missing references, but it was a bug.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      </section>
    </section>

    <section id="compat-sql-psql"><!-- Level 2 section -->
    <title>PSQL</title>
    <variablelist>
    <varlistentry>
      <term>Restrictions on assignment to context variables in triggers</term>
      <listitem>
        <itemizedlist>
          <listitem>
            <para>Assignments to the OLD context variables are now prohibited for every kind of
            trigger.</para>
          </listitem>
          <listitem>
            <para>Assignments to NEW context variables in AFTER-triggers are also prohibited.</para>
          </listitem>
        </itemizedlist>
        <tip>
          <para>If you get an unexpected error <literal>Cannot update a read-only column</literal> then
          violation of one of these restrictions will be the source of the exception.</para>
        </tip>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Reference to &quot;current of &lt;cursor&gt;&quot; outside scope of loop</term>
      <listitem>
        <para>In Firebird 1.5 and earlier, referring to &quot;current of &lt;cursor&gt;&quot; outside the scope
        of the cursor loop was accepted by the PSQL parser, allowing the likelihood of run-time occurring as a
        result.  Now, it will be rejected in the procedure or trigger definition.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>NULLS are now <quote>lowest</quote> for sorts</term>
      <listitem>
        <para>NULL is now treated as the lowest possible value for ordering purposes and sets ordered on
        nullable criteria are sorted accordingly.  Thus:</para>
        <itemizedlist>
          <listitem>
            <para>for ascending sorts NULLs are placed at the beginning of the result set</para>
          </listitem>
          <listitem>
            <para>for descending sorts NULLs are placed at the end of the result set</para>
          </listitem>
        </itemizedlist>
        <important>
          <para>In former versions, NULLs were always on top. If you have client code or PSQL definitons that
          rely on the legacy NULLs placement, it will be necessary to use the NULLS FIRST option in your
          ORDER BY clauses.</para>
        </important>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>CURRENT_TIMESTAMP now returns milliseconds by default</term>
      <listitem>
        <para>The context variable CURRENT_TIMESTAMP now returns milliseconds by default, while it truncated
        sub-seconds back to seconds in former versions. If you need to continue receiving the truncated value,
        you will now need to specify the required accuracy explicitly, i.e. specify
        <literal>&nbsp;CURRENT_TIMESTAMP(0)</literal>.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>ORDER BY &lt;ordinal-number&gt; now causes SELECT * expansion</term>
      <listitem>
        <para>When columns are referred to by the <quote>ordinal number</quote> (degree) in an ORDER BY clause,
        when the output list uses <literal>&nbsp;SELECT * FROM ...&nbsp;</literal> syntax, the column list will
        be expanded and taken into account when determining which column the number refers to.</para>
        <para>This means that, now, <literal>&nbsp;SELECT T1.*, T2.COL FROM T1, T2 ORDER BY 2&nbsp;</literal>
        sorts on the second column of table T1, while the previous versions sorted on T2.COL.</para>
        <tip>
          <para>This change makes it possible to specify queries like <literal>&nbsp;SELECT * FROM TAB ORDER
          BY 5</literal>.</para>
        </tip>
      </listitem>
    </varlistentry>
    </variablelist>
    </section>
  </section>
  <section id="compat-conf" xreflabel="Configuration Issues"><!-- Level 1 section -->
  <title>Configuration Parameters</title>
  <variablelist>
    <varlistentry>
      <term>Configuration parameter DeadThreadsCollection is deprecated</term>
      <listitem>
        <para>The parameter DeadThreadsCollection for Superserver in firebird.conf is deprecated and will
        be ignored if set. Firebird version 2 efficiently cleans up dead threads straight away.</para>
      </listitem>
    </varlistentry>
  </variablelist>
  </section>

  <section id="compat-tools"><!-- Level 1 section -->
  <title>Command-line Tools</title>

    <section id="compat-tools-gbak"><!-- Level 2 section -->
    <title>Change to GBAK -R Semantics</title>
    <para>An important change has been done to prevent accidental database overwrites as the result of users
    mistakenly treating <quote>-R</quote> as an abbreviation for <quote>restore</quote>.GBAK -R was formerly
    a shortcut for <quote>-REPLACE_DATABASE</quote>.  Now the -R switch no longer restores a database by
    overwriting an existing one, but instead reports an error.</para>
    <para>If you actually <emphasis>want</emphasis> the former behaviour, you have two alternatives:</para>
    <itemizedlist>
      <listitem>
        <para>Specify the full syntax <literal>GBAK -REPLACE_DATABASE</literal>.  There is a new shortcut for
        the -REPLACE_DATABASE switch:  <literal>GBAK -REP</literal></para>
        <para>OR</para>
      </listitem>
      <listitem>
        <para>Use the new command <literal>-R[ECREATE_DATABASE] OVERWRITE</literal>. The <literal>-R</literal>
        shortcut now represents the -R[ECREATE_DATABASE] switch and the OVERWRITE keyword must be present in
        either the full or the abbreviated form.</para>
      </listitem>
    </itemizedlist>
    <warning>
      <para>If you use the full syntax, you are expected to know what this restore mode actually means and
      have some recovery strategy available if the backup subsequently turns out to be unrestorable.</para>
    </warning>
    </section><!-- level 2 -->
  </section>


  <section id="compat-perf"><!-- Level 1 section -->
  <title>Performance</title>
  <para>The following changes should be noted as possible sources of performance loss:</para>

  <variablelist>
    <varlistentry>
      <term>ALL predicate may be slow</term>
      <listitem>
        <para>Formerly, using the ALL existence predicate could return wrong results in cases where an index
        was involved.  To correct the bug, this version will never use an index with ALL.  This change may
        degrade performance.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Superserver garbage collection changes</term>
      <listitem>
        <para>Formerly, Superserver performed only background garbage collection.  By contrast, Classic
        performs <quote>cooperative</quote> GC, where multiple connections share the performance hit of
        GC.</para>
        <para>Superserver's default behaviour for GC is now to combine cooperative and background modes. The
        new default behaviour generally guarantees better overall performance as the garbage collection is
        performed online, curtailing the growth of version chains under high load.</para>
        <para>It means that some queries may be slower to start to return data if the volume of old record
        versions in the affected tables is especially high.  ODS10 and lower databases, having ineffective
        garbage collection on indices, will be particularly prone to this problem.</para>
        <para>The GCPolicy parameter in firebird.conf allows the former behaviour to be reinstated if you have
        databases exhibiting this problem.</para>
      </listitem>
    </varlistentry>
  </variablelist>
  </section>

  <section id="migrate-issues-api"><!-- Level 1 section -->
  <title>Firebird API</title>
  <para>Note the following changes affecting the API</para>
   <variablelist>
     <varlistentry>
       <term>isc_interprete is deprecated</term>
       <listitem>
         <para>isc_interprete() is deprecated as dangerous. Use fb_interpret() instead.</para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term>Events callback routine declaration corrected</term>
       <listitem>
         <para>The new prototype for <literal>&nbsp;isc_callback&nbsp;</literal> reflects the actual callback
         signature.  Formerly, it was:</para>
         <programlisting>
  typedef void (* isc_callback) ();
  ISC_STATUS isc_que_events(
    ISC_STATUS *, isc_db_handle *, ISC_LONG *, short,
    char *, isc_callback, void *);
         </programlisting>
         <para>In the Firebird 2.0 API it is:</para>
         <programlisting>
  typedef void (*ISC_EVENT_CALLBACK)
    (void*, ISC_USHORT, const ISC_UCHAR*);
  ISC_STATUS isc_que_events(
    ISC_STATUS*, isc_db_handle*, ISC_LONG*, short,
    const ISC_SCHAR*, ISC_EVENT_CALLBACK, void*);
         </programlisting>
         <para>It may cause a compile-time incompatibility, as older event handling programs cannot be
         compiled if they use a bit different signature for a callback routine (e.g.,
         <literal>&nbsp;void*&nbsp;</literal> instead of <literal>&nbsp;const char*&nbsp;</literal> as the
         last parameter).</para>
       </listitem>
     </varlistentry>
   </variablelist>
   </section><!-- level 1 -->

  <section id="compat-win32" xreflabel="Windows-Specific Issues"><!-- Level 2 section -->
  <title>Windows-Specific Issues</title>
  <para>For installing, configuring and connecting to Windows servers, be aware of the following issues:</para>

    <section id="compat-win32-xnet" xreflabel="XNet"><!-- Level 2 section -->
    <title>Windows Local Connection Protocol with XNet</title>
    <para>The transport internals for the local protocol have been reimplemented (XNET instead of IPServer).
    With regard to the local protocol, the new client library is therefore incompatible with older servers and
    older client libraries are incompatible with the Firebird 2 servers.</para>

    <para>If you need to use the local protocol, please ensure your server and client binaries have exactly
    the same version numbers.</para>
    </section>

    <section id="compat-win32-wnet" xreflabel="WNET Issues"><!-- Level 2 section -->
    <title>Client Impersonation No Longer Works</title>
    <para>WNET (a.k.a. NetBEUI, Named Pipes) protocol no longer performs client impersonation.  For more
    information, refer to <xref linkend="new-win-protocol-wnet"/> in the chapter about new features.</para>
    </section>

    <section id="compat-win32-instsvc"><!-- Level 2 section -->
    <sectioninfo>
      <title>Interactive Option Added to instsvc.exe</title>
      <author><firstname>D.</firstname><surname>Yemanov</surname></author>
    </sectioninfo>
    <para>The optional switch -i[nteractive] has been implemented in <function>instsvc.exe</function> to enable
    an interactive mode for LocalSystem services.</para>
    <para>For v.1.5, it was required (as <emphasis>Allow service to interact with desktop</emphasis>) to run the
    local IPC protocol, as it used a windows message to connect the server. In v.2.0, it is no longer necessary 
    and the server itself does not need this option.</para>
    <para>However, some custom UDFs may use the Win32 messaging facilities and this option allows them to work 
    as expected. </para>

    <note>
    <para><function>instsvc.exe</function> is a command-line utility for installing and uninstalling the Firebird
    service.  It does not apply to Windows systems that do not have the ability to run services (Win9x,
    WinME).</para>
    <para>For detailed usage instructions, refer to the document <function>README.instsvc</function> in the
    <function>doc</function> directory of your Firebird installation.</para>
    </note>
    </section>
  </section>
  </chapter>