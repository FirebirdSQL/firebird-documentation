  <chapter id="rnfbtwo-new">
  <chapterinfo>
    <title>New in Firebird 2.0</title>
  </chapterinfo>
    <section id="new-derived-tables"><!-- Level 1 section -->
    <sectioninfo>
      <title>Derived Tables</title>
      <author><firstname>A.</firstname><surname>Brinkman</surname></author>
    </sectioninfo>
    <para>Implemented support for derived tables in DSQL (subqueries in FROM clause) as defined by SQL200X.  A derived
 table is a set, derived from a dynamic SELECT statement.  Derived tables can be nested, if required, to build complex
 queries and they can be involved in joins as though they were normal tables or views.</para>
 
    <para>More details under <xref linkend="dml-dsql-derived-tables"/> in the DML chapter.</para>
    </section>
    
    <section id="new-explicit-cursors"><!-- Level 1 section -->
    <sectioninfo>
      <title>PSQL Now Supports Named Cursors</title>
      <author><firstname>D.</firstname><surname>Yemanov</surname></author>
    </sectioninfo>
    <para>Multiple named (i.e. explicit) cursors are now supported in PSQL and in DSQL EXECUTE BLOCK statements.  More
    information in the chapter <xref linkend="psql-cursors"/>.</para>
    </section>

    <section id="new-win-protocol"><!-- Level 1 section -->
    <sectioninfo>
      <title>Reimplemented Protocols on Windows</title>
      <author><firstname>D.</firstname><surname>Yemanov</surname></author>
    </sectioninfo>
    <para>Two significant changes have been made to the Windows-only protocols.-</para>
      <section id="new-win-protocol-xnet"><!-- Level 2 section -->
      <title>Local Protocol--XNET</title>
      <para>Firebird 2.0 has replaced the former implementation of the local transport protocol
      (often referred to as IPC or IPServer) with a new one, named XNET.</para>
      <para>It serves exactly the same goal, to provide an efficient way to connect to server located on the same
      machine as the connecting client without a remote node name in the connection string.  The new implementation
      is different and addresses the known issues with the old protocol.</para>
      <para>Like the old IPServer implementation, the XNET implementation uses shared memory for inter-process
      communication.  However, XNET eliminates the use of window messages to deliver attachment requests and it
      also implements a different synchronization logic.</para>

        <section id="new-win-protocol-xnet-benefits"><!-- Level 3 section -->
        <title>Benefits of the XNET Protocol over IPServer</title>
        <para>Besides providing a more robust protocol for local clients, the XNET protocol brings some notable
        benefits:</para>
        <itemizedlist>
          <listitem>
            <para>it works with Classic Server</para>
          </listitem>
          <listitem>
            <para>it works for non-interactive services and terminal sessions</para>
          </listitem>
          <listitem>
            <para>it eliminates lockups when a number of simultaneous connections are attempted</para>
          </listitem>
        </itemizedlist>
        </section>

        <section id="new-win-protocol-xnet-perf"><!-- Level 3 section -->
        <title>Performance</title>
        <para>The XNET implementation should be similar to the old IPServer implementation, although XNET is expected
        to be slightly faster.</para>
        </section>

        <section id="new-win-protocol-xnet-disadv"><!-- Level 3 section -->
        <title>Disadvantages</title>
        <para>The one disadvantage is that the XNET and IPServer implementations are not compatible with each other.
        This makes it essential that your fbclient.dll version should match the version of the server binaries you are
        using (fbserver.exe or fb_inet_server.exe) exactly.  It will not be possible to to establish a local connection
        if this detail is overlooked. (A TCP localhost loopback connection via an ill-matched client will still do the
        trick, of course).</para>
        </section>
      </section>

      <section id="new-win-protocol-wnet" xreflabel="Change to WNET Protcol"><!-- Level 2 section -->
      <title>Change to WNET (<quote>NetBEUI</quote>) Protocol</title>
      <para>WNET (a.k.a. NetBEUI) protocol no longer performs client impersonation.</para>
      <para>In all previous Firebird  versions, remote requests via WNET are performed in the context of 
      the <firstterm>client security token</firstterm>. Since the server serves every connection according to 
      its client security credentials, this means that, if the client machine is running some OS user from an NT domain,
      that user should have appropriate permissions to access the physical database file, UDF libraries, etc., on the
      server filesystem. This situation is contrary to what is generally regarded as proper for a client-server 
      setup with a protected database.</para>
      <para>Such impersonation has been removed in Firebird 2.0.  WNET connections are now truly client-server and
      behave the same way as TCP ones, i.e., with no presumptions with regard to the rights of OS users.</para>
      </section>
    </section>

    <section id="new-garbage-collect"><!-- Level 1 section -->
    <sectioninfo>
      <title>Reworking of Garbage Collection</title>
      <author><firstname>V.</firstname><surname>Horsun</surname></author>
    </sectioninfo>
    <para>New GC thread implementation and combined cooperative + background activity.  More information to come.</para>
    </section>

    <section id="new-raw-device"><!-- Level 1 section -->
    <sectioninfo>
      <title>Storing Databases on Raw Devices (POSIX Only)</title>
      <author><firstname>E.</firstname><surname>Kunze, N. Samofatov</surname></author>
    </sectioninfo>
    <para>You can now store databases on raw devices under a POSIX OS and refer to the devices using database 
    aliases.  More information to come.</para>
    </section>

    <section id="new-serv-api"><!-- Level 1 section -->
    <sectioninfo>
      <title>Porting of the Services API to Classic is Complete</title>
      <author><firstname>N.</firstname><surname>Samofatov</surname></author>
    </sectioninfo>
    <para>Porting of the Services API to Classic architecture is now complete.  All Services API functions are now
    available on both Linux and Windows Classic servers, with no limitations. Known issues with GSEC error 
    reporting in previous versions of Firebird are eliminated.</para>
    </section>

    <section id="new-constraint-checks"><!-- Level 1 section -->
    <sectioninfo>
      <title>Reworking of Constraint Checking</title>
      <author><firstname>V.</firstname><surname>Horsun</surname></author>
    </sectioninfo>
    <para>More precise checks for PK/UK/FK constraints.  More information to come.</para>
    </section>

    <section id="new-lock-timeout"><!-- Level 1 section -->
    <sectioninfo>
      <title>Lock Timeout for WAIT Transactions</title>
      <author><firstname>A.</firstname><surname>Karyakin, D. Yemanov</surname></author>
    </sectioninfo>
    <para>All Firebird versions provide two transaction wait modes: <firstterm>NO WAIT</firstterm>
    and <firstterm>WAIT</firstterm>. NO WAIT mode means that lock conflicts and deadlocks are reported immediately, 
    while WAIT performs a blocking wait which times out only when the conflicting concurrent transaction ends by 
    being committed or rolled back.</para>
    <para>The new feature extends the WAIT mode by making provision to set a finite time interval to wait for the 
    concurrent transactions. If the timeout has passed, an error (isc_lock_timeout) is reported.</para>
    
    <para>Timeout intervals are specified per transaction, using the new TPB constant 
    <firstterm>isc_tpb_lock_timeout</firstterm> in the API or, in DSQL, the 
    <firstterm>LOCK TIMEOUT &lt;value&gt;</firstterm> clause of the SET TRANSACTION statement.</para>

    </section>

    <section id="new-search-ops"><!-- Level 1 section -->
    <sectioninfo>
      <title>New Implementation of String Search Operators</title>
      <author><firstname>N.</firstname><surname>Samofatov</surname></author>
    </sectioninfo>
    <orderedlist>
    <listitem><para>The operators now work correctly with BLOBs</para></listitem>
    <listitem><para>Pattern matching now uses a single-pass Knuth-Morris-Pratt algorithm</para></listitem>
    <listitem><para>The engine no longer crashes when NULL is used as ESCAPE character for LIKE</para></listitem>
    </orderedlist>
    <para>More information to come.</para>
    </section>

    <section id="new-updatable-views"><!-- Level 1 section -->
    <sectioninfo>
      <title>Reworking of Updatable Views</title>
      <author><firstname>D.</firstname><surname>Yemanov</surname></author>
    </sectioninfo>
    <para>A reworking has been done to resolve problems with views that are implicitly updatable, but still have update
    triggers.  This is an important change that will affect systems written to take advantage of the undocumented
    [mis]behaviour in previous versions.</para>  
    <para>For details, see the notes in
    <xref linkend="install-migrate-issues-sql"/> in the Installation chapter of these notes.</para>
    </section>

    <section id="new-shutdown-modes"><!-- Level 1 section -->
    <sectioninfo>
      <title>Additional Database Shutdown Modes Introduced</title>
      <author><firstname>N.</firstname><surname>Samofatov</surname></author>
    </sectioninfo>
    <para>Single-user and full shutdown modes are implemented using new <firstterm>[state]</firstterm> parameters for
    the <function>gfix -shut</function> and <function>gfix -online</function> commands.</para>

    <para><emphasis role="bold">Syntax Pattern</emphasis></para>
    <programlisting>
    gfix &lt;command&gt; [&lt;state&gt;] [&lt;options&gt;]
    &lt;command&gt;> ::= {-shut | -online}
    &lt;state&gt; ::= {normal | multi | single | full}
    &lt;options&gt; ::= {-force &lt;timeout&gt; | -tran | -attach}
    </programlisting>
    <itemizedlist>
    <listitem><para><emphasis>normal</emphasis> state = online database</para></listitem>
    <listitem><para><emphasis>multi</emphasis> state = multi-user shutdown mode (the legacy one, unlimited
attachments of SYSDBA/owner are allowed)</para></listitem>
    <listitem><para><emphasis>single</emphasis> state = single-user shutdown (only one attachment is allowed,
used by the restore process)</para></listitem>
    <listitem><para><emphasis>full</emphasis> state = full/exclusive shutdown (no attachments are allowed)</para></listitem>
    </itemizedlist>

    <para>For more details, refer to the section on Gfix <xref linkend="util-gfix-shut"/>, in the Utilities chapter.</para>
    </section>

    <section id="new-udf"><!-- Level 1 section -->
    <sectioninfo>
      <title>UDFs Improved re NULL Handling</title>
      <author><firstname>C.</firstname><surname>Valderrama</surname></author>
    </sectioninfo>
      <section id="new-udf-null"><!-- Level 2 section -->
      <title>Signalling SQL NULL</title>
      <itemizedlist>
      <listitem><para>Ability to signal SQL NULL via a NULL pointer (see <xref linkend="udf-nullpointer"/>).</para></listitem>
      <listitem><para>External function library ib_udf upgraded to allow the string functions ASCII_CHAR, LOWER, LPAD,
      LTRIM, RPAD, RTIM, SUBSTR and SUBSTRLEN to return NULL and have it interpreted correctly.</para>

      <para>The script <function>ib_udf_upgrade.sql</function> can be applied to pre-v.2 databases that have these 
      functions declared, to upgrade them to work with the upgraded library.  This script should be used only when 
      you are using the new ib_udf library with Firebird v2 and operation requests are modified to anticipate 
      nulls. <emphasis>(Coming in Beta 2.)</emphasis></para></listitem>
      </itemizedlist>
      </section>
    </section>

    <section id="new-concat-checking"><!-- Level 1 section -->
    <sectioninfo>
      <title>Run-time Checking for Concatenation Overflow</title>
      <author><firstname>D.</firstname><surname>Yemanov</surname></author>
    </sectioninfo>
    <para>Compile-time checking for concatenation overflow has been replaced by run-time checking.</para>
    <para>From Firebird 1.0 onward, concatenation operations have been checked for the possibility that the 
    resulting string might exceed the string length limit of 32,000 bytes, i.e. overflow.  This check was performed 
    during the statement prepare, using the declared operand sizes and would throw an error for an expressions such
    as:</para>
    <programlisting>
  CAST('qwe' AS VARCHAR(30000)) || CAST('rty' AS VARCHAR(30000))
    </programlisting>
    
    <para>From Firebird 2.0 onward, this expression throws only a warning at prepare time and the overflow check is 
    repeated at runtime, using the sizes of the actual operands.  The result is that our example will be executed
    without errors being thrown. The <firstterm>isc_concat_overflow</firstterm> exception is now thrown only for 
    actual overflows, thus bringing the behaviour of overflow detection for concatenation into line with that for 
    arithmetic operations.</para>
    </section>

    <section id="new-synchro-logic"><!-- Level 1 section -->
    <sectioninfo>
      <title>Changes to Synchronisation Logic</title>
      <author><firstname>N.</firstname><surname>Samofatov</surname></author>
    </sectioninfo>
    <orderedlist>
    <listitem><para>Lock contention in the lock manager and in the SuperServer thread pool manager has been reduced
significantly</para></listitem>
    <listitem><para>A rare race condition was detected and fixed, that could cause Superserver to hang during request
    processing until the arrival of the next request</para></listitem>
    <listitem><para>Lock manager memory dumps have been made more informative and OWN_hung is detected
    correctly</para></listitem>
<listitem><para>Decoupling of lock manager synchronization objects for different engine instances was
implemented</para></listitem>
    </orderedlist>
    </section>

    <section id="new-sixty-four-bit"><!-- Level 1 section -->
    <sectioninfo>
      <title>Support for 64-bit Platforms</title>
      <author><firstname>A.</firstname><surname>Peshkov, N. Samofatov</surname></author>
    </sectioninfo>
    <title></title>
    <para>Firebird 2.0 will support 64-bit platforms.</para>
    </section>

    <section id="new-record-enumerators"><!-- Level 1 section -->
    <sectioninfo>
      <title>Record Enumeration Limits Increased</title>
      <author><firstname>N.</firstname><surname>Samofatov</surname></author>
    </sectioninfo>
    <para>40-bit (64-bit internally) record enumerators have been introduced to overcome the ~30GB table size limit
    imposed by 32-bit record enumeration.</para>
    </section>

    <section id="new-debug"><!-- Level 1 section -->
    <sectioninfo>
      <title>Debugging Improvements</title>
      <author><firstname>Various</firstname><surname>Contributors</surname></author>
    </sectioninfo>

      <section id="new-debug-bugcheck"><!-- Level 2 section -->
      <title>Improved Reporting from Bugchecks</title>
      <para>BUGCHECK log messages now include file name and line number. (A. Brinkman)</para>
      </section>

      <section id="new-debug-struc-reports"><!-- Level 2 section -->
      <title>Updated Internal Structure Reporting</title>
      <para>Routines that print out various internal structures (DSQL node tree, BLR, DYN, etc) have been
      updated. (N. Samofatov)</para>
      </section>

      <section id="new-debug-logging"><!-- Level 2 section -->
      <title>New Debug Logging Facilities</title>
      <para>Thread-safe and signal-safe debug logging facilities have been implemented. (N. Samofatov)</para>
      </section>
    </section>

    <section id="new-connx"><!-- Level 1 section -->
    <sectioninfo>
      <title>Improved Connection Handling on POSIX Superserver</title>
      <author><firstname>A.</firstname><surname>Peshkov</surname></author>
    </sectioninfo>
    <para>Posix SS builds now handle SIGTERM and SIGINT to shutdown all connections gracefully. (A. Peshkov)</para>
    </section>

    <section id="new-invariant"><!-- Level 1 section -->
    <sectioninfo>
      <title>PSQL Invariant Tracking Reworked</title>
      <author><firstname>N.</firstname><surname>Samofatov</surname></author>
    </sectioninfo>
    <para>Invariant tracking in PSQL and request cloning logic were reworked to fix a number of issues with recursive
    procedures, for example SF bug #627057.</para>
    <para>Invariant tracking is the process performed by the BLR compiler and the optimizer to decide whether an
    &quot;invariant&quot; (an expression, which might be a nested subquery) is independent from the parent context.
    It is used to perform one-time evaluations of such expressions and then cache the result.</para>
    <para>If some invariant is not determined, we lose in performance. If some variant is wrongly treated as invariant,
    we see wrong results.</para>

    <para><emphasis role="bold">Example</emphasis></para>
    <programlisting>
  select * from rdb$relations
    where rdb$relation_id &lt;
      ( select rdb$relation_id from rdb$database )
    </programlisting>
    <para>This query performs only one fetch from rdb$database instead of evaluating the subquery for every row of
    rdb$relations.</para>
    </section>

    <section id="new-rb-retain"><!-- Level 1 section -->
    <sectioninfo>
      <title>ROLLBACK RETAIN Syntax Support</title>
      <author><firstname>D.</firstname><surname>Yemanov</surname></author>
    </sectioninfo>
    <para>Firebird 2.0 adds an optional <literal>RETAIN</literal> clause to the DSQL <literal>ROLLBACK</literal>
    statement to make it consistent with COMMIT [RETAIN].</para>
    <para>See <xref linkend="dml-rb-retain"/> in the chapter about DML.</para>
    </section>
    
    <section id="new-rootfind"><!-- Level 1 section -->
    <sectioninfo>
      <title>No More Registry Search on Win32 Servers</title>
      <author><firstname>D.</firstname><surname>Yemanov</surname></author>
    </sectioninfo>
    <para>The root directory lookup path has changed so that processes on the Windows servers no longer use the
    Registry.</para>
    </section>
    
    <section id="new-optimiz"><!-- Level 1 section -->
    <sectioninfo>
      <title>More Optimizer Improvements</title>
      <author><firstname>A.</firstname><surname>Brinkman</surname></author>
    </sectioninfo>
    <para>Better cost-based calculation has been included in the optimizer routines.</para>
    </section>
    
    <section id="new-ods-changes"><!-- Level 1 section -->
    <sectioninfo>
      <title>ODS Changes</title>
      <author><firstname>Various</firstname><surname>Contributors</surname></author>
    </sectioninfo>
    <para>The new On-Disk Structure (ODS) is ODS11.</para>
    <!-- INSERT A REFERENCE HERE -->
    <para>For more information, see the chapter <xref linkend="apiods-ods"/>.</para>
    </section>

  </chapter>
