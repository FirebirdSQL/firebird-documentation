  <chapter id="rnfbtwo-udf">
  <chapterinfo>
    <title>External Functions (UDFs)</title>
  </chapterinfo>
    <section id="udf-nullpointer" xreflabel="Signal SQL NULL in UDFs"><!-- Level 1 section -->
    <sectioninfo>
      <title>Ability to Signal SQL NULL via a Null Pointer</title>
      <author><firstname>C.</firstname><surname>Valderrama</surname></author>
    </sectioninfo>
    <para>Previous to Firebird 2, UDF authors only could guess that their UDFs might return a null, but they had no
    way to ascertain it.  This led to several problems with UDFs. It would often be assumed that a null string
    would be passed as an empty string, a null numeric would be equivalent to zero and a null date would mean the
    base date used by the engine.</para>

    <para>For a numeric value, the author could not always assume null if the UDF was compiled for an environment
    where it was known that null was not normally recognized.</para>

    <para>Several UDFs, including the ib_udf library distributed with Firebird, assumed that an empty string was
    more likely to signal a null parameter than a string of length zero. The trick may work with CHAR type, since
    the minimum declared CHAR length is one and would contain a blank character normally:  hence, binary zero in
    the first position would have the effect of signalling NULL.</para>

    <para>However, but it is not applicable to VARCHAR or CSTRING, where a length of zero is valid.</para>

    <para>The other solution was to rely on raw descriptors, but this imposes a lot more things to check than they
    would want to tackle.  The biggest problem is that the engine won't obey the declared type for a parameter;
    it will simply send whatever data it has for that parameter, so the UDF is left to decide whether to reject the
    result or to try to convert the parameter to the expected data type.</para>

    <para>Since UDFs have no formal mechanism to signal errors, the returned value would have to be used as an
    indicator.</para>

    <para>The basic problem was to keep the simplicity of the typical declarations (no descriptors) while at the
    same time being able to signal null.</para>

    <para>The engine normally passed UDF parameters by reference.  In practical terms, that means passing a pointer
    to the data to tell the UDF that we have SQL NULL.  However, we could not impose the risk of crashing an
    unknown number of different, existing public and private UDFs that do nt expect NULL.
    The syntax had to be enhanced to enable NULL handling to be requested explicitly.</para>

    <para>The solution, therefore, is to restrict a request for SQL NULL signaling to UDFs that are known to be
    capable of dealing with the new scenario. To avoid adding more keywords, the NULL keyword is appended to the
    UDF parameter type and no other change is required.</para>

    <para><emphasis role="bold">Example</emphasis></para>
    <programlisting>
  declare external function sample
    int null
    returns int by value...;
    </programlisting>

    <para>If you are already using functions from <function>ib_udf</function> and want to take advantage of null
    signaling (and null recognition) in some functions, you should connect to your desired database, run the script
    <function>../misc/upgrade/ib_udf_upgrade.sql</function> that is in the Firebird directory, and commit
    afterwards.</para>
    <caution><para>It is recommended to do this when no other users are connected to the database.</para></caution>

    <para>The code in the listed functions in that script has been modified to recognize null only when NULL is
    signaled by the engine. Therefore, starting with FB v2, <function>rtrim()</function>,
    <function>ltrim()</function> and several other string functions no longer assume that an empty string means a
    NULL string.</para>

    <para>The functions won't crash if you don't upgrade:  they will simply be unable to detect NULL.</para>

    <para>If you have never used ib_udf in your database and want to do so, you should connect to the database, run
    the script <function>../udf/ib_udf2.sql</function>, preferably when no other users are connected, and commit
    afterwards.</para>

    <note>
    <itemizedlist>
    <listitem><para>Note the &quot;2&quot; at the end of the name.</para></listitem>
    <listitem><para>The original script for FB v1.5 is still available in the same directory.</para></listitem>
    </itemizedlist>
    </note>
    </section>

    <section id="udf-diagnostics"><!-- Level 1 section -->
    <sectioninfo>
      <title>UDF library diagnostic messages improved</title>
      <author><firstname>A.</firstname><surname>Peshkov</surname></author>
    </sectioninfo>
    <para>Diagnostics regarding a missing/unusable UDF module have previously made it hard to tell whether a module
    was missing or access to it was being denied due to the UDFAccess setting in firebird.conf. Now we have
    separate, understandable messages for each case.</para>
    </section>

    <section id="udf-func"><!-- Level 1 section -->
    <title>UDFs Added and Changed</title>
    <para>UDFs added or enhanced in Firebird 2.0's supplied libraries are:</para>
      <section id="udf-func-ibudfsrand"><!-- Level 2 section -->
      <sectioninfo>
      <title>IB_UDF_srand()</title>
      <author><firstname>A.</firstname><surname>dos Santos Fernandes</surname></author>
      </sectioninfo>
      <para>IB_UDF_srand is now available in the IB_UDF library.  Description to come.</para>
      </section>

      <section id="udf-func-ibudflower"><!-- Level 2 section -->
      <title>IB_UDF_lower</title>
      <para>The function <function>IB_UDF_lower()</function> in the IB_UDF library might conflict with the new
      internal function <function>lower()</function>, if you try to declare it in a database using the ib_udf.sql
      script from a previous Firebird version.</para>

      <programlisting>
  /* ib_udf.sql declaration that now causes conflict */
  DECLARE EXTERNAL FUNCTION lower
      CSTRING(255)
      RETURNS CSTRING(255) FREE_IT
      ENTRY_POINT 'IB_UDF_lower' MODULE_NAME 'ib_udf';
      </programlisting>

      <para>The problem will be resolved in the latest version of the new ib_udf2.sql script, where the old UDF is
      declared using a quoted identifier.</para>
      <programlisting>
  /* New declaration in ib_udf2.sql */
  DECLARE EXTERNAL FUNCTION "LOWER"
    CSTRING(255) NULL
    RETURNS CSTRING(255) FREE_IT
    ENTRY_POINT 'IB_UDF_lower' MODULE_NAME 'ib_udf';
      </programlisting>

      </section>
    </section>
  </chapter>