<chapter id="rnfb210-ddl">
  <chapterinfo>
    <title>Data Definition Language (DDL)</title>
  </chapterinfo>
  <para>In this chapter are the additions and improvements that have been added to the SQL data definition
  language subset in the Firebird 2 development cycle.  Those marked as introduced in v.2.1 are available only
  to ODS 11.1 and higher databases.</para>

  <section id="rnfb210-ddl-links"><!-- Level 1 section -->
    <title>Quick Links</title>
    <itemizedlist spacing="compact">
      <listitem>
        <para><xref linkend="rnfb210-dbtriggers"/><!-- Database Triggers --></para>
      </listitem>
      <listitem>
        <para><xref linkend="rnfb210-globaltemp"/><!-- Global Temporary Tables --></para>
      </listitem>
      <listitem>
        <para><xref linkend="rnfb210-rnfb20x-ddl-views-aliases"/><!-- Column Aliases in CREATE VIEW --></para>
      </listitem>
      <listitem>
        <para><xref linkend="rnfb210-rnfb20x-ddl-crttrg"/><!-- CREATE TRIGGER SQL2003 Variant --></para>
      </listitem>
      <listitem>
        <para><xref linkend="rnfb210-rnfb20x-ddl-genalways"/><!--Alternative Syntax for Computed Fields --></para>
      </listitem>
      <listitem>
        <para><xref linkend="rnfb20x-ddl-syntax-create-sequence"/><!-- CREATE SEQUENCE --></para>
      </listitem>
      <listitem>
        <para><xref linkend="rnfb20x-ddl-syntax-revoke-admin"/><!-- REVOKE ADMIN OPTION --></para>
      </listitem>
      <listitem>
        <para><xref linkend="rnfb20x-ddl-syntax-setdrop"/><!-- SET/DROP DEFAULT Clauses --></para>
      </listitem>
      <listitem>
        <para><xref linkend="rnfb20x-ddl-syntax-exceptions"/><!-- Syntaxes for Changing Exceptions --></para>
      </listitem>
      <listitem>
        <para><xref linkend="rnfb20x-ddl-syntax-alter-ext-func"/><!-- ALTER EXTERNAL FUNCTION --></para>
      </listitem>
      <listitem>
        <para><xref linkend="rnfb20x-ddl-syntax-comment"/><!-- COMMENT Statement --></para>
      </listitem>
      <listitem>
        <para><xref linkend="rnfb20x-ddl-syntax-view-extension"/><!-- CREATE VIEW Extensions --></para>
      </listitem>
      <listitem>
        <para><xref linkend="rnfb20x-ddl-usage-foreign_keys"/><!-- Create FKs Without Exclusive Access --></para>
      </listitem>
      <listitem>
        <para><xref linkend="rnfb20x-ddl-usage-view-updates"/><!-- Changed Logic for View Updates --></para>
      </listitem>
      <listitem>
        <para><xref linkend="rnfb20x-ddl-usage-blob-symbols"/><!-- Descriptive Identifiers for BLOB Subtypes --></para>
      </listitem>
      <listitem>
        <para><xref linkend="rnfb210-intl-crtcolln"/><!-- CREATE COLLATION statement --></para>
      </listitem>

    </itemizedlist>

    <section id="rnfb210-dbtriggers" xreflabel="Database Triggers"><!-- Level 2 section -->
      <sectioninfo>
      <title>Database Triggers</title>
        <author>
          <firstname>Adriano</firstname>
          <surname>dos Santos Fernandes</surname>
        </author>
      </sectioninfo>
      <para><emphasis role="bold">(v.2.1)</emphasis> A <firstterm>database trigger</firstterm> is a PSQL module
      that is executed when a connection or transaction event occurs.  The events and the timings of their
      triggers are as follows.-</para>
      <variablelist>
        <varlistentry>
          <term><filename>CONNECT</filename></term>
          <listitem>
            <itemizedlist>
              <listitem>
                <para>Database connection is established</para>
              </listitem>
              <listitem>
                <para>A transaction is started</para>
              </listitem>
              <listitem>
                <para>Triggers are fired;  uncaught exceptions roll back the transaction, disconnect
                the attachment and are returned to the client</para>
              </listitem>
              <listitem>
                <para>The transaction is committed</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename>DISCONNECT</filename></term>
          <listitem>
            <itemizedlist>
              <listitem>
                <para>A transaction is started</para>
              </listitem>
              <listitem>
                <para>Triggers are fired;  uncaught exceptions roll back the transaction, disconnect
                the attachment and are swallowed</para>
              </listitem>
               <listitem>
                <para>The transaction is committed</para>
              </listitem>
              <listitem>
                <para>The attachment is disconnected</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename>TRANSACTION START</filename></term>
          <listitem>
            <para>Triggers are fired in the newly-created user transaction;  uncaught
            exceptions are returned to the client and the transaction is rolled back.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename>TRANSACTION COMMIT</filename></term>
          <listitem>
            <para>Triggers are fired in the committing transaction; uncaught exceptions roll
            back the trigger's savepoint, the commit command is aborted and the exception is
            returned to the client.</para>
            <note>
              <para>For two-phase transactions, the triggers are fired in the <quote>prepare</quote>,
              not in the commit.</para>
            </note>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename>TRANSACTION ROLLBACK</filename></term>
          <listitem>
            <para>Triggers are fired during the roll-back of the transaction.  Changes done will
            be rolled back with the transaction.  Exceptions are swallowed</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para><emphasis role="bold">Syntax</emphasis></para>

      <programlisting>
&lt;database-trigger&gt; ::=
  {CREATE | RECREATE | CREATE OR ALTER}
    TRIGGER &lt;name&gt;
    [ACTIVE | INACTIVE]
    ON &lt;event&gt;
    [POSITION &lt;n&gt;]
  AS
    BEGIN
      ...
    END

&lt;event&gt; ::=
  CONNECT
    | DISCONNECT
    | TRANSACTION START
    | TRANSACTION COMMIT
    | TRANSACTION ROLLBACK
      </programlisting>

      <para><emphasis role="bold">Rules and Restrictions</emphasis></para>
      <orderedlist numeration="arabic">
        <listitem>
          <para>Database triggers type cannot be changed.</para>
        </listitem>
        <listitem>
          <para>Permission to create, recreate, create or alter, or drop database triggers is
          restricted to the database owner and SYSDBA.</para>
        </listitem>

      </orderedlist>

      <section id="rnfb210-dbtriggers-utils"><!-- Level 3 section -->
        <title>Utilities Support for Database Triggers</title>
        <para>New parameters were added to gbak, nbackup and isql to suppress
        database triggers from running.  They are available only to the database owner
        and SYSDBA:</para>
        <programlisting>
  gbak -nodbtriggers
  isql -nodbtriggers
  nbackup -T
        </programlisting>
      </section>
    </section>

    <section id="rnfb210-globaltemp" xreflabel="Global Temporary Tables"><!-- Level 2 section -->
      <sectioninfo>
        <title>Global Temporary Tables</title>
        <author>
          <firstname>Vlad</firstname>
          <surname>Khorsun</surname>
        </author>
       </sectioninfo>
      <para><emphasis role="bold">(v.2.1)</emphasis> Global temporary tables (GTTs) are tables that are stored 
      in the system catalogue with permanent metadata, but with temporary data.  Data from different connections 
      (or transactions, depending on the scope) are isolated from each other, but the metadata of the GTT are shared
      among all connections and transactions.</para>

      <para>There are two kinds of GTT:</para>
      <itemizedlist>
        <listitem>
          <para>with data that persists for the lifetime of connection in which the
          specified GTT was referenced;  and</para>
        </listitem>
        <listitem>
          <para>with data that persists only for the lifetime of the referencing transaction.</para>
        </listitem>
      </itemizedlist>

      <section id="rnfb210-globaltemp-rules"><!-- Level 3 section -->
	<title>Syntax and Rules for GTTs</title>
	<programlisting>
CREATE GLOBAL TEMPORARY TABLE
  ...
  [ON COMMIT &lt;DELETE | PRESERVE&gt; ROWS]
	</programlisting>
	<para>Creates the metadata for the temporary table in the system catalogue.</para>
	<para>The clause ON COMMIT sets the kind of temporary table:</para>
	<variablelist>
	  <varlistentry>
	    <term>ON COMMIT PRESERVE ROWS</term>
	    <listitem>
	      <para>Data left in the given table after the end of the transaction remain in database
              until the connection ends.</para>
	    </listitem>
          </varlistentry>

	  <varlistentry>
	    <term>ON COMMIT DELETE ROWS</term>
	    <listitem>
	      <para>Data in the given table  are deleted from the database immediately after the end
              of the transaction.  ON COMMIT DELETE ROWS is used by default if the optional clause
              ON COMMIT is not specified.</para>
	    </listitem>
          </varlistentry>

	  <varlistentry>
	    <term>CREATE GLOBAL TEMPORARY TABLE</term>
	    <listitem>
	      <para>is a regular DDL statement that is processed by the engine the same way as a
              CREATE TABLE statement is processed.  Accordingly, it not possible to create or drop a
              GTT within a stored procedure or trigger.</para>
	    </listitem>
          </varlistentry>
        </variablelist>

        <para><emphasis role="bold">Relation Type</emphasis></para>
        <para>GTT definitions are distinguished in the system catalogue from one another and from
        permanent tables by the value of <filename>RDB$RELATIONS.RDB$RELATION_TYPE</filename>:</para>
        <itemizedlist>
          <listitem>
            <para>A GTT with ON COMMIT PRESERVE ROWS option has RDB$RELATION_TYPE = 4</para>
            <para>A GTT with ON COMMIT DELETE ROWS option has RDB$RELATION_TYPE =  5.</para>
          </listitem>
        </itemizedlist>
        <note>
          <para>For the full list of values, see RDB$TYPES.</para>
        </note>

        <para><emphasis role="bold">Structural Feature Support</emphasis></para>
        <para>The same structural features that you can apply to regular tables (indexes, triggers,
        field-level and table level constraints) are also available to a GTT, with certain restrictions
        on how GTTs and regular tables can interrelate.-</para>
        <orderedlist numeration="loweralpha">
          <listitem>
            <para>references between persistent and temporary tables are forbidden</para>
          </listitem>
          <listitem>
            <para>A GTT with ON COMMIT PRESERVE ROWS cannot have a reference on a GTT with
		ON COMMIT DELETE ROWS</para>
          </listitem>
          <listitem>
            <para>A domain constraint cannot have a reference to any GTT.</para>
          </listitem>
        </orderedlist>
      </section>

      <section id="rnfb210-globaltemp-impl"><!-- Level 3 section -->
        <title>Implementation Notes</title>
        <para>An instance of a GTT&mdash;a set of data rows created by and visible within the given
        connection or transaction&mdash;is created when the GTT is referenced for the first time,
        usually at statement prepare time. Each instance has its own private set of pages on which
        data and indexes are stored. The data rows and indexes have the same physical storage layout
        as permanent tables.</para>
        <para>When the connection or transaction ends, all pages of a GTT instance are released
        immediately.  It is similar to what happens when a DROP TABLE is performed, except that the
        metadata definition is retained, of course. This is much quicker than the traditional
        row-by-row delete + garbage collection of deleted record versions.</para>
        <note>
          <para>This method of deletion does not cause DELETE triggers to fire, so do not be tempted to
          define Before or After Delete triggers on the false assumption that you can incorporate some
          kind of <quote>last rites</quote> that will be execute just as your temporary data breathes
          its last!</para>
        </note>

	<para>The data and index pages of all GTT instances are placed in separate temporary files.
        Each connection has its own temporary file created the first time the connection references
        some GTT.</para>
        <note>
          <para>These temporary files are always opened with Forced Writes = OFF, regardless of
          the database setting for Forced Writes.</para>
        </note>

        <para>No limit is placed on the number of GTT instances that can coexist. If you have N
        transactions active simultaneously and each transaction has referenced some GTT then you will
        have N instances of the GTT.</para>
      </section>
    </section>

    <section id="rnfb210-rnfb20x-ddl-views"><!-- Level 2 section -->
      <sectioninfo>
        <title>Views Enhancements</title>
        <author><firstname>D.</firstname><surname>Yemanov</surname></author>
      </sectioninfo>
      <para>A couple of enhancements were made to view definitions in v.2.1.-</para>

      <section id="rnfb210-rnfb20x-ddl-views-aliases" xreflabel="Column Aliases in CREATE VIEW"><!-- Level 3 section -->
        <title>Use Column Aliases in CREATE VIEW</title>
        <para>Feature request<ulink url="http://tracker.firebirdsql.org/browse/CORE-831">CORE-831</ulink></para>
        <para><emphasis role="bold">(v.2.1)</emphasis> Column aliases can now be processed as column names
        in the view definition.</para>
        <para><emphasis role="bold">Example</emphasis></para>
        <programlisting>
CREATE VIEW V_TEST AS
  SELECT ID,
         COL1 AS CODE,
         COL2 AS NAME
  FROM TAB;
        </programlisting>
      </section>

    </section>

    <section id="rnfb210-rnfb20x-ddl-crttrg" xreflabel="CREATE TRIGGER SQL2003 Variant"><!-- Level 2 section -->
      <sectioninfo>
        <title>SQL2003 compliance for CREATE TRIGGER</title>
        <author><firstname>A.</firstname><surname>dos Santos Fernandes</surname></author>
      </sectioninfo>
      <para><ulink url="http://tracker.firebirdsql.org/browse/CORE-711">Feature request CORE-711</ulink></para>
      <para><emphasis role="bold">(v.2.1)</emphasis> Alternative syntax is now available for CREATE TRIGGER
      that complies with SQL2003.</para>
      
      <para><emphasis role="bold">Syntax Patterns</emphasis></para>
      <para>Existing Form</para>
      <programlisting>
create trigger t1
  FOR atable
  [active] before insert or update
as
  begin
    ...
  end
      </programlisting>
      <para>SQL2003 Form</para>
      <programlisting>
create trigger t2 
  [active] before insert or update 
  ON atable
as 
  begin
    ...
  end
      </programlisting>
      <para>Note the different positions of the clause identifying the table and the different keywords 
      pointing to the table identifier (existing: FOR; SQL2003: ON).</para>
      
      <para>Both syntaxes are valid and are available also for all CREATE TRIGGER, RECREATE TRIGGER and
      CREATE OR ALTER TRIGGER statements.</para>
    </section>

    <section id="rnfb210-rnfb20x-ddl-genalways" xreflabel="Alternative Syntax for Computed Fields"><!-- Level 2 section -->
      <sectioninfo>
        <title>SQL2003 Compliant Alternative for Computed Fields</title>
        <author><firstname>D.</firstname><surname>Yemanov</surname></author>
      </sectioninfo>
      <para><ulink url="http://tracker.firebirdsql.org/browse/CORE-1386">Feature request
      CORE-1386</ulink></para>
      <para><emphasis role="bold">(v.2.1)</emphasis> SQL-compliant alternative syntax <command>GENERATED ALWAYS AS</command> was implemented for
      defining a computed field in CREATE/ALTER TABLE.</para>

      <para><emphasis role="bold">Syntax Pattern</emphasis></para>
      <programlisting>
&lt;column name&gt; [&lt;type&gt;] GENERATED ALWAYS AS ( &lt;expr&gt; )
      </programlisting>
      <para>It is fully equivalent semantically with the legacy form:</para>
      <programlisting>
&lt;column name&gt; [&lt;type&gt;] COMPUTED [BY] ( &lt;expr&gt; )
      </programlisting>

      <para><emphasis role="bold">Example</emphasis></para>
      <programlisting>
CREATE TABLE T (PK INT, EXPR GENERATED ALWAYS AS (PK + 1))
      </programlisting>
    </section>
<!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->
<!-- V.2.0.X -->
<!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->
    <section id="rnfb20x-ddl-syntax-create-sequence" xreflabel="CREATE SEQUENCE"><!-- Level 2 section -->
      <sectioninfo>
        <author><firstname>D.</firstname><surname>Yemanov</surname></author>
        <title>CREATE SEQUENCE</title>
      </sectioninfo>
      <para>SEQUENCE has been introduced as a synonym for GENERATOR, in accordance with SQL-99.
      SEQUENCE is a syntax term described in the SQL specification, whereas GENERATOR is a legacy
      InterBase syntax term. Use of the standard SEQUENCE syntax in your applications is recommended.</para>

      <para>A sequence generator is a mechanism for generating successive exact numeric values,
      one at a time. A sequence generator is a named schema object.  In dialect 3 it is a BIGINT,
      in dialect 1 it is an INTEGER.</para>
      <para><emphasis role="bold">Syntax patterns</emphasis></para>
      <programlisting>
    CREATE { SEQUENCE | GENERATOR } &lt;name&gt;
    DROP { SEQUENCE | GENERATOR } &lt;name&gt;
    SET GENERATOR &lt;name&gt; TO &lt;start_value&gt;
    ALTER SEQUENCE &lt;name&gt; RESTART WITH &lt;start_value&gt;
    GEN_ID (&lt;name&gt;, &lt;increment_value&gt;)
    NEXT VALUE FOR &lt;name&gt;
      </programlisting>

      <para><emphasis role="bold">Examples</emphasis></para>
      <para>1.</para>
      <programlisting>
   CREATE SEQUENCE S_EMPLOYEE;
      </programlisting>
      <para>2.</para>
      <programlisting>
   ALTER SEQUENCE S_EMPLOYEE RESTART WITH 0;
      </programlisting>

      <para>See also the notes about <xref linkend="rnfb20x-dml-nextvalue"/>. </para>

      <warning>
        <para>ALTER SEQUENCE, like SET GENERATOR, is a good way to screw up the generation of
        key values!</para>
      </warning>
    </section>

    <section id="rnfb20x-ddl-syntax-revoke-admin" xreflabel="REVOKE ADMIN OPTION"><!-- Level 2 section -->
      <sectioninfo>
        <author><firstname>D.</firstname><surname>Yemanov</surname></author>
        <title>REVOKE ADMIN OPTION</title>
      </sectioninfo>
      <para>SYSDBA, the database creator or the owner of an object can grant rights on that
       object to other users. However, those rights can be made inheritable, too. By using
       WITH GRANT OPTION, the grantor gives the grantee the right to become a grantor of
       the same rights in turn. This ability can be removed by the original grantor with
       REVOKE GRANT OPTION FROM user.</para>

      <para>However, there's a second form that involves roles. Instead of specifying the same
      rights for many users (soon it becomes a maintenance nightmare) you can create a role,
      assign a package of rights to that role and then grant the role to one or more users.  Any
      change to the role's rights affect all those users.</para>

      <para>By using WITH ADMIN OPTION, the grantor (typically the role creator) gives the grantee
      the right to become a grantor of the same role in turn. Until FB v2, this ability couldn't
      be removed unless the original grantor fiddled with system tables directly.  Now, the
      ability to grant the role can be removed by the original grantor with REVOKE ADMIN OPTION
      FROM user.</para>
    </section>

    <section id="rnfb20x-ddl-syntax-setdrop" xreflabel="SET/DROP DEFAULT Clauses"><!-- Level 2 section -->
      <sectioninfo>
        <author><firstname>C.</firstname><surname>Valderrama</surname></author>
        <title>SET/DROP DEFAULT Clauses for ALTER TABLE</title>
      </sectioninfo>
      <para>Domains allow their defaults to be changed or dropped. It seems natural that table fields can be
      manipulated the same way without going directly to the system tables.</para>
      <para><emphasis role="bold">Syntax Pattern</emphasis></para>
      <programlisting>
  ALTER TABLE t ALTER [COLUMN] c SET DEFAULT default_value;
  ALTER TABLE t ALTER [COLUMN] c DROP DEFAULT;
      </programlisting>

      <note><itemizedlist>
      <listitem><para>Array fields cannot have a default value.</para></listitem>
      <listitem><para>If you change the type of a field, the default may remain in place. This is because a field
      can be given the type of a domain with a default but the field itself can override such domain. On the other
      hand, the field can be given a type directly in whose case the default belongs logically to the field
      (albeit the information is kept on an implicit domain created behind scenes).</para></listitem>
      </itemizedlist></note>
    </section>

    <section id="rnfb20x-ddl-syntax-exceptions" xreflabel="Syntaxes for Changing Exceptions"><!-- Level 2 section -->
      <sectioninfo>
        <author><firstname>D.</firstname><surname>Yemanov</surname></author>
        <title>Syntaxes for Changing Exceptions</title>
      </sectioninfo>
      <para>The DDL statements RECREATE EXCEPTION and CREATE OR ALTER EXCEPTION (feature
      request SF #1167973) have been implemented, allowing either creating, recreating or altering
      a custom exception, depending on whether it already exists.</para>
      <section id="rnfb20x-ddl-syntax-recreate-exception"><!-- Level 3 section -->
        <title>RECREATE EXCEPTION</title>
        <para>RECREATE EXCEPTION is exactly like CREATE EXCEPTION if the exception does not already exist.
        If it does exist, its definition will be completely replaced, if there are no dependencies on it.</para>
        </section>
      <section id="rnfb20x-ddl-syntax-create-or-alter-exception"><!-- Level 3 section -->
        <title>CREATE OR ALTER EXCEPTION</title>
        <para>CREATE OR ALTER EXCEPTION will create the exception if it does not already exist, or will alter the
        definition if it does, without affecting dependencies.</para>
      </section>
    </section>

    <section id="rnfb20x-ddl-syntax-alter-ext-func" xreflabel="ALTER EXTERNAL FUNCTION"><!-- Level 2 section -->
      <sectioninfo>
        <title>ALTER EXTERNAL FUNCTION</title>
        <author><firstname>C.</firstname><surname>Valderrama</surname></author>
      </sectioninfo>
      <para>ALTER EXTERNAL FUNCTION has been implemented, to enable the <function>entry_point</function>
      or the <function>module_name</function> to be changed when the UDF declaration cannot be dropped due
      to existing dependencies.</para>
    </section>

    <section id="rnfb20x-ddl-syntax-comment" xreflabel="COMMENT Statement"><!-- Level 2 section -->
      <sectioninfo>
        <title>COMMENT Statement</title>
        <author><firstname>C.</firstname><surname>Valderrama</surname></author>
      </sectioninfo>
      <para>The COMMENT statement has been implemented for setting metadata descriptions.</para>

      <para><emphasis role="bold">Syntax Pattern</emphasis></para>
      <programlisting>
  COMMENT ON DATABASE IS {'txt'|NULL};
  COMMENT ON &lt;basic_type&gt; name IS {'txt'|NULL};
  COMMENT ON COLUMN tblviewname.fieldname IS {'txt'|NULL};
  COMMENT ON PARAMETER procname.parname IS {'txt'|NULL};
        </programlisting>

      <para>An empty literal string '' will act as NULL since the internal code (DYN in this case) works this way
      with blobs.</para>
      <programlisting>
  &lt;basic_type&gt;:
     DOMAIN
     TABLE
     VIEW
     PROCEDURE
     TRIGGER
     EXTERNAL FUNCTION
     FILTER
     EXCEPTION
     GENERATOR
     SEQUENCE
     INDEX
     ROLE
     CHARACTER SET
     COLLATION
     SECURITY CLASS<superscript>1</superscript>
      </programlisting>
      <para><superscript>1</superscript>not implemented,  because this type is hidden.</para>
    </section>

    <section id="rnfb20x-ddl-syntax-view-extension" xreflabel="CREATE VIEW Extensions"><!-- Level 2 section -->
      <sectioninfo>
        <title>Extensions to CREATE VIEW Specification</title>
        <author><firstname>D.</firstname><surname>Yemanov</surname></author>
      </sectioninfo>
      <para>FIRST/SKIP and ROWS syntaxes and PLAN and ORDER BY clauses can now be used in view specifications.</para>
      <para>From Firebird 2.0 onward, views are treated as fully-featured SELECT expressions.  Consequently,
      the clauses FIRST/SKIP, ROWS, UNION, ORDER BY and PLAN are now allowed in views and work as expected.</para>
      <para><emphasis>Syntax</emphasis></para>
      <para>For syntax details, refer to <xref linkend="rnfb20x-dml-select-syntax"/> in the chapter about DML.</para>
      </section>

      <section id="rnfb20x-ddl-syntax-recreate-trigger"><!-- Level 2 section -->
      <sectioninfo>
        <title>RECREATE TRIGGER Statement Implemented</title>
        <author><firstname>D.</firstname><surname>Yemanov</surname></author>
      </sectioninfo>
      <para>The DDL statement RECREATE TRIGGER statement is now available in DDL. Semantics are the same as for 
      other RECREATE statements.</para>
    </section>

    <section id="rnfb20x-ddl-usage"><!-- Level 1 section -->
    <title>Usage Enhancements</title>
    <para>The following changes will affect usage or existing, pre-Firebird 2 workarounds in existing applications or
    databases to some degree.</para>
      <section id="rnfb20x-ddl-usage-foreign_keys" xreflabel="Create FKs Without Exclusive Access"><!-- Level 2 section -->
      <sectioninfo>
        <title>Creating Foreign Key Constraints No Longer Requires Exclusive Access</title>
        <author><firstname>V.</firstname><surname>Horsun</surname></author>
      </sectioninfo>
      <para>Now it is possible to create foreign key constraints without needing to get an exclusive lock
        on the whole database. </para>
      </section>

      <section id="rnfb20x-ddl-usage-view-updates" xreflabel="Changed Logic for View Updates"><!-- Level 2 section -->
      <title>Changed Logic for View Updates</title>
      <para>Apply NOT NULL constraints to base tables only, ignoring the ones inherited by view columns from domain
      definitions.</para>
      </section>

      <section id="rnfb20x-ddl-usage-blob-symbols" xreflabel="Descriptive Identifiers for BLOB Subtypes"><!-- Level 2 section -->
      <sectioninfo>
        <title>Descriptive Identifiers for BLOB Subtypes</title>
        <author><firstname>A.</firstname><surname>Peshkov, C. Valderrama</surname></author>
      </sectioninfo>
      <para>Previously, the only allowed syntax for declaring a blob filter was:</para>
      <programlisting>
   declare filter &lt;name&gt; input_type &lt;number&gt; output_type &lt;number&gt;
     entry_point &lt;function_in_library&gt; module_name &lt;library_name&gt;;
      </programlisting>

      <para>The alternative new syntax is:</para>
      <programlisting>
   declare filter &lt;name&gt; input_type &lt;mnemonic&gt; output_type &lt;mnemonic&gt;
     entry_point &lt;function_in_library&gt; module_name &lt;library_name&gt;;
      </programlisting>

      <para>where &lt;mnemonic&gt; refers to a subtype identifier known to the engine.</para>

      <para>Initially they are binary, text and others mostly for internal usage, but an adventurous user
could write a new mnemonic in rdb$types and use it, since it is parsed only at declaration time. The engine keeps the
numerical value. Remember, only negative subtype values are meant to be defined by users.</para>
      <para>To get the predefined types, do</para>
      <programlisting>
   select RDB$TYPE, RDB$TYPE_NAME, RDB$SYSTEM_FLAG
     from rdb$types
     where rdb$field_name = 'RDB$FIELD_SUB_TYPE';

   RDB$TYPE   RDB$TYPE_NAME                RDB$SYSTEM_FLAG
   ========= ============================ =================

           0 BINARY                                     1
           1 TEXT                                       1
           2 BLR                                        1
           3 ACL                                        1
           4 RANGES                                     1
           5 SUMMARY                                    1
           6 FORMAT                                     1
           7 TRANSACTION_DESCRIPTION                    1
           8 EXTERNAL_FILE_DESCRIPTION                  1
      </programlisting>

      <para><emphasis role="bold">Examples</emphasis></para>

      <para>Original declaration:</para>
      <programlisting>
    declare filter pesh input_type 0 output_type 3
      entry_point 'f' module_name 'p';
      </programlisting>

      <para>Alternative declaration:</para>
      <programlisting>
    declare filter pesh input_type binary output_type acl
      entry_point 'f' module_name 'p';
      </programlisting>

      <para>Declaring a name for a user defined blob subtype (remember to commit after the insertion):</para>
      <programlisting>
  SQL&gt; insert into rdb$types
  CON&gt; values('RDB$FIELD_SUB_TYPE', -100, 'XDR', 'test type', 0);
  SQL&gt; commit;
  SQL&gt; declare filter pesh2 input_type xdr output_type text
  CON&gt; entry_point 'p2' module_name 'p';
  SQL&gt; show filter pesh2;
  BLOB Filter: PESH2
          Input subtype: -100 Output subtype: 1
          Filter library is p
          Entry point is p2
        </programlisting>
        </section>
      </section>


  </section><!-- End of DDL section -->

</chapter>