  <chapter id="rnfb210-new">
  <chapterinfo>
    <title>New in Firebird 2</title>
  </chapterinfo>

  <!-- ============ -->
  <!-- NEW FEATURES -->
  <!-- ============ -->

  <section id="rnfb210-new-feat"><!-- Level 1 section -->
    <title>New Features Implemented</title>
    <para>This chapter summarises the new features implemented in Firebird 2, encompassing both v.2.1 and the
    v.2.0.x series.</para>

  <!-- Translators please note for v.2.1.2 -->
    <important>
      <title>Important Change to API DPB Parameters in V.2.1.2</title>
      <para>A long-standing, legacy loophole in the handling of DPB parameters enabled ordinary users to make connection settings that could lead to database corruptions or give them access to SYSDBA-only operations.  The loophole has been closed, a change that could affect several existing applications, database tools and connectivity layers (drivers, components).  Details are in Chapter 3, <link linkend="rnfb20x-apiods-api-dpb212">Changes to the Firebird API and ODS</link>.</para>
    </important>

    <section id="rnfb210-new-ods"><!-- sect2 -->
      <title>On-Disk Structure</title>
      <para>Databases created or restored under Firebird 2 have an on-disk structure (ODS) of 11 or higher.</para>
      <itemizedlist>
        <listitem>
          <para>Firebird 2.1 creates databases with an ODS of 11.1.  It can read databases of lower ODS but
          most of its new features will be unavailable to such databases.</para>
        </listitem>
        <listitem>
          <para>Firebird 2.0.x servers create databases with an ODS of 11 (sometimes expressed as 11.0).  If
          you wish to have the full range of v.2.1 features available, you should upgrade ODS 11 and lower
          databases by backing them up and restoring them under v.2.1.</para>
        </listitem>
      </itemizedlist>
    </section>

    <!-- Database triggers -->
    <section id="rnfb210-new-dbtrig"><!-- Level 2 section -->
      <title>Database Triggers</title>
      <para><emphasis role="bold">(v.2.1)</emphasis> Newly implemented <quote>database triggers</quote> are user-defined PSQL
      modules that can be designed to fire in various connection-level and transaction-
      level events.  See <xref linkend="rnfb210-dbtriggers"/>.</para>
    </section>

    <!-- SQL AND OBJECTS -->
    <section id="rnfb210-new-obj"><!-- Level 2 section -->
      <title>SQL and Objects</title>

      <section id="rnfb210-new-gtt"><!-- Level 3 section -->
        <title>Global Temporary Tables</title>
        <para><emphasis role="bold">(v.2.1)</emphasis> SQL standards-compliant global temporary tables have been implemented.
        These pre-defined tables are instantiated on request for connection-specific or
        transaction-specific use with non-persistent data, which the Firebird engine
        stores in temporary files. See <xref linkend="rnfb210-globaltemp"/>.</para>
      </section>

      <section id="rnfb210-new-cte"><!-- Level 3 section -->
        <title>Common Table Expressions, Recursive DSQL Queries</title>
        <para><emphasis role="bold">(v.2.1)</emphasis> Standards-compliant common table expressions, which make dynamic recursive
        queries possible, are introduced. See <xref linkend="rnfb210-cte"/>.</para>
      </section>

      <section id="rnfb210-new-rtrng"><!-- Level 3 section -->
      <title>RETURNING Clause</title>
      <para><emphasis role="bold">(v.2.1)</emphasis> Optional RETURNING clause for all singleton operations update, insert and
      delete operations. See <xref linkend="rnfb210-rtrng"/>.</para>
      </section>

      <section id="rnfb210-new-updorinsrt"><!-- Level 3 section -->
        <title>UPDATE OR INSERT Statements</title>
        <para><emphasis role="bold">(v.2.1)</emphasis> Now you can write a statement that is capable of performing either an
        update to an existing record or an insert, depending on whether the targeted
        record exists.  See <xref linkend="rnfb210-updorinsrt"/>.</para>
      </section>

      <section id="rnfb210-new-merge"><!-- Level 3 section -->
        <title>MERGE Statement</title>
        <para><emphasis role="bold">(v.2.1)</emphasis> New statement syntax that performs either an update to an 
        existing record if a condition is met or an insert if the condition is not met. See 
        <xref linkend="rnfb210-merge"/>.</para>
      </section>
      
      <section id="rnfb210-new-list"><!-- Level 3 section -->
        <title>LIST() function</title>
        <para><emphasis role="bold">(v.2.1)</emphasis> A new aggregate function LIST(&lt;SOMETHING&gt;) retrieves all of the
        SOMETHINGs in a group and aggregates them into a comma-separated list.
        See <xref linkend="rnfb210-list"/>.</para>
      </section>

      <section id="rnfb210-new-builtin"><!-- Level 3 section -->
        <title>Lots of New Built-in Functions</title>
        <para><emphasis role="bold">(v.2.1)</emphasis> Built-in functions replacing many of the 
        UDFs from the Firebird-distributed UDF libraries.  For a full list with examples, see
        <xref linkend="rnfb210-builtin"/>.</para>
      </section>

      <section id="rnfb210-new-blb"><!-- Level 3 section -->
        <title><quote>Short</quote> BLOBs Can Masquerade as Long VARCHARs</title>
      <para><emphasis role="bold">(v.2.1)</emphasis> At various levels of evaluation, the engine 
      now treats text BLOBs that are within the 32,765-byte size limit as though they were varchars.  
      Now functions like cast, lower, upper, trim and substring will work with these BLOBs, as well 
      as concatenation, assignment to string types and numerous other operations. See
      <xref linkend="rnfb210-blbvchar"/>.</para>
      <important>
        <title>Important Note about Use of SUBSTRING() with a BLOB</title>
        <para>The SUBSTRING() function now returns a BLOB, not a VARCHAR as previously.</para>
      </important>  
      </section>
    </section>
    <!-- P S Q L -->
    <section id="rnfb210-new-psql"><!-- Level 2 section -->
      <title>Procedural SQL</title>
      <section id="rnfb210-new-domnvar"><!-- Level 3 section -->
        <title>Domains for Defining PSQL Variables and Arguments</title>
        <para><emphasis role="bold">(v.2.1)</emphasis> PSQL local variables and input and output arguments for stored procedures
        can now be declared using domains in lieu of canonical data types.  See
        <xref linkend="rnfb210-domainspsql"/>.</para>
      </section>
      
      <section id="rnfb210-new-notnull"><!-- Level 3 section -->
        <title>NOT NULL Constraint on Stored Procedure Parameters and Variables</title>
        <para><emphasis role="bold">(v.2.1)</emphasis> Input and output arguments and PSQL local variables can
        be constrained as non-nullable, using the optional keywords NOT NULL in their declarations. See
        <xref linkend="rnfb210-psql-notnull"/>.</para>
      </section>

      <section id="rnfb210-new-collt"><!-- Level 3 section -->
        <title>COLLATE in Stored Procedure Parameters and Variables</title>
        <para><emphasis role="bold">(v.2.1)</emphasis> Collations can now be applied to PSQL variables and arguments. See
        <xref linkend="rnfb210-psql-collt"/>.</para>
      </section>

      <section id="rnfb210-impr-stktrc"><!-- Level 3 section -->
        <sectioninfo>
          <title>Enhancement to PSQL error stack trace</title>
          <author><firstname>V.</firstname><surname>Khorsun</surname></author>
        </sectioninfo>
        <para><ulink url="http://tracker.firebirdsql.org/browse/CORE-970">Feature
        request CORE-970</ulink></para>
        <para><emphasis role="bold">(v.2.1)</emphasis> A PSQL error stack trace now shows line and column numbers. </para>
      </section>

    </section>

    <!-- SECURITY -->
    <section id="rnfb210-new-scrty"><!-- Level 2 section -->
      <title>Security</title>
      <section id="rnfb210-new-wintrusted"><!-- Level 3 section -->
        <title>Windows Security to Authenticate Users</title>
        <para><emphasis role="bold">(v.2.1)</emphasis> Windows <quote>Trusted User</quote> security
        can be applied for authenticating Firebird users on a Windows host.
        See <xref linkend="rnfb210-wintrusted"/>.</para>
      </section>
    </section>

    <!-- CHARACTER SETS AND COLLATIONS -->
    <section id="rnfb210-new-intl"><!-- Level 2 section -->
      <title>International Language Support</title>

      <section id="rnfb210-new-crtcolln"><!-- Level 3 section -->
        <title>The CREATE COLLATION Command</title>
        <para><emphasis role="bold">(v.2.1)</emphasis> The DDL command <filename>CREATE COLLATION</filename> has been introduced for
        implementing a collation, obviating the need to use the script for it.
        See <xref linkend="rnfb210-intl-crtcolln"/>.</para>
      </section>

      <section id="rnfb210-new-unicolln"><!-- Level 3 section -->
        <title>Unicode Collations Anywhere</title>
        <para><emphasis role="bold">(v.2.1)</emphasis> Two new Unicode collations can be applied to any character set using a new
        mechanism.  See <xref linkend="rnfb210-intl-unicode"/>.</para>
      </section>

    </section>
    <!-- PLATFORM SUPPORT -->
    <section id="rnfb210-new-plat"><!-- Level 2 section -->
      <title>Platform Support</title>

      <section id="rnfb210-new-win64"><!-- Level 3 section -->
        <sectioninfo>
          <title>Ports to Windows 2003 64-bit</title>
          <author><firstname>D.</firstname><surname>Yemanov</surname></author>
        </sectioninfo>
        <para><ulink url="http://tracker.firebirdsql.org/browse/CORE-819">Feature request CORE-819</ulink>
        and <ulink url="http://tracker.firebirdsql.org/browse/CORE-682">CORE-682</ulink></para>
        <para><emphasis role="bold">(v.2.1)</emphasis> 64-bit Windows platform (AMD64 and Intel EM64T) ports of Classic, Superserver and Embedded
        models.</para>
      </section>
    </section>

    <!-- ADMINISTRATIVE -->
    <section id="rnfb210-new-admn"><!-- Level 2 section -->
      <title>Administrative</title>
      <section id="rnfb210-new-mon"><!-- Level 3 section -->
        <title>Database Monitoring via SQL</title>
        <para><emphasis role="bold">(v.2.1)</emphasis> Implementation of run-time database snapshot monitoring (transactions,
        tables, etc.) via SQL over some new virtualized system tables.  
        See <xref linkend="rnfb210-mon"/>.</para>
        <para>Included in the set of tables is one named MON$DATABASE that provides a
        lot of the database header information that could not be obtained previously via
        SQL:  such details as the on-disk structure (ODS) version, SQL dialect, sweep
        interval, OIT and OAT and so on.</para>
        <para>It is possible to use the information from the monitoring tables to cancel
        a rogue query.  See <xref linkend="rnfb210-mon-cnclqry"/>.</para>
      </section>
      <section id="rnfb210-new-svrinfo"><!-- Level 3 section -->
      <title>More Context Information</title>
      <para>Context information providing the server engine version has been added,
      for retrieving via SELECT calls to the RDB$GET_CONTEXT function.
      See <xref linkend="rnfb210-svrinfo"/>. </para>
      </section>
      <!-- Following section added in Build 0210_54 
      START HERE -->
      <section id="rnfb210-new-fbsvcmgr"><!-- Level 3 section -->
        <title>New Command-line Utility fbsvcmgr</title>
        <para><emphasis role="bold">(V.2.1)</emphasis> The new utility <firstterm>fbsvcmgr</firstterm>
        provides a command-line interface to the Services API, enabling access to any service that is
        implemented in Firebird.</para>

        <para>Although there are numerous database administration tools around that surface the
        Services API through graphical interfaces, the new tool addresses the problem for admins
        needing to access remote Unix servers in broad networks through a text-only connection.
        Previously, meeting such a requirement needed a programmer.  <link linkend="rnfb21-fbsvcmgr">Details here</link>.
        </para>
      </section>
      <!-- END HERE -->
    </section>

    <!-- REMOTE INTERFACE -->
    <section id="rnfb210-impr-netprot"><!-- Level 2 section -->
      <title>Remote Interface</title>
      <para><emphasis role="bold">(v.2.1)</emphasis> The remote protocol has been slightly improved to perform better in slow networks
      once drivers are updated to utilise the changes.  Testing showed that API round
      trips were reduced by about 50 percent, resulting in about 40 per cent fewer TCP
      round trips.  See <xref linkend="rnfb210-global-remote"/>.</para>
    </section>


  <!-- V.2.0.X -->
      <section id="rnfb20x-new-derived-tables"><!-- Level 1 section -->
    <sectioninfo>
      <title>Derived Tables</title>
      <author><firstname>A.</firstname><surname>Brinkman</surname></author>
    </sectioninfo>
    <para>Implemented support for derived tables in DSQL (subqueries in FROM clause) as defined by SQL200X.  A derived
 table is a set, derived from a dynamic SELECT statement.  Derived tables can be nested, if required, to build complex
 queries and they can be involved in joins as though they were normal tables or views.</para>

    <para>More details under <xref linkend="rnfb20x-dml-derived-tables"/> in the DML chapter.</para>
    </section>

    <section id="rnfb20x-new-explicit-cursors"><!-- Level 1 section -->
    <sectioninfo>
      <title>PSQL Now Supports Named Cursors</title>
      <author><firstname>D.</firstname><surname>Yemanov</surname></author>
    </sectioninfo>
    <para>Multiple named (i.e. explicit) cursors are now supported in PSQL and in DSQL EXECUTE BLOCK statements.  More
    information in the PSQL chapter <xref linkend="rnfb20x-psql-cursors"/>.</para>
    </section>

    <section id="rnfb20x-new-win-protocol"><!-- Level 1 section -->
    <sectioninfo>
      <title>Reimplemented Protocols on Windows</title>
      <author><firstname>D.</firstname><surname>Yemanov</surname></author>
    </sectioninfo>
    <para>Two significant changes have been made to the Windows-only protocols.-</para>
      <section id="rnfb20x-new-win-protocol-xnet"><!-- Level 2 section -->
      <title>Local Protocol--XNET</title>
      <para>Firebird 2.0 has replaced the former implementation of the local transport protocol
      (often referred to as IPC or IPServer) with a new one, named XNET.</para>
      <para>It serves exactly the same goal, to provide an efficient way to connect to server located on the same
      machine as the connecting client without a remote node name in the connection string.  The new implementation
      is different and addresses the known issues with the old protocol.</para>
      <para>Like the old IPServer implementation, the XNET implementation uses shared memory for inter-process
      communication.  However, XNET eliminates the use of window messages to deliver attachment requests and it
      also implements a different synchronization logic.</para>

        <section id="rnfb20x-new-win-protocol-xnet-benefits"><!-- Level 3 section -->
        <title>Benefits of the XNET Protocol over IPServer</title>
        <para>Besides providing a more robust protocol for local clients, the XNET protocol brings some notable
        benefits:</para>
        <itemizedlist>
          <listitem>
            <para>it works with Classic Server</para>
          </listitem>
          <listitem>
            <para>it works for non-interactive services and terminal sessions</para>
          </listitem>
          <listitem>
            <para>it eliminates lockups when a number of simultaneous connections are attempted</para>
          </listitem>
        </itemizedlist>
        </section>

        <section id="rnfb20x-new-win-protocol-xnet-perf"><!-- Level 3 section -->
        <title>Performance</title>
        <para>The XNET implementation should be similar to the old IPServer implementation, although XNET is expected
        to be slightly faster.</para>
        </section>

        <section id="rnfb20x-new-win-protocol-xnet-disadv"><!-- Level 3 section -->
        <title>Disadvantages</title>
        <para>The one disadvantage is that the XNET and IPServer implementations are not compatible with each other.
        This makes it essential that your fbclient.dll version should match the version of the server binaries you are
        using (fbserver.exe or fb_inet_server.exe) exactly.  It will not be possible to to establish a local connection
        if this detail is overlooked. (A TCP localhost loopback connection via an ill-matched client will still do the
        trick, of course).</para>
        </section>
      </section>

      <section id="rnfb20x-new-win-protocol-wnet" xreflabel="Change to WNET Protcol"><!-- Level 2 section -->
      <title>Change to WNET (<quote>NetBEUI</quote>) Protocol</title>
      <para>WNET (a.k.a. NetBEUI) protocol no longer performs client impersonation.</para>
      <para>In all previous Firebird  versions, remote requests via WNET are performed in the context of
      the <firstterm>client security token</firstterm>. Since the server serves every connection according to
      its client security credentials, this means that, if the client machine is running some OS user from an NT domain,
      that user should have appropriate permissions to access the physical database file, UDF libraries, etc., on the
      server filesystem. This situation is contrary to what is generally regarded as proper for a client-server
      setup with a protected database.</para>
      <para>Such impersonation has been removed in Firebird 2.0.  WNET connections are now truly client-server and
      behave the same way as TCP ones, i.e., with no presumptions with regard to the rights of OS users.</para>
      </section>
    </section>

    <section id="rnfb20x-new-garbage-collect"><!-- Level 1 section -->
    <sectioninfo>
      <title>Reworking of Garbage Collection</title>
      <author><firstname>V.</firstname><surname>Khorsun</surname></author>
    </sectioninfo>
    <para>Since Firebird 1.0 and earlier, the Superserver engine has performed <emphasis>background garbage
    collection</emphasis>, maintaining information about each new record
    version produced by an UPDATE or DELETE statement.  As soon as the old versions are no
    longer <quote>interesting</quote>, i.e. when they become older than the Oldest Snapshot transaction
    (seen in the <emphasis>gstat -header</emphasis> output)
    the engine signals for them to be removed by the garbage collector.</para>

    <para>Background GC eliminates the need to re-read the pages containing these versions via
    a <literal>SELECT COUNT(*) FROM aTable</literal> or other table-scanning query from a user, as occurs in Classic
    and in versions of InterBase prior to v.6.0.  This earlier GC mechanism is known as <emphasis>cooperative garbage
    collection</emphasis>.</para>
    <para> Background GC also averts the possibility that those pages will be missed because they are seldom read.
    (A sweep, of course, would find those unused record versions and clear them, but the next sweep is not
    necessarily going to happen soon.)  A further benefit is the reduction in I/O, because of the higher
    probability that subsequently requested pages still reside in the buffer cache.</para>

    <para>Between the point where the engine notifies the garbage collector about a page containing unused versions
    and the point when the garbage collector gets around to reading that page, a new transaction could update
    a record on it.  The garbage collector cannot clean up this record if this later transaction number is higher
    than the Oldest Snapshot or is still active. The engine again notifies the garbage collector about this page number,
    overriding the earlier notification about it and the garbage will be cleaned at some later time.</para>

    <para>In Firebird 2.0 Superserver, both cooperative and background garbage collection are now possible.
    To manage it, the new configuration parameter <emphasis>GCPolicy</emphasis> was introduced. It can be
    set to:</para>
    <itemizedlist>
      <listitem>
        <para>cooperative - garbage collection will be performed only in cooperative mode (like Classic) and the
        engine will not track old record versions.  This reverts GC behaviour to that of IB 5.6 and earlier.  It is
        the only option for Classic.</para>
      </listitem>
      <listitem>
        <para>background - garbage collection will be performed only by background threads, as is the case for
        Firebird 1.5 and earlier.  User table-scan requests will not remove unused record versions but will cause
        the GC thread to be notified about any page where an unused record version is detected.  The engine will
        also remember those page numbers where UPDATE and DELETE statements created back versions.</para>
      </listitem>
      <listitem>
        <para>combined (the installation default for Superserver) - both background and cooperative garbage
        collection are performed.</para>
      </listitem>
    </itemizedlist>
    <note>
      <para>The Classic server ignores this parameter and always works in <quote>cooperative</quote> mode.</para>
    </note>
    </section>

    <section id="rnfb20x-new-serv-api"><!-- Level 1 section -->
    <sectioninfo>
      <title>Porting of the Services API to Classic is Complete</title>
      <author><firstname>N.</firstname><surname>Samofatov</surname></author>
    </sectioninfo>
    <para>Porting of the Services API to Classic architecture is now complete.  All Services API functions are now
    available on both Linux and Windows Classic servers, with no limitations. Known issues with
    <emphasis>gsec</emphasis> error
    reporting in previous versions of Firebird are eliminated.</para>
    </section>

    <section id="rnfb20x-new-lock-timeout"><!-- Level 1 section -->
    <sectioninfo>
      <title>Lock Timeout for WAIT Transactions</title>
      <author><firstname>A.</firstname><surname>Karyakin, D. Yemanov</surname></author>
    </sectioninfo>
    <para>All Firebird versions provide two transaction wait modes: <firstterm>NO WAIT</firstterm>
    and <firstterm>WAIT</firstterm>. NO WAIT mode means that lock conflicts and deadlocks are reported immediately,
    while WAIT performs a blocking wait which times out only when the conflicting concurrent transaction ends by
    being committed or rolled back.</para>
    <para>The new feature extends the WAIT mode by making provision to set a finite time interval to wait for the
    concurrent transactions. If the timeout has passed, an error (isc_lock_timeout) is reported.</para>

    <para>Timeout intervals are specified per transaction, using the new TPB constant
    <firstterm>isc_tpb_lock_timeout</firstterm> in the API or, in DSQL, the
    <firstterm>LOCK TIMEOUT &lt;value&gt;</firstterm> clause of the SET TRANSACTION statement.</para>

    </section>

    <section id="rnfb20x-new-search-ops"><!-- Level 1 section -->
    <sectioninfo>
      <title>New Implementation of String Search Operators</title>
      <author><firstname>N.</firstname><surname>Samofatov</surname></author>
    </sectioninfo>
    <orderedlist>
    <listitem><para>The operators now work correctly with BLOBs of any size. Issues with only the first segment being
    searched and with searches missing matches that straddle segment boundaries are now gone. </para></listitem>
    <listitem><para>Pattern matching now uses a single-pass Knuth-Morris-Pratt algorithm, improving performance when
    complex patterns are used.</para></listitem>
    <listitem><para>The engine no longer crashes when NULL is used as ESCAPE character for LIKE</para></listitem>
    </orderedlist>
    </section>

    <section id="rnfb20x-new-updatable-views"><!-- Level 1 section -->
    <sectioninfo>
      <title>Reworking of Updatable Views</title>
      <author><firstname>D.</firstname><surname>Yemanov</surname></author>
    </sectioninfo>
    <para>A reworking has been done to resolve problems with views that are implicitly updatable, but still have update
    triggers.  This is an important change that will affect systems written to take advantage of the undocumented
    [mis]behaviour in previous versions.</para>
    <para>For details, see the notes in the Compatibility chapter of the separate Installation Notes document.</para>
    </section>

    <section id="rnfb20x-new-shutdown-modes"><!-- Level 1 section -->
    <sectioninfo>
      <title>Additional Database Shutdown Modes Introduced</title>
      <author><firstname>N.</firstname><surname>Samofatov</surname></author>
    </sectioninfo>
    <para>Single-user and full shutdown modes are implemented using new <firstterm>[state]</firstterm> parameters for
    the <function>gfix -shut</function> and <function>gfix -online</function> commands.</para>

    <para><emphasis role="bold">Syntax Pattern</emphasis></para>
    <programlisting>
    gfix &lt;command&gt; [&lt;state&gt;] [&lt;options&gt;]
    &lt;command&gt;> ::= {-shut | -online}
    &lt;state&gt; ::= {normal | multi | single | full}
    &lt;options&gt; ::= {-force &lt;timeout&gt; | -tran | -attach}
    </programlisting>
    <itemizedlist>
    <listitem><para><emphasis>normal</emphasis> state = online database</para></listitem>
    <listitem><para><emphasis>multi</emphasis> state = multi-user shutdown mode (the legacy one, unlimited
attachments of SYSDBA/owner are allowed)</para></listitem>
    <listitem><para><emphasis>single</emphasis> state = single-user shutdown (only one attachment is allowed,
used by the restore process)</para></listitem>
    <listitem><para><emphasis>full</emphasis> state = full/exclusive shutdown (no attachments are allowed)</para></listitem>
    </itemizedlist>

    <para>For more details, refer to the section on Gfix <xref linkend="rnfb20x-util-gfix-shut"/>, in the
    Utilities chapter.</para>

    <para>For a list of shutdown state flag symbols and an example of usage, see

    <xref linkend="rnfb20x-apiods-api-dpb-shutdown"/>.</para>
    </section>

    <section id="rnfb20x-new-udf"><!-- Level 1 section -->
    <sectioninfo>
      <title>UDFs Improved re NULL Handling</title>
      <author><firstname>C.</firstname><surname>Valderrama</surname></author>
    </sectioninfo>
      <section id="rnfb20x-new-udf-null"><!-- Level 2 section -->
      <title>Signalling SQL NULL</title>
      <itemizedlist>
      <listitem><para>Ability to signal SQL NULL via a NULL pointer (see <xref linkend="rnfb20x-udf-nullpointer"/>).</para></listitem>
      <listitem><para>External function library ib_udf upgraded to allow the string functions ASCII_CHAR, LOWER, LPAD,
      LTRIM, RPAD, RTIM, SUBSTR and SUBSTRLEN to return NULL and have it interpreted correctly.</para>

      <para>The script <function>ib_udf_upgrade.sql</function> can be applied to pre-v.2 databases that have these 
      functions declared, to upgrade them to work with the upgraded library.  This script should be used only when 
      you are using the new ib_udf library with Firebird v2 and operation requests are modified to anticipate 
      nulls.</para></listitem>
      </itemizedlist>
      </section>
    </section>

    <section id="rnfb20x-new-concat-checking"><!-- Level 1 section -->
    <sectioninfo>
      <title>Run-time Checking for Concatenation Overflow</title>
      <author><firstname>D.</firstname><surname>Yemanov</surname></author>
    </sectioninfo>
    <para>Compile-time checking for concatenation overflow has been replaced by run-time checking.</para>
    <para>From Firebird 1.0 onward, concatenation operations have been checked for the possibility that the 
    resulting string might exceed the string length limit of 32,000 bytes, i.e. overflow.  This check was performed 
    during the statement prepare, using the declared operand sizes and would throw an error for an expressions such
    as:</para>
    <programlisting>
  CAST('qwe' AS VARCHAR(30000)) || CAST('rty' AS VARCHAR(30000))
    </programlisting>

    <para>From Firebird 2.0 onward, this expression throws only a warning at prepare time and the overflow check is
    repeated at runtime, using the sizes of the actual operands.  The result is that our example will be executed
    without errors being thrown. The <firstterm>isc_concat_overflow</firstterm> exception is now thrown only for 
    actual overflows, thus bringing the behaviour of overflow detection for concatenation into line with that for 
    arithmetic operations.</para>
    </section>

    <section id="rnfb20x-new-synchro-logic"><!-- Level 1 section -->
    <sectioninfo>
      <title>Changes to Synchronisation Logic</title>
      <author><firstname>N.</firstname><surname>Samofatov</surname></author>
    </sectioninfo>
    <orderedlist>
    <listitem><para>Lock contention in the lock manager and in the SuperServer thread pool manager has been reduced
significantly</para></listitem>
    <listitem><para>A rare race condition was detected and fixed, that could cause Superserver to hang during request
    processing until the arrival of the next request</para></listitem>
    <listitem><para>Lock manager memory dumps have been made more informative and OWN_hung is detected
    correctly</para></listitem>
<listitem><para>Decoupling of lock manager synchronization objects for different engine instances was
implemented</para></listitem>
    </orderedlist>
    </section>

    <section id="rnfb20x-new-sixty-four-bit"><!-- Level 1 section -->
    <sectioninfo>
      <title>Support for 64-bit Platforms</title>
      <author><firstname>A.</firstname><surname>Peshkov, N. Samofatov</surname></author>
    </sectioninfo>
    <title></title>
    <para>Firebird 2.0 will support 64-bit platforms.</para>
    </section>

    <section id="rnfb20x-new-record-enumerators"><!-- Level 1 section -->
    <sectioninfo>
      <title>Record Enumeration Limits Increased</title>
      <author><firstname>N.</firstname><surname>Samofatov</surname></author>
    </sectioninfo>
    <para>40-bit (64-bit internally) record enumerators have been introduced to overcome the ~30GB table size limit
    imposed by 32-bit record enumeration.</para>
    </section>

    <section id="rnfb20x-new-debug"><!-- Level 1 section -->
    <sectioninfo>
      <title>Debugging Improvements</title>
      <author><firstname>Various</firstname><surname>Contributors</surname></author>
    </sectioninfo>

      <section id="rnfb20x-new-debug-bugcheck"><!-- Level 2 section -->
      <title>Improved Reporting from Bugchecks</title>
      <para>BUGCHECK log messages now include file name and line number. (A. Brinkman)</para>
      </section>

      <section id="rnfb20x-new-debug-struc-reports"><!-- Level 2 section -->
      <title>Updated Internal Structure Reporting</title>
      <para>Routines that print out various internal structures (DSQL node tree, BLR, DYN, etc) have been
      updated. (N. Samofatov)</para>
      </section>

      <section id="rnfb20x-new-debug-logging"><!-- Level 2 section -->
      <title>New Debug Logging Facilities</title>
      <para>Thread-safe and signal-safe debug logging facilities have been implemented. (N. Samofatov)</para>
      </section>

      <section id="rnfb20x-new-debug-diagnos"><!-- Level 2 section -->
      <title>Diagnostic Enhancement</title>
      <para>Syslog messages will be copied to the user's tty if a process is attached to it. (A. Peshkov)</para>
      </section>

    </section>

    <section id="rnfb20x-new-connx"><!-- Level 1 section -->
    <sectioninfo>
      <title>Improved Connection Handling on POSIX Superserver</title>
      <author><firstname>A.</firstname><surname>Peshkov</surname></author>
    </sectioninfo>
    <para>Posix SS builds now handle SIGTERM and SIGINT to shutdown all connections gracefully. (A. Peshkov)</para>
    </section>

    <section id="rnfb20x-new-invariant"><!-- Level 1 section -->
    <sectioninfo>
      <title>PSQL Invariant Tracking Reworked</title>
      <author><firstname>N.</firstname><surname>Samofatov</surname></author>
    </sectioninfo>
    <para>Invariant tracking in PSQL and request cloning logic were reworked to fix a number of issues with recursive
    procedures, for example SF bug #627057.</para>
    <para>Invariant tracking is the process performed by the BLR compiler and the optimizer to decide whether an
    &quot;invariant&quot; (an expression, which might be a nested subquery) is independent from the parent context.
    It is used to perform one-time evaluations of such expressions and then cache the result.</para>
    <para>If some invariant is not determined, we lose in performance. If some variant is wrongly treated as invariant,
    we see wrong results.</para>

    <para><emphasis role="bold">Example</emphasis></para>
    <programlisting>
  select * from rdb$relations
    where rdb$relation_id &lt;
      ( select rdb$relation_id from rdb$database )
    </programlisting>
    <para>This query performs only one fetch from rdb$database instead of evaluating the subquery for every row of
    rdb$relations.</para>
    </section>

    <section id="rnfb20x-new-rb-retain"><!-- Level 1 section -->
    <sectioninfo>
      <title>ROLLBACK RETAIN Syntax Support</title>
      <author><firstname>D.</firstname><surname>Yemanov</surname></author>
    </sectioninfo>
    <para>Firebird 2.0 adds an optional <literal>RETAIN</literal> clause to the DSQL <literal>ROLLBACK</literal>
    statement to make it consistent with COMMIT [RETAIN].</para>
    <para>See <xref linkend="rnfb20x-dml-rb-retain"/> in the chapter about DML.</para>
    </section>
    
    <section id="rnfb20x-new-rootfind"><!-- Level 1 section -->
    <sectioninfo>
      <title>No More Registry Search on Win32 Servers</title>
      <author><firstname>D.</firstname><surname>Yemanov</surname></author>
    </sectioninfo>
    <para>The root directory lookup path has changed so that server processes on Windows no longer use the
    Registry.</para>
    <important>
      <para>The command-line utilities still check the Registry.</para>
    </important>
    </section>
    
    <section id="rnfb20x-new-optimiz"><!-- Level 1 section -->
    <sectioninfo>
      <title>More Optimizer Improvements</title>
      <author><firstname>A.</firstname><surname>Brinkman</surname></author>
    </sectioninfo>
    <para>Better cost-based calculation has been included in the optimizer routines.</para>
    </section>
  </section>
</chapter>
