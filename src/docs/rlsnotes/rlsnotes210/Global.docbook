  <chapter id="rnfb210-global">
  <chapterinfo>
    <title>Global Improvements in Firebird 2.1</title>
  </chapterinfo>
  <para>Some global improvements and changes have been implemented in Firebird 2.1, as engine
  development moves towards the architectural changes planned for Firebird 3.</para>
  <note>
    <para>Unless otherwise indicated, these improvements apply from v.2.1 forward.</para>
  </note>
  <!-- FORCED WRITES ON LINUX -->
  <section id="rnfb210-global-fwrites" xreflabel="Forced Writes on Linux Now Works!"><!-- sect1 -->
    <sectioninfo>
      <title>Forced Writes on Linux Now Works!</title>
      <author><firstname>A.</firstname><surname>Peshkov</surname></author>
    </sectioninfo>
    <para>For maximum database safety, we configure databases for synchronous writes, a.k.a. <emphasis>
    Forced Writes ON</emphasis>. This mode&mdash;strongly recommended for normal production usage&mdash;makes
    the <command>write()</command> system call return only after the physical write to disk is complete.
    In turn, it guarantees that, after a COMMIT, any data modified by the transaction is physically
    on the hard-drive, not waiting in the operating system's cache.</para>
    <para>Its implementation on Linux was very simple - invoke <command>fcntl(dbFile,
    F_SETFL, O_SYNC)</command>.</para>
    <para><emphasis>Yet databases on Linux were sometimes corrupted anyway.</emphasis></para>

    <section id="rnfb210-global-fwrites-frnscs"><!-- sect2 -->
      <title>Forensics</title>
      <para>Speed tests on Linux showed that setting O_SYNC on a file has no effect at all on
      performance!  Fine, fast operating system we may think? Alas, no, it's a documented bug in the
      Linux kernel!</para>
      <para>According to the Linux manual, <quote>On Linux this command (i.e. fcntl(fd, F_SETFL, flags))
      can only change the O_APPEND, O_ASYNC, O_DIRECT, O_NOATIME, and O_NONBLOCK flags</quote>. Though
      it is not documented in any place known to me, it turns out that an attempt to set any flag other
      than those listed in the manual (such as O_SYNC, for example) won't work but it does not cause 
      fcntl() to return an error, either.</para>

      <para>For Firebird and for InterBase versions since Day One, it means that Forced Writes has
      never worked on Linux.  It certainly works on Windows.  It seems likely that this is not a 
      problem that affects other operating systems, although we cannot guarantee that.  To make sure, 
      you can check whether the implementation of <command>fcntl()</command> on your OS is capable of setting 
      the O_SYNC flag.</para>

      <para>The technique used currently, introduced in the Beta 2 release of Firebird 2.1, is to 
      re-open the file.  It should guarantee correct operation on any OS, provided the 
      <command>open()</command> system call works correctly in this respect.  It appears that no such 
      problems are reported.</para>

      <para>The Firebird developers have no idea why such a bug would remain unfixed almost two years
      after getting into the <ulink
      url="http://bugzilla.kernel.org/show_bug.cgi?id=5994">Linux kernel's bug-tracker</ulink>.  
      Apparently, in Linux, a documented bug evolves into a feature...</para>
    </section>

    <section id="rnfb210-global-fwrites-fixold"><!-- sect2 -->
      <title>Instant Fix for an Older Firebird</title>
      <para>Here's a tip if you want to do an instant fix for the problem in an older version of
      Firebird:  use the <quote>sync</quote> option when mounting any partition with a Firebird
      database on board. An example of a line in /etc/fstab:</para>
      <literallayout>
  /dev/sda9    /usr/database    ext3    noatime,sync     1   2
      </literallayout>
    </section>
  </section>

  <!-- RAW DEVICES -->
  <section id="rnfb210-global-rawdevice" xreflabel="Databases on Raw Devices"><!-- Level 1 section -->
    <sectioninfo>
      <title>Databases on Raw Devices</title>
      <author><firstname>A.</firstname><surname>Peshkov</surname></author>
    </sectioninfo>
    <para>File system I/O can degrade performance severely when a database in Forced Writes
    mode grows rapidly.  On Linux, which lacks the appropriate system calls to grow the database
    efficiently, performance with Forced Writes can be as much as three times slower than with
    asynchronous writes.</para>
    <para>When such conditions prevail, performance may be greatly enhanced by bypassing the file
    system entirely and restoring the database directly to a raw device.  A Firebird database can be
    recreated on any type of block device.</para>

    <section id="rnfb210-global-rawdevice-moveit"><!-- Level 2 section -->
      <title>Moving a Database to a Raw Device</title>
      <para>Moving your database to a raw device can be as simple as restoring a backup directly to
      an unformatted partition in the local storage system.  For example,</para>
      <programlisting>
 gbak -c my.fbk /dev/sda7
      </programlisting>
      <para>will restore your database on the third logical disk in the extended partition of your
      first SCSI or SATA hard-drive (disk0).</para>
      <note>
        <para>The database does not have a <quote>database name</quote> other than the device name
        itself.  In the example given, the name of the database is '/dev/sda7'.</para>
      </note>
    </section>

    <section id="rnfb210-global-rawdevice-nbak"><!-- Level 2 section -->
      <title>Special Issues for nbak/nbackup</title>
      <para>The physical backup utility <command>nbackup</command> must be supplied with an explicit
      file path and name for its difference file, in order to avoid this file being written into
      the /dev/ directory.  You can achieve this with the following statement, using isql:</para>
      <programlisting>
# isql /dev/sda7
SQL&gt; alter database add difference file '/tmp/dev_sda7';
      </programlisting>
      <section id="rnfb210-global-rawdevice-nbak-dbsize"><!-- Level 3 section -->
        <para>To keep the size of the nbak copy within reasonable bounds, it is of benefit to know how
          much storage on the device is actually occupied.  The '-s' switch of nbackup will
          return the size of the database <emphasis>in database pages</emphasis>:</para>
          <programlisting>
# nbackup -s -l /dev/sda7
77173
        </programlisting>
        <para>Don't confuse the result here with the block size of the device.  The figure
          returned&mdash;77173&mdash;is the number of pages occupied by the database.
          Calculate the physical size (in bytes) as (number of pages * page size).  If you are unsure of
          the page size, you can query it from the database header using gstat -h:</para>
        <literallayout>
  # gstat -h /dev/sda7
  Database &quot;/dev/sda7&quot;
  Database header page information:
          Flags                   0
          Checksum                12345
          Generation              43
          Page size               4096  &lt;&mdash;&mdash;&mdash;
          ODS version             11.1
   . . . . . . .
        </literallayout>
      </section><!-- sect3 -->
      <section id="rnfb210-global-rawdevice-nbak-examples"><!-- Level 3 section -->
        <title>Examples of nbackup Usage with a Raw Device</title>
        <orderedlist>
          <listitem>
            <para>A backup can be performed in a script, using the output from the '-s' switch
              directly.  For example, </para>
            <programlisting>
# DbFile=/dev/sda7
# DbSize=`nbackup -L $DbFile -S` || exit 1
# dd if=$DbFile ibs=4k count=$DbSize | # compress and record DVD
# nbackup -N $DbFile
            </programlisting>
          </listitem>
          <listitem>
            <para>A physical backup using nbackup directly from the command line:</para>
            <programlisting>
# nbackup -B 0 /dev/sda7 /tmp/lvl.0
            </programlisting>
          </listitem>
        </orderedlist>
      </section><!-- sect3 -->
    </section><!-- sect2 -->

    <section id="rnfb210-global-rawdevice-further"><!-- Level 2 section -->
      <title>Further Advice about Raw Devices</title>
      <para>Although no other specific issues are known at this point about the use of raw device
        storage for databases, keep in mind that</para>
      <itemizedlist>
        <listitem>
          <para>the growth and potential growth of the database is less obvious to end-users than one
          that lives as a file within a file system.  If control of the production system's environment is 
          out of your direct reach, be certain to deploy adequate documentation for any monitoring that will 
          be required!</para>
        </listitem>
        <listitem>
          <para>the very Windows-knowledgeable might want to try out the concept of raw device storage on
          Windows systems.  It has not been a project priority to explore how it might be achieved on that 
          platform.  However, if you think you know a way to do it, please feel welcome to test the idea in 
          your Windows lab and report your observations&mdash;good or bad or indifferent&mdash;back to the
          firebird-devel list.</para>
        </listitem>
        <listitem>
          <tip>
            <para>Maintain your raw devices in aliases.conf.  That way, in the event of needing to
            reconfigure the storage hardware, there will be no need to alter any connection strings
            in your application code.</para>
          </tip>
        </listitem>
      </itemizedlist>
    </section><!-- sect2 -->
  </section><!-- sect1 -->

    <!-- REMOTE INTERFACE -->
    <section id="rnfb210-global-remote" xreflabel="Remote Interface Improvement"><!-- Level 1 section -->
      <sectioninfo>
        <title>Remote Interface Improvements</title>
        <author><firstname>V. Khorsun,</firstname><surname>D. Yemanov</surname></author>
      </sectioninfo>
      <para><ulink url="http://tracker.firebirdsql.org/browse/CORE-971">Feature request CORE-971</ulink></para>
      <para>The remote protocol has been slightly improved to perform better in slow networks. In order
      to achieve this, more advanced packets batching is now performed, along with some buffer
      transmission optimizations. In a real world test scenario, these changes showed about 50 per cent
      fewer API round trips, thus incurring about 40 per cent fewer TCP roundtrips.</para>

      <para>In Firebird 2.1 the remote interface limits the packet size of the response to various
      isc_XXX_info calls to the real used length of the contained data, whereas before it sent the full
      specified buffer back to the client buffer, even if only 10 bytes were actually filled. Firebird 2.1
      remote interface sends back only 10 bytes in this case.</para>

      <para>Some of our users should see a benefit from the changes, especially two-tier clients accessing
      databases over the Internet.</para>

      <para>The changes can be summarised as</para>
      <orderedlist numeration="loweralpha">
        <listitem>
          <para>Batched packets delivery. Requires both server and client of version v2.1, enabled upon a
          successful protocol handshake. Delays sending packets of certain types which can be deferred
          for batched transfer with the next packet. (Allocate/deallocate statement operations come into
          this category, for example.)</para>
        </listitem>
        <listitem>
          <para>Pre-fetching some pieces of information about a statement or request and caching them on
          the client side for (probable) following API calls. Implemented on the client side only, but
          relies partly on the benefits of reduced round trips described in (a).</para>
          <para>It works with any server version, even possibly providing a small benefit for badly written
          client applications, although best performance is not to be expected if the client is communicating with
          a pre-V.2.1 server.</para>
        </listitem>

        <listitem>
          <para>Reduced information responses from the engine (no trailing zeroes).  As the implementation is
          server-side only, it requires a V.2.1 server and any client. Even old clients will
          work with Firebird 2.1 and see some benefit from the reduction of round trips, although the
          old remote interface, unlike the new, will still send back big packets for
          isc_dsql_prepare().</para>
        </listitem>

        <listitem>

          <para>Another round-trip saver, termed <quote>defer execute</quote>, whereby
          SELECT requests will be held at the point just before execution of
          the <filename>isc_dsql_execute</filename> until the next API call on the
          same statement.  The benefit of the saved round-trip becomes most
          visible where there is a bunch of SELECT requests whose result set fits into
          one or two network packets.</para>
          <para>This enhancement takes effect only if both client and server are v.2.1
          or higher.</para>
          <note>
            <para>A faintly possible side-effect is that, if
            <filename>isc_dsql_execute</filename> should happen to fail with a certain
            exception, this exception is returned to the client in the response to the
            API call that was <emphasis>actually</emphasis> responsible;  i.e., instead
            of being returned by <filename>isc_dsql_execute</filename> it would be returned by
            <filename>isc_dsql_fetch</filename>, <filename>isc_dsql_info</filename>, or
            whichever API call actually dispatched the <filename>op_execute</filename>
            call.</para>
            <para>In most cases, the side-effect would be transparent:  it might show up
            in a case where some error occurred with default values for PSQL parameters
            or variables and would be noticed as an exception array where the exceptions
            were delivered in an unusual sequence.</para>
          </note>
        </listitem>
      </orderedlist>

      <para>The changes work with either TCP/IP or NetBEUI.  They are backward-compatible, so
      existing client code will not be broken.  However, when you are using a driver 
      layer that implements its own interpretation of the remote protocol&mdash;such as 
      the Jaybird JDBC and the FirebirdClient .NET drivers&mdash;your existing code 
      will not enable the enhancements unless you usedrivers are updated.</para>
    </section>

    <!-- A P I -->

    <section id="rnfb210-global-api"><!-- Level 1 section -->
      <title>API Changes</title>
      <section id="rnfb210-global-api-xsqlvar"><!-- Level 2 section -->
        <sectioninfo>
          <title>XSQLVAR</title>
          <author><firstname>A.</firstname><surname>dos Santos Fernandes</surname></author>
        </sectioninfo>
        <para>The identifier of the connection character set or, when the connection 
        character set is NONE, the BLOB character set, is now passed in the
        <filename>XSQLVAR::sqlscale</filename> item of text BLOBs.</para>
      </section>
    </section>

    <!-- OPTIMIZATION -->
    <section id="rnfb210-global-optim"><!-- Level 1 section -->
      <title>Optimization</title>
      <section id="rnfb210-global-optim1"><!-- Level 2 section -->
        <sectioninfo>
          <title>Optimization for Multiple Index Scans</title>
          <author><firstname>V.</firstname><surname>Khorsun</surname></author>
        </sectioninfo>
        <para><ulink url="http://tracker.firebirdsql.org/browse/CORE-1069">Feature request CORE-1069</ulink></para>
        <para>An optimization was done for index scanning when more than one index is to be scanned with AND
        conjunctions.</para>
      </section>

      <section id="rnfb210-global-optim2"><!-- Level 2 section -->
        <sectioninfo>
          <title>Optimize sparse bitmap operations</title>
          <author><firstname>V.</firstname><surname>Khorsun</surname></author>
        </sectioninfo>
        <para><ulink url="http://tracker.firebirdsql.org/browse/CORE-1070">Feature request CORE-1070</ulink></para>
        <para>Optimization was done for sparse bitmap operations (set, test and clear) when values are
        mostly consecutive.</para>
      </section>
    </section>

    <!-- CONFIGURATION AND TUNING -->
    <section id="rnfb210-global-cfg"><!-- Level 2 section -->
      <title>Configuration and Tuning</title>

      <section id="rnfb210--global-lckmgr"><!-- Level 3 section -->
        <sectioninfo>
          <title>Increased Lock Manager Limits &amp; Defaults</title>
          <author><firstname>D.</firstname><surname>Yemanov</surname></author>
        </sectioninfo>
        <para><ulink url="http://tracker.firebirdsql.org/browse/CORE-958">Feature requests CORE-958</ulink>
        and <ulink url="http://tracker.firebirdsql.org/browse/CORE-937">CORE-937</ulink></para>
        <itemizedlist>
          <listitem>
            <para>the <emphasis role="bold">maximum number of hash slots</emphasis> is raised from 2048
            to 65,536.  Because the actual setting should be a prime number, the exact supported maximum is
            65,521 (the biggest prime number below 65,536).  The minimum is 101.</para>
          </listitem>
          <listitem>
            <para>the new <emphasis role="bold">default number of hash slots</emphasis> is 1009</para>
          </listitem>
          <listitem>
            <para>the default <emphasis role="bold">lock table size</emphasis> has been increased
            to 1 Mb on all platforms</para>
          </listitem>
        </itemizedlist>
      </section>

      <section id="rnfb210-global-pgsz"><!-- Level 3 section -->
        <sectioninfo>
          <title>Page sizes of 1K and 2K Deprecated</title>
          <author><firstname>D.</firstname><surname>Yemanov</surname></author>
        </sectioninfo>
        <para><ulink url="http://tracker.firebirdsql.org/browse/CORE-969">Feature request CORE-969</ulink></para>
        <para>Page sizes of 1K and 2K are deprecated as inefficient.</para>
        <note>
          <para>The small page restriction applies to new databases only. Old ones can be attached to
          regardless of their page size.</para>
        </note>
      </section>

       <section id="rnfb210-global-dskchunk" xreflabel="Enlarge Disk Allocation Chunks"><!-- Level 3 section -->
        <sectioninfo>
          <title>Enlarge Disk Allocation Chunks</title>
          <author><firstname>V.</firstname><surname>Khorsun</surname></author>
        </sectioninfo>
        <para><ulink url="http://tracker.firebirdsql.org/browse/CORE-1229">Feature request CORE-1229</ulink></para>
        <para>Until v.2.1, Firebird had no special rules about allocating disk space for database file pages.
        Because of dependencies between pages that it maintains itself, to service its <quote>careful
        write</quote> strategy, it has just written to newly-allocated pages in indeterminate order.</para>

	<para>For databases using ODS 11.1 and higher, Firebird servers from v.2.1 onward use a different algorithm
        for allocating disk space, to address two recognised problems associated with the existing approach:</para>
        <orderedlist>
	  <listitem>
	    <para><emphasis role="bold">Corruptions resulting from out-of-space conditions on disk</emphasis></para>
            <para>The indeterminate order of writes can give rise to a situation that, at a point where the page
            cache contains a large number of dirty pages and Firebird needs to request space for a new page in
            the process of writing them out, there is insufficient disk space to fulfil the request.  Under such
            conditions it often happens that the administrator decides to shut down the database in order to
            make some more disk space available, causing the remaining dirty pages in the cache to be lost.  This
            leads to serious corruptions.</para>
	  </listitem>
	  <listitem>
            <para><emphasis role="bold">File fragmentation</emphasis></para>
            <para>Allocating disk space in relatively small chunks can lead to significant fragmentation of the
            database file at file system level, impairing the performance of large scans, as during a backup,
            for example.</para>
	  </listitem>
	</orderedlist>

        <section id="rnfb210-global-dskchunk-alg"><!-- Level 4 section -->
          <title>The Solution</title>
          <para>The solution is to introduce some rules and rationales to govern page writes according to the state
          of available disk space, as follows.-</para>
          <orderedlist numeration="loweralpha">
            <listitem>
              <para>Each newly allocated page writes to disk immediately before returning to the engine. If the
              page cannot be written then the allocation does not happen:  the PIP bit remains uncleared and the
              appropriate I/O error is raised. Corruption cannot arise, since it is guaranteed that all dirty
              pages in cache have disk space allocated and can be written safely.</para>
              <para>Because this change adds an extra write for each newly-allocated page, some performance
              penalty is to be expected.  To mitigate the effect, writes of newly-allocated pages are performed
              in batches of up to 128 Kb and Firebird keeps track of the number of these
              <quote>initialized</quote> pages in the PIP header.</para>
              <note>
                <para>A page that has been allocated, released and re-allocated is already <quote>space
                in hand</quote>, meaning that no further verification is required in order to
                <quote>initialize</quote> it.  Hence, a newly allocated page is subjected to this double-write
                only if it is a block that has never been allocated before.</para>
              </note>
            </listitem>

            <listitem>
              <para>To address the issue of file fragmentation, Firebird now uses the appropriate call to the
              API of the file system to <firstterm>preallocate</firstterm> disk space in relatively large
              chunks.</para>
              
              <para>Preallocation also gives room to avoid corruptions in the event of an <quote>out of disk 
              space</quote> condition.  Chances are that the database will have enough space preallocated to 
              continue operating until the administrator can make some disk space available.</para>

              <important>
                <para><emphasis role="bold">Windows Only (for Now)</emphasis></para>
                <para>Currently, only Windows file systems publish such API calls, which means that, for now, this
                aspect of the solution is supported only in the Windows builds of Firebird.  However, similar
                facilities have recently been added to the Linux API, allowing the prospect that a suitable
                API function call will appear in such popular file systems as <firstterm>ext3</firstterm> in
                future.</para>
              </important>
            </listitem>
          </orderedlist>
        </section>

        <section id="rnfb210-global-dskchunk-confparam"><!-- Level 4 section -->
          <title>DatabaseGrowthIncrement Configuration Parameter</title>
          <para>For better control of disk space preallocation, the new parameter
          <firstterm>DatabaseGrowthIncrement</firstterm> has been added to <filename>firebird.conf</filename>.
          It represents the upper limit for the preallocation chunk size in bytes.</para>
          <important>
            <para>Please be sure to read the details regarding this configuration,
            under <xref linkend="rnfb210-fbconf-dbgrowth"/> in the chapter entitled <quote>New Configuration
            Parameters and Changes</quote>.</para>
          </important>
        </section><!-- sect4 -->
      </section>

      <section id="rnfb210-global-fscache"><!-- Level 3 section -->
        <sectioninfo>
          <title>Bypass Filesystem Caching on Superserver</title>
          <author><firstname>V.</firstname><surname>Khorsun</surname></author>
        </sectioninfo>
        <para><ulink url="http://tracker.firebirdsql.org/browse/CORE-1381">Feature requests
        CORE-1381</ulink> and <ulink url="http://tracker.firebirdsql.org/browse/CORE-1480">CORE-1480</ulink></para>
        <para>Firebird uses and maintains its own cache in memory for page buffers.  The operating system,
        in turn, may re-cache Firebird's cache in its own filesystem cache.  If Firebird is configured
        to use a cache that is large relative to the available RAM and Forced Writes is on, this cache
        duplication drains resources for little or no benefit.</para>

        <para>Often, when the operating system tries to cache a big file, it moves the Firebird page
        cache to the swap, causing intensive, unnecessary paging. In practice, if the Firebird page
        cache size for Superserver is set to more than 80 per cent of the available RAM, resource
        problems will be extreme.</para>
        <note>
          <para>Filesystem caching is of some benefit on file writes, but only if Forced Writes is OFF,
          which is not recommended for most conditions.</para>
        </note>
        <para>Now, Superserver on both Windows and POSIX can be configured by a new configuration 
        parameter, <command>MaxFileSystemCache</command>, to prevent or enable filesystem caching.  
        It may provide the benefit of freeing more memory for other operations such as sorting and, 
        where there are multiple databases, reduce the demands made on host resources.</para>
        <note>
          <para>For Classic, there is no escaping filesystem caching.</para>
        </note>
        <para>For details of the <command>MaxFileSystemCache</command> parameter, 
        see <xref linkend="rnfb210-fbconf-fscache"/>.</para>
      </section>

    </section>
    <!-- OTHER -->
    <section id="rnfb210-global-other"><!-- Level 1 section -->
      <title>Other Global Improvements</title>
      <section id="rnfb210-global-other1"><!-- Level 2 section -->
        <sectioninfo>
          <title>Garbage Collector Rationalisation</title>
          <author><firstname>V.</firstname><surname>Khorsun</surname></author>
        </sectioninfo>
        <para><ulink url="http://tracker.firebirdsql.org/browse/CORE-1071">Feature request CORE-1071</ulink></para>
        <para>The background garbage collector process was reading all back versions of records on a page,
        including those created by active transactions.  Since back versions of active records cannot be
        considered for garbage collection, it was wasteful to read them.</para>
      </section>

      <section id="rnfb210-global-other2"><!-- Level 2 section -->
        <sectioninfo>
          <title>Immediate Release of External Files</title>
          <author><firstname>V.</firstname><surname>Khorsun</surname></author>
        </sectioninfo>
        <para><ulink url="http://tracker.firebirdsql.org/browse/CORE-961">Feature request CORE-
        961</ulink></para>
        <para>The engine will now release external table files as soon as they are no
        longer in use by user requests.</para>
      </section>

      <section id="rnfb210-global-other3"><!-- Level 2 section -->
        <sectioninfo>
          <title>Synchronization of DSQL metadata cache objects in Classic server</title>
          <author><firstname>A.</firstname><surname>dos Santos Fernandes</surname></author>
        </sectioninfo>
        <para><ulink url="http://tracker.firebirdsql.org/browse/CORE-976">Feature request CORE-976</ulink></para>
        <para>No details.</para>
      </section>

      <section id="rnfb210-global-other4"><!-- Level 2 section -->
        <sectioninfo>
          <title>BLOB Improvements</title>
          <author><firstname>A.</firstname><surname>dos Santos Fernandes</surname></author>
        </sectioninfo>
        <para><ulink url="http://tracker.firebirdsql.org/browse/CORE-969">Feature
        request CORE-1169</ulink></para>
        <para>Conversion of temporary blobs to the destination blob type now occurs when
        materializing.</para>
      </section>

      <section id="rnfb210-global-other5"><!-- Level 2 section -->
        <sectioninfo>
          <title>Type Flag for Stored Procedures</title>
          <author><firstname>D.</firstname><surname>Yemanov</surname></author>
        </sectioninfo>
        <para><ulink url="http://tracker.firebirdsql.org/browse/CORE-779">Feature request CORE-779</ulink></para>
        <para>Introduced a type flag for stored procedures, adding column RDB$PROCEDURE_TYPE to the table
        RDB$PROCEDURES.  Possible values are:</para>
        <variablelist>
          <varlistentry>
            <term> - 0 or NULL -</term>
            <listitem><para>legacy procedure (no validation checks are performed)</para></listitem>
          </varlistentry>
          <varlistentry>
            <term>- 1 - </term>
            <listitem><para>selectable procedure (one that contains a SUSPEND statement)</para></listitem>
          </varlistentry>
          <varlistentry>
            <term>- 2 -</term>
            <listitem><para>executable procedure (no SUSPEND statement, cannot be selected from)</para></listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section id="rnfb210-global-other6"><!-- sect2 -->
        <sectioninfo>
          <title>Help for Getting Core Dumps on Linux</title>
          <author><firstname>A.</firstname><surname>Peshkov</surname></author>
        </sectioninfo>
        <para><ulink url="http://tracker.firebirdsql.org/browse/CORE-1558">Feature request CORE-1558</ulink></para>
        <para>The configuration parameter BugcheckAbort provides the capability to make the server stop 
        trying to continue operation after a bugcheck and instead, to call <command>abort()</command>
        immediately and dump a core file.  Since a bugcheck usually occurs as a result of a problem 
        the server does not recognise, continuing operation with an unresolved problem is not usually 
        possible anyway, and the core dump can provide useful debug information.</para>
        
        <para>In the more recent Linux distributions the default setups no longer dump core automatically
        when an application crashes. Users often have troubles trying to get them working.
        Differing rules for Classic and Superserver, combined with a lack of consistency between the 
        OS setup tools from distro to distro, make it difficult to help out with any useful <quote>general
        rule</quote>.</para>

        <para>Code has been added for Classic and Superserver on Linux to bypass these problems and
        automate generation of a core dump file when an abort() on BUGCHECK occurs.  The Firebird 
        server will make the required 'cwd' (change working directory) to an appropriate writable 
        location (/tmp) and set the core file size limit so that the 'soft' limit equals the 
        'hard' limit.</para>
        <note>
          <para>In a release version, the automated core-dumping is active only when the BugcheckAbort
          parameter in firebird.conf is set to true (1).  In a debug version, it is always active.</para>
          <para>If you need to enable the facility, don't forget that the server needs to be
          restarted to activate a parameter change.</para>
        </note>
      </section>
    </section>


  </chapter>