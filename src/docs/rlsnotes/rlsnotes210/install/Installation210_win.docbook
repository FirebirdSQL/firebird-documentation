<chapter id="rnfbtwo-install-win">
  <chapterinfo>
    <title>Installing on Windows</title>
  </chapterinfo>
  <para>Please read the previous chapters before you set out to install Firebird 2.0.x or
  2.1.x.</para>

  <!-- V.2.1.2 Changes relating to MSVC8 -->

  <para><emphasis role="bold">V.2.1.2 Installation Improvements</emphasis></para>
  <para>The Firebird 2.1 series are built using the Microsoft MSVC8 compiler.  Microsoft
  introduced new rules for distributing the runtimes associated with this compiler on XP
  and Vista platforms.  This introduced much more complexity and bloat into Firebird
  V.2.1.0 and 2.1.1 installations for these platform versions.</para>
  <para>For the V.2.1.2 release, efforts have been made to improve the options, document
  them and to reduce the <quote>weight</quote> of installations, particularly for Windows
  Embedded deployments. Please refer to the later section
  entitled <link linkend="install2-win-mslibs">Microsoft Runtime Libraries</link>.</para>

  <section id="install2-win"><!-- Level 1 section -->
    <title>Installation Choices</title>
<!-- REPLACE FROM HERE -->
    <para>On Windows, you have three server models to choose from: Superserver, Classic and
    Embedded Server. This means you have some decisions to make before installing Firebird
    2.1.</para>
    <note>
      <para>The Embedded Server model is intended for conditions where you want to deploy
      the server, a database (or databases) and your own application together for use on on a
      single computer with only one user. It does not run on its own.  If you are new to
      Firebird, it is recommended that you regard this model as one you can design for,
      using one of the full server models for initial acquaintance and development.  The
      setup instructions for deployment of applications using Embedded
      are discussed towards the end of this chapter.</para>
    </note>

    <section id="install2-win-method"><!-- Level 2 section -->
      <title>Choosing an Installation Method</title>
      <para>Under almost all circumstances you should use the binary installer to install Firebird
      on Windows. If you are new to Firebird you should certainly use the binary installer until
      you are familiar with a standard Firebird server installation.  It covers all common usage
      cases and is typically 'click-through' by accepting the default values.</para>

      <para>Cases when you might wish to consider installing Firebird manually from a zip file
      include:</para>
      <itemizedlist>
        <listitem>
          <para>You need to run multiple versions of Firebird concurrently</para>
        </listitem>
        <listitem>
          <para>You wish to run the Firebird service as a special user</para>
        </listitem>
        <listitem>
          <para>You need to deploy a specific configuration for your application</para>
        </listitem>
      </itemizedlist>

    </section><!-- level 2 -->
  </section><!-- level 1 -->

  <section id="install2-win-readfirst"><!-- Level 1 section -->
    <title>READ THIS FIRST!</title>
    <important>
      <para>Firebird 2.0.x and 2.1.x support the full range of Windows
      server platforms from Windows 2000 onward.  Over the past decade, some platform
      rules have become progressively complicated.  What worked on W2K might not work
      on later Windows platforms.  It is strongly recommended that you study this section
      before you begin, even if you have been cheerfully running v.1.5 for years!</para>

      <para>And note, although you might get Firebird 2.x to install and run on Windows 95,
      98 or ME, they are no longer supported platforms for Firebird servers.</para>
    </important>

    <itemizedlist>
      <listitem>
        <para>Make sure you are logged in as Administrator</para>
      </listitem>

      <listitem>
        <para>Check to make sure that there is no FIREBIRD environment variable defined that is
        visible to Administrator-level users or to the LocalSystem user&mdash;see
        <xref linkend="compat-firebirdvar"/> at the start of the previous chapter.</para>
      </listitem>

      <listitem>
        <para>If you already have an earlier version of Firebird or InterBase&reg; on your server and
        you think you might want to go back to it, set up your fall-back position before you begin:</para>
        <itemizedlist>
          <listitem>
            <para>Use the existing version of <command>gbak</command> to back up your database files
            in transportable format. Do this before you uninstall the old version.</para>
          </listitem>

          <listitem>
            <para>If migrating from a Firebird version earlier than version 2.0 you should use
            <command>gbak</command> to back up your old security database. It is named
            <command>security.fdb</command> for Firebird 1.5 or <command>isc4.gdb</command>
            for a Firebird 1.0 installation. You can restore it later as <command>security2.fdb</command>,
            using the directions in the chapter entitled <quote>Security</quote> in the Firebird
            2.0.x Release Notes.</para>
          </listitem>

          <listitem>
            <para>Go to your System directory and make backup copies of <command>fbclient.dll</command>
            and/or <command>gds32.dll</command> if you have applications that rely on finding those
            libraries there. You might want to name the backup <quote>gds32.dll.fb15</quote> or
            <quote>gds32.dll.fb103</quote> or something similarly informative; or hide it in another
            directory.</para>
          </listitem>
          <listitem>
            <para>Heed all the warnings and notes about incompatibilities and changes required.  Don't
            start experimenting with new features on your active production databases!</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>STOP ANY FIREBIRD OR INTERBASE SERVER THAT IS RUNNING.</para>
        <para>At install time, the installer will try to detect if an existing version of Firebird
        or InterBase is installed and/or running. However this detection is not foolproof. For a
        non-installer install, you are on your own!</para>
        <important>
          <para>A new installation of Firebird will not work correctly if an old version is still
          running. The uninstaller will usually stop an existing server as part of the uninstallation
          process, so you probably need not worry about this if you run an uninstall. However, if
          you do have problems later this is something to go back and check.</para>
        </important>
      </listitem>

      <listitem>
        <para>Before installing Firebird 2.1 it is recommended that you uninstall a previous version
        of Firebird or InterBase, if it exists on your system. If you have special settings in your
        existing <command>firebird.conf</command> (<command>ibconfig</command>, for Firebird 1.0)
        there may be some values that you want to transfer to equivalent parameters in the
        new <command>firebird.conf</command>. The uninstaller for all versions of Firebird will
        preserve certain configuration files. See below for more details.</para>
        <note>
          <para>If you are upgrading from Firebird 1.0.x or InterBase, you should review the release
          notes for Firebird 1.5.x.  There you will find details of the correlation between settings
          in <command>ibconfig</command> and <command>firebird.conf</command>. Study the notes
          about <command>firebird.conf</command> to work out what can be copied directly and what
          parameters require new syntax.</para>
          <para>If this document is not in the documentation directory after installation, you can
          read or download it from the Release Notes section of the
          <ulink url="http://www.firebirdsql.org/index.php?op=doc">Firebird Documentation Index</ulink>.</para>
        </note>

      </listitem>

      <listitem>
        <para>When reinstalling Firebird 2.1, certain configuration files in the installation directory will be
        preserved if you run the installer. These files are:</para>
        <literallayout class="monospaced">
  aliases.conf
  firebird.conf
  firebird.log
  security2.fdb
        </literallayout>
        <itemizedlist>
          <listitem>
            <para>The default Aliases.conf is just a place holder file, so if it already exists it will be
            left as it is. If it doesn't exist it will be generated.</para>
          </listitem>

          <listitem>
            <para>If firebird.conf exists the installer will generate a firebird.conf.default file
            with the default values and leave the existing file untouched.</para>
            <important>
              <para>Each release (v.2.0. v.2.1, v.2.5, etc.) adds new parameters to firebird.conf and,
              potentially, might change how an older parameter works.  Certain parameters are included
              from time to time, to enable legacy applications to continue <quote>working around</quote>
              legacy bugs for a limited time.  Such parameters are removed eventually.  Ensure that you
              read the relevant chapter in each release notes volume and, if necessary, use a difference
              tool to merge existing settings into the new firebird.conf.</para>
            </important>
          </listitem>

          <listitem>
            <para>the firebird.log file is generated automatically by the server when required. An
            empty log file is not created at installation time.</para>
          </listitem>

          <listitem>
            <para>If the security2.fdb database exists it will be used. If it doesn't exist an empty,
            default database will be installed.</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>It is assumed that:</para>
        <orderedlist spacing="compact">
          <listitem>
            <para>you understand how your network works</para>
          </listitem>

          <listitem>
            <para>you understand why a client/server system needs both a server and clients</para>
          </listitem>

          <listitem>
            <para>you have read the accompanying Release Notes&mdash;or at least realise that you
            need to read them if something seems to have gone wrong</para>
          </listitem>

          <listitem>
            <para>you know to go to <ulink url="http://firebirdsql.org/index.php?op=lists">the
            Firebird lists index</ulink> to find a suitable support list if you encounter a
            problem.</para>
          </listitem>
        </orderedlist>
      </listitem>

      <listitem>
        <para>Provided you do not have a FIREBIRD environment variable defined, the default root
        location of Firebird 2.1 will be <filename>C:\Program Files\Firebird\Firebird_2_1</filename>.
        For Firebird 2.0 it will be <filename>C:\Program Files\Firebird\Firebird_2_0</filename>.</para>
      </listitem>
    </itemizedlist>

    <section id="install2-win-dbname"><!-- Level 2 section -->
      <title>Naming databases on Windows</title>
      <para>Note that the recommended extension for database files on Windows ME and XP is &quot;.fdb&quot;
      to avoid possible conflicts with &quot;System Restore&quot; feature of these Windows versions.  Failure to
      address this issue on these platforms will give rise to the known problem of delay on first connection to a
      database whose primary file and/or secondary files are named using the &quot;.gdb&quot; extension that used to
      be the Borland convention for suffixing InterBase database file names.</para>
      <para>The issue is described in more detail in <xref linkend="install2-win-other"/> at the end of the Windows
      installation notes.</para>
    </section><!-- sect2 -->

    <section id="install2-win-mslibs"><!-- Level 2 section -->
      <title>Microsoft C/C++ Runtime Libraries</title>
      <para>The problems associated with installing different versions of Microsoft system libraries
      are so notorious that it has acquired the name 'DLL Hell'. And as each new generation of Microsoft
      operating systems is released the policy for dealing with this issue changes. Sometime this can
      lead to even more hell.</para>

      <!-- ************************************************************************************** -->
      <!-- NEW IN V.2.1.2   NEW IN V.2.1.2   NEW IN V.2.1.2   NEW IN V.2.1.2   NEW IN V.2.1.2     -->
      <!-- ************************************************************************************** -->

      <para>The main source of problems is that, each time a new release appears, people have a
      habit of overlooking the fact that <emphasis role="bold">Windows servers and clients always
      need the  MS runtimes</emphasis>.  No Firebird  server (be it Superserver, Classic, Superclassic or
      Embedded) nor client (fbclient.dll) will work without access to both the C and the C++
      runtime libraries pertaining to the built version of the binary.</para>

      <para>In reality, almost every application installed on Windows needs at least the C runtime
      and many need also the C++ runtime.  The runtimes were almost always present in the system
      directory of established host servers and it was relatively rare during the heyday of
      WinXP and Server2003 for an installation of an older Firebird version not to run &quot;straight
      out of the box&quot;.</para>

      <section id="install2-win-missingruntimes"><!-- Level 3 section -->
        <title>What Happens if the Runtimes Are Missing?</title>

        <para>Both Firebird servers and Firebird clients depend on calls to the C/C++ runtimes.
        If the appropriate runtime is missing, Windows cannot load the binary.  Most of the errors
        you will see in the logs (firebird and system) will be operating system ones, rather than
        exceptions that the Firebird binaries themselves could have detected or handled.  Some data
        access layers that load the Firebird client library dynamically might transform failure to
        load the binary into feedback such as &quot;Cannot connect to database&quot;, wrongly
        implying that there is something wrong with the database.</para>

        <para>However, genuine Firebird exceptions due to &quot;losing&quot; the runtimes can still
        occur, even if they were found for loading the client library, because the INTL library
        needs them, too.  A &quot;User name or password is not defined&quot; or &quot;Character set
        X is not defined&quot; error during the connection start-up usually means the server could
        not load the INTL library.  It is most likely to happen during the attachment to the
        security database, since that precedes anything else.</para>

      </section>

      <section id="install2-win-rt21x"><!-- Level 3 section -->
        <title>Runtimes for Firebird 2.1.x</title>

        <para>As Microsoft Vista approached, successive service packs for WinXP/Server2003, and
        possibly also Win2000, showed signs of tightened rules for installing DLLs.  The new rules
        were synchronised with the design-time assemblies of the Microsoft Visual Studio 8 C++
        compiler, which is used for compiling the Firebird 2.1 series. The corresponding
        distributable runtimes are msvcr80.dll and msvcp80.dll.</para>

        <para>Now, with certain platform exceptions, it is necessary to install the runtimes
        correctly as an assembly.  The minimal runtime consists of three files: msvcr80.dll,
        msvcp80.dll and the manifest (Microsoft.VC80.CRT.manifest).</para>

        <para>Until V.2.1.1, the preferred way to do this was to install the vcredist_32
        or vcredist_64 Microsoft installer (.msi) package, as appropriate for the architecture of
        your host server, from the Microsoft support site.  For Windows 2000 and for WinXP and
        Server2003 prior to Service Pack 1, you need(ed) to download and install the .msi Installer
        software and then install the MSVC8 redistributable pack.</para>

        <important>
          <title>ATTENTION!</title>
          <para>Firebird binaries are built against the original version of Visual C++.  Because
          of this, the required runtimes are those distributed in the vcredist_32/64 pack, not
          those that might have been latterly installed as part of a service pack.</para>
        </important>

        <para>The result of installing the MSVC8 redistributable is that a shared assembly is
        installed on WinXP, Server2003 or MS Vista.  For Windows 2000, it simply writes the
        two DLLs to the system directory and registers them.</para>

        <tip>
          <title>Tip for Windows 2000</title>
          <para>It has been assumed that simply copying the DLLs to the system directory is all that is
          needed.  However, on a Win2K system with SP4 and all subsequent updates, it has been reported
          that an &quot;operating system directive&quot; exception occurred and investigation of the
          system log indicated that &quot;registering&quot; the DLLs was required, using
          the <ulink url="http://support.microsoft.com/kb/267279">regsvr32.exe utility</ulink>. It fixed
          the problem.</para>

          <para>It is suggested that you explore this route only if you encounter the <emphasis>operating
          system directive exception</emphasis> problem on Windows 2000 and see that advice when you
          follow it up in the system log.</para>
        </tip>

        <section id="install2-win-rt21x-private"><!-- Level 4 section -->
          <title>Private Assembly</title>

          <para>Installing the runtime assembly from the Microsoft redistributable is the easiest
          and thus the preferred way to get them on board.  However, from Firebird 2.1.2 onward,
          it becomes possible to isolate the runtimes for your Firebird server or client
          installation in a private assembly.  The server engine and the client, as well as the
          DLLs in Firebird's \intl  folder, have been taught to search for the private
          assembly&mdash;the two runtime DLLs and the manifest file
          Microsoft.VC80.CRT.manifest&mdash;in the same folder as the engine executable or client
          DLL.</para>
          <para>For a detailed discussion of this change, refer to the special topic by Vlad
          Khorsun, <link linkend="install-212-win-s1">Managing MSVC8 Runtime Assemblies</link> near
          the end of this chapter.</para>
        </section><!-- level 4 -->
      </section><!-- level 3 -->

      <section id="install2-win-rt20x"><!-- Level 3 section -->
        <title>Runtimes for Firebird 2.0.x</title>

        <para>For the Firebird 2.0.x series, which has been in release and maintenance since
        November 2006, the Microsoft C and C++ runtimes are msvcr71.dll and msvcp71.dll,
        respectively.  Unfortunately, some of the earlier documentation applicable to Firebird
        2.0 erroneously cited the names of the older runtimes used by Firebird 1.5, (msvcrt.dll
        and the C++ runtime msvcp60.dll).  Firebird 2.0.x will not work if those (or lower)
        runtimes are the only ones available.</para>

        <para>The deployment rules for the ..71.dll runtimes are similar to those for older
        versions (for both the runtimes and the Firebird components):  it is enough to copy
        them to the Windows system directory on Win2000, WinXP and Server2003 servers and
        clients.  Microsoft Vista is not so tolerant about post-installing DLLs in its system
        directory but it appears that copying msvcr71.dll and msvcp71.dll there does work, at
        least at the Windows service patch levels current in the first quarter 2009.</para>

        <para>The Firebird installer executable for v.2.0.x actually attempts to install the
        runtimes on any Windows platform, including Vista.  However, on Vista and, possibly,
        on 64-bit versions of WinXP or Server2003 with the later service packs, it is advisable
        to check after a reboot whether those runtimes are actually there.  If not, you can
        copy them from the \bin folder of the Firebird installation.</para>

      </section><!-- level 3 -->
    </section><!-- level 2 -->

    <section id="install2-win-otherpre"><!-- Level 2 section -->
      <title>Other Pre-installation Issues</title>

      <section id="install2-win-msi"><!-- Level 3 section -->
        <title>Microsoft Installer Version</title>
        <para>The binary installer will determine the host operating system and try to install
        system libraries appropriately for that O/S. In most cases there will be no problems.
        As already alluded to above, early versions of WinXP and Windows 2003 that have not used
        Windows Update will not have the correct version of the Windows Installer required to
        install the side-by-side assemblies of the run-time libraries.</para>

        <para>The only recommended solution is to run Windows Update to bring your XP or Server2003
        installation up to the level of Service Pack 2 or higher.  This should ensure that you have
        the appropriate installer available before executing the installer for your selected Firebird
        kit or for installing the assembly yourself when installing Firebird from a zip kit.</para>

        <tip>
          <para>If you haven't studied the previous section and are confused, then do so now.</para>
        </tip>

        <section id="install2-win-msi-checkversion"><!-- Level 4 section -->
          <title>Checking the Windows Installer Version</title>
          <para>To check the version of the Windows installer installed on your WinXP or later host,
          run <filename>msiexec.exe</filename> from a console prompt.  A help screen will be displayed
          that shows the version. If it is earlier than v.3.0 you must update.</para>
        </section><!-- level 4 -->

        <section id="install2-win-mslibs-z"><!-- Level 4 section -->
          <title>Older Windows Platforms</title>
          <para>If the host O/S is pre-WinXP runtime libraries
          (<filename>msvcp80.dll</filename> and <filename>msvcr80.dll</filename> and the MSVC80 manifest
          for V.2.1.x, or <filename>msvcp71.dll</filename> and <filename>msvcr71.dll</filename>
          for V.2.0.x) can be copied directly from the Firebird \bin\ directory into the Windows or
          WINNT \system32\ directory.</para>

        </section><!-- sect4 -->
      </section><!-- sect3 -->

      <section id="install2-win-64bit"><!-- Level 3 section -->
        <title>Installing under 64-bit versions of Windows</title>
        <para>The 64-bit binary installer includes a 32-bit client kit so that everything  will work 'out
        of the box'.  On the other hand, the zip kits are platform specific, so don't forget to install
        the 32-bit MS C runtime msi, along with the 32-bit client library if you need to use 32-bit
        applications on the server.</para>

        <para>Simultaneous installation of 32-bit and 64-bit versions of Firebird is possible, but at least
        one must be installed and configured manually. Note that under these circumstances the FIREBIRD
        environment variable must NOT be defined at the system level AT ALL.</para>
      </section>

      <section id="install2-win-readnext-client"><!-- Level 3 section -->
        <title>Installation of fbclient.dll on the Server</title>
        <para>Since Firebird 1.5, <emphasis>gds32.dll</emphasis> is not the <quote>native</quote> name 
        of the client library. It is now called <emphasis>fbclient.dll</emphasis>.  Considering the 
        problems that Microsoft has had with DLL hell, it would make little sense if we continued to 
        store the Firebird client library in the system directory by default.</para>
        <para>Furthermore, as we want to allow multiple engines to run simultaneously we would be creating
        our own DLL hell if we continued to encourage the practice of using the system directory for the
        client library.</para>
        <para>So, from Firebird 1.5 on, the client library for local use on the server has resided in the
        \bin directory along with all the other binaries.  For those whose local server applications still
        need to find the client library in the system directory, the installer provides the option
        (unchecked) to copy the client to the system directory and also to rename it to
        <emphasis>gds32.dll</emphasis>, if need be.</para>
        <note>
          <para>You don't need to commit yourself one way or the other during the initial installation.
          Your Windows kits come with tools that can be used to customise such things later.  Please refer
          to the <link linkend="install2-win-customise">Customising Your Installation</link> section at 
          the end of this chapter.</para>
        </note>
      </section>

      <section id="install2-win-readnext-regkey"><!-- Level 3 section -->
      <title>Registry Key</title>
      <para>A Registry key is added and all Firebird 2.1-compliant applications should use this
      key if they need to read a Registry key to locate the correct version of Firebird that they
      wish to use. The new key is:</para>

      <literallayout class="monospaced">
  HKEY_LOCAL_MACHINE\SOFTWARE\Firebird Project\Firebird Server\Instances
      </literallayout>

      <para>Firebird will guarantee that one entry under this key always exists. It will be known as</para>

      <literallayout class="monospaced">
  &quot;DefaultInstance&quot;
      </literallayout>

      <para>and will store the path to the root directory of the default installation.
      Those who don't care about particular installations can always use the default instance to locate the
      fbclient.dll.</para>

      <para>Future versions of Firebird may see other entries under Instances when the installation 
      utilities can be taught to isolate and configure instances reliably.  Applications would then 
      be able to enumerate the Registry entries to determine which Server instance they wish to 
      load.</para>
      </section>

      <section id="install2-win-readnext-cleanup"><!-- Level 3 section -->
      <title>Cleaning up release candidate installs</title>
      <para>It should be noted that the installer removes fbclient.dll from the &lt;system&gt; directory if
      the file is found there. The installer also removes any deprecated HKLM\Software\Firebird* Registry
      keys.</para>
      </section><!-- level 3 -->
    </section><!-- level 2 -->
  </section><!-- level 1 -->

  <section id="install2-win-installer"><!-- Level 1 section -->
    <title>Using the Firebird Installer</title>
    <important>
      <para>Don't overlook the need to have the Microsoft&reg; Visual C and Visual C++ runtimes (msvcr80.dll and
      msvcp80.dll, respectively) present in the appropriate directory of all Windows servers and clients, including
      Windows Embedded installations.  For your convenience, copies of these libraries should be present in the \bin
      directory of the Firebird install.  Refer to the earlier notes in this section if these libraries are missing.</para>
      <para>However, you should check first whether later versions of these libraries
      are already present.  Don't overwrite later versions.</para>
    </important>

    <para>This is really the easy part:  the actual install.  Just run the executable and respond to the dialogs.
    After you have answered a few dialogs about licensing and installation notes, you should see one where you
    decide on the location of the Firebird root directory.</para>

    <variablelist>
      <varlistentry>
      <term>MS Visual C/C++ Runtime Libraries</term>
      <listitem>
        <para>To remind you once again, the Visual C run-time libraries for Firebird 2
        are as follows.-</para>
          <itemizedlist>
            <listitem>
              <para> for Firebird 2.0.x:  msvcp71.dll and msvcr71.dll</para>
           </listitem>
            <listitem>
              <para> for Firebird 2.1.x:  msvcp80.dll and msvcr80.dll</para>
           </listitem>
         </itemizedlist>
      </listitem>
      </varlistentry>

      <varlistentry>
      <term>Installation (Root) directory</term>
      <listitem>
        <para>For Firebird 2.1 the installer should be showing <quote>c:\Program Files\Firebird\
        Firebird_2_1</quote> by default.
        If you decide not to use the default root location, browse to a location you have pre-created;  or just
        type in the full path and let the installer find it.  The path you type in doesn't have to exist:
        the installer will prompt you and create it if it doesn't exist.</para>
        <para>Here you can also opt not to have the installer create Startup Menu icons by checking off the
        option.  If you are installing on Windows 9x or WinMe, or you plan to run the server as an application in
        another Win32 environment, keep the icons option checked on.</para>
      </listitem>
      </varlistentry>
    </variablelist>

    <para>Next, you should see a screen where you choose the installation you want:</para>
    <informalfigure>
    <mediaobject>
      <imageobject float="0">
        <imagedata fileref="images/win_setup_02.png" width="501" depth="383"></imagedata>
      </imageobject>
      <caption><para>Choose the installation you want and hit the &quot;Next&quot; button to carry on responding to
      dialogs.</para></caption>
    </mediaobject>
    </informalfigure>
    <note>
      <para>If you're installing a server, you should choose Superserver (preselected by the installer) or
      Classic (as seen in the image above).  Leave <quote>Server components</quote> and <quote>Developer and
      admin tools components</quote> checked on.</para>
      <para>For a client-only install, check off <quote>Server components</quote>, leaving <quote>Client
      components</quote> and, optionally, <quote>Developer and admin tools components</quote> checked on.</para>

      <para>There is also a drop-down for a custom installation which new users can safely ignore.</para>
    </note>
    <para>The next screen of interest enables you to set up how you want the server to run.</para>

    <informalfigure>
    <mediaobject>
      <imageobject float="0">
        <imagedata fileref="images/win_setup_04_SS.png" width="501" depth="383"></imagedata>
      </imageobject>
      <caption><para>Choose the options you want, according to your choice of server model.</para></caption>
    </mediaobject>
    </informalfigure>

     <variablelist>
      <varlistentry><term>Use the Guardian...</term>
        <listitem>
          <para>Guardian is a utility than can run &quot;over the top&quot; of Superserver and restart it,
          should it crash for any reason.  If you chose the Classic server, the Guardian option should not
          appear. If it is there and is checked on, you must check it OFF.</para>

          <para>For deployment of Superserver on Win9x, WinME and WinNT 4.0, which are unsupported platforms
          now for Firebird, using Guardian can avoid the situation where the server stops serving and nobody
          can find the DBA to restart it.  The Guardian is otherwise more or less obsolete now since, on the
          supported Windows platforms, you can set the operating system to restart the service instead.</para>
        </listitem>
      </varlistentry>

      <varlistentry><term>Service or application?</term>
      <listitem>
        <para>If you select to install Superserver or Classic, and your OS version supports services, you will
        be asked to choose whether to run Firebird as a service or as an application.  Unless you have a
        compelling need to run the server as an application, choose service.</para>
      </listitem></varlistentry>
      <varlistentry><term>Manual or automatic?</term>
      <listitem>
        <para>With the automatic option, Firebird will start up whenever you boot the host machine.  With the
        manual option you can start the server on demand from the Services applet in the Settings/Control Panel/
        Administration Tools selection.</para>
      </listitem></varlistentry>
      <varlistentry><term>Use Control Panel Applet (Superserver only)</term>
      <listitem>
        <para>If Superserver is being installed, you will see an option to <quote>Install Control Panel
        applet?</quote>.  Unless your operating system is Vista, it might be handy to keep this as it places an applet in the Control Panel from which you can stop and [re]start the server.</para>
        <caution>
          <title>Don't install the Control Panel applet on Vista!</title>
          <para>Installing this applet on Vista has the potential to break your system's control panel altogether.  If it appears on the installer screen display, make sure to check it OFF.</para>
        </caution>
      </listitem></varlistentry>
    </variablelist>

    <para>Eventually, the dialogs will stop, you will press <quote>Install</quote> and the server will either
    silently start the server (if you requested it) or prompt you for permission to reboot.  Reboot will
    be signalled if the installer was unable to update a DLL due to its being already loaded when the
    installer started up.</para>
    
    <section id="install2-win-installer-whatnow"><!-- Level 2 section -->
      <title>What Now?</title>
      <para>By this point, if you elected to start the server, Firebird will be running and 
      waiting for something to connect to it.  Assuming you installed it as a service, you can
      visit the <emphasis>Services</emphasis> applet in your Administration Tools area to inspect 
      its status.  If you decide to inspect the property sheet for the service, you will see the
      name of the executable that the service is running, viz.</para>
      <itemizedlist spacing="compact">
        <listitem><para><emphasis>fbserver.exe</emphasis> if you installed Superserver</para></listitem>
        <listitem><para><emphasis>fb_inet_server.exe</emphasis> if you installed Classic</para></listitem>
      </itemizedlist>
      <para>If you elected to use the Guardian with Superserver, you will see another service there,
      whose executable name is <emphasis>fbguard.exe</emphasis>.  If you can see this service in
      combination with the Firebird Classic service, you should stop the Guardian service and run 
      the <command>instsvc.exe</command> with the <command>remove</command> parameter to get rid of it
      (<emphasis>only</emphasis> the Guardian service).</para>

      <para><emphasis role="bold">That's all, folks!</emphasis></para>

      <para>If you want to perform some customisation of your Firebird server, you will find
      information about some tools and techniques at the end of this chapter.</para>
    </section>

    <section id="install2-win-installer-uninstall"><!-- Level 2 section -->
      <title>Uninstallation</title>
      <para>This note refers to uninstalling a Firebird server that you installed using the Windows
      Installer kit.  It hooks into the native Windows Add/Remove Programs database, which will not
      have an entry for the Firebird server if you installed from a zip kit (next section).</para>

      <para>To prepare to uninstall Firebird, first shut down all connections to databases and then
      shut down the server.  The Firebird uninstall routine (run from Add/Remove
      Programs in the Control Panel) preserves and renames the following key files:</para>
      <literallayout>
    preserves security2.fdb or renames it to security2.fbnnnn
    preserves firebird.log
    preserves firebird.conf or renames it to firebird.confnnnn
    preserves aliases.conf or renames it to aliases.confnnnn
      </literallayout>
      <para><emphasis>&quot;nnnn&quot;</emphasis> is the build number of the old installation.</para>
      <para>No attempt is made to uninstall files that were not part of the original installation.</para>
      <para>Shared files such as fbclient.dll and gds32.dll will be deleted if the share count indicates
      that no other application is using them.</para>
      <para>The Registry keys that were created will be removed.</para>

    </section><!-- level 2 -->
  </section><!-- level 1 -->

  <section id="install2-win-zipkit"><!-- Level 1 section -->
    <title>Installing Firebird from a zip kit</title>
    <para>The installation of FB 2.1 is similiar in principle to previous versions but you need to
    pay attention to the preceding notes about the MS Visual C/C++ v.8 runtimes.  Ensure that these
    libraries are appropriately installed before you begin.</para>

    <section id="install2-win-zipkit-ss"><!-- Level 2 section -->
      <title>Superserver</title>

      <para>That taken care of, the steps are as follows:</para>
      <itemizedlist>
        <listitem>
          <para>unzip the archive into a new directory</para>

        </listitem>
        <listitem>
          <para>change the current directory to $FIREBIRD\bin (here and below, $FIREBIRD
          refers to the directory where the v.2.1 files are located)</para>

        </listitem>
        <listitem>
          <para>run instreg.exe:</para>
          <literallayout class="monospaced">
    instreg.exe install
          </literallayout>
          <para>It causes the installation path of the directory above to be written into
          the registry (HKLM\Software\Firebird Project\Firebird Server\Instances\DefaultInstance)</para>

        </listitem>
        <listitem>
          <para>if you want to register a service, also run instsvc.exe:</para>
          <literallayout class="monospaced">
    instsvc.exe install
          </literallayout>

        </listitem>
        <listitem>
          <para>optionally, you may need to run instclient.exe to copy fbclient.dll or a
          specially-generated clone as gds32.dll to the OS system directory</para>
        </listitem>
      </itemizedlist>
    </section>

    <section id="install2-win-zipkit-cs"><!-- Level 2 section -->
      <title>Installing Classic Server from a zip kit</title>
      <para>To install the CS engine, the only difference is the additional switch for instsvc.exe:</para>
      <literallayout class="monospaced">
    instsvc.exe install -classic
      </literallayout>

      <important>
        <para>Notice that this means that you may have only one architecture of the
        engine&mdash;either fbserver.exe (Superserver) or fb_inet_server.exe (the parent
        process for Classic)&mdash;installed as a service.</para>
        <para>The Control Panel applet is not installed with Classic&mdash;deliberately.
        Don't try to install and use it.  The concept of <quote>terminating</quote> a service does
        not apply to the Classic model.</para>
      </important>
    </section>

    <section id="install2-win-zipkit-simplified"><!-- Level 2 section -->
      <title>Simplified setup</title>
      <para>If you don't need a registered service, then you may avoid running both instreg.exe
      and instsvc.exe.  In this case you should just unzip the archive into a separate directory
      and run the server as an application:</para>
      <literallayout class="monospaced">
    fbserver.exe -a
      </literallayout>
      <para>It should treat its parent directory, i.e., the one above \bin\, as the root
      directory in this case.</para>
    </section><!-- level 2 -->

    <section id="install2-win-zipkit-uninstall"><!-- Level 2 section -->
      <title>Uninstallation</title>
<!-- Alteration in 2.1 -->
      <warning>
        <para>You should not delete the client libraries from &lt;SYS&gt; by hand as it
        has the potential to render the shared library count inaccurate. The
        <filename>instclient.exe</filename> utility was conceived primarily so that the
        client library could be installed and removed from &lt;SYS&gt; while correctly
        maintaining the shared library count.</para>
      </warning>

      <para>To remove Firebird 2.1 without a Windows Uninstaller, proceed as follows:</para>
      <itemizedlist>
        <listitem>
          <para>stop the server</para>
        </listitem>
        <listitem>
          <para>run &quot;instreg.exe remove&quot;</para>
        </listitem>
        <listitem>
          <para>run &quot;instsvc.exe remove&quot;</para>
        </listitem>
        <listitem>
          <para>run &quot;instclient.exe remove fbclient.dll&quot;</para>
        </listitem>
        <listitem>
          <para>run &quot;instclient.exe remove gds32.dll&quot;</para>
        </listitem>
        <listitem>
          <para>delete installation directory</para>
        </listitem>
      </itemizedlist>
    </section><!-- level 2 -->
  </section><!-- level 1 -->

  <section id="install2-win32-embed" xreflabel="Windows Embedded"><!-- Level 1 section -->
    <title>Windows Embedded</title>
    <para>The embedded server is a fully functional server linked as a dynamic library that is
    distributed with the name <emphasis>fbembed.dll</emphasis>. It has exactly the same features as
    the usual Superserver and its client part exports the standard Firebird API entrypoints.</para>
    <para>The embedded server acts as a true local server for a single client accessing databases
    on a local machine.  It can also act as a remote gateway that redirects all network calls to
    other hosts, just as the regular client library does.</para>

    <para>Firebird Embedded for Windows comes only as a zip kit, since it is only a component of
    the embedded system that you will build around it.  However, you should take care to unpack
    the kit in the structure under which it was packed, since many parts of an embedded setup rely
    on finding one another within that directory tree.</para>

    <section id="install2-win32-embed-regstry"><!-- level 2 -->
      <title>Registry</title>
      <para>Any Firebird Registry entries are ignored. The root directory of the embedded server
      is the one where the embedded library binary (fbembed.dll, usually renamed to fbclient.dll)
      is located.</para>
    </section>

    <section id="install2-win32-embed-dbaccess"><!-- level 2 -->
      <title>Database Access</title>
      <para>Client access can be only via the local (XNET) protocol, i.e. NOT a TCP/IP local
      loopback connection string that includes the server name <quote>localhost</quote> or the
      IP address 127.0.0.1.  The embedded server supports only the local connect to an absolute
      database file path without a server name.</para>
      <para>The client program gets exclusive access to the database file after successful
      connect.  If another Firebird server already has a client attached to the database, the
      client program will be denied access.  This is intentional.</para>
      <important>
        <title>Do not try to connect to a database on any mapped location!</title>
        <para>The database MUST be on a local partition that is controlled by the machine
        that is hosting your embedded server and its surrounding application.</para>
      </important>
    </section>

    <section id="install2-win32-embed-authent"><!-- level 2 -->
      <title>Authentication and Security</title>
      <para>The security database (security2.fdb) is not used in connecting to the embedded
      server. Hence it is not required. Any user is able to attach to any database. Since both
      the server and the client run in the same address space, security becomes just an agreement
      between the accessor and the accessed, which can be easily compromised.</para>

      <note>
        <para>SQL privileges are still checked and enforced.  Users that are assigned privileges
        in a Firebird database are not dependent on the existence of the user in the security
        database.  Applications may still validly pass a user name in the database connection
        attributes and should do so, to make their user known to the database's access control
        list.</para>
      </note>
    </section>

    <section id="install2-win32-embed-compat"><!-- level 2 -->
      <title>Compatibility</title>
      <para>You may run any number of applications with the embedded server without any
      conflicts.  Having a full Firebird or InterBase server running on the same machine
      is not a problem, either.</para>

      <para>However, be aware that you cannot access a single database from a number of
      servers simultaneously, regardless of whether they be embedded or full servers.  An
      embedded server has the SuperServer architecture and hence exclusively locks any
      database it attaches to.  This is intentional.</para>
    </section>

    <section id="install2-win32-embed-install"><!-- level 2 -->
      <title>Installing an Embedded Server Application</title>
      <variablelist>
        <varlistentry>
          <term><emphasis role="bold">MS Visual C/C++ Runtimes</emphasis></term>
          <listitem>
            <para>For v.2.1.x the MS runtime libraries <emphasis>msvcp80.dll</emphasis> and
            <emphasis>msvcr80.dll</emphasis> must be available in the embedded library's path.
            You  can extract copies of these libraries from the zip kit version of the full
            Firebird build if they are not already present on your system.</para>
            <para>If you have skipped over the earlier notes concerning the MCVC8 runtime
            libraries, it is recommended that you review them now.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">Application Root</emphasis></term>
          <listitem>
            <para>Just copy fbembed.dll, icudt30.dll, icuin30.dll and icuuc30.dll into the directory
            with your application exectable.</para>
            <para>You should also copy firebird.msg and firebird.conf (if necessary) to the same
            directory.</para>
            <note>
              <para>You will need firebird.conf only if it is necessary to set some non-default
              configuration parameter for the embedded server.</para>
            </note>
          </listitem>
          <listitem>
            <para>If <emphasis role="bold">external libraries</emphasis> are required for your
            application, such as INTL support (fbintl.dll and fbintl.conf) or UDF libraries,
            create subdirectories beneath the application root for them, emulating the Firebird
            server ones, e.g. /intl or /udf, respectively.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">Rename fbembed.dll</emphasis></term>
          <listitem>
            <para>Rename fbembed.dll to either fbclient.dll or gds32.dll, according to which
            is required by your database connectivity software.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">Start your application</emphasis></term>
          <listitem>
            <para>Now start your application and it will use the embedded server as a both a client
            library and a server and will be able to access local datasases via the XNET network
            emulation protocol.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section><!-- level 2 -->
    <section id="install2-win32-embed-installexample"><!-- level 2 -->
      <title>Installation Structure Examples</title>
      <programlisting>
  c:\my_app\app.exe
  c:\my_app\gds32.dll
  c:\my_app\ib_util.dll
  c:\my_app\icudt30.dll
  c:\my_app\icuin30.dll
  c:\my_app\icuuc30.dll
  c:\my_app\firebird.conf
  c:\my_app\firebird.msg
  c:\my_app\intl\fbintl.dll
  c:\my_app\intl\fbintl.conf
  c:\my_app\udf\fbudf.dll
      </programlisting>
      <para>Suppose you want to place the Firebird files (excluding the renamed fbembed.dll) in another
      directory.  In that case, you need to modify your firebird.conf and set RootDirectory to the Firebird
      directory tree that is parent to the Firebird files.</para>
      <para><emphasis role="bold">Example</emphasis></para>
      <programlisting>
  c:\my_app\app.exe
  c:\my_app\gds32.dll
  c:\my_app\ib_util.dll
  c:\my_app\icudt30.dll
  c:\my_app\icuin30.dll
  c:\my_app\icuuc30.dll
  c:\my_app\firebird.conf
  d:\fb\firebird.msg
  d:\fb\intl\fbintl.dll
  d:\fb\intl\fbintl.conf
  d:\fb\udf\fbudf.dll
      </programlisting>
      <para>In firebird.conf:</para>
      <programlisting>
  RootDirectory = d:\fb
      </programlisting>
    </section><!-- level 2 -->

  </section><!-- level 1 -->
  <!-- //////////////////////////////////////////////////////////////////////////////// -->
  
  <section id="install2-win-clientonly"><!-- Level 1 section -->
    <title>Client-only Installs</title>
    <para>In the past, it was assumed that just copying fbclient.dll and the runtimes to the 
    system directory was enough to get a remote client set up to connect to Firebird.  It worked 
    for some situations, i.e., where the presence of the C/C++ runtimes was normal and the 
    location was standard.</para>

    <para>Now, with Firebird 2.1 and higher and the more pervasive changes in the Microsoft 
    platform rules, more care must be taken.</para>

    <para>The option to use the client-only install option in the binary installer kit might be 
    the better approach to take if you are not too concerned about a private assembly.  It will 
    take care of writing a Registry entry to inform the system where to look for components that 
    applications might need and of locating them in the correct relative locations;  it can also 
    be set to write a &quot;Borland-compatible&quot; client dll and, optionally, give it the 
    legacy name 'gds32.dll'.</para>

    <section id="install2-win-fbmsgfile"><!-- Level 2 section -->
      <title>The firebird.msg File</title>

      <para>Each release of the client library contains the compiled message text corresponding
      to exception codes that its matching Firebird server returns to the client application
      via the Error Status array.  When the client application is using the correct version of
      fbclient.dll, the client does not need a local copy of firebird.msg.</para>

      <para>However, the client library does not contain any text for error messages output to
      the console by the Firebird command-line utilities distributed with the releases (gbak,
      isql, etc.). The texts for those messages live <emphasis>only</emphasis> in firebird.msg.
      If any of those utilities is to be used from a client, a local copy of firebird.msg is
      required.  The symptom of a missing, wrongly placed or outdated firebird.msg file on a
      client that needs it is an error message of the kind &quot;Cannot format
      message..&quot;</para>
    </section>

    <section id="install2-win-otherlibs">
      <title>Other Libraries or Files Needed by Clients</title>
      <para>Client-only installations do not need any other components from the Firebird
      distribution.  However, don't forget those MSVC runtimes!</para>
    </section>
  </section><!-- level 1 -->

<!-- //////////////////////////////////////////////////////////////////////////////// -->
  <section id="install2-win-customise"><!-- Level 1 section -->
    <title>Customising Your Installation</title>
    <para>A number of tools and tricks are available for certain kinds of customisation
    you might want to make in your installation.  Separate documentation is provided for
    most of these tools, in the form of text files in your installation's \doc\ 
    folder.</para>
    <para>Note also that most of these tools have skeleton help available simply by running
    the executable concerned -help or -? arguments.  It doesn't matter which you use:
    both are invalid, prompting the executable to display all its valid ones.</para>

    <section id="install2-win-spcuser"><!-- Level 2 section -->
      <title>Running Firebird as a service with a special user name</title>
      <para>Firebird can be made more secure on a Windows system if it is run as a service with 
      its own user name.  If you want to make use of the secure login feature, create a <quote>firebird 
      service user</quote> on the system with any name and password you like. It must have the 
      privileges for a normal user.</para>

      <para>More information is in the document named <filename>README.instsvc.txt</filename>. If you 
      have a zip kit, you will find it in the /doc/ directory of the zipfile's root. If you don't have 
      a zip kit available, the file won't be available until after the installation. You can read the 
      same document at
      <ulink url="http://firebird.cvs.sourceforge.net/firebird/firebird2/doc/README.instsvc?view=markup">
      this URL</ulink>.</para>
    </section>

    <section id="install2-win-multiserv"><!-- Level 2 section -->
      <title>Installing Multiple Servers</title>
      <para>Firebird 2.1 makes it a little easier to run multiple servers simultaneously. However the 
      second and subsequent servers must be installed manually. You can read more about this in the file
      <filename>install_windows_manually.txt</filename> available in the doc directory after installation, 
      or it can be found at 
      <ulink url="http://firebird.cvs.sourceforge.net/firebird/firebird2/doc/install_windows_manually.txt?view=markup">
      this URL</ulink>.</para>
      <para>The detailed description in Chapter 9 of the Firebird 1.5.x release notes, for configuring 
      an alternative service port and accessing from applications, still holds for the Fb 2.x releases 
      and is essential reading if you plan to have more than one server running.</para>
    </section>

    <section id="install2-win-readnext-legacy"><!-- Level 3 section -->
      <title>Supporting legacy applications and drivers</title>
      <para>Traditionally, local applications that use InterBase or Firebird have expected to load the
      gds32.dll client library from the system directory. Firebird 2.x versions ship with a tool 
      named 'instclient.exe' that can install a clone of fbclient.dll to the Windows System directory. 
      This clone gets patched on the fly so that its file version information begins with &quot;6.3&quot;, 
      to provide compatibility for old applications that check the GDS32.DLL file version and can not 
      make sense of a number string such as &quot;2.0&quot;.</para>

      <section id="install2-win-readnext-instclient"><!-- Level 3 section -->
        <title>InstClient.exe Tool</title>
        <para>This 'instclient.exe' tool can also install the FBCLIENT.DLL itself in the Windows
        system directory, if required.  This will take care of tools or applications that need to
        load it from there, on clients where the operating system still permits user DLLs to load
        from the system directory.</para>
        <para>The instclient.exe utility should be located in the 'bin' directory of your Firebird
        installation and must be run from there in a command shell.</para>

        <para><emphasis role="bold">Usage of instclient.exe:</emphasis></para>
        <programlisting>
  instclient i[nstall] [ -f[orce] ] library
             q[uery] library
             r[emove] library
        </programlisting>
        <para>where library is:  <function>fbclient | gds32</function></para>
        <para><function>'-z'</function> can be used with any other option, prints version.</para>
        <para>Version information and shared library counts are handled automatically. You
        may provide the <function>-f[orce]</function> option to override version checks.</para>
        <caution>
          <para>If you <function>-f[orce]</function> the installation, it could break another
          Firebird or InterBase&reg; version already installed.  You might have to reboot the machine
          in order to finalize the copy.</para>
        </caution>

        <para>For more details, see the document README.Win32LibraryInstallation.txt which is
        located in ..\doc.</para>
      </section><!-- section 3 -->
    </section><!-- section 2 -->
  </section><!-- section 1 -->
  
  <!-- ************************************************************************************** -->
  <!-- NEW IN V.2.1.2   NEW IN V.2.1.2   NEW IN V.2.1.2   NEW IN V.2.1.2   NEW IN V.2.1.2     -->
  <!-- ************************************************************************************** -->

  <section id="install-212-special"><!-- Level 1 section -->
    <title>Special Topics</title>
    <para>In this section we have special topics that provide extra detail about new or
    changed features affecting your installation of Firebird on Windows.</para>

    <section id="install-212-win-s1"><!-- Level 2 section -->
      <sectioninfo>
        <title>Managing MSVC8 Assemblies</title>
        <author><firstname>V.</firstname><surname>Khorsun</surname></author>
      </sectioninfo>
      <para><emphasis role="bold">Applies from V.2.1.2 Onward</emphasis></para>
      <para>Firebird 2.1 is built by the Microsoft MSVC8 compiler in Visual Studio 2005.  Because all
      the Firebird binaries are built to use dynamic linking, they all require run-time libraries.</para>
      <para>To avoid the dll-hell issue Microsoft introduced new rules for the distribution of components
      that may be shared by multiple applications. From Windows XP forward, shared libraries&mdash;such
      as the Visual C++ and Visual C runtimes <filename>msvcp80.dll</filename>,
      <filename>msvcr80.dll</filename> and <filename>mscvcm80.dll</filename>&mdash;must be distributed as
      shared or as private assemblies.</para>
      <itemizedlist>
        <listitem>
          <para>The Microsoft MSI Installer installs shared assemblies into the common special
          folder <filename>SxS</filename> for use by multiple applications.</para>
        </listitem>
        <listitem>
          <para>Private assemblies are distributed with applications and should be put into the
          application folder. Use of the <filename>\system32</filename> folder for assemblies is
          now prohibited on the XP, Server2003 and Vista platform families.</para>
        </listitem>
      </itemizedlist>

      <section id="install-212-win-shared"><!-- Level 3 section -->
        <title>Installing Runtimes as a Shared Assembly</title>
        <para>To install the runtimes as a shared assembly, the deployment system must have MSI 3.0
        installed and the user must have administrative privileges. Often, this is not possible with
        an application being deployed with Firebird Embedded:  it must be installed ready-to-run.
        In that case, do not plan to install the runtimes as a shared assembly.</para>
      </section><!-- level 3 -->

      <section id="install-212-win-private"><!-- Level 3 section -->
        <title>Installing Runtimes as a Private Assembly</title>

        <para>To install the MSVC8 run-time libraries as a private assembly its contents&mdash;the
        three DLLs mentioned above and the assembly's manifest file, <filename>Microsoft
        VC80.CRT.manifest</filename>&mdash;must be put into every folder where a dependent binary
        (.exe or .dll) resides, because of built-in checks for the folders that are the expected
        location of the runtimes that are equivalent to the compile-time libraries that were used.</para>
        <para>A typical installation of Firebird Embedded would thus require three complete copies of
        the MSVC8 run-time assembly: one in the application folder and one each into the \intl and
        \udf folders.  To avoid the issue of bloating the installation, some changes were done for
        V.2.1.2 in the way some of the Firebird binaries are built.  (See also
        <ulink url="http://tracker.firebirdsql.org/browse/CORE-2243"><emphasis>Tracker entry
        CORE-2243</emphasis></ulink>).</para>
        <para>These are the changes that enable Firebird Embedded to work even if the application
        structure does not incorporate the MSVC8 runtime assembly:</para>
        <orderedlist numeration="loweralpha">
          <listitem><!-- (a) -->
            <para>The libraries ib_util.dll, fbudf.dll, ib_udf.dll, fbintl.dll are built without any embedded manifest.  The effect is to avoid having the loader search for a MSVC8 assembly in the same folder as corresponding DLL. For this to work, the host process must have already loaded the MSVC8 run-time via manifest before any attempt is made to load these secondary DLL's.</para>
          </listitem>
          <listitem><!-- (b) -->
            <para>fbembed.dll now has code to create and activate the activation context from its own manifest    before loading any secondary DLL that might be required.</para>
          </listitem>
        </orderedlist>
      </section><!-- end of level 3 section -->

      <note>
        <title>Notes</title>
        <orderedlist numeration="loweralpha">
          <listitem><!-- (a) -->
            <para>It is highly recommended to use the Microsoft redistribution package to install the MSVC8 run-time!  The executable installer <filename>vcredist_x86.exe</filename> or <filename>vcredist_x64.exe</filename> (as appropriate to your kit selection) should be present in the zip kits for the full installation and the Embedded version.  If not, it can be downloaded from the <ulink url="http://www.microsoft.com/downloads/Browse.aspx?displaylang=en&amp;productID=23947D52-B2BC-4E88-8C51-E81DC2905B0D">Microsoft download site.</ulink></para>
          </listitem>

          <listitem><!-- (b) -->
            <para>Third party UDFs must satisfy <emphasis>one of the following requirements</emphasis> if a MSVC8 run-time assembly is installed as private assembly.  When compiling the UDF library, the MSVC8 runtime <emphasis>EITHER</emphasis>:</para>
            <itemizedlist>
              <listitem>
                 <para>is NOT used</para>
               </listitem>
              <listitem>
                 <para>is used but the build is done without the embedded manifest</para>
              </listitem>
              <listitem>
                <para>is used and the build is done with the embedded manifest&mdash;the default option in the MSVC IDE.  In this case the MSVC8 assembly must be in the same folder as the UDF library</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </orderedlist>
      </note>
    </section><!-- level 2 -->

        <!-- ************************************************************************************** -->
        <!-- ************************************************************************************** -->
    <section id="install2-win-knownissues"><!-- Level 2 section -->
      <title>Known Windows Issues</title>
      <para>Over the years, various Windows issues that affect Firebird have been noted.  They are
      listed here as being of possible interest when things seem to go not so well.</para>
      <variablelist>
        <varlistentry><term>Winsock2</term>
          <listitem>
            <para>Firebird requires WinSock2. All Win32 platforms should have this, except for Win95.
            A test for the Winsock2 library is made during install. If it is not found the install will
            fail.  To find out how to go about upgrading,
            <ulink url="http://support.microsoft.com/default.aspx?scid=kb;EN-US;q177719">visit this
            link</ulink>.</para>
           </listitem>
        </varlistentry>
        <varlistentry><term>System Restore Utility (XP, Server 2003 and ME)</term>
          <listitem>
            <para>Windows XP (Home and Professional editions), Server 2003 and ME have a feature called
            <firstterm>System Restore</firstterm>, that causes auto-updating (backup caching?) of all
            files on the system having a &quot;.gdb&quot; suffix.  The effect is to slow down
            access to Firebird databases having that suffix to a virtual standstill as the files are backed
            up every time an I/O operation occurs. (On XP and Server 2003 .NET Servers, there is no System
            Restore).</para>
            <para>A file in the Windows directory of ME, c:\windows\system\filelist.xml, contains &quot;protected
            file types&quot;.  &quot;.gdb&quot; is named there. Charlie Caro, an InterBase developer, originally
            recommended deleting the GDB extension from the &quot;includes&quot; section of this file.  However,
            it was later demonstrated that WinME rebuilds this list.  In XP, it is not possible to edit
            filelist.xml at all.</para>

            <para>On ME, the permanent workarounds suggested are one of:</para>
            <itemizedlist>
              <listitem>
                <para>use FDB (Firebird DB) as the extension for your primary database files--RECOMMENDED</para>
              </listitem>
              <listitem>
                <para>move databases to C:\My Documents, which is ignored by System Restore</para>
              </listitem>
              <listitem>
                <para>switch off System Restore entirely (consult
                Windows doc for instructions).</para>
              </listitem>
            </itemizedlist>

            <para>On Windows XP and Server 2003 you can move your databases to a separate partition
            and set System Restore to exclude that volume.</para>
            <para>Windows XP uses smart copy, so the overhead seen in Windows ME may be less of an issue on
            XP, for smaller files at least.  For larger files (e.g. Firebird database files, natch!) there
            doesn't seem to be a better answer as long as you have &quot;.gdb&quot; files located in the
            general filesystem.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section><!-- level 2 -->
  </section><!-- level 1 -->

</chapter>