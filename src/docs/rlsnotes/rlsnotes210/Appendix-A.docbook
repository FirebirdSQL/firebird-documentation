 <appendix id="rnfb210-appx-A" xreflabel="Appendix A">
    <appendixinfo>
      <title>New Built-in Functions</title>
    </appendixinfo>
    <para><emphasis role="bold">(Firebird 2.1)</emphasis></para>

    <informaltable id="rnfb21-builtins">
      <tgroup cols="3">
        <colspec align="center" colname="col-func" colwidth="2*"/>
        <colspec align="center" colname="col-fmt" colwidth="4*"/>
        <colspec align="left" colname="col-desc" colwidth="6*"/>
        <spanspec spanname="span-example" namest="col-func" nameend="col-desc"
          colsep="0"/>
        <thead>
          <row>
            <entry align="center">Function</entry>
            <entry align="center">Format</entry>
            <entry align="center">Description</entry>
          </row>
        </thead>

        <tbody>
<!-- table entry -->
          <row>
            <entry><emphasis>ABS</emphasis></entry>
            <entry>ABS( &lt;number&gt; )</entry>
            <entry>Returns the absolute value of a number.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  select abs(amount) from transactions;
            </programlisting></entry>
          </row>
<!-- table entry -->
          <row>
            <entry><emphasis>ACOS</emphasis></entry>
            <entry>ACOS( &lt;number&gt; )</entry>
            <entry>Returns the arc cosine of a number.  Argument to ACOS must be in
            the range -1 to 1.  Returns a value in the range 0 to PI.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  select acos(x) from y;
            </programlisting></entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>ASCII_CHAR</emphasis></entry>
            <entry>ASCII_CHAR( &lt;number&gt; )</entry>
            <entry>Returns the ASCII character with the specified code.
            The argument to ASCII_CHAR must be in the range 0 to 255.  The result is
            returned in character set NONE.
            </entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  select ascii_char(x) from y;
            </programlisting></entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>ASCII_VAL</emphasis></entry>
            <entry>ASCII_VAL( &lt;string&gt; )</entry>
            <entry>
              <para>Returns the ASCII code of the first character of the specified
              string.</para>
              <orderedlist>
                <listitem>
                  <para>Returns 0 if the string is empty</para>
                </listitem>
                <listitem>
                  <para>Throws an error if the first character is multi-byte</para>
                </listitem>
                <listitem>
                  <para>The argument may be a text BLOB of 32,767 <emphasis>bytes</emphasis> 
                  or less</para>
                </listitem>
              </orderedlist>
            </entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  select ascii_val(x) from y;
            </programlisting></entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>ASIN</emphasis></entry>
            <entry>  ASIN( &lt;number&gt; )</entry>
            <entry>Returns the arc sine of a number.  
            The argument to ASIN must be in the range -1 to 1. It returns a result in the
            range -PI/2 to PI/2.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  select asin(x) from y;
            </programlisting></entry>
          </row>
<!-- table entry -->
          <row>
            <entry><emphasis>ATAN</emphasis></entry>
            <entry>ATAN( &lt;number&gt; )</entry>
            <entry>Returns the arc tangent of a number.  Returns a value in the range -PI/2 to PI/2.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  select atan(x) from y;
            </programlisting></entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>ATAN2</emphasis></entry>
            <entry>ATAN2( &lt;number&gt;, &lt;number&gt; )</entry>
            <entry>Returns the arc tangent of the first number / the second number.  
            Returns a value in the range -PI to PI.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  select atan2(x, y) from z;
            </programlisting></entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>BIN_AND</emphasis></entry>
            <entry>BIN_AND( &lt;number&gt; [, &lt;number&gt; ...] )</entry>
            <entry>Returns the result of a binary AND operation performed on all arguments.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  select bin_and(flags, 1) from x;
            </programlisting></entry>
          </row>
          
<!-- table entry: this one did not get out in the v.2.1.4 notes -->
          <row>
            <entry><emphasis>BIN_NOT</emphasis></entry>
            <entry>BIN_NOT( &lt;number&gt; )</entry>
            <entry>(Added in V.2.5) Returns the result of a bitwise NOT operation performed on its argument.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  select bin_not(flags) from x;
            </programlisting></entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>BIN_OR</emphasis></entry>
            <entry>BIN_OR( &lt;number&gt; [, &lt;number&gt; ...] )</entry>
            <entry>Returns the result of a binary OR operation performed on all arguments.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  select bin_or(flags1, flags2) from x;
            </programlisting></entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>BIN_SHL</emphasis></entry>
            <entry>BIN_SHL( &lt;number&gt;, &lt;number&gt; )</entry>
            <entry>Returns the result of a binary shift left operation performed on the
            arguments (first &lt;&lt; second).</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  select bin_shl(flags1, 1) from x;
            </programlisting></entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>BIN_SHR</emphasis></entry>
            <entry>BIN_SHR( &lt;number&gt;, &lt;number&gt; )</entry>
            <entry>Returns the result of a binary shift right operation performed on the
            arguments (first &gt;&gt; second).</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  select bin_shr(flags1, 1) from x;
            </programlisting></entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>BIN_XOR</emphasis></entry>
            <entry>BIN_XOR( &lt;number&gt; [, &lt;number&gt; ...] )</entry>
            <entry>Returns the result of a binary XOR operation performed on all arguments.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  select bin_xor(flags1, flags2) from x;
            </programlisting></entry>
          </row>
          
<!-- table entry -->
          <row>
            <entry><emphasis>BIT_LENGTH</emphasis></entry>
            <entry>BIT_LENGTH( &lt;string&gt; | &lt;string_expr&gt; )</entry>
            <entry>Returns the length of a string in bits.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
              <programlisting>
  select
    rdb$relation_name,
    bit_length(rdb$relation_name),
    bit_length(trim(rdb$relation_name))
  from rdb$relations;
              </programlisting>
            </entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>CEIL | CEILING</emphasis></entry>
            <entry>{ CEIL | CEILING }( &lt;number&gt; )</entry>
            <entry>Returns a value representing the smallest integer that is greater than or equal to the
            input argument.</entry>
          </row>
          <row>
            <entry title="Examples" spanname="span-example" colsep="0">
            <programlisting>
    1) select ceil(val) from x;
    2) select ceil(2.1), ceil(-2.1) from rdb$database;  -- returns 3, -2
            </programlisting></entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>CHAR_LENGTH | CHARACTER_LENGTH</emphasis></entry>
            <entry>CHAR_LENGTH( &lt;string&gt; | &lt;string_expr&gt; )</entry>
            <entry>Returns the number of characters in a string or expression result.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
              <programlisting>
  select
    rdb$relation_name,
    char_length(rdb$relation_name),
    char_length(trim(rdb$relation_name))
  from rdb$relations;
              </programlisting>
            </entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>COS</emphasis></entry>
            <entry>COS( &lt;number&gt; )</entry>
            <entry>Returns the cosine of a number.  The angle is specified in radians
            and returns a value in the range -1 to 1.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  select cos(x) from y;
            </programlisting></entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>COSH</emphasis></entry>
            <entry>COSH( &lt;number&gt; )</entry>
            <entry>Returns the hyperbolic cosine of a number.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  select cosh(x) from y;
            </programlisting></entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>COT</emphasis></entry>
            <entry>COT( &lt;number&gt; )</entry>
            <entry>Returns 1 / tan(argument).</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  select cot(x) from y;
            </programlisting></entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>DATEADD</emphasis></entry>
            <entry>See below</entry>
            <entry>Returns a date/time/timestamp value increased (or decreased, when negative) by
            the specified amount of time.</entry>
          </row>
          <row rowsep="0">
            <entry spanname="span-example" colsep="0">Format:</entry>
          </row>
          <row rowsep="0">
            <entry spanname="span-example" colsep="0">
              <programlisting>
DATEADD( &lt;number&gt; &lt;timestamp_part&gt; TO &lt;date_time&gt; )
DATEADD( &lt;timestamp_part&gt;, &lt;number&gt;, &lt;date_time&gt; )
timestamp_part ::= { YEAR | MONTH | DAY | HOUR | 
                     MINUTE | SECOND | MILLISECOND }
              </programlisting>
            </entry>
          </row>
          <row rowsep="0">
            <entry spanname="span-example" colsep="0">
              <literallayout>
1. YEAR, MONTH and DAY cannot be used with time values.
2. HOUR, MINUTE, SECOND and MILLISECOND cannot be used with date
   values.
3. All timestamp_part values can be used with timestamp values.
              </literallayout>
            </entry>
          </row>
          <row rowsep="0">
            <entry spanname="span-example" colsep="0">Example</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
              <programlisting>
select dateadd(day, -1, current_date) as yesterday
  from rdb$database;
  
  /* or (expanded syntax) */
select dateadd(-1 day to current_date) as yesterday
  from rdb$database;
            </programlisting>
            </entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>DATEDIFF</emphasis></entry>
            <entry>See below</entry>
            <entry>Returns an exact numeric value representing the interval of time from
            the first date/time/timestamp value to the second one.</entry>
          </row>
          <row rowsep="0">
            <entry spanname="span-example" colsep="0">Format:</entry>
          </row>
          <row rowsep="0">
            <entry spanname="span-example" colsep="0">
              <programlisting>
DATEDIFF( &lt;timestamp_part&gt; FROM &lt;date_time&gt; TO &lt;date_time&gt; )
DATEDIFF( &lt;timestamp_part&gt;, &lt;date_time&gt;, &lt;date_time&gt; )
timestamp_part ::= { YEAR | MONTH | DAY |
                     HOUR | MINUTE | SECOND | MILLISECOND }
              </programlisting>
            </entry>
          </row>
          <row rowsep="0">
            <entry spanname="span-example" colsep="0">
              <literallayout>
1.  Returns a positive value if the second value is greater than
    the first one, negative when the first one is greater, or zero
    when they are equal.
2.  Comparison of date with time values is invalid.
3.  YEAR, MONTH, and DAY cannot be used with time values.
4.  HOUR, MINUTE, SECOND and MILLISECOND cannot be used with date values.
5.  All timestamp_part values can be used with timestamp values.
              </literallayout>
            </entry>
          </row>
          <row rowsep="0">
            <entry spanname="span-example" colsep="0">Example</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
              <programlisting>
select datediff(
  DAY, (cast('TOMORROW' as date) -10), current_date) 
    as datediffresult
from rdb$database;
            </programlisting>
            </entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>DECODE</emphasis></entry>
            <entry>See below</entry>
            <entry>DECODE is a shortcut for a CASE ... WHEN ... ELSE expression.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <para>Format:</para>
            <programlisting>
DECODE( &lt;expression&gt;, &lt;search&gt;, &lt;result&gt;
  [ , &lt;search&gt;, &lt;result&gt; ... ] [, &lt;default&gt; ]
            </programlisting>
            <para>Example</para>
            <programlisting>
  select decode(state, 0, 'deleted', 1, 'active', 'unknown') from things;
            </programlisting>
            </entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>EXP</emphasis></entry>
            <entry>EXP( &lt;number&gt; )</entry>
            <entry>Returns the exponential e to the argument.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  select exp(x) from y;
            </programlisting></entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>FLOOR</emphasis></entry>
            <entry>FLOOR( &lt;number&gt; )</entry>
            <entry>Returns a value representing the largest integer that is less than or equal to
            the input argument.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
    1) select floor(val) from x;
    2) select floor(2.1), floor(-2.1)
          from rdb$database;  -- returns 2, -3
            </programlisting></entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>GEN_UUID</emphasis></entry>
            <entry>GEN_UUID() -- no arguments</entry>
            <entry>Returns a universal unique number.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
 insert into records (id) value (gen_uuid());
            </programlisting></entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>HASH</emphasis></entry>
            <entry>HASH( &lt;string&gt; )</entry>
            <entry>Returns a HASH of a string.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  select hash(x) from y;
            </programlisting></entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>LEFT</emphasis></entry>
            <entry>LEFT( &lt;string&gt;, &lt;number&gt; )</entry>
            <entry>Returns the substring of a specified length that appears at the start of a left-to-right string.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  select left(name, char_length(name) - 10)
        from people
        where name like '% FERNANDES';
            </programlisting>
            <literallayout>
1. The first position in a string is 1, not 0.
2. If the &lt;number&gt; argument evaluates to a non-integer, banker's rounding is applied.
            </literallayout>
            </entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>LN</emphasis></entry>
            <entry>LN( &lt;number&gt; )</entry>
            <entry>Returns the natural logarithm of a number.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  select ln(x) from y;
            </programlisting></entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>LOG</emphasis></entry>
            <entry>LOG( &lt;number&gt;, &lt;number&gt; )</entry>
            <entry>LOG(x, y) returns the logarithm base x of y.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  select log(x, 10) from y;
            </programlisting></entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>LOG10</emphasis></entry>
            <entry>LOG10( &lt;number&gt; )</entry>
            <entry>Returns the logarithm base ten of a number.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  select log10(x) from y;
            </programlisting></entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>LOWER</emphasis></entry>
            <entry>LOWER( &lt;string&gt; )</entry>
            <entry><emphasis role="bold">(v.2.0.x)</emphasis> Returns the input argument converted to
            all lower-case characters.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
              <programlisting>
isql -q -ch dos850

SQL&gt; create database 'test.fdb';
SQL&gt; create table t (c char(1) character set dos850);
SQL&gt; insert into t values ('A');
SQL&gt; insert into t values ('E');
SQL&gt; insert into t values ('&Aacute;');<!-- ('Á') -->;
SQL&gt; insert into t values ('&Eacute;');<!-- ('É'); -->
SQL&gt; select c, lower(c) from t;
C      LOWER
====== ======
A      a
E      e
&Aacute;      &aacute;
&Eacute;      &eacute;
    </programlisting>
            </entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>LPAD</emphasis></entry>
            <entry>LPAD( &lt;string&gt;, &lt;number&gt; [, &lt;string&gt; ] )</entry>
            <entry>LPAD(string1, length, string2) prepends string2 to the beginning of string1 until the
            length of the result string becomes equal to length.</entry>
          </row>
          <row rowsep="0">
            <entry spanname="span-example" colsep="0">
            <literallayout>
1.  If the second string is omitted the default value is one space.
2.  If the result string would exceed the length, the second string is truncated.
            </literallayout>
            </entry>
          </row>
          <row rowsep="0">
            <entry spanname="span-example" rowsep="0">Example</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  select lpad(x, 10) from y;
            </programlisting>
            </entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>MAXVALUE</emphasis></entry>
            <entry>MAXVALUE( &lt;value&gt; [, &lt;value&gt; ...] )</entry>
            <entry>Returns the maximum value of a list of values.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  select maxvalue(v1, v2, 10) from x;
            </programlisting></entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>MINVALUE</emphasis></entry>
            <entry>MINVALUE( &lt;value&gt; [, &lt;value&gt; ... )</entry>
            <entry>Returns the minimun value of a list of values.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  select minvalue(v1, v2, 10) from x;
            </programlisting></entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>MOD</emphasis></entry>
            <entry>MOD( &lt;number&gt;, &lt;number&gt; )</entry>
            <entry>Modulo: MOD(X, Y) returns the remainder part of the division of X by Y.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  select mod(x, 10) from y;
            </programlisting></entry>
          </row>
          
<!-- table entry -->
          <row>
            <entry><emphasis>OCTET_LENGTH</emphasis></entry>
            <entry>OCTET_LENGTH( &lt;string&gt; | &lt;string_expr&gt; )</entry>
            <entry>Returns the length of a string or expression result in bytes.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
              <programlisting>
  select
    rdb$relation_name,
    octet_length(rdb$relation_name),
    octet_length(trim(rdb$relation_name))
  from rdb$relations;
              </programlisting>
            </entry>
          </row>


<!-- table entry -->
          <row>
            <entry><emphasis>OVERLAY</emphasis></entry>
            <entry>See below</entry>
            <entry>Returns string1 replacing the substring FROM start FOR length by string2.</entry>
          </row>
          <row rowsep="0">
            <entry spanname="span-example" colsep="0">Format:</entry>
          </row>
          <row rowsep="0">
            <entry spanname="span-example" colsep="0">
              <programlisting>
OVERLAY( &lt;string1&gt; PLACING &lt;string2&gt; FROM &lt;start&gt; [ FOR &lt;length&gt; ] )
              </programlisting>
            </entry>
          </row>
          <row rowsep="0">
            <entry spanname="span-example" colsep="0">
              <literallayout>
The OVERLAY function is equivalent to:
              </literallayout>
            </entry>
          </row>
          <row rowsep="0">
            <entry spanname="span-example" colsep="0">
              <programlisting>
  SUBSTRING(&lt;string1&gt;, 1 FOR &lt;start&gt; - 1) || &lt;string2&gt; ||
  SUBSTRING(&lt;string1&gt;, &lt;start&gt; + &lt;length&gt;)
              </programlisting>
            <literallayout>
1. The first position in a string is 1, not 0.
2. If the &lt;start&gt; and/or &lt;length &gt; argument evaluates to a non-integer, banker's 
     rounding is applied.
3. Fails with text BLOBs in a multi-byte character set if greater than 1024 bytes.
            </literallayout>

            </entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
              <literallayout>
If &lt;length&gt; is not specified, CHAR_LENGTH( &lt;string2&gt; ) is implied.
              </literallayout>
            </entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>PI</emphasis></entry>
            <entry>PI() -- no arguments</entry>
            <entry>Returns the PI constant (3.1459...).</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  val = PI();
            </programlisting></entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>POSITION</emphasis></entry>
            <entry>See below</entry>
            <entry>Returns the start position of the first string inside the second string, relative to
            the beginning of the outer string.  In the second form, an offset position may be 
            supplied so that the function will ignore any matches occuring before the offset position and
            return the first match following that.</entry>
          </row>

          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  POSITION(  &lt;string&gt; IN &lt;string&gt;  )
  POSITION( &lt;string&gt;, &lt;string&gt; [, &lt;offset-position&gt;] )
            </programlisting>
            </entry>
          </row>

          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  select rdb$relation_name
    from rdb$relations
    where position('RDB$' IN rdb$relation_name) = 1;
/* */
  position ('be', 'To be or not to be', 10)
            </programlisting>
            <para>returns 17.  The first occurrence of 'be' occurs within the offset and is ignored.</para>
            
            <programlisting>

  position ('be', 'To buy or not to buy', 10)
            </programlisting>
            <para>returns 0 because the searched substring was not found.</para>
            </entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>POWER</emphasis></entry>
            <entry>POWER( &lt;number&gt;, &lt;number&gt; )</entry>
            <entry>POWER(X, Y) returns X to the power of Y.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  select power(x, 10) from y;
            </programlisting></entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>RAND</emphasis></entry>
            <entry>RAND() -- no argument</entry>
            <entry>Returns a random number between 0 and 1.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  select * from x order by rand();
            </programlisting></entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>REPLACE</emphasis></entry>
            <entry>REPLACE( &lt;stringtosearch&gt;, &lt;findstring&gt;, &lt;replstring&gt; )</entry>
            <entry>Replaces all occurrences of &lt;findstring&gt; in &lt;stringtosearch&gt;
            with &lt;replstring&gt;.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  select replace(x, ' ', ',') from y;
            </programlisting></entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>REVERSE</emphasis></entry>
            <entry>REVERSE( &lt;value&gt; )</entry>
            <entry>Returns a string in reverse order. Useful function for creating an 
            expression index that indexes strings from right to left.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  create index people_email on people
    computed by (reverse(email));
  select * from people
    where reverse(email) starting with reverse('.br');
            </programlisting></entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>RIGHT</emphasis></entry>
            <entry>RIGHT( &lt;string&gt;, &lt;number&gt; )</entry>
            <entry>Returns the substring, of the specified length, from the right-hand end of a string.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  select right(rdb$relation_name, char_length(rdb$relation_name) - 4)
    from rdb$relations
    where rdb$relation_name like 'RDB$%';
            </programlisting></entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>ROUND</emphasis></entry>
            <entry>ROUND( &lt;number&gt;, [&lt;number&gt;] )</entry>
            <entry>Returns a number rounded to the specified scale.</entry>
          </row>
          <row rowsep="0">
            <entry spanname="span-example" colsep="0">Example</entry>
          </row>
          <row rowsep="0">
            <entry spanname="span-example" colsep="0">
              <programlisting>
  select round(salary * 1.1, 0) from people;
              </programlisting>
            </entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
              <literallayout>
If the scale (second parameter) is negative or is omitted, the integer part of the 
value is rounded.  E.g., ROUND(123.456, -1) returns 120.000.
              </literallayout>
            </entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>RPAD</emphasis></entry>
            <entry>RPAD( &lt;string1&gt;, &lt;length&gt; [, &lt;string2&gt; ] )</entry>
            <entry>Appends &lt;string2&gt; to the end of &lt;string1&gt; until the length of the result string
            becomes equal to &lt;length&gt;.</entry>
          </row>
          <row rowsep="0">
            <entry spanname="span-example" colsep="0">Example</entry>
          </row>
          <row rowsep="0">
            <entry spanname="span-example" colsep="0">
              <programlisting>
  select rpad(x, 10) from y;
            </programlisting>
            </entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <literallayout>
1.  If the second string is omitted the default value is one space.
2.  If the result string would exceed the length, the final application of 
    &lt;string2&gt; will be truncated.
            </literallayout>
            </entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>SIGN</emphasis></entry>
            <entry>SIGN( &lt;number&gt; )</entry>
            <entry>  Returns 1, 0, or -1 depending on whether the input value is positive, zero or
            negative, respectively.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  select sign(x) from y;
            </programlisting></entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>SIN</emphasis></entry>
            <entry>SIN( &lt;number&gt; )</entry>
            <entry>Returns the sine of an input number that is expressed in radians.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  select sin(x) from y;
            </programlisting></entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>SINH</emphasis></entry>
            <entry>SINH( &lt;number&gt; )</entry>
            <entry>Returns the hyperbolic sine of a number.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  select sinh(x) from y;
            </programlisting></entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>SQRT</emphasis></entry>
            <entry>SQRT( &lt;number&gt; )</entry>
            <entry>Returns the square root of a number.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  select sqrt(x) from y;
            </programlisting></entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>TAN</emphasis></entry>
            <entry>TAN( &lt;number&gt; )</entry>
            <entry>Returns the tangent of an input number that is expressed in radians.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  select tan(x) from y;
            </programlisting></entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>TANH</emphasis></entry>
            <entry>TANH( &lt;number&gt; )</entry>
            <entry>Returns the hyperbolic tangent of a number.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  select tanh(x) from y;
            </programlisting></entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>TRIM</emphasis></entry>
            <entry>See below</entry>
            <entry><emphasis role="bold">(V.2.0.x)</emphasis> Trims characters (default: blanks) from the
            left and/or right of a string.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
              <programlisting>
TRIM &lt;left paren&gt; [ [ &lt;trim specification&gt; ] [ &lt;trim character&gt; ]
  FROM ] &lt;value expression&gt; &lt;right paren&gt;

   &lt;trim specification&gt; ::=  LEADING  | TRAILING  | BOTH

   &lt;trim character&gt; ::= &lt;value expression>
              </programlisting>

              <para><emphasis role="bold">Rules</emphasis></para>
              <orderedlist>
                <listitem>
                  <para>If &lt;trim specification&gt; is not specified, BOTH is assumed.</para>
                </listitem>
                <listitem>
                  <para>If &lt;trim character&gt; is not specified, ' ' is assumed.</para>
                </listitem>
                <listitem>
                  <para>If &lt;trim specification&gt; and/or &lt;trim character&gt; is specified,
                  FROM should be specified.</para>
                </listitem>
                <listitem>
                  <para>If &lt;trim specification&gt; and &lt;trim character&gt; is not specified,
                  FROM should not be specified.</para>
                </listitem>
                <listitem>
                  <para>If a text BLOB substring is specified as &lt;value expression&gt;, the 
                  value returned must not exceed 32,767 bytes.</para>
                </listitem>
              </orderedlist>

              <para>Example A)</para>
              <programlisting>
  select
    rdb$relation_name,
    trim(leading 'RDB$' from rdb$relation_name)
  from rdb$relations
    where rdb$relation_name starting with 'RDB$';
              </programlisting>
              <para>Example B)</para>
              <programlisting>
  select
    trim(rdb$relation_name) || ' is a system table'
  from rdb$relations
    where rdb$system_flag = 1;
              </programlisting>
            </entry>
          </row>

<!-- table entry -->
          <row>
            <entry><emphasis>TRUNC</emphasis></entry>
            <entry>TRUNC( &lt;number&gt; [, &lt;number&gt; ] )</entry>
            <entry>Returns the integral part (up to the specified scale) of a number.</entry>
          </row>
          <row>
            <entry spanname="span-example" colsep="0">
            <programlisting>
  1) select trunc(x) from y;
  2) select trunc(-2.8), trunc(2.8)
       from rdb$database;  -- returns -2, 2
  3) select trunc(987.65, 1), trunc(987.65, -1)
       from rdb$database;  -- returns 987.60, 980.00
            </programlisting></entry>
          </row>

        </tbody>
      </tgroup>
    </informaltable>

</appendix>
