<?xml version="1.0" encoding="UTF-8"?>
<!--
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
  <!ENTITY generalnotes SYSTEM "GeneralNotes.docbook">
  <!ENTITY newfeatures SYSTEM "NewFeatures.docbook">
  <!ENTITY apiandods SYSTEM "APIandODS.docbook">
  <!ENTITY ddl SYSTEM "DDL.docbook">
  <!ENTITY dml SYSTEM "DML.docbook">
  <!ENTITY reservedwords SYSTEM "ReservedWords.docbook">
  <!ENTITY psql SYSTEM "PSQL.docbook">
  <!ENTITY indexing SYSTEM "Indexing.docbook">
  <!ENTITY optimizations SYSTEM "Optimizations.docbook">
  <!ENTITY textfeatures SYSTEM "TextFeatures.docbook">
  <!ENTITY security SYSTEM "Security.docbook">
  <!ENTITY utilities SYSTEM "Utilities.docbook">
  <!ENTITY udf SYSTEM "UDF.docbook">
  <!ENTITY configparams SYSTEM "ConfigParams.docbook">
  <!ENTITY installation SYSTEM "Installation.docbook">
  <!ENTITY bugfixes SYSTEM "BugFixes.docbook">
]>
-->
<book id="rlsnotes19">
  <bookinfo>
    <title>Firebird Vulcan Release Notes v. 1.1</title>

    <author>
      <firstname>Ann</firstname>
      <surname>Harrison</surname>
    </author>
    <edition>21 November 2005 - Doc. version 0191_10 - for Firebird Vulcan Beta 1 Release</edition>
  </bookinfo>

  <chapter id="intro">
  <chapterinfo>
    <title>Firebird Vulcan Release Notes</title>
  </chapterinfo>

  <section id="vulcan-overview"><!-- level 1 -->
  <title>Overview of Firebird Vulcan</title>

  <note>
    <title>Getting Started</title>
    <para>If you prefer to jump in to Firebird Vulcan and figure out what it's about later, see the
    <xref linkend="vulcan-getstarted"/> section.</para>
  </note>
  <para>Firebird Vulcan started as a sponsored branch of Firebird between V1.5 and V2.0.  It includes some but
  not all Firebird 2.0 features and shares a common On Disk Structure (ODS) with Firebird 2.0.  The specific needs
  of one customer set Firebird Vulcan's original goals but, in the process of development, several other
  opportunities appeared.</para>

    <section id="vulcan-goals"><!-- level 2 -->
    <title>Project Goals</title>
    <para>Firebird Vulcan's original sponsor had four primary goals.-</para>
    <variablelist>
      <varlistentry>
        <term>SMP performance</term>
        <listitem>
          <para>On a four-processor SMP box, Firebird Vulcan benchmarks up to about 3.5 times the speed of a
          single-processor system on cache intensive benchmarks.   See the <xref linkend="vulcan-smp"/> section.</para>
        </listitem>
      </varlistentry>

       <varlistentry>
        <term>Portability</term>
        <listitem>
          <para>Firebird Vulcan was developed simultaneously on four platforms:</para>
          <itemizedlist>
            <listitem>
              <para>32-bit Windows using the Microsoft compiler from Visual Studio 7</para>
            </listitem>
            <listitem>
              <para>32 bit Linux for AMD64/Opteron using various versions of gcc</para>
            </listitem>
            <listitem>
              <para>64 bit Linux for AMD64/Opteron using various versions of gcc</para>
            </listitem>
            <listitem>
              <para>64 bit Solaris using the Sun Forte C++ compiler</para>
            </listitem>
          </itemizedlist>

          <para>Ports exist to 64-bit MVS UNIX, Itanium, and AIX.   See the
          <xref linkend="vulcan-porta"/> section.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Single processor performance</term>
        <listitem>
          <para>tests on Win32 demonstrate some performance improvement over Firebird 1.5.  See the
          <xref linkend="vulcan-perf"/> section.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Upward compatibility</term>
        <listitem>
          <para>programs written for Firebird 1.5 work unchanged on Firebird Vulcan, and Firebird Vulcan includes
          many Firebird 2.0 features.  See <xref linkend="vulcan-compat"/>.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    </section><!-- level 2 -->

    <section id="vulcan-other-features"><!-- level 2 -->
    <title>Other Features of Firebird Vulcan</title>
    <variablelist>
      <varlistentry>
        <term>Process Architecture</term>
        <listitem>
          <para>Firebird has three different architectures:  SuperServer, classic, and embedded.  The different
          architectures are implemented as conditional compilations of the same code base.  SuperServer is
          identical on all platforms.  Classic and embedded have different characteristics on Windows than on
          other platforms.</para>
          <para>Firebird Vulcan refactors the code base so the three architectures are supported by separating the
          common elements--engine, server, remote interface, external API--and recombining them in different
          configurations, rather than conditional compilation.</para>
          <para>The configurations behave the same way on all platforms, and can be mixed on a single
          platform.</para>
          <para>For more information see the <xref linkend="vulcan-proc-arch"/> chapter.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Configuration Files</term>
        <listitem>
          <para>Firebird Vulcan controls the way databases are accessed through cascading configuration files.
          The configuration files are upward compatible from the Firebird configuration file, but have significant
          new capabilities.  For more information see the <xref linkend="vulcan-proc-arch-config"/> section.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>User Authentication</term>
        <listitem>
          <para>Firebird Vulcan configuration files can specify a per-database source for authentication
          information.  Firebird Vulcan also adds SQL statements to create, update, and drop users.  For more
          information see the <xref linkend="vulcan-proc-arch-secur-auth"/> section.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>SQL Integration</term>
        <listitem>
          <para>Firebird Vulcan moves DSQL from outside the engine to inside, making it more efficient, and
          eliminating duplicate metadata representation.  For more information see the <xref linkend="vulcan-sql"/>
          section.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Lock Manager</term>
        <listitem>
          <para>Since Firebird Vulcan runs only on platforms that support threading, options in the lock manager
          for other forms of interprocess communication have been dropped. See the
          <xref linkend="vulcan-lockman"/> section.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Call tracing</term>
        <listitem>
          <para>The Firebird Vulcan dispatch module can print a session log.  The contents of the log are
          controlled with configuration file parameters.  The options are tracing calls, tracing results, or
          tracing SQL statements.  See the <xref linkend="vulcan-proc-arch-config"/> section for more information.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Firebird Vulcan Internals</term>
        <listitem>
          <para>Most of the changes to Firebird Vulcan are internal.  Their effect on performance and reliability
          can be measured by client applications, but they don't change the API or other user interfaces.
          See the <xref linkend="vulcan-internals"/> section for more information.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Garbage Collect Thread</term>
        <listitem>
          <para>Firebird 1.5 uses a separate thread for garbage collection when compiled as SuperServer.
          Firebird 2.0 uses cooperative garbage collection or a garbage collect thread, or both.  The choice is
          controlled by a configuration option.</para>
          <para>Firebird Vulcan uses only cooperative garbage collection.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Configurable Security Managers</term>
        <listitem>
          <para>Different organizations require different levels of user authorization.  Firebird Vulcan provides
          a path to the resolution of this requirement and one implementation of it.  For more information see
          the <xref linkend="vulcan-proc-arch-secur"/> section.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    </section><!-- level 2 -->
  </section><!-- level 1 -->
</chapter>

<!-- CHAPTER BREAK  CHAPTER BREAK   CHAPTER BREAK   CHAPTER BREAK   CHAPTER BREAK  -->

  <chapter id="vulcan-getstarted" xreflabel="Getting Started">
  <chapterinfo>
    <title>Getting Started</title>
  </chapterinfo>

  <para>Download the Firebird Vulcan installation kit and run the installation script.  For your own convenience,
  you should add the Firebird Vulcan bin directory to your path environmental variable.</para>

  <section id="vulcan-install"><!-- level 1 -->
  <title>Installation Notes</title>
  <para>As an initial test, start isql and create a database.</para>
  <para>[More to come as the installation solidifies]</para>

    <section id="vulcan-install-kit"><!-- level  2-->
    <title>Installation kit Contents</title>
    <para>Installing Firebird Vulcan creates a directory tree that includes the Firebird Vulcan binaries and
    shared libraries, plus supporting material.  At the top, you will find eight files plus some directories.</para>

      <section id="vulcan-opfiles"><!-- level  2-->
      <title>Operational files</title>
      <para>Several files are necessary for Firebird Vulcan to run correctly.  They are:</para>
      <variablelist>
        <varlistentry>
          <term>security.fdb</term>
          <listitem>
            <para>is the shared authentication database for the installation.  You can choose on a database by
            database basis whether to use it, store authentication information in each database, or
            ignore authentication entirely.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>firebird.log</term>
          <listitem>
            <para>contains error and informational messages written by the server and engine.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>firebird.msg</term>
          <listitem>
            <para>contains the text format of error conditions returned by the server and engine.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>vulcan.lck</term>
          <listitem>
            <para>is the lock file that mediates access between different database users.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      </section><!-- level  2-->

      <section id="vulcan-cfgfiles" xreflabel="Configuration Files"><!-- level  2-->
      <title>Configuration files</title>
      <para>The section on <xref linkend="vulcan-proc-arch-config"/> describes the use of configuration files.</para>
      <para>The top level of the installation tree contains the master configuration files--those used when no
      other configuration information supersedes them.-</para>
      <variablelist>
        <varlistentry>
          <term>client.conf</term>
          <listitem>
            <para>the default configuration used by the remote interface when access is made from this system to
            another or through local loopback.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>server.conf</term>
          <listitem>
            <para>the default configuration used by the server when access is made from another system to this one
            or through local loopback.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>master.conf</term>
          <listitem>
            <para>the base definitions referenced by all configurations.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      </section><!-- level  2-->

      <section id="vulcan-dirs"><!-- level  2-->
      <title>Directories</title>
      <variablelist>
        <varlistentry>
          <term>bin and bin64</term>
          <listitem>
            <para>Binaries and shared libraries.  The <function>bin</function> directory contains binaries for
            32-bit systems and 32-bit compatibility mode on 64-bit systems.  The <function>bin64</function>
            directory contains binaries for 64-bit systems.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>databases</term>
          <listitem>
            <para>Contains the message database</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>doc</term>
          <listitem>
            <para>Miscellaneous readme files, etc.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>help</term>
          <listitem>
            <para>The qli help database</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>intl and intl64</term>
          <listitem>
            <para>directories for the internationalization libraries</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>lib</term>
          <listitem>
            <para>Library files</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>UDF</term>
          <listitem>
            <para>Directory for user-defined functions</para>
          </listitem>
        </varlistentry>
      </variablelist>

      </section><!-- level  3 -->
    </section><!-- level  2 -->
  </section><!-- level  1 -->
</chapter>

<!-- CHAPTER BREAK  CHAPTER BREAK   CHAPTER BREAK   CHAPTER BREAK   CHAPTER BREAK  -->

  <chapter id="vulcan-smp" xreflabel="SMP">
  <chapterinfo>
    <title>Symmetric Multiple Processors (SMP)</title>
  </chapterinfo>

   <section id="vulcan-smp-oview"><!-- level  1 -->
   <title>Overview of SMP</title>
   <para>In Firebird Vulcan, threads run in parallel and are scheduled by the operating system thread scheduler.
   This algorithm works well on symmetric multi-processors, but requires a mechanism for protecting critical data
   structures from being modified by one thread while being read or modified by another thread.</para>

     <section id="vulcan-smp-thd"><!-- level  2 -->
     <title>Thread Synchronization</title>
     <para>Firebird Vulcan threads run concurrently and are synchronized by controlling access to specific data
     structures and objects.  Wherever possible, data structures and objects are changed from one consistent
     state to another by a single, non-interruptible instruction.  When an object must be held in a consistent
     state for reading or writing, the accessing thread must acquire a lock.</para>

     <para>Objects typically provide their own locks.  Most objects use instances of a SyncObject class contained
     in their class definitions.  Each SyncObject controls a specific part of the object.  SyncObjects are
     implemented with system-specific non-interruptible instructions.</para>

       <section id="vulcan-smp-synco"><!-- level  3 -->
       <title>SyncObject</title>
       <para>A  SyncObject provides shared and exclusive locks with exclusive lock requests managed in a &quot;fair&quot;
       ordering.  Shared locks allow multiple threads to read the values of an object instance.   Exclusive locks
       allow one thread to change values in an object instance.</para>

       <para>&quot;Fair&quot; ordering means that requests for a lock on an object are serviced in order.  If the
       object is locked in shared mode with no lock requests pending and another request is received for that lock
       in shared mode, the second lock is granted.  As soon as a thread requests an exclusive lock on the object,
       additional requests for shared locks queue behind the request for the exclusive lock.</para>
       </section><!-- level  3 -->
     </section><!-- level  2 -->
    </section><!-- level  1-->
</chapter>

<!-- CHAPTER BREAK  CHAPTER BREAK   CHAPTER BREAK   CHAPTER BREAK   CHAPTER BREAK  -->

  <chapter id="vulcan-compat" xreflabel="Compatbility and Portability">
  <chapterinfo>
    <title>Compatibility and Portability</title>
  </chapterinfo>
  <para>Firebird Vulcan implements all V1.5 features.   Applications that run with Firebird 1.5 should work
  with Firebird Vulcan unchanged.  In addition, because it was created from a pre-release version of the Firebird
  2 sources, Firebird Vulcan includes a number of Firebird 2.0 features.</para>

   <section id="vulcan-compat-issues"><!-- level  1 -->
   <title>Compatibility Issues</title>

   <section id="vulcan-compat-ods"><!-- level  2 -->
   <title>Earlier ODS Versions</title>

   <para>In the Firebird Vulcan architecture, each engine supports exactly one major On Disk Structure (ODS).
   Firebird 2.0 and Firebird Vulcan support ODS 11.  Firebird 2.0 also supports the ODS versions supported by
   Firebird 1.5: 8, 9, and 10.</para>

   <para>When moving from Firebird 1.5 to Firebird Vulcan, one must back up databases using Firebird or
   Firebird 2.0 and restore them with Firebird Vulcan.</para>

   <para>An easy way to do this is to install Firebird 1.5 or Firebird 2.0 SuperServer and activate the server.
   Back up the database using a loopback connection (e.g.  localhost:my_db) and restore it using a local
   connection and the Firebird Vulcan version of gbak.</para>
   </section>

   <section id="vulcan-compat-features"><!-- level  2 -->
   <title>Firebird 2.0 Features that are known to work</title>

   <variablelist>
     <varlistentry>
       <term>Indexes</term>
       <listitem>
         <para>Firebird Vulcan includes the Firebird Version 2.0 index structures, so it allows long keys up to
         1/3 of the size of a page, improved garbage collection performance on long duplicate chains, correct
         null handling, better performance on large page sizes, expression indexes, and others.</para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term>Derived Tables</term>
       <listitem>
         <para>Derived tables is the formal name for the use of subqueries as data sources in the FROM clause of a
         select statement.</para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term>ROWS &lt;n&gt; [TO &lt;m&gt;]</term>
       <listitem>
         <para>An alternative to the FIRST &amp; SKIP syntax for retrieving part of a record
         stream. <function>ROWS</function> is the syntax blessed by the SQL Standard.</para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term>UNION DISTINCT</term>
       <listitem>
         <para>A standard-blessed synonym for a UNION.  It documents the fact that the intention is to remove
         duplicate rows.</para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term>Improved Type Coercion in UNIONs</term>
       <listitem>
         <para>Previously the types of fields selected in unions were required to match exactly.
         Now  strings and exact numerics are automatically coerced to the largest common type.</para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term>Others</term>
       <listitem>
         <para>Unions allowed in ANY/ALL/IN subqueries</para>
       </listitem>
         <listitem>
         <para>Built-in Function SUBSTRING() Enhanced</para>
       </listitem>
       <listitem>
         <para>NULL Equivalence Rule Relaxed</para>
       </listitem>
       <listitem>
         <para>New Context Variable ROW_COUNT</para>
       </listitem>
       <listitem>
         <para>Subqueries and INSERT Statements  Accept UNION Sets</para>
       </listitem>
       <listitem>
         <para>Order By or Group By &lt;alias-name&gt;</para>
       </listitem>
       <listitem>
         <para>GROUP BY Arbitrary Expressions</para>
       </listitem>
       <listitem>
         <para>Order SELECT * Sets by Degree Number</para>
       </listitem>
       <listitem>
         <para>NEXT VALUE FOR Expression Syntax</para>
       </listitem>
       <listitem>
         <para>DSQL parsing of table aliases is stricter</para>
       </listitem>
       <listitem>
         <para>LEAVE &lt;label&gt; Syntax</para>
       </listitem>
       <listitem>
         <para>Buffer Cache Improvements</para>
       </listitem>
       <listitem>
         <para>Optimizer Improvements</para>
       </listitem>
     </varlistentry>
   </variablelist>
   </section>

   <section id="vulcan-compat-features-x"><!-- level  2 -->
   <title>Firebird 2.0 Features that are known not to work</title>

   <variablelist>
     <varlistentry>
       <term>Execute Block</term>
       <listitem>
         <para>The execute block statement will require reimplementation using the internal SQL in
         Firebird Vulcan.</para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term></term>
       <listitem>
         <para></para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term></term>
       <listitem>
         <para></para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term>Rollback Retain</term>
       <listitem>
         <para>Not supported</para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term>IFF() Expressions</term>
       <listitem>
         <para>Handled in the parser but not elsewhere.</para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term>Others</term>
       <listitem>
         <para>(NULL=NULL) Can Return True for DISTINCT Test</para>
       </listitem>
       <listitem>
         <para>CROSS JOIN</para>
       </listitem>
       <listitem>
         <para>CURRENT_TIMESTAMP, 'NOW' Return Milliseconds</para>
       </listitem>
       <listitem>
         <para>Precision specification for CURRENT_TIME and CURRENT_TIMESTAMP</para>
       </listitem>
       <listitem>
         <para>Context Variables</para>
       </listitem>
       <listitem>
         <para>Handling User-specified Query Plans</para>
       </listitem>
       <listitem>
         <para>RETURNING Clause for Insert Statements</para>
       </listitem>
       <listitem>
         <para>Explicit Cursors</para>
       </listitem>
       <listitem>
         <para>Defaults for Stored Procedure Arguments</para>
       </listitem>
       <listitem>
         <para>OLD Context Variables Read-only</para>
       </listitem>
       <listitem>
         <para>PSQL Stack Trace</para>
       </listitem>
       <listitem>
         <para>LOWER</para>
       </listitem>
       <listitem>
         <para>TRIM</para>
       </listitem>
       <listitem>
         <para>String Size Functions</para>
       </listitem>
       <listitem>
         <para>New INTL Interface for Non-ASCII Character Sets</para>
       </listitem>
       <listitem>
         <para>GBAK -RECREATE</para>
       </listitem>
       <listitem>
         <para>ISQL  - none of the V2 features are implemented</para>
       </listitem>
       <listitem>
         <para>GSEC - no improvements</para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term>Features whose status is unknown</term>
       <listitem>
         <para>Call a UDF as a Void Function</para>
       </listitem>
       <listitem>
         <para>Improved PLAN Clause</para>
       </listitem>
       <listitem>
         <para>New Security Features</para>
       </listitem>
       <listitem>
         <para>Nbak/Nbackup</para>
       </listitem>
       <listitem>
         <para>UDF changes</para>
       </listitem>
     </varlistentry>
    </variablelist>
   </section><!-- level  2 -->
  </section><!-- level  1-->

  <section id="vulcan-porta" xreflabel="Portability"><!-- level  1 -->
   <title>Portability</title>
   <para>[ lacuna ]</para>
  </section><!-- level  1-->
</chapter>

<!-- CHAPTER BREAK  CHAPTER BREAK   CHAPTER BREAK   CHAPTER BREAK   CHAPTER BREAK  -->

  <chapter id="vulcan-proc-arch" xreflabel="Process Architecture">
  <chapterinfo>
    <title>Process Architecture</title>
  </chapterinfo>
  <para>Firebird Vulcan supports database access in several modes, including a multi-user shared server like
  SuperServer, a process based parallel architecture like Classic, and a single process local attachment like
  embedded.  The mode of access is determined at runtime by the configuration file settings.</para>

  <para>The Firebird Vulcan server is a process that accepts network connections and converts the requests conveyed
  in the network protocol to Firebird API calls.  All database access goes through a thin primary shared library
  known as the Y-Valve to an open-ended set of data providers.</para>

  <para>If the configuration file specifies that the database is not shared, network access to that database is
  equivalent to SuperServer. All connections share a single buffer pool.    If the configuration file specifies
  database sharing, local access is similar to Classic, with any number of processes, each with a private
  buffer pool, synchronized by an external lock manager.</para>

  <para>If remote access is enabled on a database that allows sharing, Firebird Vulcan runs in hybrid mode.
  Remote clients access the database through a multi-client, multi-threaded server with a shared buffer pool that
  shares the file with other local processes that maintain private buffer pools, all synchronized by the lock
  manager.</para>

  <para>With no server and database sharing disallowed, Firebird Vulcan runs in Embedded mode.</para>

  <section id="vulcan-proc-arch-yvalve" xreflabel="The Y-Valve"><!-- level 1 -->
  <title>Y-valve</title>

  <para>The primary library, firebird.dll or libfirebird.so, is called the &quot;Y-valve&quot; or &quot;dispatch
  module&quot;.  It implements all user visible API entrypoints but does not perform any data management services
  itself.   It loads and invokes other libraries called <firstterm>providers</firstterm> to do the actual
  work.</para>

  <para>All programs that access a Firebird Vulcan database do so through the Y-valve.  There is no separate
  client library, classic library, or embedded library.</para>

  <para>When the client asks for a database, the dispatch module finds engine, interface, gateway, or server that
  supports the requested database, whether local, remote, or even a different architecture.</para>

  <para>In the configuration system, the Y-valve is a provider called <firstterm>dispatch</firstterm>.</para>
  </section><!-- level 1 -->

  <section id="vulcan-proc-arch-provider" xreflabel="Providers"><!-- level 1 -->
  <title>Providers</title>

  <para>A provider is a C++ object that implements the canonical <firstterm>provider</firstterm> interface class.
  The base interface class is extensible.  A provider that does not support a particular function returns a proper
  OSRI error sequence.</para>

  <para>Providers include actual database engines, remote interfaces to communicate with servers, gateways to
  another version of Firebird or InterBase, and any other data manipulation code which supports OSRI semantics.</para>

  <para>Firebird 2.0 supports ODS formats 9, 10, and 11 in a single code base.  In the original InterBase, on-disk
  structure (ODS) changes were handled by including a provider that handled the old ODS and a provider that handled
  the new ODS.</para>

  <para>The Firebird Vulcan architecture is similar, though the mechanism for choosing a provider is different.
  As the database engine evolves, we can expect to have a set of database providers, each handling a different
  generation of database files.  A single application program could run against everything from InterBase version 4
  databases to the most recent experimental version of Firebird.</para>
  </section><!-- level 1 -->

  <section id="vulcan-proc-arch-server" xreflabel="Servers"><!-- level 1 -->
  <title>Servers</title>

  <para>A Firebird Vulcan database server is a program layered on the published database API.  The current server
  handles TCP-IP and XNET connections following the Firebird 1.5 remote protocol.  It connects to the Y-valve and
  then to providers for all data manipulation.</para>
  </section><!-- level 1 -->

  <section id="vulcan-proc-arch-config" xreflabel="Configuration Files"><!-- level 1 -->
  <title>Configuration Files</title>

  <para>The Firebird Vulcan configuration file system is a superset of the Firebird 1.5 configuration file.  The
  full syntax and semantics are documented in section on Configuration Files.</para>

  <para>Firebird Vulcan balances need for database and application specific configuration values and the need for
  system-wide management of configuration with <firstterm>cascading configuration files</firstterm>.  The
  Firebird Vulcan configuration files control the mapping of databases to providers and security managers by
  defining those objects and their relationships.</para>

    <section id="vulcan-proc-arch-config-files" xreflabel="Configuration File Definitions"><!-- level 2 -->
    <title>Configuration File Definitions</title>

    <para>Firebird Vulcan configuration files define <firstterm>parameters</firstterm>
    and <firstterm>objects</firstterm>.  Configuration parameters are fixed attributes like the lock table hash
    width, sort memory size, etc.  Configuration objects include databases, providers, servers, security managers,
    and other object types as yet unknown.</para>
    <itemizedlist>
      <listitem>
        <para>Configuration parameters that are declared globally within a configuration file become defaults.</para>
      </listitem>
      <listitem>
        <para>Configuration parameters that are declared within the definition of an object are local to
        the object.</para>
      </listitem>
      <listitem>
        <para>A global default parameter overrides an intrinsic, built-in default parameter of the same name.</para>
      </listitem>
      <listitem>
        <para>A parameter defined within a provider object overrides the global default value for that parameter.</para>
      </listitem>
      <listitem>
        <para>A parameter defined within a database object overrides the same parameter defined in the provider.</para>
      </listitem>
      <listitem>
        <para>Parameters are scoped to support a balance between general policy and special case exceptions.</para>
      </listitem>
    </itemizedlist>
    </section><!-- level 2 -->

    <section id="vulcan-proc-arch-dbo" xreflabel="Database Objects"><!-- level 2 -->
    <title>Database Objects</title>

    <para>Database objects are described by a file name that may include wild cards.  The database object description
    has one of two formats.  The normal format includes a provider.</para>
    <orderedlist>
      <listitem>
        <para>A general database object that includes a TCP/IP address.  This object describes all databases which
        have a name that contains a &quot;:&quot; character.  The filename is left unchanged and the designated
        provider is remote.</para>
        <para>Thus, a request to open a database with a file name of &quot;caine:/usr/harrison/databases/foo.fdb&quot;
        would be passed to the TCP/IP remote access provider.</para>
        <literallayout class="monospaced">
  &lt;database *:*&gt;
      filename    $0
      provider    remote
  &lt;/database&gt;
        </literallayout>
      </listitem>

      <listitem>
        <para>a specific database object.  This object describes all databases with the name &quot;msg.fdb&quot; and
        redefines the name to point to the message database in the Firebird Vulcan install directory.</para>
        <literallayout class="monospaced">
  &lt;database msg.fdb&gt;
  filename    $(root)/databases/msg.fdb
  provider    engine11
  &lt;/database&gt;
        </literallayout>
      </listitem>

      <listitem>
        <para>a generic database object.  This object describes all other databases and assigns them to the
        local provider.</para>
        <literallayout class="monospaced">
  &lt;database *&gt;
      filename    $0
      provider    engine11
  &lt;/database&gt;
        </literallayout>
      </listitem>

      <listitem>
        <para>A <emphasis>second style of database object</emphasis> simply changes the name of the database.  This
        is a useful feature, but its behavior is unlike anything else in the configuration files.</para>

        <para>A database object definition can replace the name of the database without giving it any other
        characteristics.  For example, some of the Firebird Vulcan and Firebird sources are modules that must be
        preprocessed by gpre.  Those files contain the name of a database to use in the preprocessing.  Many of
        them reference <function> yachts.lnk </function>.  The build configuration file replaces the
        name <quote>yachts.lnk</quote> with a full path to a database called
        <function> metadata.fdb. </function></para>

        <para>When a database object definition replaces the name given on input, the configuration file manager
        reapplies all configuration files in order, using the new name rather than the name originally supplied.</para>

        <literallayout class="monospaced">
  &lt;database yachts.lnk&gt;
       filename    caine:c:\harrison\Firebird Vulcan\databases\metadata.fdb
  &lt;/database&gt;
        </literallayout>
      </listitem>
    </orderedlist>

    </section><!-- level 2 -->

    <section id="vulcan-proc-arch-other" xreflabel="Other Types of Objects"><!-- level 2 -->
    <title>Other Types of Objects</title>

    <variablelist>
      <varlistentry>
        <term>1: Provider Objects</term>
        <listitem>
          <para>This object is the local engine.  Its attributes are the name and location of the lock file and
          the name and location of the shared libraries that can serve as that provider.   In this case, the
          library can either be a 32-bit binary or a 64-bit binary.</para>
          <para>The Y-valve will attempt to open a database with the first library lists, then the second, and
          so on.</para>

          <literallayout class="monospaced">
  &lt;provider engine11&gt;
    LockFileName    $(root)/Firebird Vulcan.lck
    library         $(root)/bin/engine11 $(root)/bin64/engine11
  &lt;/provider&gt;
          </literallayout>
          </listitem>

          <listitem>
          <para>The Y-valve is a degenerate provider, which accepts one parameter, <function> TraceFlags </function>,
          indicating that certain operations should be written to its output stream.</para>

          <literallayout class="monospaced">
  &lt;provider dispatch&gt;
    TraceFlags	6
  &lt;/provider&gt;
          </literallayout>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>2: Security Objects</term>
        <listitem>
          <para>a) A security manager.  At the moment there is only one security manager.</para>
          <literallayout class="monospaced">
  &lt;SecurityManager SecurityDb&gt;
    SecurityDatabase  $(root)/security.fdb
    AuthAccount       user
    SecurityPlugin    SecurityDb
  &lt;/SecurityManager&gt;
          </literallayout>
        </listitem>

        <listitem>
          <para>b) A security plugin.  At the moment there is only one security plugin.</para>
          <literallayout class="monospaced">
  &lt;SecurityPlugin SecurityDb&gt;
    library    $(root)/bin/securitydb $(root)/bin64/securitydb
  &lt;/SecurityPlugin&gt;
          </literallayout>
        </listitem>

      </varlistentry>
    </variablelist>
    </section><!-- level 2 -->

    <section id="vulcan-proc-arch-casc" xreflabel="Cascading Configuration Files"><!-- level 2 -->
    <title>Cascading Configuration Files</title>
    <para>The second major difference between Firebird Vulcan and Firebird configuration files is that Firebird
    Vulcan configuration files cascade.   The Y-valve opens an initial configuration file that can provide all
    parameter and object definitions, like firebird.conf, or it can provide some definitions and include one or
    more additional configuration files.  Those files can include other configuration files.</para>

    <para>Typically, the initial configuration file is the most specific and the included files are increasingly
    generic, ending with firebird.conf.</para>

    <para>Objects can be defined at multiple levels. An earlier object definition overrides a later object
    definition.  A system manager can choose to delegate control over various group databases to the groups
    themselves while retaining control over server configurations.  An individual (or application program) can
    specify a personal or application configuration file that cascades to the group configuration file that
    cascades to the system wide client configuration files.</para>

    </section><!-- level 2 -->
  </section><!-- level 1 -->
  <section id="vulcan-proc-arch-secur" xreflabel="Configurable Security Managers"><!-- level 1 -->
  <title>Configurable Security Managers</title>

  <para>Firebird Vulcan introduces the architecture for loadable security managers.  For the initial release,
  there is only one security manager, which emulates the Firebird security semantics.  The architectural support
  for loadable security manager will permit installations to specify and enforce other security.</para>

    <section id="vulcan-proc-arch-secur-classes" xreflabel="Security Manager Classes"><!-- level 2 -->
    <title>Security Manager Classes</title>

    <para>The security manager is implemented with a C++ base class, like the provider interface.  All security
    managers must support the interface, providing a framework for complex interactions between database engine
    and security manager while allowing future extensibility.</para>

    <para>Like other configuration objects, security managers can be daisy-chained.  A single installation can
    support a mixture of security managers.</para>
    </section><!-- level 2 -->

    <section id="vulcan-proc-arch-secur-auth" xreflabel="User Authentication"><!-- level 2 -->
    <title>User Authentication</title>

    <para>The configuration files specify where Firebird Vulcan should look for user authentication data.  That
    data can be in the installation-wide security.fdb, in another database, or in the target database itself.
    The configuration file can also specify that a database uses no authentication at all.</para>

    <para>Firebird Vulcan also implements a user authentication extension to the published API designed for
    open-ended interaction with various loadable security managers.  The user authentication facility also
    eliminates the public accessibility of account names and password hashes, significantly increasing database
    security.</para>

      <section id="vulcan-proc-arch-secur-auth=sql" xreflabel="SQL Support"><!-- level 3 -->
      <title>SQL Support</title>

      <para>Firebird Vulcan provides SQL language statements to support these operations:</para>
      <literallayout class="monospaced">
 create user &lt;username&gt; password '&lt;password&gt;'
 alter user &lt;username&gt; password '&lt;password&gt;'
 drop user &lt;username&gt;
 upgrade user &lt;username&gt; password '&lt;password&gt;'
      </literallayout>
      </section><!-- level 3 -->
    </section><!-- level 2 -->
  </section><!-- level 1 -->

  <section id="vulcan-sql" xreflabel="SQL Integration"><!-- level 1 -->
  <title>SQL Integration</title>
  <para>Firebird Vulcan moves SQL processing from the Y-valve into the database engine.  This has several
  advantages.</para>

    <section id="vulcan-sql-mcache" xreflabel="Shared Metadata Cache"><!-- level 2 -->
    <title>Shared Metadata Cache</title>

    <para>The SuperServer version of Firebird maintains a metadata cache within the engine and a metadata cache for
    each connection.  Building a new metadata cache is a significant part of the cost of establishing a new
    connection.</para>
    <para>In a Firebird Vulcan shared server, all connections share a single copy of metadata.</para>
    </section><!-- level 2 -->

    <section id="vulcan-sql-internal" xreflabel="Internal SQL Execution"><!-- level 2 -->
    <title>Internal SQL Execution</title>

    <para>In Firebird Vulcan internal metadata management uses internal statements like this:</para>
    <programlisting>
PStatement statement = connection->prepareStatement (
        &quot;SELECT&quot;
        &quot;    vrel.RDB$CONTEXT_NAME,&quot;
        &quot;    vrel.RDB$RELATION_NAME&quot;
        &quot;  FROM RDB$VIEW_RELATIONS vrel&quot;
        &quot;  WHERE vrel.RDB$VIEW_NAME = ?&quot;);

statement-&gt;setString(1, viewName);
RSet resultSet = statement-&gt;executeQuery();

while (resultSet-&gt;next())
        {
        const char *contextName = resultSet-&gt;getString(1);
        const char *relationName = resultSet-&gt;getString(2);
&amp;

	}
    </programlisting>

    <para>Moving away from GDML and gpre is hard, but necessary.</para>
    </section><!-- level 2 -->
  </section>

  <section id="vulcan-perf" xreflabel="Performance"><!-- level 1 -->
  <title>Performance</title>

  <para>To maintain performance while protecting shared resources, Firebird Vulcan reduces critical code paths.
  This clean-up compensates for the interlocked instructions used to protect shared data structures.</para>
  </section>

  <section id="vulcan-lockman" xreflabel="Lock Management"><!-- level 1 -->
  <title>Lock Management</title>

  <para>Firebird Vulcan has only one lock manager, used in all modes.  The server can share a database with local
  clients.  The lock manager uses a single mechanism for inter-process communication: threads.  The need for a
  privileged resignalling process is gone.</para>
  </section>

  <section id="vulcan-internals" xreflabel="Firebird Vulcan Internals"><!-- level 1 -->
  <title>Firebird Vulcan Internals</title>

    <section id="vulcan-olm" xreflabel="Object Lifetime Management"><!-- level 2 -->
    <title>Object Lifetime Management</title>

    <para>Firebird Vulcan supports memory pools, but release-by-pool is deprecated.  All new and revised code
    explicitly releases objects allocated.  All objects track resources they allocate and release any remaining
    allocated resources in the class destructor.</para>
    </section>

    <section id="vulcan-thread" xreflabel="Thread Data"><!-- level 2 -->
    <title>Thread Data</title>

    <para>The use of thread specific data other than thread management itself is deprecated.  The <quote>thread
    database</quote> object has been retained, but is passed as a formal parameter to all methods and functions
    where it is required.</para>
    </section>

    <section id="vulcan-systbls" xreflabel="System Tables"><!-- level 2 -->
    <title>System Tables</title>

    <para>At one point the memory and processing necessary to maintain names was significant.  Processor speed and
    memory cost have eliminated the benefit of that optimization, and Firebird Vulcan now uses names rather than
    identifiers.  This change will allow <quote>soft</quote> system tables--system tables that accept and preserve
    user extensions.</para>
    </section>

    <section id="vulcan-excepthdl" xreflabel="Exception Handling"><!-- level 2 -->
    <title>Exception Handling</title>

    <para>In most cases, Firebird Vulcan exceptions are thrown and caught as instances of the OSRIException class.
    The OSRIException carries the full context (information load) of the exception, eliminating the need to find a
    target status vector in order to throw an exception.</para>
    </section>

    <section id="vulcan-classencap" xreflabel="Class Encapsulation"><!-- level 2 -->
    <title>Class Encapsulation</title>

    <para>Numerous internal mechanisms have been encapsulated as C++ classes including BLR generation, message
    formatting, message lookup, the mover, status vector, SQL parser, a string class, handle management, etc.</para>
    </section>

    <section id="vulcan-namespace" xreflabel="Namespace Management"><!-- level 2 -->
    <title>Namespace Management</title>

    <para>Firebird Vulcan contains a great amount of code shared between the engine, the Y-valve, other providers,
    and external components. To promote code sharing while preserving architectural borders, shared Firebird Vulcan
    classes are qualified by soft, component-specific namespaces declared in the build configuration.</para>
    </section><!-- level 2 -->
  </section><!-- level 1 -->

  <section id="vulcan-loose" xreflabel="Unfinished Work and Loose Ends"><!-- level 1 -->
  <title>Unfinished Work and Loose Ends</title>

  <variablelist>
    <varlistentry>
      <term>Remote Architecture</term>
      <listitem>
        <para>Parts of the interface for the various remote network modules have been encapsulated as a Port
        structure.  The encapsulation, however, was driven more by pragmatics than coherent design.  The
        encapsulation itself as well as the division of work between the base classes and individual networks
        modules could use a careful redesign.  The interface is non-architectural, and can be changed at any
        point.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Use of XDR</term>
      <listitem>
        <para>The remote line protocol is defined in terms of XDR, the lower layer of Sun's remote procedure
        protocol.  In practice, however, XDR adds nothing but cumbersome overhead.  XDR should be replaced by
        simpler in-line code without impacting the line protocol or forward and backward compatibility.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Internal Engine SQL</term>
      <listitem>
        <para>Firebird Vulcan supports internal engine SQL.  Following implementation of the compiled statement
        cache, GDML should generally be replaced by SQL for metadata handling within the engine.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>The Gateway Provider</term>
      <listitem>
        <para>The Gateway Provider is demonstrable but incomplete.  The Gateway is also compiled to support a
        single remote interface.  It should probably be reworked to pick up information about the foreign system
        from the configuration file.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>The Commit Manager</term>
      <listitem>
        <para>Firebird Vulcan includes the skeleton of code to group commits.  When a transaction commits, all
        pages it changed must be written to disk.  Some of those pages are common to many transactions: the header
        page, the tip, generator pages, etc.  Considerable saving can be achieved by grouping commits to those
        pages are written once for the whole group.</para>
        <para>The ability to group commits was not required to achieve the performance goals, but the structure to
        do so is in the code.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Portability</term>
      <listitem>
        <para>Firebird Vulcan was developed on four compilers simultaneously: gcc 2.96, gcc 3.3.4,
        Solaris/Forte 5.5, and Microsoft VC7.  To make that work, Firebird Vulcan eliminated the dependency on
        std.lib, minimized all other dependencies outside the core clib (c library), and reduced the complexity
        of template usage.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Temporary Installation Procedure</term>
      <listitem>
        <para>To be provided</para>
      </listitem>
    </varlistentry>
  </variablelist>
  </section>
</chapter>

<!-- CHAPTER BREAK  CHAPTER BREAK   CHAPTER BREAK   CHAPTER BREAK   CHAPTER BREAK  -->

  <chapter id="vulcan-cfg-util" xreflabel="The fb_config Utility">
  <chapterinfo>
    <title>The fb_config Utility</title>
  </chapterinfo>
  <para>Firebird Vulcan includes a command-line utility called <firstterm> fb_config  </firstterm> which reads the
  configuration files and reports on their contents.</para>

  <section id="vulcan-cfg-util-switches" xreflabel="Syntax and Switches for fb_config"><!-- level 1 -->
  <title>Syntax and Switches</title>

  <para>fb_config accepts the following switches:</para>
  <variablelist>
    <varlistentry>
      <term>-t</term>
      <listitem>
        <para>Trace configuration file opens</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>-l</term>
      <listitem>
        <para>Print the contents of configuration files</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>-i</term>
      <listitem>
        <para>Show installation directory</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>-f filename</term>
      <listitem>
        <para>Config file name</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>-h</term>
      <listitem>
        <para>Print this text</para>
      </listitem>
    </varlistentry>
  </variablelist>
  </section>

  <section id="vulcan-cfg-util-output" xreflabel="fb_config Output"><!-- level 1 -->
  <title>fb_config Output</title>

  <para>The most common use of fb_config is to determine how a database will be accessed, using
  the <function> -t  </function> option.  fb_onfig first reports, in order, on the configuration files it opens,
  then reports any translation of the file name, then lists the provider and the shared library that implements
  the provider.</para>

  <para><emphasis role="bold">Example</emphasis></para>
  <para>In this example, fb_config reports that the installation configuration file for clients is the first one
  located, and that the file rogers.fdb be opened locally.</para>
  <literallayout class="monospaced">
C:\harrison>config -t rogers.gdb
Opening \harrison\Firebird Vulcan\install/client.conf
Opening \harrison\Firebird Vulcan\install/databases.conf
Opening \harrison\Firebird Vulcan\install/master.conf
Looking up database name string &quot;rogers.fdb&quot;
  Matches &quot;*&quot;, translates to &quot;rogers.fdb&quot;
    Provider engine11
      Library &quot;C:\harrison\Firebird Vulcan\install\bin\engine11&quot;: succeeded
  </literallayout>
  <para>This example comes from the Firebird Vulcan build directory.  There is a vulcan.conf file in the
  source directory that invokes a shared configuration file called build.conf.  Build.conf renames yachts.lnk to
  be help.fdb - solving one of the long-standing build problems.</para>
  <literallayout class="monospaced">
C:\harrison\Firebird Vulcan\src\qli>config -t yachts.lnk
Opening Firebird Vulcan.conf
Opening ../build.conf
Opening \harrison\Firebird Vulcan\install/client.conf
Opening \harrison\Firebird Vulcan\install/databases.conf
Opening \harrison\Firebird Vulcan\install/master.conf
Looking up database name string &quot;yachts.lnk&quot;
  Matches &quot;yachts.lnk&quot;, translates to &quot;../../install/help/help.fdb&quot;
    Provider engine11
      Library &quot;C:\harrison\Firebird Vulcan\install\bin\engine11&quot;: succeeded
  </literallayout>
  </section>

  <section id="vulcan-cfg-files" xreflabel="Configuration Files"><!-- level 1 -->
  <title>Configuration Files</title>
  <para>[ lacuna ]</para>

    <section id="vulcan-cfg-files-locating" xreflabel="Locating the initial configuration file"><!-- level 2 -->
    <title>Locating the initial configuration file</title>
    <para>Firebird Vulcan locates a configuration file by trying the following steps in this order:</para>
    <orderedlist>
      <listitem>
        <para>Translate the environmental variable VULCAN_CONF</para>
      </listitem>
      <listitem>
        <para>Open vulcan.conf in the program's default directory</para>
      </listitem>
      <listitem>
        <para>Open  ~/.vulcan.conf - vulcan.conf in the user's home directory on Unix and Linux systems.</para>
      </listitem>
      <listitem>
        <para>Translate the environmental variable VULCAN and open client.conf there</para>
      </listitem>
      <listitem>
        <para>Translate the environmental variable FIREBIRD and open client.conf there</para>
      </listitem>
      <listitem>
        <para>Windows Registry for Windows systems only.-</para>
        <orderedlist type="a">
          <listitem>
            <para><function>SOFTWARE\\Firebird Project\\Firebird Server\\Instances</function></para>
          </listitem>
          <listitem>
            <para><function>SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\Firebird</function></para>
          </listitem>
        </orderedlist>
      </listitem>
    </orderedlist>

    <para><emphasis>Include</emphasis> statements in the initial configuration file lead to other
    configuration files.</para>
    </section><!-- level 2 -->

    <section id="vulcan-cfg-files-params" xreflabel="Configuration File Syntax - Parameters"><!-- level 2 -->
    <title>Configuration File Syntax - Parameters</title>
    <para>The syntax for defining a parameter is the same as in Firebird.-</para>
    <literallayout class="monospaced">
	&lt;parameter name&gt;[=] &lt;value&gt;[ &lt;value&gt;&amp;]
    </literallayout>
    <para>A newline terminates the parameter definition.  Boolean parameters accept the values yes, no,
    true, and false.</para>
    <para><emphasis role="bold">Example</emphasis></para>
    <literallayout class="monospaced">
    RootDirectory    /opt/vulcan
    </literallayout>
    <para>Or</para>
    <literallayout class="monospaced">
    RootDirectory = /opt/vulcan

    provider remote engine11 services

    DatabaseFileShared true
    </literallayout>

    <para>Firebird Vulcan accepts all the parameters supported by Firebird 1.5 and a number of new parameters.
    The file firebird.conf documents the firebird specific parameters.  This section describes the parameters
    specific to Firebird Vulcan.</para>

    <variablelist>
      <varlistentry>
        <term>DatabaseFileShared</term>
        <listitem>
          <para>Defaults to false.  This parameter is normally used within the definition of a database object.
          If it is set to false, only one process can attach to the database at any one time.  This is equivalent
          to embedded access or SuperServer access if the one process is the server.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>LockFileName</term>
        <listitem>
          <para>Defaults to null (0x0).  The parameter is provided so two or more copies of Firebird Vulcan can
          exist on a computer and ignore each other.  That configuration, while important and powerful, is also
          dangerous unless carefully designed.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>SecurityDatabase</term>
        <listitem>
          <para>Defaults to <quote>none</quote>.</para>
          <para>The permissible values are <quote>none</quote>, <quote>self</quote>, and the file name for
          a security database.  Typically an installation's master.conf file will name a security database and
          the definitions of specific databases will override that definition with either <quote>none</quote> for databases
          that have no authentication, <quote>self</quote> for databases that contain their own authentication information,
          or an application-specific or installation-specific shared authentication database.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Library</term>
        <listitem>
          <para>The name of a shared library that implements a particular service.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>TraceFlags</term>
        <listitem>
          <para>Defaults to zero.  The flags are traceCalls 1, traceResults 2, and traceSQL 3.  They can be
          combined.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>SecurityManager</term>
        <listitem>
          <para>Defaults to <quote>SecurityDb</quote>. No other manager is currently available.  This parameter
          is part of the security management architecture to support security plugins.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>CommitInterval</term>
        <listitem>
          <para> - defaults to 200.  This parameter will control the frequency of group commits under the
          unfinished commit manager.</para>
        </listitem>
      </varlistentry>

    </variablelist>

      <section id="vulcan-cfg-files-params-fb" xreflabel="Using Firebird Parameters"><!-- level 3 -->
      <title>Using Firebird Parameters</title>
      <para>To emulate customized Firebird 1.5 behavior, you can add the line</para>
      <literallayout class="monospaced">
    include $(root)firebird.conf
      </literallayout>
      <para>to the master.conf file in the installation directory.</para>

      <para>However, many parameters are more useful when applied to a specific database, and those parameters
      can be set in the object definitions in Firebird Vulcan configuration files.  Others,
      like <emphasis>SortMemSize</emphasis>, may be set differently for different processes and should be
      included in the vulcan.conf files for those processes.</para>
      </section><!-- level 3 -->

      <section id="vulcan-cfg-files-params-specific" xreflabel="Specific Installations"><!-- level 3 -->
      <title>Specific Installations</title>
      <para>If you are setting up multiple independent copies of Firebird and Firebird Vulcan, you should create
      a configuration file in the root directory of each installation that includes these parameters.-</para>
      <itemizedlist>
        <listitem><para>RootDirectory</para></listitem>
        <listitem><para>LockFileName</para></listitem>
        <listitem><para>SecurityDatabase</para></listitem>
      </itemizedlist>
      </section><!-- level 3 -->

      <section id="vulcan-cfg-files-params-rsrc" xreflabel="Resource Use"><!-- level 3 -->
      <title>Resource Use</title>
      <para>Some parameters should be set differently for different clients to distribute resources according
      to need.-</para>
      <itemizedlist>
        <listitem><para>SortMemBlockSize</para></listitem>
        <listitem><para>SortMemUpperLimit</para></listitem>
        <listitem><para>DefaultDbCachePages</para></listitem>
        <listitem><para>MaxUnflushedWrites</para></listitem>
        <listitem><para>MaxUnflushedWriteTime</para></listitem>
      </itemizedlist>
      </section><!-- level 3 -->

      <section id="vulcan-cfg-files-params-deprec" xreflabel="Deprecated Parameters"><!-- level 3 -->
      <title>Deprecated Parameters</title>
      <para>Changes in architecture make a number of Firebird parameters meaningless in Firebird Vulcan.-</para>
      <itemizedlist>
        <listitem>
          <para>RemoteFileOpenAbility--Firebird Vulcan does not support the ability to open databases through
          NFS mounts.</para>
        </listitem>
        <listitem><para>SortMemUpperLimit</para></listitem>
        <listitem><para>CpuAffinityMask</para></listitem>
        <listitem><para>TraceMemoryPools</para></listitem>
        <listitem><para>LockSemCount</para></listitem>
        <listitem><para>LockSignal</para></listitem>
        <listitem><para>LockAcquireSpins</para></listitem>
        <listitem><para>SolarisStallValue</para></listitem>
        <listitem><para>PrioritySwitchDelay</para></listitem>
        <listitem><para>DeadThreadsCollection</para></listitem>
        <listitem><para>PriorityBoost</para></listitem>
      </itemizedlist>
      </section><!-- level 3 -->

      <section id="vulcan-cfg-files-params-tcp" xreflabel="TCP Server Options"><!-- level 3 -->
      <title>TCP Server Options</title>
      <para>These parameters should be set in the server configuration file.-</para>
      <itemizedlist>
        <listitem><para>GuardianOption</para></listitem>
        <listitem><para>TcpRemoteBufferSize</para></listitem>
        <listitem><para>TcpNoNagle</para></listitem>
        <listitem><para>ConnectionTimeout</para></listitem>
        <listitem><para>DummyPacketInterval</para></listitem>
        <listitem><para>RemoteServiceName</para></listitem>
        <listitem><para>RemoteServicePort</para></listitem>
        <listitem><para>RemoteAuxPort</para></listitem>
        <listitem><para>RemoteBindAddress</para></listitem>
      </itemizedlist>
      </section><!-- level 3 -->

      <section id="vulcan-cfg-files-params-nontcp" xreflabel="Non-TCP Server Options"><!-- level 3 -->
      <title>Non-TCP Server Options</title>
      <para>These parameters should be set in a configuration file specific to the affected server.-</para>
      <itemizedlist>
        <listitem><para>IpcMapSize</para></listitem>
        <listitem><para>RemotePipeName</para></listitem>
        <listitem><para>IpcName</para></listitem>
        <listitem><para>ProcessPriorityLevel</para></listitem>
        <listitem><para>CreateInternalWindow</para></listitem>
      </itemizedlist>
      </section><!-- level 3 -->

      <section id="vulcan-cfg-files-params-compat" xreflabel="Compatibility with Older Versions"><!-- level 3 -->
      <title>Compatibility with Older Versions</title>
      <para>These parameters should be set at the process or user level.-</para>
      <itemizedlist>
        <listitem><para>OldParameterOrdering</para></listitem>
        <listitem><para>OldColumnNaming [ANN :: CHECK PLEASE]</para></listitem>
      </itemizedlist>
      </section><!-- level 3 -->

      <section id="vulcan-cfg-files-params-lockevent" xreflabel="Lock and Event Manager Parameters"><!-- level 3 -->
      <title>Lock and Event Manager Parameters</title>
      <para>These parameters should be set at the installation level.-</para>
      <itemizedlist>
        <listitem><para>LockMemSize</para></listitem>
        <listitem><para>LockGrantOrder</para></listitem>
        <listitem><para>LockHashSlots</para></listitem>
        <listitem><para>DeadlockTimeout</para></listitem>
        <listitem><para>EventMemSize</para></listitem>
      </itemizedlist>
      </section><!-- level 3 -->

      <section id="vulcan-cfg-files-params-access" xreflabel=""><!-- level 3 -->
      <title>Access Control Parameters</title>
      <para>These parameters should be set at the process or sever level.-</para>
      <itemizedlist>
        <listitem><para>ExternalFileAccess</para></listitem>
        <listitem><para>DatabaseAccess</para></listitem>
        <listitem><para>UdfAccess</para></listitem>
        <listitem><para>TempDirectories</para></listitem>
      </itemizedlist>
      </section><!-- level 3 -->
    </section><!-- level 2 -->
  </section><!-- level 1 -->

  <section id="vulcan-obj-defn" xreflabel="Object Definition Syntax"><!-- level 1 -->
  <title>Object Definition Syntax</title>
  <para>[ lacuna ]</para>

    <section id="vulcan-obj-defn-tokens" xreflabel="Special Tokens"><!-- level 2 -->
    <title>Special Tokens</title>
    <para>[ lacuna ]</para>
    <variablelist>
      <varlistentry>
        <term>$(install)</term>
        <listitem>
          <para>The actual installation directory.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>$(root)</term>
        <listitem>
          <para>The translation of the parameter RootDirectory or the installation directory if that parameter
          is undefined.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>$(this)</term>
        <listitem>
          <para>The current directory.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>$0</term>
        <listitem>
          <para>The current name</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>$1</term>
        <listitem>
          <para>The translated value of the first wildcarded portion of the current name</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>$n</term>
        <listitem>
          <para>The translated value of the nth wildcarded portion of the current name</para>
        </listitem>
      </varlistentry>
    </variablelist>
    </section><!-- level 2 -->

    <section id="vulcan-obj-defn-defns" xreflabel="Object Definition Format"><!-- level 2 -->
    <title>Object Definition Format</title>
    <para>The basic format of an object definition is.-</para>
    <literallayout class="monospaced">
  &lt;object    name&gt;
  parameter     value[ value&amp;]
  &lt;/object&gt;
    </literallayout>

    <para>The known objects are server, provider, SecurityManager, SecurityPlugin, gateway, and database.</para>

  <literallayout class="monospaced">
  &lt;provider    engine11&gt;
  LockFileName    $(root)/Firebird Vulcan.lck
  library         $(root)/bin/engine11 $(root)/bin64/engine11
  &lt;/provider&gt;
    </literallayout>

    <para>[ lacuna ]</para>
  <literallayout class="monospaced">
  &lt;SecurityManager SecurityDb&gt;
  SecurityDatabase $(root)/security.fdb
  AuthAccount              user
  AuthPassword     lookup
  SecurityPlugin   SecurityDb
  &lt;/SecurityManager&gt;
    </literallayout>

    <para>Only one security plugin is supported currently.-</para>

   <literallayout class="monospaced">
  &lt;SecurityPlugin SecurityDb&gt;
  library   $(root)/bin/securitydb $(root)/bin64/securitydb
  &lt;/SecurityPlugin&gt;
    </literallayout>

    <para>A database object definition can have one of two forms.  It can map a database name, possibly
    wild-carded, to one or more providers and apply other parameters to the database like this.-</para>

    <literallayout class="monospaced">
  &lt;database *&gt;
     filename    $0
     provider remote engine11 services
  &lt;/database&gt;
    </literallayout>

    <para>The other form of the database object definition changes the name given for the database without giving
    it any other characteristics.  When the configuration file manager finds a database object that simply renames
    the database, it reapplies all configuration files in order, using the new name rather than the name originally
    supplied.</para>
    
    <literallayout class="monospaced">
  &lt;database yachts.lnk&gt;
         filename    caine:c:\harrison\metadata.fdb
  &lt;/database&gt;
    </literallayout>

    <para>Unless you include at least one provider in a database object, the only parameter you can set is the
    database name.</para>
    </section><!-- level 2 -->
  </section><!-- level 1 -->

  <section id="vulcan-internal-sql" xreflabel="Using Internal SQL"><!-- level 1 -->
  <title>Using Internal SQL</title>
  <para>Internal SQL is very much like JDBC.  One starts by constructing a PStatement object by invoking the
  prepareStatement method of the Connection object on a SQL string that can include wild cards.</para>

  <para><emphasis role="bold">Syntax</emphasis></para>
  <programlisting>
PStatement statement = connection-&gt;prepareStatement (
      &quot;select&quot;
      &quot;   rfr.rdb$field_name,&quot;
      &quot;   rfr.rdb$field_position &quot;
      &quot;from &quot;
      &quot;   rdb$relation_fields rfr join&quot;
      &quot;   rdb$fields fld on&quot;
      &quot;      rfr.rdb$field_source = fld.rdb$field_name &quot;
      &quot;where&quot;
      &quot;    rdb$relation_name = ?&quot;);
  </programlisting>

  <para>The PStatement has a method for establishing values for the wildcards.-</para>
  <programlisting>
      statement-&gt;setString(1, rel_name);
  </programlisting>

  <para>Executing a query statement produces an RSet object.-</para>

  <programlisting>
      RSet resultSet = statement-&gt;executeQuery();
  </programlisting>

  <para>The RSet object iterates through the query results.-</para>

  <programlisting>
  while (resultSet->next())
      {
      int seq = resultSet-&gt;getInt(2);
      const char *fieldName = resultSet-&gt;getString(1);
      &amp;
      }
  </programlisting>
  </section><!-- level 1 -->
</chapter>

<!-- CHAPTER BREAK  CHAPTER BREAK   CHAPTER BREAK   CHAPTER BREAK   CHAPTER BREAK  -->

  <chapter id="vulcan-building" xreflabel="Building Firebird Vulcan">
  <chapterinfo>
    <title>Building Firebird Vulcan</title>
  </chapterinfo>

  <section id="vulcan-building-win">
  <title>Windows 32 or 64</title>
  <para>Anyone who would like to build Firebird Vulcan at home on a Windows system and has access to Visual
  Studio 7 can do so, reasonably easily, following this procedure.</para>

    <section id="vulcan-building-win-checkout"><!-- level 2 -->
    <title>CVS Checkout</title>
    <para>Check out the sources from Sourceforge using the module name <function> vulcan </function> and any CVS
    client.  The account is anonymous with no password.   The CVSROOT is /cvsroot/firebird.</para>

    <para>If you are using a version of CVS that does not check out empty directories, you'll need to create a
    <function> Databases </function>directory under <function> src </function>.</para>
    </section>

    <section id="vulcan-building-win-setup"><!-- level 2 -->
    <title>Setting up Your Build</title>
    <para>Read the file <function> README.vulcanWin32.txt </function> in the top-level directory.  It instructs
    you to</para>
    <orderedlist>
      <listitem>
        <para>define vulcan as &lt;vulcan root&gt;\install</para>
      </listitem>
      <listitem>
        <para>put <function> %vulcan%\bin </function> on your path before the paths to Firebird or
        InterBase</para>
      </listitem>
      <listitem>
        <para>run the command file <function> boot_copy.bat </function></para>
      </listitem>
      <listitem>
        <para>copy or rename the file
        <function> vulcan\builds\VisualStudio7\vulcan\vulcan.snl.template </function> to
        <function> vulcan\builds\VisualStudio7\vulcan\vulcan.sln </function></para>
        <para>Then start Visual studio pointing it at the solution in
        <function> vulcan\builds\VisualStudio7\vulcan </function></para>
      </listitem>
      <listitem>
        <para>in the Visual Studio/Tools menu, pick Options/Projects, then Visual C++ files.  If the list does
        not include <function>&lt;source root&gt;/install/bin </function>
        and <function> &lt;bison install directory&gt;/bin </function>, add them.</para>
      </listitem>
    </orderedlist>
    </section>

    <section id="vulcan-building-win-build"><!-- level 2 -->
    <title>Build!</title>
    <para>Click on build solution and it should churn happily for a while and eventually report that it built
    26 projects with no failures.</para>

    <para>The build automatically creates all the necessary databases, message files, dynamic header files,
    etc.</para>
    </section>

    <section id="vulcan-building-win-run"><!-- level 2 -->
    <title>Run Firebird Vulcan!</title>

    <para>Local connections will work immediately.  To allow remote and loopback connections, start the
    server <function> %vulcan%\bin\inetserver.exe </function> with the switch <function> -m</function>.</para>

    <para>The configuration files are deeply involved with the connection between a utility and a database.  The
    best way to guess what the configuration files are doing to you is to run the <function> fb_config </function>
    utility with the <function> -t  </function>option.</para>

    <para>The fb_config utility traces back through the sequence of configuration files, then reports the
    translation of the database name, the name of the provider, and whether the provider was found.</para>

    <literallayout class="monospaced">
C:\Harrison&gt;config -t help.fdb
Opening c:\cygwin\home\vulcan\install/client.conf
Opening c:\cygwin\home\vulcan\install/databases.conf
Opening c:\cygwin\home\vulcan\install/master.conf
Looking up database name string &quot;help.fdb&quot;
 Matches &quot;help.fdb&quot;,
 translates to &quot;c:\cygwin\home\vulcan\install\help\help.fdb&quot;
   Provider engine11
     Library &quot;c:\cygwin\home\vulcan\install\bin\engine11&quot;:
     succeeded

C:\Harrison&gt;isql help.fdb
Database:  help.fdb
SQL&gt; show version;
ISQL Version: WI-V2.0.0.4027 Vulcan 1.0 Development
Firebird/x86/Windows NT (access method),
  version &quot;WI-V2.0.0.4027 Vulcan 1.0 Development&quot;
on disk structure version 11.0
SQL&gt;
    </literallayout>
    </section><!-- level 2 -->
  </section><!-- level 1 -->

  <section id="vulcan-building-posix">
  <title>Building Firebird Vulcan on POSIX systems</title>
  <para>[ lacuna ]</para>

  <orderedlist>
    <listitem>
      <para>Check out the sources from Sourceforge using your favorite CVS into a directory somewhere.  For this
      example, call the top of the directory tree <function> /home/vulcan </function></para>
    </listitem>
    <listitem>
      <para>Set and export (depending on the style of your shell) the environmental variable VULCAN to be the
      directory called <function> install </function> under the vulcan directory.  In this example it would be
      <function> /home/vulcan/install</function>.</para>
    </listitem>
    <listitem>
      <para>Set and export the environmental variables ISC_USER and ISC_PASSWORD.  SYSDBA and masterke are
      good--change the password later.</para>
    </listitem>
    <listitem>
      <para>If you are building a 32-bit version of Firebird Vulcan, add $vulcan/bin to your PATH
      and LD_LIBRARY_PATH variables.</para>
    </listitem>
    <listitem>
      <para>If you are building a 64-bit version of Firebird Vulcan, add $vulcan/bin64 to your PATH
      and LD_LIBRARY_PATH variables.</para>
    </listitem>
    <listitem>
      <para>cd to the src directory under the build tree.  In this example, </para>
      <para><function> cd /home/vulcan/src </function></para>
    </listitem>
    <listitem>
      <para>Add execute permission to the files <function> set_platform</function>, <function>autogen.sh</function>,
      <function>build</function> and <function>boot_build</function>.</para>
    </listitem>
    <listitem>
      <para>Invoke the autogen script <function>./autogen.sh</function></para>
    </listitem>
    <listitem>
      <para>Run the <function>set_platform</function> script with one of these arguments.-</para>
      <literallayout class="monospaced">
        { linux32 | linux64 | solaris64 }
      </literallayout>
      <para>For example <function> ./set_platform linux32 </function></para>
    </listitem>
    <listitem>
      <para>Run the build script file with no arguments.-</para>
      <literallayout class="monospaced">
        ./boot_build
      </literallayout>
    </listitem>
  </orderedlist>

    <section id="vulcan-building-posix-lin64">
    <title>Building Firebird Vulcan on 64-bit Linux</title>
    <para>Here is the full command sequence from a SuSE 9.2 AMD64 build, which already had the environmental
    variables defined.-</para>
    <literallayout class="monospaced">
cvs -z3
-d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/firebird
   co vulcan
cd vulcan
./autogen.sh
cd src
./set_platform linux64
boot_build
rehash
    </literallayout>
    </section><!-- level 2 -->
  </section><!-- level 1 -->

  <section id="vulcan-building-help"><!-- level 1 -->
  <title>Need help?</title>

  <para>If you have problems building Firebird Vulcan, please 
  contact <email>aharrison@ibphoenix.com</email>.</para>
  </section><!-- level 1 -->
  </chapter>
</book>
