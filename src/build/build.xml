<?xml version="1.0"?>


<!-- ======================================================================= -->
<!-- Firebird documentation build file                                       -->
<!-- ======================================================================= -->

<project name="FirebirdDocs" default="help" basedir="../..">



<!-- ======================================================================= -->
<!-- GLOBALS - outside any target                                            -->
<!-- ======================================================================= -->

    <taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop"/>

    <path id="saxon.path">
        <fileset dir="${basedir}/lib"
                 includes="saxon.jar,saxon-xml-apis.jar,foxon.jar,xercesImpl.jar"/>
    </path>

    <!-- To make Saxon use the Xerces parser and enable xincludes: -->
    <property name="javax.xml.parsers.DocumentBuilderFactory" value="org.apache.xerces.jaxp.DocumentBuilderFactoryImpl"/>
    <property name="javax.xml.parsers.SAXParserFactory" value="org.apache.xerces.jaxp.SAXParserFactoryImpl"/>
    <property name="org.apache.xerces.xni.parser.XMLParserConfiguration" value="org.apache.xerces.parsers.XIncludeParserConfiguration"/>
    <propertyset id="saxon-properties">
        <propertyref name="javax.xml.parsers.DocumentBuilderFactory"/>
        <propertyref name="javax.xml.parsers.SAXParserFactory"/>
        <propertyref name="org.apache.xerces.xni.parser.XMLParserConfiguration"/>
    </propertyset>
    <!-- This set needs to be referenced in every <java> task that uses Saxon on document trees
         that may contain xincludes. Currently, this happens in the html, monohtml and fo targets.)
    -->



<!-- ======================================================================= -->
<!-- Initialization of properties etc.                                       -->
<!-- ======================================================================= -->

    <target name="init">

        <echo message="${ant.version}"/>


        <!-- If you often build the same sets, you can change the values of
             the following properties _IN YOUR LOCAL COPY_ to save yourself
             some command-line typing:
               base - firebirddocs (default), rlsnotes, papers or refdocs.
               sfx  - language suffix, e.g. fr or ru. Default is empty (English).
               id   - the element you want to build, e.g. qsg15. Default is entire set.
             See below for more details on each of these properties.
        -->


        <!-- 'base' is the base setname, without language suffix.
             Currently it can be firebirddocs (default), rlsnotes, papers or refdocs.
             You can specify a base name on the command line like this:
               build pdf -Dbase=rlsnotes
             A command-line base will override the value specified below.
             You can also use the old property name, 'basename', on the command line.
        -->
        <property name="base" value="firebirddocs"/>


        <!-- Set the sfx (suffix) property to build another set than
             the default English docset.
             E.g. with sfx=fr, firebirddocs-fr.xml will be rendered;
             with sfx=ru, firebirddcos-ru.xml, etc.
             You can specify a sfx on the command line like this:
               build html -Dsfx=fr
             A command-line sfx will override the value specified below.
        -->
        <property name="sfx" value=""/>


        <!-- Set the 'id' property if you only want to build a certain
             doc or subtree. E.g. "qsg15" for the Firebird 1.5 Quick Start
             Guide. You can also specify it on the command line, like this:
               build pdf -Did=qsg15
             A command-line id will override the value specified below.
             You can also use the old property name, 'rootid', on the command line.
        -->
        <property name="id" value=""/>



        <!-- DON'T CHANGE ANYTHING BELOW THIS LINE UNLESS YOU KNOW WHAT YOU'RE DOING -->


        <!-- Old names of base and id, still used in the rest of the script.
             You can also still use -Drootid and -Dbasename on the command line.
        -->
        <property name="basename" value="${base}"/>
        <property name="rootid" value="${id}"/>

        <!-- setname is the base filename of the set, without extension,
             but already including the language suffix (if applicable),
             e.g. firebirddocs, firebirddocs-ru, firebirddocs-es
        -->
        <condition property="setname" value="${basename}" else="${basename}-${sfx}">
            <equals arg1="${sfx}" arg2=""/>
        </condition>

        <!-- sfxsubdir is either empty or /ru, /fr, /nl etc.
        -->
        <condition property="sfxsubdir" value="" else="/${sfx}">
            <equals arg1="${sfx}" arg2=""/>
        </condition>

        <!-- docname is the base filename of the output document, without extension.
        -->
        <condition property="docname" value="${setname}" else="${rootid}">
            <equals arg1="${rootid}" arg2=""/>
        </condition>

        <!-- basesfx is '' for the default firebirddocs basename, and '-<basename>'
             for any others. It is currently used for two purposes:
             - The multifile html output is placed in dist/html<basesfx>, so the sets are
               not in each other's way (and they don't overwrite each other's index.html).
               Examples: - rlsnotes htmls go into the dist/html-rlsnotes folder,
                         - firebirddocs (=default) htmls into dist/html.
             - For the fo, monohtml, and html targets, *if* a stylesheet
                 src/docs/xsl/<target><basesfx>.xsl
               exists (e.g. fo-rlsnotes.xsl for the rlsnotes base set),
               then that stylesheet is used to build the target.
               Otherwise, the default stylesheet for that target (e.g. fo.xsl) is used.
        -->
        <condition property="basesfx" value="" else="-${basename}">
            <equals arg1="${basename}" arg2="firebirddocs"/>
        </condition>

        <!-- Directories that are the same for all sets -->
        <property name="lib.dir"      value="${basedir}/lib"/>
        <property name="tools.dir"    value="${basedir}/tools"/>
        <property name="config.dir"   value="${basedir}/config"/>
        <property name="src.dir"      value="${basedir}/src"/>
        <property name="docs.dir"     value="${src.dir}/docs"/>
        <property name="build.dir"    value="${src.dir}/build"/>
        <property name="style.dir"    value="${docs.dir}/xsl"/>
        <property name="inter.dir"    value="${basedir}/inter"/>
        <property name="oldinter.dir" value="${basedir}/build"/>
        <property name="dist.dir"     value="${basedir}/dist"/>

        <!-- The following directories differ per set and/or language -->
        <!-- XML source dir: -->
        <condition property="set.dir" value="${docs.dir}" else="${docs.dir}/${setname}">
            <equals arg1="${basename}" arg2="firebirddocs"/>
        </condition>
        <!-- Local config dir:  -->
        <condition property="lconfig.dir" value="${config.dir}${sfxsubdir}" else="${config.dir}">
            <available file="${config.dir}${sfxsubdir}" type="dir"/>
        </condition>
        <!-- Output dirs:  -->
        <property name="fo.dir"       value="${inter.dir}/fo${sfxsubdir}"/>
        <property name="oldfo.dir"    value="${oldinter.dir}/fo${sfxsubdir}"/>
        <property name="monohtml.dir" value="${dist.dir}/monohtml${sfxsubdir}"/>
        <property name="html.dir"     value="${dist.dir}/html${basesfx}${sfxsubdir}"/>
        <property name="pdf.dir"      value="${dist.dir}/pdf${sfxsubdir}"/>
        <property name="zip.dir"      value="${dist.dir}/zip${sfxsubdir}"/>

    </target>



<!-- =================================================================== -->
<!-- Generates a help screen                                             -->
<!-- =================================================================== -->

    <target name="help" depends="init">

        <echo message="Build file for the Firebird manual module. Available targets:"/>
        <echo message=" "/>
        <echo message="html       : Build multifile HTML docs"/>
        <echo message="monohtml   : Build single-file HTML doc"/>
        <echo message="fo         : Build .fo (Formatting Objects) file"/>
        <echo message="fo2at      : Build area tree XML from .fo (for debugging)"/>
        <echo message="fo2pdf     : Build PDF doc from .fo"/>
        <echo message="pdf        : Build PDF doc from XML sources (via .fo)"/>
        <echo message="docs       : Build all HTML and PDF docs"/>
        <echo message="zip        : Create .zip distributions"/>
        <echo message=" "/>
        <echo message="USAGE: build &lt;target&gt; [params]"/>
        <echo message=" "/>
        <echo message="To build a subset, pass the id param, e.g.:"/>
        <echo message="    build pdf -Did=qsg15"/>
        <echo message=" "/>
        <echo message="The sfx param is used to build non-English versions, e.g.:"/>
        <echo message="    build pdf -Dsfx=ru"/>
        <echo message=" "/>
        <echo message="To build something other than the default firebirddocs set:"/>
        <echo message="    build pdf -Dbase=rlsnotes"/>
        <echo message=" "/>
        <echo message="*** The base, id and sfx params can be combined ***"/>
        <echo message=" "/>
        <echo message="t1metrics, ttfmetrics, ttcmetrics: Generate font metrics files."/>
        <echo message="    These targets are documented in the Non-Western Fonts Guide."/>
        <echo message=" "/>
        <echo message="tt-html    : Generate titlepage.templates.xsl (for html target)"/>
        <echo message="tt-fo      : Generate titlepage.templates.xsl (for fo target)"/>
        <echo message=" "/>
        <echo message="clean      : Clean up"/>
        <echo message=" "/>
        <echo message="cleanhtml, cleanpdf etc.: Clean up, then build named target"/>

    </target>



<!-- =================================================================== -->
<!-- Cleans up generated stuff                                           -->
<!-- =================================================================== -->

    <target name="clean" depends="init">

        <condition property="fo-wipe.dir" value="${inter.dir}" else="${fo.dir}">
            <equals arg1="${sfx}" arg2=""/>
        </condition>
        <condition property="oldfo-wipe.dir" value="${oldinter.dir}" else="${oldfo.dir}">
            <equals arg1="${sfx}" arg2=""/>
        </condition>

        <delete dir="${fo-wipe.dir}"/>
        <delete dir="${oldfo-wipe.dir}"/>
        <delete dir="${monohtml.dir}"/>
        <delete dir="${html.dir}"/>
        <delete dir="${pdf.dir}"/>
        <delete dir="${zip.dir}"/>

    </target>



<!-- =================================================================== -->
<!-- Prepares the build directory                                        -->
<!-- =================================================================== -->

    <target name="prepare" depends="init">
        <mkdir dir="${fo.dir}"/>
        <mkdir dir="${monohtml.dir}"/>
        <mkdir dir="${html.dir}"/>
        <mkdir dir="${pdf.dir}"/>
        <mkdir dir="${zip.dir}"/>
    </target>



<!-- ======================================================================== -->
<!-- Generates html/titlepage.templates.xsl from html/titlepage.templates.xml -->
<!-- ======================================================================== -->

    <target name="tt-html" depends="init">

        <echo message="Generating src/docs/xsl/html/titlepage.templates.xsl - please wait..."/>

        <style basedir="${tools.dir}"
               style="${tools.dir}/docbook-stylesheets/template/titlepage.xsl"
               in="${style.dir}/html/titlepage.templates.xml"
               out="${style.dir}/html/titlepage.templates.xsl"/>
    </target>



<!-- ======================================================================== -->
<!-- Generates fo/titlepage.templates.xsl from fo/titlepage.templates.xml     -->
<!-- ======================================================================== -->

    <target name="tt-fo" depends="init">

        <echo message="Generating src/docs/xsl/fo/titlepage.templates.xsl - please wait..."/>

        <style basedir="${tools.dir}"
               style="${tools.dir}/docbook-stylesheets/template/titlepage.xsl"
               in="${style.dir}/fo/titlepage.templates.xml"
               out="${style.dir}/fo/titlepage.templates.xsl"/>
    </target>



<!-- ======================================================================== -->
<!-- Copies image files from $docs.dir/$includes to $todir (internal target)  -->
<!-- ======================================================================== -->

    <target name="copy-img-files">

        <property name="todir" value=""/>
        <property name="includes" value=""/>

        <condition property="is-fo">
            <equals arg1="${todir}" arg2="${fo.dir}/images"/>
        </condition>
        <condition property="is-html">
            <equals arg1="${todir}" arg2="${html.dir}/images"/>
        </condition>
        <condition property="is-monohtml">
            <equals arg1="${todir}" arg2="${monohtml.dir}/images"/>
        </condition>

        <copy flatten="yes"
              preservelastmodified="yes"
              overwrite="yes"
              includeEmptyDirs="no"
              todir="${todir}">
            <fileset dir="${docs.dir}"
                     includes="${includes}">
                <!-- Limit copying of unused images: -->
                <exclude name="**/*.txt"/>
                <exclude name="**/ChangeLog"/>
                <exclude name="docbook/images/callouts/*" if="is-fo"/>
                <exclude name="images/titleblackgill.gif" if="is-fo"/>
                <exclude name="images/firebirdlogo.png"   if="is-fo"/>
                <exclude name="images/firebird_logo_400x400.png" unless="is-fo"/>
                <exclude name="images/toc-*.png"  unless="is-html"/>
                <exclude name="images/top-*.png"  unless="is-html"/>
                <exclude name="images/prev-*.png" unless="is-html"/>
                <exclude name="images/next-*.png" unless="is-html"/>
            </fileset>
        </copy>
    </target>



<!-- =================================================================== -->
<!-- Dummy target to NOT copy files a second time if set == base         -->
<!-- =================================================================== -->

    <target name="copy-img-files-not"/>



<!-- =================================================================== -->
<!-- Copies image file collections to param $todir (internal target)     -->
<!-- =================================================================== -->

    <target name="copy-images">

        <property name="todir" value=""/>

        <!-- Copy images. Instead of a single fileset we use three consecutive calls,
             so basename-specific images can overwrite globals, and setname-specific
             (i.e. localized) images can overwrite basename-specific images.       -->

        <!-- copy global images: -->
        <antcall target="copy-img-files">
            <param name="todir" value="${todir}"/>
            <param name="includes" value="docbook/images/callouts/*,images/*"/>
        </antcall>

        <!-- copy basename-specific images: -->
        <antcall target="copy-img-files">
            <param name="todir" value="${todir}"/>
            <param name="includes" value="${basename}/images/*"/>
        </antcall>

        <!-- Don't copy set images over base images if set is base: -->
        <condition property="callsfx" value="-not" else="">
            <equals arg1="${setname}" arg2="${basename}"/>
        </condition>

        <!-- copy setname-specific images (or call empty target if set equals base): -->
        <antcall target="copy-img-files${callsfx}">
            <param name="todir" value="${todir}"/>
            <param name="includes" value="${setname}/images/*"/>
        </antcall>

    </target>



<!-- =================================================================== -->
<!-- Generates a message:                                                -->
<!-- =================================================================== -->

    <target name="defaulthtml">
        <echo message="Attention: the old 'defaulthtml' target is now called 'html'"/>
    </target>



<!-- =================================================================== -->
<!-- Generates the multi-page HTML documentation                         -->
<!-- =================================================================== -->

    <target name="html" depends="prepare, getrootarg">

        <echo message="Building multi-page HTML documentation. Please wait..."/>

        <!-- Use custom stylesheet if available. Else, default to html.xsl: -->
        <property name="custss" value="${style.dir}/html${basesfx}.xsl"/>
        <condition property="stylesheet" value="${custss}" else="${style.dir}/html.xsl">
            <available file="${custss}"/>
        </condition>

        <!--
        <style basedir ="${set.dir}"
               includes="${setname}.xml"
               destdir ="${html.dir}"
               style   ="${stylesheet}">
            <param name="rootid" expression="${rootid}"/>
        </style>
        -->

        <java classname="com.icl.saxon.StyleSheet" classpathref="saxon.path" failonerror="true">
            <syspropertyset>
                <propertyset refid="saxon-properties"/>
            </syspropertyset>
            <arg file="${set.dir}/${setname}.xml"/>
            <arg file="${stylesheet}"/>
            <arg line="${rootarg}"/>
        </java>

        <!-- destdir/out parameters are ignored due to chunking
             so we move all chunked html files to their destination: -->
        <move todir="${html.dir}">
            <fileset dir="${build.dir}" includes="*.html"/>
        </move>

        <!-- Copy stylesheet: -->
        <copy file="${docs.dir}/firebirddocs.css"
              todir="${html.dir}"
              preservelastmodified="yes"
              overwrite="yes"/>

        <!-- Copy image collections: -->
        <antcall target="copy-images">
            <param name="todir" value="${html.dir}/images"/>
        </antcall>

    </target>



<!-- =================================================================== -->
<!-- Cleans up, then builds HTML                                         -->
<!-- =================================================================== -->

    <target name="cleanhtml" depends="clean, html"/>



<!-- =================================================================== -->
<!-- Generates a message:                                                -->
<!-- =================================================================== -->

    <target name="printablehtml">
        <echo message="Attention: the old 'printablehtml' target is now called 'monohtml'"/>
    </target>



<!-- ===================================================================== -->
<!-- Generates the one-page, "printable", HTML documentation               -->
<!-- ===================================================================== -->

    <target name="monohtml" depends="prepare, getrootarg">

        <!-- Create unchunked tutorial -->
        <echo message="Building single-page HTML documentation. Please wait..."/>

        <delete file="${monohtml.dir}/${docname}.html"/>

        <!-- Use custom stylesheet if available. Else, default to monohtml.xsl: -->
        <property name="custss" value="${style.dir}/monohtml${basesfx}.xsl"/>
        <condition property="stylesheet" value="${custss}" else="${style.dir}/monohtml.xsl">
            <available file="${custss}"/>
        </condition>

        <!--
        <style in   ="${set.dir}/${setname}.xml"
               out  ="${monohtml.dir}/${docname}.html"
               style="${stylesheet}">
            <param name="rootid" expression="${rootid}"/>
        </style>
        -->

        <java classname="com.icl.saxon.StyleSheet" classpathref="saxon.path" failonerror="true">
            <syspropertyset>
                <propertyset refid="saxon-properties"/>
            </syspropertyset>
            <arg line="-o"/> <!-- output file in next arg: arg file takes care of proper quoting -->
            <arg file="${monohtml.dir}/${docname}.html"/>
            <arg file="${set.dir}/${setname}.xml"/>
            <arg file="${stylesheet}"/>
            <arg line="${rootarg}"/>
        </java>

        <!-- Copy stylesheet: -->
        <copy file="${docs.dir}/firebirddocs.css"
              todir="${monohtml.dir}"
              preservelastmodified="yes"
              overwrite="yes"/>

        <!-- Copy image collections: -->
        <antcall target="copy-images">
            <param name="todir" value="${monohtml.dir}/images"/>
        </antcall>

    </target>



<!-- =================================================================== -->
<!-- Cleans up, then builds one-page HTML                                -->
<!-- =================================================================== -->

    <target name="cleanmonohtml" depends="clean, monohtml"/>



<!-- =================================================================== -->
<!-- Generates a font metrics file                                       -->
<!-- =================================================================== -->

    <target name="fontmetrics" depends="prepare">
        <property name="ff" value=""/>  <!-- font file to read -->
        <property name="mf" value=""/>  <!-- metrics file to produce -->
        <java classname="org.apache.fop.fonts.apps.${readerclass}">
            <arg value="${ff}"/>
            <arg value="${lconfig.dir}/${mf}"/>
        </java>
    </target>



<!-- =================================================================== -->
<!-- Generates a Type 1 font metrics file                                -->
<!-- =================================================================== -->

    <target name="t1metrics">
        <antcall target="fontmetrics">
            <param name="readerclass" value="PFMReader"/>
        </antcall>
    </target>



<!-- =================================================================== -->
<!-- Generates a true type font metrics file                             -->
<!-- =================================================================== -->

    <target name="ttfmetrics">
        <antcall target="fontmetrics">
            <param name="readerclass" value="TTFReader"/>
        </antcall>
    </target>



<!-- =================================================================== -->
<!-- Generates a true type font metrics file from a collection           -->
<!-- =================================================================== -->

    <target name="ttcmetrics" depends="prepare">
        <property name="cf" value=""/>  <!-- collection file to read -->
        <property name="fn" value=""/>  <!-- name of font to pick    -->
        <property name="mf" value=""/>  <!-- metrics file to produce -->
        <java classname="org.apache.fop.fonts.apps.TTFReader">
            <arg value="-ttcname"/>
            <arg value="${fn}"/>
            <arg value="${cf}"/>
            <arg value="${lconfig.dir}/${mf}"/>
        </java>
    </target>



<!-- =================================================================== -->
<!-- Get rootid argument. Only needed if we call Saxon via <java> task   -->
<!-- =================================================================== -->

    <target name="getrootarg">
        <condition property="rootarg" value="" else="rootid=${rootid}">
            <equals arg1="${rootid}" arg2=""/>
        </condition>
    </target>



<!-- =================================================================== -->
<!-- Get font param args. Only needed if we call Saxon via <java> task   -->
<!-- =================================================================== -->

    <target name="getfontargs">

        <!-- load custom params (currently only fonts), if file exists: -->
        <property file="${lconfig.dir}/fo-params.txt"/>

        <condition property="body.font.arg" value="body.font.family=${body.font.family}" else="">
            <isset property="body.font.family"/>
        </condition>
        <condition property="title.font.arg" value="title.font.family=${title.font.family}" else="">
            <isset property="title.font.family"/>
        </condition>
        <condition property="monospace.font.arg" value="monospace.font.family=${monospace.font.family}" else="">
            <isset property="monospace.font.family"/>
        </condition>
        <condition property="symbol.font.arg" value="symbol.font.family=${symbol.font.family}" else="">
            <isset property="symbol.font.family"/>
        </condition>
        <condition property="dingbat.font.arg" value="dingbat.font.family=${dingbat.font.family}" else="">
            <isset property="dingbat.font.family"/>
        </condition>
        <condition property="sans.font.arg" value="sans.font.family=${sans.font.family}" else="">
            <isset property="sans.font.family"/>
        </condition>

    </target>



<!-- =================================================================== -->
<!-- Generates the fo intermediate output                                -->
<!-- =================================================================== -->

    <target name="fo" depends="prepare, getrootarg, getfontargs">

        <echo message="Building Formatting Objects file. Please wait..."/>

        <property name="fo-file" value="${fo.dir}/${docname}.fo"/>
        <delete file="${fo-file}"/>

        <!-- Use custom stylesheet if available. Else, default to fo.xsl: -->
        <property name="custss" value="${style.dir}/fo${basesfx}.xsl"/>
        <condition property="stylesheet" value="${custss}" else="${style.dir}/fo.xsl">
            <available file="${custss}"/>
        </condition>

        <!-- How do you pass a system id (base url) to saxon if
             invoked via the Ant style task? -->

        <!--
        <style in   ="${set.dir}/${setname}.xml"
               out  ="${fo-file}"
               style="${stylesheet}">
            <param name="rootid"                expression="${rootid}"/>
            <param name="body.font.family"      expression="${body.font.family}"      if="body.font.family"/>
            <param name="title.font.family"     expression="${title.font.family}"     if="title.font.family"/>
            <param name="monospace.font.family" expression="${monospace.font.family}" if="monospace.font.family"/>
            <param name="symbol.font.family"    expression="${symbol.font.family}"    if="symbol.font.family"/>
            <param name="dingbat.font.family"   expression="${dingbat.font.family}"   if="dingbat.font.family"/>
            <param name="sans.font.family"      expression="${sans.font.family}"      if="sans.font.family"/>
        </style>
        -->

        <java classname="com.icl.saxon.StyleSheet" classpathref="saxon.path" failonerror="true">
            <syspropertyset>
                <propertyset refid="saxon-properties"/>
            </syspropertyset>
            <arg line="-o"/> <!-- output file in next arg: arg file takes care of proper quoting -->
            <arg file="${fo-file}"/>
            <arg file="${set.dir}/${setname}.xml"/>
            <arg file="${stylesheet}"/>
            <arg line="${rootarg}"/>
            <arg line="${body.font.arg}"/>
            <arg line="${title.font.arg}"/>
            <arg line="${monospace.font.arg}"/>
            <arg line="${symbol.font.arg}"/>
            <arg line="${dingbat.font.arg}"/>
            <arg line="${sans.font.arg}"/>
        </java>

        <!-- copy image collections: -->
        <antcall target="copy-images">
            <param name="todir" value="${fo.dir}/images"/>
        </antcall>

    </target>



<!-- =================================================================== -->
<!-- Cleans up, then builds FO                                           -->
<!-- =================================================================== -->

    <target name="cleanfo" depends="clean, fo"/>



<!-- =================================================================== -->
<!-- Fixes a fo file                                                     -->
<!-- =================================================================== -->

    <target name="fofix" depends="init">

        <echo message="Fixing the Formatting Objects file. Please wait..."/>

        <property name="fo-file"    value="${fo.dir}/${docname}.fo"/>
        <property name="fixed-file" value="${fo.dir}/${docname}-fixed.fo"/>
        <delete file="${fixed-file}"/>

        <property name="stylesheet" value="${style.dir}/fo/fo-fix.xsl"/>

        <java classname="com.icl.saxon.StyleSheet" classpathref="saxon.path" failonerror="true">
            <arg line="-o"/> <!-- output file in next arg: arg file takes care of proper quoting -->
            <arg file="${fixed-file}"/>
            <arg file="${fo-file}"/>
            <arg file="${stylesheet}"/>
        </java>

    </target>



<!-- =================================================================== -->
<!-- Generates XML area tree from fo                                               -->
<!-- =================================================================== -->

    <target name="fo2at" depends="init">

        <echo message="Building Area Tree XML from Formatting Objects. Please wait..."/>

        <!-- basedir must be ${fo.dir} or images won't be found! -->
        <fop basedir="${fo.dir}"
             userconfig="${lconfig.dir}/fop-userconfig.xml"
             fofile="${fo.dir}/${docname}.fo"
             format="application/X-fop-areatree"
             outfile="${fo.dir}/${docname}-at.xml"
             messagelevel="warn"/>
                 <!-- Possible values are: error, warn, verbose, info, debug -->
    </target>



<!-- =================================================================== -->
<!-- Generates pdf from fo                                               -->
<!-- =================================================================== -->

    <target name="fo2pdf" depends="init">

        <echo message="Building PDF from Formatting Objects. Please wait..."/>

        <!-- basedir must be ${fo.dir} or images won't be found! -->
        <fop basedir="${fo.dir}"
             userconfig="${lconfig.dir}/fop-userconfig.xml"
             fofile="${fo.dir}/${docname}.fo"
             outfile="${pdf.dir}/${docname}.pdf"
             messagelevel="warn"/>
                 <!-- Possible values are: error, warn, verbose, info, debug -->
    </target>



<!-- =================================================================== -->
<!-- Generates the pdf documentation                                     -->
<!-- =================================================================== -->

    <target name="pdf" depends="fo, fo2pdf"/>



<!-- =================================================================== -->
<!-- Cleans up, then builds PDF                                          -->
<!-- =================================================================== -->

    <target name="cleanpdf" depends="clean, pdf"/>



<!-- =================================================================== -->
<!-- Generates html and pdf documentation                                -->
<!-- =================================================================== -->

    <target name="docs">
        <!-- This used to be done with a "depends" line, but that's broken now,
             presumably since we started using the java task instead of style.
             Somehow the java task seems to be run with the same stylesheet three
             times... but with antcalls, this doesn't happen.
        -->
        <antcall target="monohtml"/>
        <antcall target="html"/>
        <antcall target="pdf"/>
    </target>



<!-- =================================================================== -->
<!-- Cleans up, then builds all docs                                     -->
<!-- =================================================================== -->

    <target name="cleandocs" depends="clean, docs"/>



<!-- =================================================================== -->
<!-- Generates a message:                                                -->
<!-- =================================================================== -->

    <target name="dist">
        <echo message="Attention: the old 'dist' target is now called 'zip'"/>
    </target>



<!-- =================================================================== -->
<!-- Packages the distribution with ZIP                                  -->
<!-- =================================================================== -->

    <target name="zip" depends="docs">

        <mkdir dir="${zip.dir}"/>

        <zip destfile="${zip.dir}/${setname}-html-${version}.zip"
             basedir="${html.dir}"
             includes="**"/>

        <zip destfile="${zip.dir}/${setname}-monohtml-${version}.zip"
             basedir="${monohtml.dir}"
             includes="**"/>

        <zip destfile="${zip.dir}/${setname}-pdf-${version}.zip"
             basedir="${pdf.dir}"
             includes="*.pdf"/>
    </target>



<!-- =================================================================== -->
<!-- Cleans up, then builds everything including zips                    -->
<!-- =================================================================== -->

    <target name="cleanzip" depends="clean, zip"/>


</project>
