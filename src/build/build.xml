<?xml version="1.0"?>

<!-- ======================================================================= -->
<!-- Firebird documentation build file                                       -->
<!-- ======================================================================= -->
<project name="FirebirdDocs" default="help" basedir="../..">

        <!-- As of Ant 1.6 all tasks can be declared outside targets (earlier
             versions only allowed <property>,<typedef> and <taskdef>). When
             you do this they are evaluated before any targets are executed.
        -->
        <taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop"/>

	<target name="init">

                <!-- If you often build the same sets, you can change the values of 
                     the following properties IN YOUR LOCAL COPY to save yourself 
                     some typing on the command line:
                       basename - currently only "firebirddocs" will work, but this will change.
                       sfx      - indicates the language, e.g. fr or ru. Default is English.
                       rootid   - the element you want to build, e.g. qsg15. Default is entire set.
                -->

                <echo message="${ant.version}"/>

                <property name="basename"     value="firebirddocs"/>

                <!-- Set the sfx (suffix) property to build another set than
                     the default English docset.
                     E.g. with sfx=fr firebirddocs-fr.xml will be rendered,
                     with sfx=ru firebirddcos-ru.xml, etc.
                     You can specify sfx on the command line like this:
                       build html Dsfx=fr
                     A command-line sfx wil override a sfx specified here.
                -->
                <property name="sfx"          value=""/>

                <!-- setname is the base filename of the set, without extension,
                     e.g. firebirddocs, firebirddocs-ru, firebirddocs-es
                -->
                <condition property="setname" value="${basename}">
                  <equals arg1="${sfx}" arg2=""/>
                </condition>
                <condition property="setname" value="${basename}-${sfx}">
                  <not><equals arg1="${sfx}" arg2=""/></not>
                </condition>

                <!-- sfxsubdir is either empty or /ru, /fr, /nl etc.
                -->
                <condition property="sfxsubdir" value="">
                  <equals arg1="${sfx}" arg2=""/>
                </condition>
                <condition property="sfxsubdir" value="/${sfx}">
                  <not><equals arg1="${sfx}" arg2=""/></not>
                </condition>

                <!-- Set the rootid property if you only want to build a certain
                     doc or subtree. E.g. "qsg15" for the Firebird 1.5 Quick Start
                     Guide. You can also specify it on the command line, like this:
                       build pdf -Drootid=qsg15
                     A command-line rootid wil override a rootid specified here.
                -->
                <property name="rootid"       value=""/>


                <!-- DON'T CHANGE ANYTHING BELOW THIS LINE UNLESS YOU KNOW WHAT YOU'RE DOING -->


                <!-- docname is the base filename of the output document, without extension.
                -->
                <condition property="docname" value="${rootid}">
                  <not><equals arg1="${rootid}" arg2=""/></not>
                </condition>
                <condition property="docname" value="${setname}">
                  <equals arg1="${rootid}" arg2=""/>
                </condition>

                <!-- Directories used for all sets -->
		<property name="lib.dir"      value="${basedir}/lib"/>
                <property name="config.dir"   value="${basedir}/config"/>
		<property name="src.dir"      value="${basedir}/src"/>
		<property name="docs.dir"     value="${src.dir}/docs"/>
		<property name="build.dir"    value="${src.dir}/build"/>
		<property name="style.dir"    value="${docs.dir}/xsl"/>
		<property name="inter.dir"    value="${basedir}/inter"/>
		<property name="oldinter.dir" value="${basedir}/build"/>
		<property name="dist.dir"     value="${basedir}/dist"/>

                <!-- The following config and output directories differ per language set
                    (actually: sfx set) -->
		<property name="lconfig.dir"  value="${config.dir}${sfxsubdir}"/>
		<property name="fo.dir"       value="${inter.dir}/fo${sfxsubdir}"/>
		<property name="oldfo.dir"    value="${oldinter.dir}/fo${sfxsubdir}"/>
		<property name="monohtml.dir" value="${dist.dir}/monohtml${sfxsubdir}"/>
		<property name="html.dir"     value="${dist.dir}/html${sfxsubdir}"/>
		<property name="pdf.dir"      value="${dist.dir}/pdf${sfxsubdir}"/>
		<property name="zip.dir"      value="${dist.dir}/zip${sfxsubdir}"/>

	</target>


<!-- =================================================================== -->
<!-- Generates a help screen                                             -->
<!-- =================================================================== -->
	<target name="help" depends="init">

		<echo message="Build file for the Firebird manual module. Available targets:"/>
		<echo message=" "/>
		<echo message="html       : Build multifile HTML docs"/>
		<echo message="monohtml   : Build single-file HTML doc"/>
		<echo message="fo         : Build .fo (Formatting Objects) file"/>
		<echo message="fo2pdf     : Build PDF doc from .fo"/>
		<echo message="pdf        : Build PDF doc from XML sources (via .fo)"/>
		<echo message="docs       : Build all HTML and PDF docs"/>
		<echo message="zip        : Create .zip distributions"/>
		<echo message=" "/>
		<echo message="USAGE: build &lt;target&gt; [params]"/>
		<echo message=" "/>
		<echo message="To build a subset, pass the rootid param, e.g.:"/>
		<echo message="    build pdf -Drootid=qsg15"/>
		<echo message=" "/>
		<echo message="The sfx param is used to build/clean non-English versions, e.g.:"/>
		<echo message="    build pdf -Dsfx=ru"/>
		<echo message="The rootid and sfx params can be combined."/>
		<echo message=" "/>
                <echo message="t1metrics, ttfmetrics, ttcmetrics: Generate font metrics files."/>
		<echo message="    These targets are documented in the Non-Western Fonts Guide."/>
		<echo message=" "/>
                <echo message="tt-html    : Generate titlepage.templates.xsl (for html target)"/>
		<echo message="tt-fo      : Generate titlepage.templates.xsl (for fo target)"/>
		<echo message=" "/>
		<echo message="clean      : Clean up"/>
		<echo message=" "/>
		<echo message="cleanhtml, cleanpdf etc.: Clean up, then build named target"/>

	</target>


<!-- =================================================================== -->
<!-- Cleans up generated stuff                                           -->
<!-- =================================================================== -->
	<target name="clean" depends="init">

                <condition property="fo-wipe.dir" value="${inter.dir}">
                  <equals arg1="${sfx}" arg2=""/>
                </condition>
                <condition property="fo-wipe.dir" value="${fo.dir}">
                  <not><equals arg1="${sfx}" arg2=""/></not>
                </condition>
                <condition property="oldfo-wipe.dir" value="${oldinter.dir}">
                  <equals arg1="${sfx}" arg2=""/>
                </condition>
                <condition property="oldfo-wipe.dir" value="${oldfo.dir}">
                  <not><equals arg1="${sfx}" arg2=""/></not>
                </condition>

		<delete dir="${fo-wipe.dir}"/>
		<delete dir="${oldfo-wipe.dir}"/>
		<delete dir="${monohtml.dir}"/>
		<delete dir="${html.dir}"/>
		<delete dir="${pdf.dir}"/>
		<delete dir="${zip.dir}"/>

	</target>


<!-- =================================================================== -->
<!-- Prepares the build directory                                        -->
<!-- =================================================================== -->

	<target name="prepare" depends="init">
		<mkdir dir="${fo.dir}"/>
		<mkdir dir="${monohtml.dir}"/>
		<mkdir dir="${html.dir}"/>
		<mkdir dir="${pdf.dir}"/>
		<mkdir dir="${zip.dir}"/>
	</target>



<!-- ======================================================================== -->
<!-- Generates html/titlepage.templates.xsl from html/titlepage.templates.xml -->
<!-- ======================================================================== -->
	<target name="tt-html" depends="init">

		<echo message="Generating src/docs/xsl/html/titlepage.templates.xsl - please wait..."/>

		<style basedir="${docs.dir}"
		       style="${docs.dir}/docbook/template/titlepage.xsl"
		       in="${style.dir}/html/titlepage.templates.xml"
                       out="${style.dir}/html/titlepage.templates.xsl"/>

	</target>



<!-- ======================================================================== -->
<!-- Generates fo/titlepage.templates.xsl from fo/titlepage.templates.xml     -->
<!-- ======================================================================== -->
	<target name="tt-fo" depends="init">

		<echo message="Generating src/docs/xsl/fo/titlepage.templates.xsl - please wait..."/>

		<style basedir="${docs.dir}"
		       style="${docs.dir}/docbook/template/titlepage.xsl"
		       in="${style.dir}/fo/titlepage.templates.xml"
                       out="${style.dir}/fo/titlepage.templates.xsl"/>

	</target>



<!-- =================================================================== -->
<!-- Generates a message:                                                -->
<!-- =================================================================== -->
	<target name="defaulthtml">
		<echo message="Attention: the old 'defaulthtml' target is now called 'html'"/>
        </target>


<!-- =================================================================== -->
<!-- Creates the default XML->XSLT->HTML documentation                   -->
<!-- =================================================================== -->
	<target name="html" depends="prepare">

		<!-- Create chunked tutorial
		- destdir parameter is ignored due to chunking
		- so we move all chunked html files to destination -->
		<echo message="Building multifile HTML documentation. Please wait..."/>

		<style basedir="${docs.dir}"
			style="${style.dir}/html.xsl"
			destdir="${html.dir}"
			includes="${setname}.xml">
			<param name="rootid" expression="${rootid}"/>
                </style>

		<move todir="${html.dir}">
			<fileset dir="${src.dir}/build" includes="*.html"/>
		</move>

		<delete file="${html.dir}/${setname}.html"/>

		<!-- Stylesheets, images, and static HTML -->
		<copy todir="${html.dir}" file="${docs.dir}/${basename}.css"/>

		<copy todir="${html.dir}/images" flatten="yes" includeEmptyDirs="no">
			<fileset dir="${docs.dir}"
                                 includes="docbook/images/callouts/*,images/*,${setname}/images/*"/>
		</copy>

	</target>


<!-- =================================================================== -->
<!-- Cleans up, then builds HTML                                         -->
<!-- =================================================================== -->
	<target name="cleanhtml" depends="clean, html"/>


<!-- =================================================================== -->
<!-- Generates a message:                                                -->
<!-- =================================================================== -->
	<target name="printablehtml">
		<echo message="Attention: the old 'printablehtml' target is now called 'monohtml'"/>
        </target>


<!-- ===================================================================== -->
<!-- Creates the one-file, "printable", html XML->XSLT->HTML documentation -->
<!-- ===================================================================== -->
	<target name="monohtml" depends="prepare">

		<!-- Create unchunked tutorial -->
		<echo message="Building monolith HTML documentation. Please wait..."/>

		<delete file="${monohtml.dir}/${docname}.html"/>

		<style basedir="${docs.dir}"
			style="${style.dir}/monohtml.xsl"
			in="${docs.dir}/${setname}.xml"
                        out="${monohtml.dir}/${docname}.html">
			<param name="rootid" expression="${rootid}"/>
                </style>

		<!-- Stylesheets, images, and static HTML -->

		<!-- No use copying css if it ain't used anyway... -->
		<!-- <copy todir="${monohtml.dir}" file="${src.dir}/docs/${basename}.css"/> -->

		<copy todir="${monohtml.dir}/images" flatten="yes" includeEmptyDirs="no">
			<fileset dir="${docs.dir}"
                                 includes="docbook/images/callouts/*,images/*,${setname}/images/*"/>
		</copy>

	</target>


<!-- =================================================================== -->
<!-- Cleans up, then builds monolith HTML                                -->
<!-- =================================================================== -->
	<target name="cleanmonohtml" depends="clean, monohtml"/>


<!-- =================================================================== -->
<!-- Generates a font metrics file                                       -->
<!-- =================================================================== -->
        <target name="fontmetrics" depends="prepare">
                <property name="ff" value=""/>  <!-- font file to read -->
                <property name="mf" value=""/>  <!-- metrics file to produce -->
                <java classname="org.apache.fop.fonts.apps.${readerclass}">
                  <arg value="${ff}"/>
                  <arg value="${lconfig.dir}/${mf}"/>
                </java>
        </target>


<!-- =================================================================== -->
<!-- Generates a Type 1 font metrics file                                -->
<!-- =================================================================== -->
        <target name="t1metrics">
                <antcall target="fontmetrics">
                         <param name="readerclass" value="PFMReader"/>
                </antcall>
        </target>


<!-- =================================================================== -->
<!-- Generates a true type font metrics file                             -->
<!-- =================================================================== -->
        <target name="ttfmetrics">
                <antcall target="fontmetrics">
                         <param name="readerclass" value="TTFReader"/>
                </antcall>
        </target>


<!-- =================================================================== -->
<!-- Generates a true type font metrics file from a collection           -->
<!-- =================================================================== -->
        <target name="ttcmetrics" depends="prepare">
                <property name="cf" value=""/>  <!-- collection file to read -->
                <property name="fn" value=""/>  <!-- name of font to pick    -->
                <property name="mf" value=""/>  <!-- metrics file to produce -->
                <java classname="org.apache.fop.fonts.apps.TTFReader">
                  <arg value="-ttcname"/>
                  <arg value="${fn}"/>
                  <arg value="${cf}"/>
                  <arg value="${lconfig.dir}/${mf}"/>
                </java>
        </target>


<!-- =================================================================== -->
<!-- Generates the fo output                                             -->
<!-- =================================================================== -->
	<target name="fo" depends="prepare">

		<echo message="Building Formatting Objects file. Please wait..."/>

		<delete file="${fo.dir}/${docname}.fo"/>


                <!-- load custom params (currently only fonts), if file exists: -->
                <property file="${lconfig.dir}/fo-params.txt"/>

                <!-- What follows works, but it's nicer to use an "if" attribute in <style>.<param>
                     Unfortunately, Ant 1.5.1 doesn't support that... -->
                <condition property="body.font.family" value="serif">
                  <not><isset property="body.font.family"/></not>
                </condition>
                <condition property="title.font.family" value="sans-serif">
                  <not><isset property="title.font.family}"/></not>
                </condition>
                <condition property="monospace.font.family" value="monospace">
                  <not><isset property="monospace.font.family}"/></not>
                </condition>
                <condition property="symbol.font.family" value="Symbol,ZapfDingbats">
                  <not><isset property="symbol.font.family}"/></not>
                </condition>
                <condition property="dingbat.font.family" value="serif">
                  <not><isset property="dingbat.font.family}"/></not>
                </condition>
                <condition property="sans.font.family" value="sans-serif">
                  <not><isset property="sans.font.family}"/></not>
                </condition>

		<style basedir="${docs.dir}"
			style="${style.dir}/fo.xsl"
			in="${docs.dir}/${setname}.xml"
                        out="${fo.dir}/${docname}.fo">
			<param name="rootid" expression="${rootid}"/>
			<param name="body.font.family"      expression="${body.font.family}"/>
			<param name="title.font.family"     expression="${title.font.family}"/>
			<param name="monospace.font.family" expression="${monospace.font.family}"/>
			<param name="symbol.font.family"    expression="${symbol.font.family}"/>
			<param name="dingbat.font.family"   expression="${dingbat.font.family}"/>
			<param name="sans.font.family"      expression="${sans.font.family}"/>
                </style>

		<copy todir="${fo.dir}/images" flatten="yes" includeEmptyDirs="no">
			<fileset dir="${docs.dir}"
                                 includes="docbook/images/callouts/*,images/*,${setname}/images/*"
                                 excludes="**/*.txt, **/ChangeLog"/>
		</copy>

	</target>


<!-- =================================================================== -->
<!-- Cleans up, then builds FO                                           -->
<!-- =================================================================== -->
	<target name="cleanfo" depends="clean, fo"/>


<!-- =================================================================== -->
<!-- Generates pdf from fo                                               -->
<!-- =================================================================== -->
	<target name="fo2pdf" depends="init">

		<echo message="Building PDF from Formatting Objects. Please wait..."/>

                <!-- basedir must be ${fo.dir} or images won't be found! -->
		<fop basedir="${fo.dir}"
		     userconfig="${lconfig.dir}/fop-userconfig.xml"
                     fofile="${fo.dir}/${docname}.fo"
                     outfile="${pdf.dir}/${docname}.pdf"
                     messagelevel="warn"/>
                        <!-- Possible values are: error, warn, verbose, info, debug -->
	</target>


<!-- =================================================================== -->
<!-- Generates the pdf documentation                                     -->
<!-- =================================================================== -->
	<target name="pdf" depends="fo, fo2pdf"/>


<!-- =================================================================== -->
<!-- Cleans up, then builds PDF                                          -->
<!-- =================================================================== -->
	<target name="cleanpdf" depends="clean, pdf"/>


<!-- =================================================================== -->
<!-- Generates html and pdf documentation                                -->
<!-- =================================================================== -->
	<target name="docs" depends="html, monohtml, pdf"/>


<!-- =================================================================== -->
<!-- Cleans up, then builds all docs                                     -->
<!-- =================================================================== -->
	<target name="cleandocs" depends="clean, docs"/>


<!-- =================================================================== -->
<!-- Generates a message:                                                -->
<!-- =================================================================== -->
	<target name="dist">
		<echo message="Attention: the old 'dist' target is now called 'zip'"/>
        </target>


<!-- =================================================================== -->
<!-- Packages the distribution with ZIP                                  -->
<!-- =================================================================== -->
	<target name="zip" depends="docs">

		<mkdir dir="${zip.dir}"/>

		<zip destfile="${zip.dir}/${setname}-html-${version}.zip"
			basedir="${html.dir}"
			includes="**"/>

		<zip destfile="${zip.dir}/${setname}-monohtml-${version}.zip"
			basedir="${monohtml.dir}"
			includes="**"/>

		<zip destfile="${zip.dir}/${setname}-pdf-${version}.zip"
			basedir="${pdf.dir}"
			includes="*.pdf"/>

	</target>


<!-- =================================================================== -->
<!-- Cleans up, then builds everything including zips                    -->
<!-- =================================================================== -->
	<target name="cleanzip" depends="clean, zip"/>


</project>

