<?xml version="1.0"?>

<!-- ======================================================================= -->
<!-- Firebird documentation build file                                       -->
<!-- ======================================================================= -->
<project name="FirebirdDocs" default="help" basedir="../..">

         <!-- As of Ant 1.6 all tasks can be declared outside targets (earlier
              versions only allowed <property>,<typedef> and <taskdef>). When
              you do this they are evaluated before any targets are executed. -->

	<target name="init">

		<property name="version"      value="1.0"/>
                <property name="basename"     value="firebirddocs"/>

                <property name="sfx"          value=""/>
                <!-- Set the sfx (suffix) property to build another set than
                     the default English docset.
                     E.g. with sfx=fr firebirddocs-fr.xml will be rendered,
                     with sfx=ru firebirddcos-ru.xml, etc.
                     You can specify sfx on the command line like this:
                       build html Dsfx=fr
                     A command-line sfx wil override a sfx specified here.
                -->

                <condition property="setname" value="${basename}">
                  <equals arg1="${sfx}" arg2=""/>
                </condition>
                <condition property="setname" value="${basename}-${sfx}">
                  <not><equals arg1="${sfx}" arg2=""/></not>
                </condition>


                <property name="rootid"       value=""/>
                <!-- Set the rootid property if you only want to build a certain
                     doc or subtree. E.g. "qsg15" for the Firebird 1.5 Quick Start
                     Guide. You can also specify it on the command line, like this:
                       build pdf -Drootid=qsg15
                     A command-line rootid wil override a rootid specified here.
                     Note: the driver stylesheets are no longer the places where
                     you override the rootid! Changing the rootid param there will
                     have no effect, as it will be overridden by the rootid param
                     passed by this buildfile (even if it's empty here).
                -->

                <condition property="docname" value="${rootid}">
                  <not><equals arg1="${rootid}" arg2=""/></not>
                </condition>
                <condition property="docname" value="${setname}">
                  <equals arg1="${rootid}" arg2=""/>
                </condition>


		<property name="lib.dir"      value="${basedir}/lib"/>
		<property name="src.dir"      value="${basedir}/src"/>
		<property name="docs.dir"     value="${src.dir}/docs"/>
		<property name="style.dir"    value="${docs.dir}/xsl"/>
		<property name="build.dir"    value="${basedir}/build"/>
		<property name="fo.dir"       value="${build.dir}/fo"/>
		<property name="dist.dir"     value="${basedir}/dist"/>
		<property name="monohtml.dir" value="${dist.dir}/monohtml"/>
		<property name="html.dir"     value="${dist.dir}/html"/>
		<property name="pdf.dir"      value="${dist.dir}/pdf"/>
		<property name="zip.dir"      value="${dist.dir}/zip"/>


		<taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop"/>

	</target>


<!-- =================================================================== -->
<!-- Generates a help screen                                             -->
<!-- =================================================================== -->
	<target name="help" depends="init">

		<echo message="${basename}-${version} build file; available targets:"/>
		<echo message=" "/>
		<echo message="html     :   Build multifile HTML docs"/>
		<echo message="monohtml :   Build single-file HTML doc"/>
		<echo message="fo       :   Build .fo (Formatting Objects) file"/>
		<echo message="fo2pdf   :   Build PDF doc from .fo"/>
		<echo message="pdf      :   Build PDF doc from XML sources (via .fo)"/>
		<echo message="docs     :   Build all HTML and PDF docs"/>
		<echo message="zip      :   Create .zip distributions"/>
		<echo message=" "/>
                <echo message="tt-html  :   Generate titlepage.templates.xsl (for html target)"/>
		<echo message="tt-fo    :   Generate titlepage.templates.xsl (for fo target)"/>
		<echo message=" "/>
		<echo message="clean    :   Clean up"/>
		<echo message=" "/>
		<echo message="cleanhtml, cleanpdf etc.: Clean up, then build named target"/>
		<echo message=" "/>
		<echo message="USAGE: build &lt;target&gt; [params]"/>
		<echo message=" "/>
		<echo message="To build a subset, pass the rootid param, e.g.:"/>
		<echo message="    build pdf -Drootid=qsg15"/>
		<echo message="will build only the Firebird 1.5 Quick Start Guide."/>
		<echo message="You can also set rootid in build.xml"/>
		<echo message=" "/>
		<echo message="The sfx param is used to build non-English versions, e.g.:"/>
		<echo message="    build pdf -Dsfx=ru"/>
		<echo message="will build the Russian set."/>
		<echo message="You can also set sfx in build.xml"/>
		<echo message=" "/>
		<echo message="The rootid and sfx params can be combined."/>

	</target>


<!-- =================================================================== -->
<!-- Cleans up generated stuff                                           -->
<!-- =================================================================== -->
	<target name="clean" depends="init">

		<delete dir="${build.dir}"/>
		<delete dir="${dist.dir}"/>

	</target>


<!-- =================================================================== -->
<!-- Prepares the build directory                                        -->
<!-- =================================================================== -->

	<target name="prepare" depends="init">
		<mkdir dir="${html.dir}"/>
		<mkdir dir="${monohtml.dir}"/>
		<mkdir dir="${pdf.dir}"/>
	</target>



<!-- ======================================================================== -->
<!-- Generates html/titlepage.templates.xsl from html/titlepage.templates.xml -->
<!-- ======================================================================== -->
	<target name="tt-html" depends="init">

		<echo message="Generating src/docs/xsl/html/titlepage.templates.xsl - please wait..."/>

		<style basedir="${docs.dir}"
		       style="${docs.dir}/docbook/template/titlepage.xsl"
		       in="${style.dir}/html/titlepage.templates.xml"
                       out="${style.dir}/html/titlepage.templates.xsl"/>

	</target>



<!-- ======================================================================== -->
<!-- Generates fo/titlepage.templates.xsl from fo/titlepage.templates.xml     -->
<!-- ======================================================================== -->
	<target name="tt-fo" depends="init">

		<echo message="Generating src/docs/xsl/fo/titlepage.templates.xsl - please wait..."/>

		<style basedir="${docs.dir}"
		       style="${docs.dir}/docbook/template/titlepage.xsl"
		       in="${style.dir}/fo/titlepage.templates.xml"
                       out="${style.dir}/fo/titlepage.templates.xsl"/>

	</target>



<!-- =================================================================== -->
<!-- Generates a message:                                                -->
<!-- =================================================================== -->
	<target name="defaulthtml">
		<echo message="Attention: the old 'defaulthtml' target is now called 'html'"/>
        </target>


<!-- =================================================================== -->
<!-- Creates the default XML->XSLT->HTML documentation                   -->
<!-- =================================================================== -->
	<target name="html" depends="prepare">

		<!-- Create chunked tutorial
		- destdir parameter is ignored due to chunking
		- so we move all chunked html files to destination -->
		<echo message="Building multifile HTML documentation. Please wait..."/>

		<style basedir="${docs.dir}"
			style="${style.dir}/html.xsl"
			destdir="${html.dir}"
			includes="${setname}.xml">
			<param name="rootid" expression="${rootid}"/>
                </style>

		<move todir="${html.dir}">
			<fileset dir="${src.dir}/build" includes="*.html"/>
		</move>

		<delete file="${html.dir}/${setname}.html"/>

		<!-- Stylesheets, images, and static HTML -->
		<copy todir="${html.dir}" file="${docs.dir}/${basename}.css"/>

		<copy todir="${html.dir}/images" flatten="yes" includeEmptyDirs="no">
			<fileset dir="${docs.dir}"
                                 includes="docbook/images/callouts/*,images/*,${setname}/images/*"/>
		</copy>

	</target>


<!-- =================================================================== -->
<!-- Cleans up, then builds HTML                                         -->
<!-- =================================================================== -->
	<target name="cleanhtml" depends="clean, html"/>


<!-- =================================================================== -->
<!-- Generates a message:                                                -->
<!-- =================================================================== -->
	<target name="printablehtml">
		<echo message="Attention: the old 'printablehtml' target is now called 'monohtml'"/>
        </target>


<!-- ===================================================================== -->
<!-- Creates the one-file, "printable", html XML->XSLT->HTML documentation -->
<!-- ===================================================================== -->
	<target name="monohtml" depends="prepare">

		<!-- Create unchunked tutorial -->
		<echo message="Building monolith HTML documentation. Please wait..."/>

		<delete file="${monohtml.dir}/${docname}.html"/>

		<style basedir="${docs.dir}"
			style="${style.dir}/monohtml.xsl"
			in="${docs.dir}/${setname}.xml"
                        out="${monohtml.dir}/${docname}.html">
			<param name="rootid" expression="${rootid}"/>
                </style>

		<!-- Stylesheets, images, and static HTML -->

		<!-- No use copying css if it ain't used anyway... -->
		<!-- <copy todir="${monohtml.dir}" file="${src.dir}/docs/${basename}.css"/> -->

		<copy todir="${monohtml.dir}/images" flatten="yes" includeEmptyDirs="no">
			<fileset dir="${docs.dir}"
                                 includes="docbook/images/callouts/*,images/*,${setname}/images/*"/>
		</copy>

	</target>


<!-- =================================================================== -->
<!-- Cleans up, then builds monolith HTML                                -->
<!-- =================================================================== -->
	<target name="cleanmonohtml" depends="clean, monohtml"/>


<!-- =================================================================== -->
<!-- Generates the fo output                                             -->
<!-- =================================================================== -->
	<target name="fo" depends="prepare">

		<echo message="Building Formatting Objects file. Please wait..."/>

		<delete file="${fo.dir}/${docname}.fo"/>

		<style basedir="${docs.dir}"
			style="${style.dir}/fo.xsl"
			in="${docs.dir}/${setname}.xml"
                        out="${fo.dir}/${docname}.fo">
			<param name="rootid" expression="${rootid}"/>
                </style>

		<copy todir="${fo.dir}/images" flatten="yes" includeEmptyDirs="no">
			<fileset dir="${docs.dir}"
                                 includes="docbook/images/callouts/*,images/*,${setname}/images/*"
                                 excludes="**/*.txt, **/ChangeLog"/>
		</copy>

	</target>


<!-- =================================================================== -->
<!-- Cleans up, then builds FO                                           -->
<!-- =================================================================== -->
	<target name="cleanfo" depends="clean, fo"/>


<!-- =================================================================== -->
<!-- Generates pdf from fo                                               -->
<!-- =================================================================== -->
	<target name="fo2pdf" depends="init">

		<echo message="Building PDF from Formatting Objects. Please wait..."/>

		<fop basedir="${fo.dir}"
                     fofile="${fo.dir}/${docname}.fo"
                     outfile="${pdf.dir}/${docname}.pdf"
                     messagelevel="warn"/>
                        <!-- Possible values are: error, warn, verbose, info, debug -->
	</target>


<!-- =================================================================== -->
<!-- Generates the pdf documentation                                     -->
<!-- =================================================================== -->
	<target name="pdf" depends="fo, fo2pdf"/>


<!-- =================================================================== -->
<!-- Cleans up, then builds PDF                                          -->
<!-- =================================================================== -->
	<target name="cleanpdf" depends="clean, pdf"/>


<!-- =================================================================== -->
<!-- Generates html and pdf documentation                                -->
<!-- =================================================================== -->
	<target name="docs" depends="html, monohtml, pdf"/>


<!-- =================================================================== -->
<!-- Cleans up, then builds all docs                                     -->
<!-- =================================================================== -->
	<target name="cleandocs" depends="clean, docs"/>


<!-- =================================================================== -->
<!-- Generates a message:                                                -->
<!-- =================================================================== -->
	<target name="dist">
		<echo message="Attention: the old 'dist' target is now called 'zip'"/>
        </target>


<!-- =================================================================== -->
<!-- Packages the distribution with ZIP                                  -->
<!-- =================================================================== -->
	<target name="zip" depends="docs">

		<mkdir dir="${zip.dir}"/>

		<zip destfile="${zip.dir}/${setname}-html-${version}.zip"
			basedir="${html.dir}"
			includes="**"/>

		<zip destfile="${zip.dir}/${setname}-monohtml-${version}.zip"
			basedir="${monohtml.dir}"
			includes="**"/>

		<zip destfile="${zip.dir}/${setname}-pdf-${version}.zip"
			basedir="${pdf.dir}"
			includes="*.pdf"/>

	</target>


<!-- =================================================================== -->
<!-- Cleans up, then builds everything including zips                    -->
<!-- =================================================================== -->
	<target name="cleanzip" depends="clean, zip"/>


</project>

